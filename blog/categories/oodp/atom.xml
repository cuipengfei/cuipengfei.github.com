<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OODP | 崔鹏飞的Octopress Blog]]></title>
  <link href="http://cuipengfei.github.com/blog/categories/oodp/atom.xml" rel="self"/>
  <link href="http://cuipengfei.github.com/"/>
  <updated>2015-06-02T21:05:24+05:30</updated>
  <id>http://cuipengfei.github.com/</id>
  <author>
    <name><![CDATA[崔鹏飞]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[命令模式的不爽就像用指甲刀刮胡子]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/06/01/command-pattern-fp-implementation/"/>
    <updated>2015-06-01T21:51:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/06/01/command-pattern-fp-implementation</id>
    <content type="html"><![CDATA[<h1>命令模式</h1>

<blockquote><p>在面向对象程式设计的范畴中，命令模式是一种设计模式，它尝试以物件来代表实际行动。命令物件可以把行动(action) 及其参数封装起来，于是这些行动可以被：</p>

<ul>
<li>重复多次</li>
<li>取消（如果该物件有实作的话）</li>
<li>取消后又再重做</li>
</ul>
</blockquote>

<p>以上是wiki对命令模式的定义（术语像是台湾的）。</p>

<p>下面是来自《Head first design patterns》的一个例子：</p>

<p>假设你有很多家用电器：电灯泡，电视，音响，还有一个水疗浴缸。（就是没有手电筒）</p>

<p>每个家用电器都有自己的开关装置，处于不同的位置。如果你想把它们都开启，需要一个一个地去按按钮。</p>

<p>现在你想要有一个遥控器，一键开启所有电器，一键关闭所有电器。</p>

<p>或者是一键完成任意的电器操作组合。</p>

<p>每个电器的接口都是不同的，但是又需要和同一个遥控器集成，于是呢，肯定要有一个统一的接口了。</p>

<p>于是就有了下面命令模式的实现代码。</p>

<h1>Java</h1>

<p>```java
public class Light {</p>

<pre><code>String location;

public Light(String location) {
    this.location = location;
}

public void on() {
    System.out.println("Light is on");
}

public void off() {
    System.out.println("Light is off");
}
</code></pre>

<p>}</p>

<p>public class TV {</p>

<pre><code>String location;
int channel;

public TV(String location) {
    this.location = location;
}

public void on() {
    System.out.println(location + " TV is on");
}

public void off() {
    System.out.println(location + " TV is off");
}

public void setInputChannel() {
    this.channel = 3;
    System.out.println(location + " TV channel is set for DVD");
}
</code></pre>

<p>}</p>

<p>public class Stereo {</p>

<pre><code>String location;

public Stereo(String location) {
    this.location = location;
}

public void on() {
    System.out.println(location + " stereo is on");
}

public void off() {
    System.out.println(location + " stereo is off");
}
</code></pre>

<p>}</p>

<p>public class Hottub {</p>

<pre><code>boolean on;
int temperature;

public Hottub() {
}

public void on() {
    on = true;
}

public void off() {
    on = false;
}

public void circulate() {
    if (on) {
        System.out.println("Hottub is bubbling!");
    }
}

public void setTemperature(int temperature) {
    if (temperature &gt; this.temperature) {
        System.out.println("Hottub is heating to a steaming " + temperature + " degrees");
    } else {
        System.out.println("Hottub is cooling to " + temperature + " degrees");
    }
    this.temperature = temperature;
}
</code></pre>

<p>}
```</p>

<p>首先是有四大件家用电器。各自之间没有什么关系。</p>

<p>这里面的代码都有点傻，不过没关系，我们就想象这都是些很复杂的硬件通信之类的代码就好了。</p>

<p>```java
public interface Command {</p>

<pre><code>void execute();
</code></pre>

<p>}
```</p>

<p>然后，定义一个Command接口，其中只有一个execute()方法。</p>

<p>之后我们会用它的实现类来操作各种电器。</p>

<p>```java
public class LightOnCommand implements Command {</p>

<pre><code>Light light;

public LightOnCommand(Light light) {
    this.light = light;
}

public void execute() {
    light.on();
}
</code></pre>

<p>}</p>

<p>public class LightOffCommand implements Command {</p>

<pre><code>Light light;

public LightOffCommand(Light light) {
    this.light = light;
}

public void execute() {
    light.off();
}
</code></pre>

<p>}</p>

<p>public class TVOnCommand implements Command {</p>

<pre><code>TV tv;

public TVOnCommand(TV tv) {
    this.tv = tv;
}

public void execute() {
    tv.on();
    tv.setInputChannel();
}
</code></pre>

<p>}</p>

<p>public class TVOffCommand implements Command {</p>

<pre><code>TV tv;

public TVOffCommand(TV tv) {
    this.tv = tv;
}

public void execute() {
    tv.off();
}
</code></pre>

<p>}</p>

<p>public class StereoOnCommand implements Command {</p>

<pre><code>Stereo stereo;

public StereoOnCommand(Stereo stereo) {
    this.stereo = stereo;
}

public void execute() {
    stereo.on();
}
</code></pre>

<p>}</p>

<p>public class StereoOffCommand implements Command {</p>

<pre><code>Stereo stereo;

public StereoOffCommand(Stereo stereo) {
    this.stereo = stereo;
}

public void execute() {
    stereo.off();
}
</code></pre>

<p>}</p>

<p>public class HottubOnCommand implements Command {</p>

<pre><code>Hottub hottub;

public HottubOnCommand(Hottub hottub) {
    this.hottub = hottub;
}

public void execute() {
    hottub.on();
    hottub.setTemperature(104);
    hottub.circulate();
}
</code></pre>

<p>}</p>

<p>public class HottubOffCommand implements Command {</p>

<pre><code>Hottub hottub;

public HottubOffCommand(Hottub hottub) {
    this.hottub = hottub;
}

public void execute() {
    hottub.setTemperature(98);
    hottub.off();
}
</code></pre>

<p>}
```</p>

<p>这一大坨，就是Command的实现了。</p>

<p>四大件电器，于是便有八个Command，分别负责每个电器的开启和关闭。</p>

<p>有些电器的开启和关闭比别的要复杂一些，不过这没有关系，因为它们的细节都被封装在Command的实现类里面了，我们接下来的代码只要和Command这个接口打交道就好了。</p>

<p>```java
public class MacroCommand implements Command {</p>

<pre><code>Command[] commands;

public MacroCommand(Command[] commands) {
    this.commands = commands;
}

public void execute() {
    for (int i = 0; i &lt; commands.length; i++) {
        commands[i].execute();
    }
}
</code></pre>

<p>}
```</p>

<p>还有一个宏命令，用来组合其他命令。</p>

<p>```java
public class RemoteControl {</p>

<pre><code>Command[] onCommands;
Command[] offCommands;

public RemoteControl() {
    onCommands = new Command[7];
    offCommands = new Command[7];
}

public void setCommand(int slot, Command onCommand, Command offCommand) {
    onCommands[slot] = onCommand;
    offCommands[slot] = offCommand;
}

public void onButtonWasPushed(int slot) {
    onCommands[slot].execute();
}

public void offButtonWasPushed(int slot) {
    offCommands[slot].execute();
}
</code></pre>

<p>}
```</p>

<p>可以实现遥控器了。</p>

<p><img src="http://elisabethrobson.com/wp-content/uploads/2014/07/Command.jpg" alt="http://elisabethrobson.com/wp-content/uploads/2014/07/Command.jpg" /></p>

<p>这个遥控器上的按钮都是空白的，我们可以给它置入任意我们想要的命令。</p>

<p>```java
public class RemoteLoader {</p>

<pre><code>public static void main(String[] args) {
    RemoteControl remoteControl = new RemoteControl();

    Light light = new Light("Living Room");
    TV tv = new TV("Living Room");
    Stereo stereo = new Stereo("Living Room");
    Hottub hottub = new Hottub();

    Command[] partyOn = {
            new LightOnCommand(light), new StereoOnCommand(stereo),
            new TVOnCommand(tv), new HottubOnCommand(hottub)};

    Command[] partyOff = {new LightOffCommand(light), new StereoOffCommand(stereo),
            new TVOffCommand(tv), new HottubOffCommand(hottub)};

    remoteControl.setCommand(0, new MacroCommand(partyOn), new MacroCommand(partyOff));

    System.out.println("--- Pushing Macro On---");
    remoteControl.onButtonWasPushed(0);
    System.out.println("--- Pushing Macro Off---");
    remoteControl.offButtonWasPushed(0);
}
</code></pre>

<p>}
```</p>

<p>终于可以写一个main函数了：</p>

<ul>
<li>把家用电器和其对应的Command联系起来</li>
<li>把各种Command组合成开启和关闭两个宏命令</li>
<li>把宏命令置入遥控器</li>
</ul>


<p>然后，只要按一个按钮，就可以开启所有电器，享受资产阶级奢靡的生活了。</p>

<p>享受够了之后只要再按一个按钮就可以把所有电器关闭掉。</p>

<p>如果再有别的电器，只需要实现几个新的Command，把新的Command组合入宏命令，继续使用遥控器就好了。</p>

<p>换句话说，因为遥控器和电器之间通过Command解耦了，增加新的电器和新的Command对于遥控器没有影响，遥控器的代码是稳定的。这也就是所谓的对扩展开放，对修改关闭。</p>

<p>很好，很符合良好的设计原则，看着就舒服对吧？</p>

<h2>不过再想一下</h2>

<p>电灯的开启和关闭这两个命令仅仅是对电灯的两个方法的简单代理。</p>

<p>音响的开启和关闭这两个命令仅仅是对音响的两个方法的简单代理。</p>

<p>电视机的关闭也是简单的代理。</p>

<p>这些命令类是否看起来太单薄了呢？它们的方法异常瘦弱，营养不良。</p>

<p>它们除了持有一个需要操作的电器的实例之外，基本没有什么实例级状态。</p>

<p>（电视开机还好，由于需要选择频道，好歹调用了两个方法。
水疗浴缸操作比较复杂，需要调节温度，所以也还稍微好一些。）</p>

<p>每次看到这种贫血的类，我就怀疑它们存在的必要性。</p>

<p>如果我们只是想要给家用电器内的方法构造一个统一个的对外接口，是不是可以用函数式来实现呢？</p>

<h1>functions</h1>

<p>来试试用Scala实现：</p>

<p>```scala
case class Light(location: String) {
  def on() = println(s"$location light is on")</p>

<p>  def off() = println(s"$location light is off")
}</p>

<p>case class TV(location: String) {
  private var channel: Int = 0</p>

<p>  def on() = println(location + " TV is on")</p>

<p>  def off() = println(location + " TV is off")</p>

<p>  def setInputChannel() = {</p>

<pre><code>this.channel = 3
println(location + " TV channel is set for DVD")
</code></pre>

<p>  }
}</p>

<p>case class Stereo(location: String) {
  def on() = println(s"$location stereo is on")</p>

<p>  def off() = println(s"$location stereo is off")
}</p>

<p>case class Hottub(var isOn: Boolean = false) {
  private var temperature: Int = 0</p>

<p>  def on() = isOn = true</p>

<p>  def off() = isOn = false</p>

<p>  def circulate() = if (isOn) println("Hottub is bubbling!")</p>

<p>  def setTemperature(temperature: Int) = {</p>

<pre><code>if (temperature &gt; this.temperature) {
  println("Hottub is heating to a steaming " + temperature + " degrees")
}
else {
  println("Hottub is cooling to " + temperature + " degrees")
}
this.temperature = temperature
</code></pre>

<p>  }
}
```</p>

<p>首先是有四大件家用电器，这部分和Java的代码等价。</p>

<p>```scala
object Commands {
  type Command = () => Unit</p>

<p>  def tvOn(tv: TV): Command = () => {</p>

<pre><code>tv.on()
tv.setInputChannel()
</code></pre>

<p>  }</p>

<p>  def hottubOn(hottub: Hottub): Command = () => {</p>

<pre><code>hottub.on()
hottub.setTemperature(104)
hottub.circulate()
</code></pre>

<p>  }</p>

<p>  def hottubOff(hottub: Hottub): Command = () => {</p>

<pre><code>hottub.setTemperature(98)
hottub.off()
</code></pre>

<p>  }</p>

<p>  def macroCommand(commands: Command*): Command = () =></p>

<pre><code>commands.foreach(command =&gt; command())
</code></pre>

<p>}
```</p>

<p>这一段用来定义各种命令的代码就不同了。</p>

<p>我们对家用电器的各种方法的调用都是只期待其副作用，不期待任何返回值的。所以可以定义一个函数签名Command来涵盖所有这类操作。</p>

<p>和上面的Java代码类似，这里也有一个宏命令，只不过实现简单一些。</p>

<p>电视的开启，水疗浴缸的开和关都有对应的方法来把家用电器的实例封入闭包中。</p>

<p>咦？电灯的开关，音响的开关，以及电视的关闭都跑哪儿去了呢？</p>

<p>由于这几个操作都只涉及到一个方法的调用，它们直接就符合Command的函数签名，所以不用再封入任何闭包了。这一点看下面的代码就明白了。</p>

<p>```scala
case class RemoteControl(onCommands: Seq[Command], offCommands: Seq[Command]) {
  def pushOnButton(slot: Int) = onCommands(slot)()</p>

<p>  def pushOffButton(slot: Int) = offCommands(slot)()
}</p>

<p>object RemoteLoader {
  def main(args: Array[String]) {</p>

<pre><code>val light = Light("living room")
val tv = TV("living room")
val stereo = Stereo("living room")
val hottub = Hottub()

val on = macroCommand(light.on,
  stereo.on, tvOn(tv), hottubOn(hottub))

val off = macroCommand(light.off,
  stereo.off, tv.off, hottubOff(hottub))

val remoteControl = RemoteControl(Seq(on), Seq(off))

println("--- Pushing Macro On---")
remoteControl.pushOnButton(0)
println("--- Pushing Macro Off---")
remoteControl.pushOffButton(0)
</code></pre>

<p>  }
}
```</p>

<p>我们可以定义一个遥控器。其中有开启，和关闭两排按钮。</p>

<p>最后，可以写一个main函数，其中所做的事情和之前Java代码main函数所做的事情是一样的。</p>

<p>只不过，不需要创建各种Command的实例。</p>

<p>而且light.on，stereo.on，light.off，stereo.off，tv.off这几个方法由于符合Command的签名，是可以直接拿来当Command用的。（注意方法名后面没有()，不是调用，而是函数传递）</p>

<p>前后两版代码是等价的。只不过：</p>

<ul>
<li>247行代码变成了93行代码</li>
<li>16个实体变成了7个</li>
</ul>


<p>作为一个多按几个按钮都嫌麻烦的好逸恶劳的资产阶级，这个结果是我所乐于见到的。</p>

<p>更少，更紧凑的代码。更少的实体。我终于可以用更小的成本来享受我昂贵的家用电器了。</p>

<h1>指甲刀刮胡子</h1>

<p>最后回到标题上去：指甲刀刮胡子，意即用不合适的工具解决问题。</p>

<p>命令模式想要做到的事情其实就是给各种不同的操作寻找一个统一的接口，从而实现调用者（遥控器）和被调用者（家用电器）之间的解耦。</p>

<p>给不同的操作寻找一个统一的接口这件事可以通过接口来做，但是我们同时要承担写一堆贫血类的代价。</p>

<p>而如果直接用函数来做的话，则可以得到更紧凑简洁的代码（就像object Commands这个实体内的代码一样）。</p>

<p>该模式提出的时候FP并不如今日盛行，其作者选用了可能会导致贫血类泛滥的解决方案，这无可厚非。传播了解耦和开闭等良好设计的原则也实为功德。</p>

<p>不过今天我们有了剃须刀，就无需一定要用指甲刀来刮胡子了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[职责链模式的别扭就像用门框夹核桃]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/05/30/fp-implementation-of-chain-of-responsibility/"/>
    <updated>2015-05-30T09:40:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/05/30/fp-implementation-of-chain-of-responsibility</id>
    <content type="html"><![CDATA[<h1>职责链模式</h1>

<blockquote><p>责任链模式在面向对象程式设计里是一种软件设计模式，它包含了一些命令对象和一系列的处理对象。每一个处理对象决定它能处理哪些命令对象，它也知道如何将它不能处理的命令对象传递给该链中的下一个处理对象。该模式还描述了往该处理链的末尾添加新的处理对象的方法。</p></blockquote>

<p>以上是wiki对职责链模式的定义。</p>

<p>举个例子来说，我们的系统中需要记录日志的功能。日志需要根据优先级被发送到不同的地方。</p>

<p>低优先级的日志输出到命令行就好了。而高优先级的错误信息则需要通过邮件通知相关人员并且输出到命令行。</p>

<p>这个例子也是来自wiki的。</p>

<p>以下是wiki提供的Java实现：</p>

<h1>Java</h1>

<p>```java
abstract class Logger {</p>

<pre><code>public static int ERR = 3;
public static int NOTICE = 5;
public static int DEBUG = 7;
private int mask;

private Logger next;

public Logger(int mask) {
    this.mask = mask;
}

public void setNext(Logger logger) {
    next = logger;
}

public void message(String msg, int priority) {
    if (priority &lt;= mask) {
        writeMessage(msg);
    }
    if (next != null) {
        next.message(msg, priority);
    }
}

abstract protected void writeMessage(String msg);
</code></pre>

<p>}
```</p>

<p>首先定义一个Logger抽象类。从其setNext和message这两个方法可以看出，我们后面会把多个具有不同writeMessage实现的Logger链到一起，并且依次让它们处理某件需要被记录的事件。</p>

<p>```java
class StdoutLogger extends Logger {</p>

<pre><code>public StdoutLogger(int mask) {
    super(mask);
}

protected void writeMessage(String msg) {
    System.out.println("Writing to stdout: " + msg);
}
</code></pre>

<p>}</p>

<p>class EmailLogger extends Logger {</p>

<pre><code>public EmailLogger(int mask) {
    super(mask);
}

protected void writeMessage(String msg) {
    System.out.println("Sending via e-mail: " + msg);
}
</code></pre>

<p>}</p>

<p>class StderrLogger extends Logger {</p>

<pre><code>public StderrLogger(int mask) {
    super(mask);
}

protected void writeMessage(String msg) {
    System.err.println("Sending to stderr: " + msg);
}
</code></pre>

<p>}
```</p>

<p>然后有三个Logger的实现，分别为向命令行输出消息，发送邮件（当然是假的），向命令行输出错误。</p>

<p>```java
public class ChainOfResponsibilityExample {</p>

<pre><code>private static Logger createChain() {
    Logger logger = new StdoutLogger(Logger.DEBUG);

    Logger logger1 = new EmailLogger(Logger.NOTICE);
    logger.setNext(logger1);

    Logger logger2 = new StderrLogger(Logger.ERR);
    logger1.setNext(logger2);

    return logger;
}

public static void main(String[] args) {
    Logger chain = createChain();
    chain.message("Entering function y.", Logger.DEBUG);
    chain.message("Step1 completed.", Logger.NOTICE);
    chain.message("An error has occurred.", Logger.ERR);
}
</code></pre>

<p>}
```</p>

<p>最后，有一个main函数，创建三个Logger的实例，把它们通过setNext链在一起。 只需要调用一次message就可以让三个Logger依次工作。</p>

<p>如果以后再有更多的Logger呢，还是可以通过同样的方式把它们链接起来协同工作。</p>

<p>很好，很强大，很易于扩展，对吧？</p>

<h2>不过再想一下</h2>

<p>这三个Logger的实现类看起来都非常的单薄，弱不禁风。</p>

<p>一个接收mask的构造函数，其唯一职责就是把接收到的mask传递给父类的构造函数。</p>

<p>然后父类根据mask和所发生事件优先级的大小关系决定到底要不要调用子类实现的writeMessage方法。</p>

<p>也就是说，子类完全没有定义自己的实例级状态，其实例级方法的行为也就谈不上随着其状态的变化而变化了。</p>

<p>换句话说，这几个子类存在的价值就在于为父类提供writeMessage这个函数。</p>

<p>啊。。。。。。！</p>

<p>一说到提供函数，我就想到了。。。。。。</p>

<h1>functions</h1>

<p>我想到的自然是FP了，既然需要的是函数，那我们就使用函数好了。</p>

<p>何必用更重的抽象手段：类，去包裹函数呢？</p>

<p>下面就是比较偏函数式的Scala实现：</p>

<p>```scala
object Loggers {
  val ERR = 3
  val NOTICE = 5
  val DEBUG = 7</p>

<p>  case class Event(message: String, priority: Int)</p>

<p>  type Logger = Event => Event</p>

<p>  def stdOutLogger(mask: Int): Logger = event => handleEvent(event, mask) {</p>

<pre><code>println(s"Writing to stdout: ${event.message}")
</code></pre>

<p>  }</p>

<p>  def emailLogger(mask: Int): Logger = event => handleEvent(event, mask) {</p>

<pre><code>println(s"Sending via e-mail: ${event.message}")
</code></pre>

<p>  }</p>

<p>  def stdErrLogger(mask: Int): Logger = event => handleEvent(event, mask) {</p>

<pre><code>System.err.println(s"Sending to stderr: ${event.message}")
</code></pre>

<p>  }</p>

<p>  private def handleEvent(event: Event, mask: Int)(handler: => Unit) = {</p>

<pre><code>if (event.priority &lt;= mask) handler
event
</code></pre>

<p>  }
}
```</p>

<p>这个代码已经简短到我不想解释的程度了。不过还是解释一下吧。</p>

<p>三个log的的等级ERR，NOTICE和DEBUG和之前Java的实现是一样的。</p>

<p>一个case class Event，用来包裹需要被log的事件。</p>

<p>type Logger则是声明了一个函数签名，凡是符合这个签名的函数都可以作为logger被使用。</p>

<p>然后便是三个函数实现，它们将mask通过闭包封进函数内。这三个函数共同依赖一个私有handleEvent函数，其作用和Java代码中的message类似，判断mask和正在发生的事件之间优先级大小关系，并以此决定当前logger是否需要处理该事件。</p>

<p>哎？等一下，这个是职责链模式啊，那个啥，链在哪儿呢？</p>

<p>很简单，这样就可以链起来了：</p>

<p>```scala
object ChainRunner {</p>

<p>  import chain.Loggers._</p>

<p>  def main(args: Array[String]) {</p>

<pre><code>val chain = stdOutLogger(DEBUG) andThen emailLogger(NOTICE) andThen stdErrLogger(ERR)

chain(Event("Entering function y.", DEBUG))
chain(Event("Step1 completed.", NOTICE))
chain(Event("An error has occurred.", ERR))
</code></pre>

<p>  }
}
```</p>

<p>以上代码中的andThen就可以把三个logger链在一起。</p>

<p>这个andThen是个什么东西？何以如此神奇？</p>

<p>欲知详情，请参考我之前的另一篇博客： <a href="http://cuipengfei.me/blog/2013/12/30/desugar-scala-9/">http://cuipengfei.me/blog/2013/12/30/desugar-scala-9/</a></p>

<p>而链接之后的结果本身也是一个函数，于是我们就可以调用chain并传入Event了。</p>

<p>这份代码和前面Java版的行为是等价的，输出是一致的。</p>

<h1>门框夹核桃</h1>

<p>最后回到标题上去：门框夹核桃，意即用不合适的工具解决问题。</p>

<p>职责链模式想要做到的事情其实就是把多个函数链起来调用。</p>

<p>该模式提出的时候FP并不如今日盛行，其作者选用类来包装需要被链接的多个函数，这无可厚非。</p>

<p>无论是class，还是function，都是为程序员提供抽象的手段。当我们想要链接的东西就是多个function，选择直接用function而非class就会显得更加自然，也更加轻量且合适。</p>

<p>当年design pattern的作者广为传播各种patterns，实为功德。</p>

<p>不过今天我们有了核桃夹，就无需一定要用门框了。</p>

<p>最后，依照惯例，羞辱Java一小下下。
以上wiki提供的实现有77行，偏FP风的实现只有38行，只有一个实体Event。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[策略模式的尴尬就像用菜刀开啤酒]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/05/27/trait-and-fp-makes-strategy-pattern-irrelevant/"/>
    <updated>2015-05-27T08:55:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/05/27/trait-and-fp-makes-strategy-pattern-irrelevant</id>
    <content type="html"><![CDATA[<h1>策略模式</h1>

<blockquote><p>策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。</p></blockquote>

<p>以上是中文wiki中对策略模式的定义。</p>

<blockquote><p>In computer programming, the strategy pattern (also known as the policy pattern) is a software design pattern that enables an algorithm's behavior to be selected at runtime. The strategy pattern:
  - defines a family of algorithms,
  - encapsulates each algorithm, and
  - makes the algorithms interchangeable within that family.</p>

<p>Strategy lets the algorithm vary independently from clients that use it.</p></blockquote>

<p>以上是英文版的。</p>

<h1>鸭子</h1>

<p>这种偏学术性的描述实在太绕嘴，来思考一个实例：</p>

<p>我们需要创建一些鸭子，鸭子有什么行为呢？</p>

<ul>
<li>鸭子会飞</li>
<li>会叫</li>
<li>会游泳</li>
</ul>


<p>不过，是否所有的鸭子都是这样呢？万一是玩具鸭子呢？万一是猎人放在水里的用来勾引公鸭子的木质母鸭子呢？万一是外星来客太空鸭呢？</p>

<p>你已经知道什么意思了。</p>

<p>鸭子的各个子类的飞和叫的行为不尽相同。所以我们想把飞和叫这两种行为独立开来，让它们可以自由组合在鸭子的不同子类中。</p>

<p>以上例子来自著名的《Head first design patterns》。</p>

<h1>Java</h1>

<p>以下是《Head first design patterns》附带的代码：</p>

<p>```java
public interface FlyBehavior {</p>

<pre><code>void fly();
</code></pre>

<p>}</p>

<p>public class FlyWithWings implements FlyBehavior {</p>

<pre><code>public void fly() {
    System.out.println("fly with wings");
}
</code></pre>

<p>}</p>

<p>public class FlyNoWay implements FlyBehavior {</p>

<pre><code>public void fly() {
    System.out.println("can not fly");
}
</code></pre>

<p>}
```</p>

<p>飞行的接口，以及两个实现：一个真会飞，一个不会飞。</p>

<p>```java
public interface QuackBehavior {</p>

<pre><code>void quack();
</code></pre>

<p>}</p>

<p>public class Quack implements QuackBehavior {</p>

<pre><code>public void quack() {
    System.out.println("Quack");
}
</code></pre>

<p>}</p>

<p>public class MuteQuack implements QuackBehavior {</p>

<pre><code>public void quack() {
    System.out.println("&lt;&lt;silence&gt;&gt;");
}
</code></pre>

<p>}
```</p>

<p>叫的接口，两个实现，一个真会叫，一个不会叫。</p>

<p>```java
public abstract class Duck {</p>

<pre><code>FlyBehavior flyBehavior;
QuackBehavior quackBehavior;

public Duck() {
}

public void performFly() {
    flyBehavior.fly();
}

public void performQuack() {
    quackBehavior.quack();
}

public void swim() {
    System.out.println("All ducks float, even decoys!");
}
</code></pre>

<p>}</p>

<p>public class MallardDuck extends Duck {</p>

<pre><code>public MallardDuck() {
    quackBehavior = new Quack();
    flyBehavior = new FlyWithWings();
}
</code></pre>

<p>}</p>

<p>public class DecoyDuck extends Duck {</p>

<pre><code>public DecoyDuck() {
    setFlyBehavior(new FlyNoWay());
    setQuackBehavior(new MuteQuack());
}
</code></pre>

<p>}
```</p>

<p>最后，终于到了鸭子。鸭子的顶层抽象类声明两个字段，一个用来飞，一个用来叫。</p>

<p>这样在子类里就可以把这两个字段锁定到某个特定的实现，以实现任意的组合。</p>

<p>可以看到，绿头鸭（mallard）组合了真会飞和真会叫。而诱饵鸭（decoy，猎人用来勾引鸭子上钩的那个）则组合了不会飞和不会叫。</p>

<p>可以想象随着飞和叫这两个家族的扩大，我们可以组合出更多种类的鸭子来。</p>

<p>很好，很灵活，很强大，对吧？</p>

<h2>不过再想一下</h2>

<p>我们想要的不过是把两个家族的不同行为塞到鸭子的子类里去。是否有更容易的办法来做到呢？</p>

<h1>trait</h1>

<p>一说到把行为塞到某个类里，就会想到mix in，很自然就想到了Scala的trait。</p>

<p>更多关于Scala的trait的详情请参考我的另一篇博客： <a href="http://cuipengfei.me/blog/2013/10/13/scala-trait/">http://cuipengfei.me/blog/2013/10/13/scala-trait/</a></p>

<p>```scala
trait Fly {
  def fly()
}</p>

<p>trait FlyWithWings extends Fly {
  def fly() = println("fly with wings")
}</p>

<p>trait FlyNoWay extends Fly {
  def fly() = println("can not fly")
}
```</p>

<p>飞行家族。</p>

<p>```scala
trait Quack {
  def quack()
}</p>

<p>trait RealQuack {
  def quack() = println("Quack")
}</p>

<p>trait MuteQuack {
  def quack() = println("&lt;<silence>>")
}
```</p>

<p>叫的行为的家族。</p>

<p>```scala
abstract class Duck extends Fly with Quack {
  def swim = println("all ducks float")
}</p>

<p>class MallardDuck extends Duck with FlyWithWings with RealQuack</p>

<p>class DecoyDuck extends Duck with FlyNoWay with MuteQuack
```</p>

<p>最后，鸭子的各种实现。</p>

<p>貌似和Java版的实现差距不大，飞和叫的interface和class变成了trait。</p>

<p>Duck原来是持有Fly和Quack的实例，现在则是变成了混入Fly和Quack这两个trait。</p>

<p>这个代码比Java短一些，紧凑一些，构造函数中的赋值变成了类型声明时的混入。</p>

<h2>不过再想一下</h2>

<p>我们不过是想要把某种行为塞入到某个类里面去，真的有必要用interface，class，trait来把这些行为包裹起来吗？</p>

<p>行为通常是以哪种形式承载的呢？</p>

<h1>functions</h1>

<p>行为通常是以函数承载的。</p>

<p>也就是说我们想要做的不过是把符合某个签名的函数塞到鸭子的子类里去而已，而却用interface，class，trait来把这些行为包裹起来了。有些臃肿不是吗？</p>

<p>下面是直接把函数塞入鸭子子类的做法：</p>

<p>```scala
object Duck {
  type Fly = () => Unit
  val flyWithWings = () => println("fly with wings")
  val flyNoWay = () => println("can not fly")</p>

<p>  type Quack = () => Unit
  val realQuack = () => println("Quack")
  val muteQuack = () => println("&lt;<silence>>")
}</p>

<p>abstract class Duck(f: Fly, q: Quack) {
  def swim() = println("all ducks float")</p>

<p>  def fly() = f()</p>

<p>  def quack() = q()
}</p>

<p>class MallardDuck extends Duck(flyWithWings, realQuack)</p>

<p>class DecoyDuck extends Duck(flyNoWay, muteQuack)
```</p>

<p>Fly和Quack不再是interface或者是trait。而是type aliase。</p>

<p>Scala的type aliase就类似于C#的delegate，用来声明function signature。</p>

<p>更多关于type aliase的更多详情请参考我的另一篇博客： <a href="http://cuipengfei.me/blog/2013/12/23/desugar-scala-4/">http://cuipengfei.me/blog/2013/12/23/desugar-scala-4/</a></p>

<p>这样，会飞不会飞，会叫不会叫就无需被class或者trait包裹着了，直接就是一个个的函数。</p>

<p>鸭子的子类通过构造函数接收飞和叫的两个函数作为参数，就能够组合不同的行为了。</p>

<p>如果说之前triat的实现方式与Java实现版相比偏重了inheritance而不是composition，这一版的实现则又回到了纯composition的路上了。</p>

<p>紧凑程度，实体数量都比以上两版有改进。这一点从行数上可以窥见：Java版63行，trait版29行，最后一版21行。</p>

<h1>菜刀开啤酒</h1>

<p>最后回到标题上去：菜刀开啤酒，意即用不合适的工具解决问题。</p>

<p>strategy patten要解决的问题其实就是如何把一族行为的不同实现注入到某个类里去。</p>

<p>这一点，最开头的wiki定义已经说的很明白了：</p>

<blockquote><p>Strategy lets the algorithm vary independently from clients that use it.</p></blockquote>

<p>无论是class，还是function，都是为程序员提供抽象的手段。当我们想要抽象的东西就是一段algorithm（正如wiki所说）的时候，用function来做抽象就是更加轻量且合适的选择。</p>

<p>该模式提出的时候FP并不如今日盛行，其作者选用纯OO的方式解决了问题，并广为传播，实为功德。</p>

<p>不过今天我们有了开瓶器，就无需一定要用菜刀了。</p>

<p>最后是一个Java 8的实现：</p>

<p>```java
public interface Fly {</p>

<pre><code>void fly();
</code></pre>

<p>}</p>

<p>public interface Quack {</p>

<pre><code>void quack();
</code></pre>

<p>}</p>

<p>public class BehaviorsRepo {</p>

<pre><code>public static Fly flyWithWings = () -&gt; System.out.println("fly with wings");
public static Fly canNotFly = () -&gt; System.out.println("can not fly");

public static Quack realQuack = () -&gt; System.out.println("Quack");
public static Quack muteQuack = () -&gt; System.out.println("&lt;&lt;silence&gt;&gt;");
</code></pre>

<p>}</p>

<p>public class Duck {</p>

<pre><code>private final Fly f;
private final Quack q;

public Duck(Fly f, Quack q) {
    this.f = f;
    this.q = q;
}

public void fly() {
    f.fly();
}

public void quack() {
    q.quack();
}
</code></pre>

<p>}</p>

<p>public class MallardDuck extends Duck {</p>

<pre><code>public MallardDuck() {
    super(flyWithWings, realQuack);
}
</code></pre>

<p>}</p>

<p>public class DecoyDuck extends Duck {</p>

<pre><code>public DecoyDuck() {
    super(canNotFly, muteQuack);
}
</code></pre>

<p>}
```</p>

<p>看起来比最开始的那一版好一些，但是我还是看它不顺眼。</p>

<p>为什么呢？</p>

<p>一定是由于我强烈的偏见而没有其他任何原因，一定是这样的。</p>
]]></content>
  </entry>
  
</feed>
