<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[崔鹏飞的Octopress Blog]]></title>
  <link href="http://cuipengfei.github.com/atom.xml" rel="self"/>
  <link href="http://cuipengfei.github.com/"/>
  <updated>2015-05-30T11:16:22+05:30</updated>
  <id>http://cuipengfei.github.com/</id>
  <author>
    <name><![CDATA[崔鹏飞]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[职责链模式的别扭就像用门框夹核桃]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/05/30/fp-implementation-of-chain-of-responsibility/"/>
    <updated>2015-05-30T09:40:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/05/30/fp-implementation-of-chain-of-responsibility</id>
    <content type="html"><![CDATA[<h1>职责链模式</h1>

<blockquote><p>责任链模式在面向对象程式设计里是一种软件设计模式，它包含了一些命令对象和一系列的处理对象。每一个处理对象决定它能处理哪些命令对象，它也知道如何将它不能处理的命令对象传递给该链中的下一个处理对象。该模式还描述了往该处理链的末尾添加新的处理对象的方法。</p></blockquote>

<p>以上是wiki对职责链模式的定义。</p>

<p>举个例子来说，我们的系统中需要记录日志的功能。日志需要根据优先级被发送到不同的地方。</p>

<p>低优先级的日志输出到命令行就好了。而高优先级的错误信息则需要通过邮件通知相关人员并且输出到命令行。</p>

<p>这个例子也是来自wiki的。</p>

<p>以下是wiki提供的Java实现：</p>

<h1>Java</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Logger</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">ERR</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">NOTICE</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">DEBUG</span> <span class="o">=</span> <span class="mi">7</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mask</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Logger</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Logger</span><span class="o">(</span><span class="kt">int</span> <span class="n">mask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mask</span> <span class="o">=</span> <span class="n">mask</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNext</span><span class="o">(</span><span class="n">Logger</span> <span class="n">logger</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">next</span> <span class="o">=</span> <span class="n">logger</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">message</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">,</span> <span class="kt">int</span> <span class="n">priority</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">priority</span> <span class="o">&lt;=</span> <span class="n">mask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">writeMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">next</span><span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="n">msg</span><span class="o">,</span> <span class="n">priority</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">writeMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先定义一个Logger抽象类。从其setNext和message这两个方法可以看出，我们后面会把多个具有不同writeMessage实现的Logger链到一起，并且依次让它们处理某件需要被记录的事件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">StdoutLogger</span> <span class="kd">extends</span> <span class="n">Logger</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">StdoutLogger</span><span class="o">(</span><span class="kt">int</span> <span class="n">mask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">mask</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">writeMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Writing to stdout: &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">EmailLogger</span> <span class="kd">extends</span> <span class="n">Logger</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">EmailLogger</span><span class="o">(</span><span class="kt">int</span> <span class="n">mask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">mask</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">writeMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Sending via e-mail: &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">StderrLogger</span> <span class="kd">extends</span> <span class="n">Logger</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">StderrLogger</span><span class="o">(</span><span class="kt">int</span> <span class="n">mask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">mask</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">writeMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Sending to stderr: &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后有三个Logger的实现，分别为向命令行输出消息，发送邮件（当然是假的），向命令行输出错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChainOfResponsibilityExample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="nf">createChain</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StdoutLogger</span><span class="o">(</span><span class="n">Logger</span><span class="o">.</span><span class="na">DEBUG</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Logger</span> <span class="n">logger1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EmailLogger</span><span class="o">(</span><span class="n">Logger</span><span class="o">.</span><span class="na">NOTICE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">setNext</span><span class="o">(</span><span class="n">logger1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Logger</span> <span class="n">logger2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StderrLogger</span><span class="o">(</span><span class="n">Logger</span><span class="o">.</span><span class="na">ERR</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger1</span><span class="o">.</span><span class="na">setNext</span><span class="o">(</span><span class="n">logger2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">logger</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Logger</span> <span class="n">chain</span> <span class="o">=</span> <span class="n">createChain</span><span class="o">();</span>
</span><span class='line'>        <span class="n">chain</span><span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="s">&quot;Entering function y.&quot;</span><span class="o">,</span> <span class="n">Logger</span><span class="o">.</span><span class="na">DEBUG</span><span class="o">);</span>
</span><span class='line'>        <span class="n">chain</span><span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="s">&quot;Step1 completed.&quot;</span><span class="o">,</span> <span class="n">Logger</span><span class="o">.</span><span class="na">NOTICE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">chain</span><span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="s">&quot;An error has occurred.&quot;</span><span class="o">,</span> <span class="n">Logger</span><span class="o">.</span><span class="na">ERR</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，有一个main函数，创建三个Logger的实例，把它们通过setNext链在一起。 只需要调用一次message就可以让三个Logger依次工作。</p>

<p>如果以后再有更多的Logger呢，还是可以通过同样的方式把它们链接起来协同工作。</p>

<p>很好，很强大，很易于扩展，对吧？</p>

<h2>不过再想一下</h2>

<p>这三个Logger的实现类看起来都非常的单薄，弱不禁风。</p>

<p>一个接收mask的构造函数，其唯一职责就是把接收到的mask传递给父类的构造函数。</p>

<p>然后父类根据mask和所发生事件优先级的大小关系决定到底要不要调用子类实现的writeMessage方法。</p>

<p>也就是说，子类完全没有定义自己的实例级状态，其实例级方法的行为也就谈不上随着其状态的变化而变化了。</p>

<p>换句话说，这几个子类存在的价值就在于为父类提供writeMessage这个函数。</p>

<p>啊。。。。。。！</p>

<p>一说到提供函数，我就想到了。。。。。。</p>

<h1>functions</h1>

<p>我想到的自然是FP了，既然需要的是函数，那我们就使用函数好了。</p>

<p>何必用更重的抽象手段：类，去包裹函数呢？</p>

<p>下面就是比较偏函数式的Scala实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Loggers</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">ERR</span> <span class="k">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">NOTICE</span> <span class="k">=</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">DEBUG</span> <span class="k">=</span> <span class="mi">7</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Event</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">priority</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Logger</span> <span class="o">=</span> <span class="nc">Event</span> <span class="k">=&gt;</span> <span class="nc">Event</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">stdOutLogger</span><span class="o">(</span><span class="n">mask</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Logger</span> <span class="o">=</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">handleEvent</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="n">mask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Writing to stdout: ${event.message}&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">emailLogger</span><span class="o">(</span><span class="n">mask</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Logger</span> <span class="o">=</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">handleEvent</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="n">mask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Sending via e-mail: ${event.message}&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">stdErrLogger</span><span class="o">(</span><span class="n">mask</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Logger</span> <span class="o">=</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">handleEvent</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="n">mask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">System</span><span class="o">.</span><span class="n">err</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Sending to stderr: ${event.message}&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">handleEvent</span><span class="o">(</span><span class="n">event</span><span class="k">:</span> <span class="kt">Event</span><span class="o">,</span> <span class="n">mask</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="n">handler</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="n">priority</span> <span class="o">&lt;=</span> <span class="n">mask</span><span class="o">)</span> <span class="n">handler</span>
</span><span class='line'>    <span class="n">event</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个代码已经简短到我不想解释的程度了。不过还是解释一下吧。</p>

<p>三个log的的等级ERR，NOTICE和DEBUG和之前Java的实现是一样的。</p>

<p>一个case class Event，用来包裹需要被log的事件。</p>

<p>type Logger则是声明了一个函数签名，凡是符合这个签名的函数都可以作为logger被使用。</p>

<p>然后便是三个函数实现，它们将mask通过闭包封进函数内。这三个函数共同依赖一个私有handleEvent函数，其作用和Java代码中的message类似，判断mask和正在发生的事件之间优先级大小关系，并以此决定当前logger是否需要处理该事件。</p>

<p>哎？等一下，这个是职责链模式啊，那个啥，链在哪儿呢？</p>

<p>很简单，这样就可以链起来了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">ChainRunner</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">import</span> <span class="nn">chain.Loggers._</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">chain</span> <span class="k">=</span> <span class="n">stdOutLogger</span><span class="o">(</span><span class="nc">DEBUG</span><span class="o">)</span> <span class="n">andThen</span> <span class="n">emailLogger</span><span class="o">(</span><span class="nc">NOTICE</span><span class="o">)</span> <span class="n">andThen</span> <span class="n">stdErrLogger</span><span class="o">(</span><span class="nc">ERR</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">chain</span><span class="o">(</span><span class="nc">Event</span><span class="o">(</span><span class="s">&quot;Entering function y.&quot;</span><span class="o">,</span> <span class="nc">DEBUG</span><span class="o">))</span>
</span><span class='line'>    <span class="n">chain</span><span class="o">(</span><span class="nc">Event</span><span class="o">(</span><span class="s">&quot;Step1 completed.&quot;</span><span class="o">,</span> <span class="nc">NOTICE</span><span class="o">))</span>
</span><span class='line'>    <span class="n">chain</span><span class="o">(</span><span class="nc">Event</span><span class="o">(</span><span class="s">&quot;An error has occurred.&quot;</span><span class="o">,</span> <span class="nc">ERR</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码中的andThen就可以把三个logger链在一起。</p>

<p>这个andThen是个什么东西？何以如此神奇？</p>

<p>欲知详情，请参考我之前的另一篇博客： <a href="http://cuipengfei.me/blog/2013/12/30/desugar-scala-9/">http://cuipengfei.me/blog/2013/12/30/desugar-scala-9/</a></p>

<p>而链接之后的结果本身也是一个函数，于是我们就可以调用chain并传入Event了。</p>

<p>这份代码和前面Java版的行为是等价的，输出是一致的。</p>

<h1>门框夹核桃</h1>

<p>最后回到标题上去：门框夹核桃，意即用不合适的工具解决问题。</p>

<p>职责链模式想要做到的事情其实就是把多个函数链起来调用。</p>

<p>该模式提出的时候FP并不如今日盛行，其作者选用类来包装需要被链接的多个函数，这无可厚非。</p>

<p>无论是class，还是function，都是为程序员提供抽象的手段。当我们想要链接的东西就是多个function，选择直接用function而非class就会显得更加自然，也更加轻量且合适。</p>

<p>当年design pattern的作者广为传播各种patterns，实为功德。</p>

<p>不过今天我们有了核桃夹，就无需一定要用门框了。</p>

<p>最后，依照惯例，羞辱Java一小下下。
以上wiki提供的实现有77行，偏FP风的实现只有38行，只有一个实体Event。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[策略模式的尴尬就像用菜刀开啤酒]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/05/27/trait-and-fp-makes-strategy-pattern-irrelevant/"/>
    <updated>2015-05-27T08:55:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/05/27/trait-and-fp-makes-strategy-pattern-irrelevant</id>
    <content type="html"><![CDATA[<h1>策略模式</h1>

<blockquote><p>策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。</p></blockquote>

<p>以上是中文wiki中对策略模式的定义。</p>

<blockquote><p>In computer programming, the strategy pattern (also known as the policy pattern) is a software design pattern that enables an algorithm&#8217;s behavior to be selected at runtime. The strategy pattern:
  - defines a family of algorithms,
  - encapsulates each algorithm, and
  - makes the algorithms interchangeable within that family.</p>

<p>Strategy lets the algorithm vary independently from clients that use it.</p></blockquote>

<p>以上是英文版的。</p>

<h1>鸭子</h1>

<p>这种偏学术性的描述实在太绕嘴，来思考一个实例：</p>

<p>我们需要创建一些鸭子，鸭子有什么行为呢？</p>

<ul>
<li>鸭子会飞</li>
<li>会叫</li>
<li>会游泳</li>
</ul>


<p>不过，是否所有的鸭子都是这样呢？万一是玩具鸭子呢？万一是猎人放在水里的用来勾引公鸭子的木质母鸭子呢？万一是外星来客太空鸭呢？</p>

<p>你已经知道什么意思了。</p>

<p>鸭子的各个子类的飞和叫的行为不尽相同。所以我们想把飞和叫这两种行为独立开来，让它们可以自由组合在鸭子的不同子类中。</p>

<p>以上例子来自著名的《Head first design patterns》。</p>

<h1>Java</h1>

<p>以下是《Head first design patterns》附带的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FlyBehavior</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">fly</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FlyWithWings</span> <span class="kd">implements</span> <span class="n">FlyBehavior</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;fly with wings&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FlyNoWay</span> <span class="kd">implements</span> <span class="n">FlyBehavior</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;can not fly&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>飞行的接口，以及两个实现：一个真会飞，一个不会飞。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">QuackBehavior</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">quack</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Quack</span> <span class="kd">implements</span> <span class="n">QuackBehavior</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Quack&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MuteQuack</span> <span class="kd">implements</span> <span class="n">QuackBehavior</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&lt;&lt;silence&gt;&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>叫的接口，两个实现，一个真会叫，一个不会叫。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Duck</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">FlyBehavior</span> <span class="n">flyBehavior</span><span class="o">;</span>
</span><span class='line'>    <span class="n">QuackBehavior</span> <span class="n">quackBehavior</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Duck</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">performFly</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">flyBehavior</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">performQuack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">quackBehavior</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">swim</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;All ducks float, even decoys!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MallardDuck</span> <span class="kd">extends</span> <span class="n">Duck</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MallardDuck</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">quackBehavior</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Quack</span><span class="o">();</span>
</span><span class='line'>        <span class="n">flyBehavior</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FlyWithWings</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecoyDuck</span> <span class="kd">extends</span> <span class="n">Duck</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DecoyDuck</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setFlyBehavior</span><span class="o">(</span><span class="k">new</span> <span class="n">FlyNoWay</span><span class="o">());</span>
</span><span class='line'>        <span class="n">setQuackBehavior</span><span class="o">(</span><span class="k">new</span> <span class="n">MuteQuack</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，终于到了鸭子。鸭子的顶层抽象类声明两个字段，一个用来飞，一个用来叫。</p>

<p>这样在子类里就可以把这两个字段锁定到某个特定的实现，以实现任意的组合。</p>

<p>可以看到，绿头鸭（mallard）组合了真会飞和真会叫。而诱饵鸭（decoy，猎人用来勾引鸭子上钩的那个）则组合了不会飞和不会叫。</p>

<p>可以想象随着飞和叫这两个家族的扩大，我们可以组合出更多种类的鸭子来。</p>

<p>很好，很灵活，很强大，对吧？</p>

<h2>不过再想一下</h2>

<p>我们想要的不过是把两个家族的不同行为塞到鸭子的子类里去。是否有更容易的办法来做到呢？</p>

<h1>trait</h1>

<p>一说到把行为塞到某个类里，就会想到mix in，很自然就想到了Scala的trait。</p>

<p>更多关于Scala的trait的详情请参考我的另一篇博客： <a href="http://cuipengfei.me/blog/2013/10/13/scala-trait/">http://cuipengfei.me/blog/2013/10/13/scala-trait/</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Fly</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fly</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">FlyWithWings</span> <span class="k">extends</span> <span class="nc">Fly</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fly</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;fly with wings&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">FlyNoWay</span> <span class="k">extends</span> <span class="nc">Fly</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fly</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;can not fly&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>飞行家族。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Quack</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">quack</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">RealQuack</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">quack</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Quack&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">MuteQuack</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">quack</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;&lt;&lt;silence&gt;&gt;&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>叫的行为的家族。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Duck</span> <span class="k">extends</span> <span class="nc">Fly</span> <span class="k">with</span> <span class="nc">Quack</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">swim</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;all ducks float&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MallardDuck</span> <span class="k">extends</span> <span class="nc">Duck</span> <span class="k">with</span> <span class="nc">FlyWithWings</span> <span class="k">with</span> <span class="nc">RealQuack</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DecoyDuck</span> <span class="k">extends</span> <span class="nc">Duck</span> <span class="k">with</span> <span class="nc">FlyNoWay</span> <span class="k">with</span> <span class="nc">MuteQuack</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，鸭子的各种实现。</p>

<p>貌似和Java版的实现差距不大，飞和叫的interface和class变成了trait。</p>

<p>Duck原来是持有Fly和Quack的实例，现在则是变成了混入Fly和Quack这两个trait。</p>

<p>这个代码比Java短一些，紧凑一些，构造函数中的赋值变成了类型声明时的混入。</p>

<h2>不过再想一下</h2>

<p>我们不过是想要把某种行为塞入到某个类里面去，真的有必要用interface，class，trait来把这些行为包裹起来吗？</p>

<p>行为通常是以哪种形式承载的呢？</p>

<h1>functions</h1>

<p>行为通常是以函数承载的。</p>

<p>也就是说我们想要做的不过是把符合某个签名的函数塞到鸭子的子类里去而已，而却用interface，class，trait来把这些行为包裹起来了。有些臃肿不是吗？</p>

<p>下面是直接把函数塞入鸭子子类的做法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Duck</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Fly</span> <span class="o">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="nc">Unit</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">flyWithWings</span> <span class="k">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;fly with wings&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">flyNoWay</span> <span class="k">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;can not fly&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Quack</span> <span class="o">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="nc">Unit</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">realQuack</span> <span class="k">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Quack&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">muteQuack</span> <span class="k">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;&lt;&lt;silence&gt;&gt;&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Duck</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">Fly</span><span class="o">,</span> <span class="n">q</span><span class="k">:</span> <span class="kt">Quack</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">swim</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;all ducks float&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fly</span><span class="o">()</span> <span class="k">=</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">quack</span><span class="o">()</span> <span class="k">=</span> <span class="n">q</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MallardDuck</span> <span class="k">extends</span> <span class="nc">Duck</span><span class="o">(</span><span class="n">flyWithWings</span><span class="o">,</span> <span class="n">realQuack</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DecoyDuck</span> <span class="k">extends</span> <span class="nc">Duck</span><span class="o">(</span><span class="n">flyNoWay</span><span class="o">,</span> <span class="n">muteQuack</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fly和Quack不再是interface或者是trait。而是type aliase。</p>

<p>Scala的type aliase就类似于C#的delegate，用来声明function signature。</p>

<p>更多关于type aliase的更多详情请参考我的另一篇博客： <a href="http://cuipengfei.me/blog/2013/12/23/desugar-scala-4/">http://cuipengfei.me/blog/2013/12/23/desugar-scala-4/</a></p>

<p>这样，会飞不会飞，会叫不会叫就无需被class或者trait包裹着了，直接就是一个个的函数。</p>

<p>鸭子的子类通过构造函数接收飞和叫的两个函数作为参数，就能够组合不同的行为了。</p>

<p>如果说之前triat的实现方式与Java实现版相比偏重了inheritance而不是composition，这一版的实现则又回到了纯composition的路上了。</p>

<p>紧凑程度，实体数量都比以上两版有改进。这一点从行数上可以窥见：Java版63行，trait版29行，最后一版21行。</p>

<h1>菜刀开啤酒</h1>

<p>最后回到标题上去：菜刀开啤酒，意即用不合适的工具解决问题。</p>

<p>strategy patten要解决的问题其实就是如何把一族行为的不同实现注入到某个类里去。</p>

<p>这一点，最开头的wiki定义已经说的很明白了：</p>

<blockquote><p>Strategy lets the algorithm vary independently from clients that use it.</p></blockquote>

<p>无论是class，还是function，都是为程序员提供抽象的手段。当我们想要抽象的东西就是一段algorithm（正如wiki所说）的时候，用function来做抽象就是更加轻量且合适的选择。</p>

<p>该模式提出的时候FP并不如今日盛行，其作者选用纯OO的方式解决了问题，并广为传播，实为功德。</p>

<p>不过今天我们有了开瓶器，就无需一定要用菜刀了。</p>

<p>最后是一个Java 8的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Fly</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">fly</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Quack</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">quack</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BehaviorsRepo</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Fly</span> <span class="n">flyWithWings</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;fly with wings&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Fly</span> <span class="n">canNotFly</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;can not fly&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Quack</span> <span class="n">realQuack</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Quack&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Quack</span> <span class="n">muteQuack</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&lt;&lt;silence&gt;&gt;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Duck</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Fly</span> <span class="n">f</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Quack</span> <span class="n">q</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Duck</span><span class="o">(</span><span class="n">Fly</span> <span class="n">f</span><span class="o">,</span> <span class="n">Quack</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">f</span> <span class="o">=</span> <span class="n">f</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MallardDuck</span> <span class="kd">extends</span> <span class="n">Duck</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MallardDuck</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">flyWithWings</span><span class="o">,</span> <span class="n">realQuack</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecoyDuck</span> <span class="kd">extends</span> <span class="n">Duck</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DecoyDuck</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">canNotFly</span><span class="o">,</span> <span class="n">muteQuack</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起来比最开始的那一版好一些，但是我还是看它不顺眼。</p>

<p>为什么呢？</p>

<p>一定是由于我强烈的偏见而没有其他任何原因，一定是这样的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of Reactive Programming Week Two作业导学]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/26/principles-of-reactive-programming-week-2/"/>
    <updated>2015-04-26T17:56:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/26/principles-of-reactive-programming-week-2</id>
    <content type="html"><![CDATA[<h1>声明</h1>

<p>这系列博文的目标读者仅限于报名参加了这门课并且看完了视频，看完了作业的instruction之后仍有困难的同学。</p>

<p>这系列博文不会公布作业的答案，那是违反Coursera的code of honor的。</p>

<p>我只会试着解释作业中已有的代码，以及应该如何入手。</p>

<p>其实，写这个系列博文对我的帮助比对读者的帮助要大。</p>

<p>这周的作业不太难，主要就是一个观察者模式。</p>

<h1>Signal是怎么work的？</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">Var</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">a</span><span class="k">:</span> <span class="kt">calculator.Var</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">calculator</span><span class="o">.</span><span class="nc">Var</span><span class="k">@</span><span class="mi">7</span><span class="n">ca6f5b9</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="nc">Var</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="n">b</span><span class="k">:</span> <span class="kt">calculator.Var</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">calculator</span><span class="o">.</span><span class="nc">Var</span><span class="k">@</span><span class="mi">2286</span><span class="n">d26</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="nc">Signal</span><span class="o">(</span><span class="n">a</span><span class="o">()</span> <span class="o">+</span> <span class="n">b</span><span class="o">())</span>
</span><span class='line'><span class="n">c</span><span class="k">:</span> <span class="kt">calculator.Signal</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">calculator</span><span class="o">.</span><span class="nc">Signal</span><span class="k">@</span><span class="mi">5</span><span class="n">c60548d</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">()</span>
</span><span class='line'><span class="n">res8</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">()</span><span class="k">=</span><span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">()</span>
</span><span class='line'><span class="n">res10</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">b</span><span class="o">()</span><span class="k">=</span><span class="mi">20</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">()</span>
</span><span class='line'><span class="n">res12</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果能搞懂上面的代码是如何work的，作业题中需要用到Signal的地方就不会有太大问题了。</p>

<p>a=1，b=2，c=a+b，所以c就是3。</p>

<p>a变成10之后c就变成了12（10+2）。</p>

<p>b再变成20之后，c就变成了30（10+29）。</p>

<p>这个级联的变化是如何发生的呢？</p>

<p>有两个关键点：</p>

<ul>
<li>Signal的constructor</li>
<li>Signal的update方法</li>
</ul>


<p>先看Signal的constructor。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Signal</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">expr</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">T</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//......</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上是它的签名，关键在于expr的类型签名，expr的类型不是T，而是=>T。</p>

<p>这就意味着expr可以是任何类型为T的表达式，可以是一个字面量，也可以是任意复杂的代码块。</p>

<p>比如Signal(123)是可以的，Signal(complicatedMethodCall())也可以。</p>

<p>最上面那块代码中的val c = Signal(a() + b())就属于后一种。</p>

<p>a() + b()不会被立即求值成3然后传入Signal的constructor，而是整体作为一个可以被反复求值的表达式被记录在Signal的实例中。</p>

<p>constructor的入口参数可以被反复求值是级联变化的基础，那是什么触发了真正的变化呢？</p>

<p>那就是关键点之二：update方法。</p>

<p>update方法的妙处在于，如果一个类A有update方法，那么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">()</span>
</span><span class='line'><span class="n">x</span><span class="o">(</span><span class="n">y</span><span class="o">)</span><span class="k">=</span><span class="n">z</span>
</span></code></pre></td></tr></table></div></figure>


<p>在编译之后会变成这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">()</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="n">y</span><span class="o">,</span><span class="n">z</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>详情请见我之前的一篇博客：<a href="http://cuipengfei.me/blog/2014/06/12/scala-update-method/">http://cuipengfei.me/blog/2014/06/12/scala-update-method/</a></p>

<p>Signal的update方法是protected的，不可访问，所以它只可以从变，不可自变。</p>

<p>而Var把update方法public出来了，这样，在下面这样的代码执行时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">a</span><span class="o">()</span><span class="k">=</span><span class="mi">10</span>
</span><span class='line'><span class="c1">//a.update(10)</span>
</span></code></pre></td></tr></table></div></figure>


<p>a就会通知它的observers去重新求值。
这样就实现了a或者b这样的Var变化的时候，c这样的Signal跟着变化的效果。</p>

<p>搞懂了上面的内容就足以去做作业了。</p>

<h1>怎么和html页面结合起来的？</h1>

<p>执行instruction里提到的webUI/fastOptJS这个task就会把Scala作业代码编译成js。</p>

<p>这个task是scalajs这个dependency带进来的（在webui.sbt里）。</p>

<p>webui这个项目里有一个CalculatorUI.scala文件，也会被编译成js。其中的代码就把作业代码和html的UI结合起来了。</p>

<p>就是这样了，这周的作业不难懂也不太难做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[twu pecha kucha]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/22/twu-pecha-kucha/"/>
    <updated>2015-04-22T14:19:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/22/twu-pecha-kucha</id>
    <content type="html"><![CDATA[<iframe src="http://cuipengfei.github.com//slides.com/pengfeicui/deck-4/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of Reactive Programming Week One作业导学]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/19/principles-of-reactive-programming-week-one/"/>
    <updated>2015-04-19T13:59:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/19/principles-of-reactive-programming-week-one</id>
    <content type="html"><![CDATA[<h1>前尘</h1>

<p>Principles of Reactive Programming在4月13号又开课了。
<a href="https://www.coursera.org/course/reactive">https://www.coursera.org/course/reactive</a></p>

<p>上次开课是在2013年的11月，当时我刚第一次上完Functional programming principles in Scala，热情很高于是就报名参加了这门课。
还群发了一个邮件找人一起上课。</p>

<p>但是上了几周发现有点难，于是就放弃了。现在去bitbucket看，最后一次push停留在了2013-11-18。</p>

<p>后来还在上海被8x鄙视于无形之中。</p>

<h1>后世</h1>

<p>14年做了几个月的Scala开发，后来Functional programming principles in Scala再次开课又上了一遍，拿了个认证证书。</p>

<p>感觉似乎可以再挑战一次。</p>

<h1>今生</h1>

<p>上课习得的知识放在脑子里是不牢靠的。大脑有遗忘周期。</p>

<p>需要有成文或者成代码的产出，作为日后回忆和做spaced repetition的资料。</p>

<p>于是就有了这个即将成为系列的博文中的第一篇《Principles of Reactive Programming Week One作业导学》。</p>

<p>这系列博文的目标读者仅限于报名参加了这门课并且看完了视频，看完了作业的instruction之后仍有困难的同学。</p>

<p>这系列博文不会公布作业的答案，那是违反Coursera的code of honor的。</p>

<p>我只会试着解释作业中已有的代码，以及应该如何入手。</p>

<p>其实，写这个系列博文对我的帮助比对读者的帮助要大。</p>

<h1>正文</h1>

<h2>Heap.scala</h2>

<p>第一周的代码下载下来之后，先来看一下Heap.scala这个文件。</p>

<p>这个文件里定义了很多个trait。现在只需要关注其中一个Heap。</p>

<p>这个就是所有其他trait都会去extend的基类（这个说法合适吗？）。
它定义了所有Heap的实现者都需要实现的方法。</p>

<p>然后BinomialHeap完整实现了Heap定义的所有东西。</p>

<p>Bogus1BinomialHeap到Bogus5BinomialHeap都是继承自BinomialHeap，其中各自覆盖了BinomialHeap的不同方法，以不同的方式引入了bug。
第一周作业的目的就是用ScalaCheck把其中的bug找出来。</p>

<p>这个文件里还有一个IntHeap，这个稍后再说。</p>

<p>实现代码其实就只有这一个文件，接下来看测试代码。</p>

<h2>QuickCheckSuite.scala</h2>

<p>这个文件里主要定义了QuickCheckSuite这个测试类。</p>

<p>这个测试类继承自FunSuite，这是ScalaTest的测试基类。同时mix in了Checkers，这是ScalaTest为了与ScalaCheck集成而提供的trait。</p>

<p>接下来看测试的case：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">checkBogus</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">foundBug</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">check</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">TestFailedException</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="n">foundBug</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">assert</span><span class="o">(</span><span class="n">foundBug</span><span class="o">,</span> <span class="s">&quot;A bogus heap should NOT satisfy all properties. Try to find the bug!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span><span class="o">(</span><span class="s">&quot;Binomial heap satisfies properties.&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">check</span><span class="o">(</span><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">BinomialHeap</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span><span class="o">(</span><span class="s">&quot;Bogus (1) binomial heap does not satisfy properties.&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">checkBogus</span><span class="o">(</span><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">Bogus1BinomialHeap</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span><span class="o">(</span><span class="s">&quot;Bogus (2) binomial heap does not satisfy properties.&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">checkBogus</span><span class="o">(</span><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">Bogus2BinomialHeap</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，每个case都调用了check这个方法，或者是check的变体-checkBogus。</p>

<p>checkBogus里面则调用了check，并且assert说一定要出现TestFailedException异常了，测试才算成功。也就是说checkBogus的目的就是要在某些Heap的实现中找到bug。</p>

<p>现在来看check这个方法本身。它接受一个类型为Prop的参数，这些参数从哪儿来呢？这些参数就是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">BinomialHeap</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">Bogus1BinomialHeap</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些代码。</p>

<p>这就意味着QuickCheckHeap一定要是一个Prop，是不是这样呢？</p>

<h2>QuickCheckHeap.scala</h2>

<p>那就到QuickCheckHeap.scala这个文件中来看一下。</p>

<p>可以看到QuickCheckHeap这个抽象类确实是extends了Properties，而properties又extends了Prop。那么，没问题，这个类型是匹配的。</p>

<p>QuickCheckHeap里可以定义任意多个property，这些property将会检查Heap的实现正确与否。</p>

<p>而且它还mix in了IntHeap，就是前面略过的那个trait。它的目的是锁定Heap这个trait里所定义的A这个元素的类型到Int。</p>

<h2>全部连起来</h2>

<p>第一周作业的已有代码很少，有用的就是这三个文件。</p>

<p>Heap.scala定义了很多个Heap的不同实现。有些是正确的，有些是有bug的。</p>

<p>QuickCheckSuite.scala则是测试的入口点，它由JunitRunner拽着跑起来。
其中的test case使用ScalaCheck去检查对于Heap这种数据结构恒定为true的properties是不是hold住的。</p>

<p>对于Heap这种数据结构恒定为true的properties从哪儿来呢？就来自于QuickCheckHeap.scala。
QuickCheckHeap本身是一个抽象类，不可以被实例化。但是由于有了牛逼的trait，就可以用这种代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">BinomialHeap</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">Bogus1BinomialHeap</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建出实例，进行测试了。</p>

<p>最后，我们的任务就是在QuickCheckHeap.scala添加更多的properties，把所有实现有误的Heap都揪出来。</p>

<h1>题外话</h1>

<p>有没有发现QuickCheckHeap.scala里面有些奇怪的代码？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">property</span><span class="o">(</span><span class="s">&quot;min1&quot;</span><span class="o">)</span> <span class="k">=</span> <span class="n">forAll</span> <span class="o">{</span> <span class="o">(</span><span class="n">heap</span><span class="k">:</span> <span class="kt">H</span><span class="o">,</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">min</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">(</span><span class="n">heap</span><span class="o">))</span> <span class="n">a</span> <span class="k">else</span> <span class="n">findMin</span><span class="o">(</span><span class="n">heap</span><span class="o">)</span>
</span><span class='line'>  <span class="n">findMin</span><span class="o">(</span><span class="n">insert</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">heap</span><span class="o">))</span> <span class="o">==</span> <span class="n">min</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>property(&#8220;min should be min&#8221;)，这看起来像是一个方法调用啊。</p>

<p>尼玛，方法调用后面怎么跟着一个等号啊？等号后面还有一个有返回值的表达式啊？</p>

<p>这是啥啊？</p>

<p>这是个乍一看很自然，但是仔细一想很费解的Scala语言特性-update方法。</p>

<p>详情请见我之前的一篇博客：<a href="http://cuipengfei.me/blog/2014/06/12/scala-update-method/">http://cuipengfei.me/blog/2014/06/12/scala-update-method/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[English workshop Wuhan 2015.04.14]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/11/wuhan-english-workshop/"/>
    <updated>2015-04-11T14:28:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/11/wuhan-english-workshop</id>
    <content type="html"><![CDATA[<iframe src="http://cuipengfei.github.com//slides.com/pengfeicui/deck/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[职业女性确实处于劣势吗？记一次不甚严谨的考据 -- 向胡适之先生的遥远致敬]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/04/women-in-finance-it-and-r-and-d/"/>
    <updated>2015-04-04T01:09:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/04/women-in-finance-it-and-r-and-d</id>
    <content type="html"><![CDATA[<h1>源起</h1>

<p>前两天，在一个武汉本地程序员聚集的技术社区微信群里某位群友发了两张图片：</p>

<p><img src="http://ww4.sinaimg.cn/mw690/8b1ece2agw1eqsw4fbiytj20fe0a6q8i.jpg" alt="" /></p>

<p><img src="http://ww1.sinaimg.cn/mw690/8b1ece2agw1eqsw4dzf8ej20fe09v0z9.jpg" alt="" /></p>

<p>这是某个IT公司的招聘宣传，为程序员提供的鼓励师。</p>

<p>（由于图片出现在愚人节期间，不确定该公司是真的有这样的人员配备，还是恶作剧的，此处暂且存疑）</p>

<p>马上群里就有一位X君跳出来说这种事情就是混蛋啊，怎么女人就得给男人端茶倒水擦汗啊。</p>

<p>另外一位Y君就说没有啊，这就是开个玩笑啊，不要这么较真啊。</p>

<p>X君继续说：！@#￥%……&amp;*啊</p>

<p>Y君回应：*&amp;……%￥#@！啊</p>

<p>于是，你也可以猜到的，这中间X君就说了IT行业对于女性从业者存在歧视，收入不平等之类的话。</p>

<p>这让我颇为感慨：武汉也无非是这样。武大的樱花烂熳的时节，群中却有这样标致极了的讨论。其实，又何止武汉呢？</p>

<p>正当X君与Y君酣战之时，有另外一位群友问声称存在收入歧视的X君是否有数据支持其观点。</p>

<p>恰巧我这周正在看《胡适文选》。胡适之先生反复提醒读者<strong>要有怀疑精神，凡事要讲求证据，要用科学的手段得出科学的结论。</strong></p>

<p><strong>胡适之先生之言于我心有戚戚焉，于是我便想要搜罗数据，深入了解一下这个话题，算作是对胡适之先生的遥远致敬。</strong></p>

<p>以上，为源起。</p>

<h1>定题</h1>

<p>近来我正尝试着自我疏离本性中近似于周树人先生的那一部分。</p>

<p>便不太愿用“歧视”这个颇为尖刻的词汇，因而本文的标题中用了“劣势”这一稍为中性的说法。</p>

<p>既然要考据，就不妨把话题放大些，不独观察IT行业的女性，莫若把视角扩宽到整个职业女性上去。</p>

<p>再加上我不是专业的考据家，并没有投入大量时间精力去搜索资料，交叉引证也不够详备，那就不能怕会过谦，也在标题上加上“不甚严谨”这几个字。</p>

<p>于是便有了这个颇显啰嗦的标题：<strong>《职业女性确实处于劣势吗？记一次不甚严谨的考据 &#8211; 向胡适之先生的遥远致敬》。</strong></p>

<p>是为题目由来。</p>

<h1>开篇</h1>

<p>我是一个颇为庸俗的人，也时常会被称为理性的人。</p>

<p><strong>于是，别人看待职业女性的眼光、上司是否会给小鞋穿、同事是否会区别对待等等这些无法量化，难以考量的因素均不采用。</strong></p>

<p><strong>我就只认准了：</strong></p>

<p><strong>在一个行业中具有某种特征的人群占多数就可以被称作是有优势的</strong></p>

<p><strong>在一个行业中具有某种特征的人群挣钱多就可以被称作是有优势的</strong></p>

<p><strong>这两条考校标准。</strong></p>

<p>所以接下来通篇都围绕着<strong>人数多寡和挣钱多少</strong>展开。</p>

<h1>什么行业收入高？</h1>

<p><strong>中华人民共和国国家统计局，中国统计年鉴（2014）</strong>中有一个条目：<strong>按行业分城镇单位就业人员平均工资</strong>，以Excel格式提供：</p>

<p>（这一行Excel实在是太长了，我把它分开截了两张图）</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqsy6hday7j21wc090q76.jpg" alt="" /></p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1eqsy4ojncwj21dq09a0wn.jpg" alt="" /></p>

<p>其中收入最高的三个行业标记为了红色，分别为金融，IT和科研。</p>

<p>原数据可以在这里找到：
<a href="http://www.stats.gov.cn/tjsj/ndsj/2014/indexch.htm" target="_blank">http://www.stats.gov.cn/tjsj/ndsj/2014/indexch.htm</a></p>

<p>点击左侧的“四、就业和工资”然后点击第“4-15”项，里面可以下载Excel。</p>

<p>或者也可以直接通过这个链接下载Excel：
<a href="http://www.stats.gov.cn/tjsj/ndsj/2014/zk/html/Z0415C.xls">http://www.stats.gov.cn/tjsj/ndsj/2014/zk/html/Z0415C.xls</a></p>

<p>那接下来就按图索骥，考量这三个行业中女性的状况。</p>

<p>（为什么只有三个？笔者精力有限，只求管窥，不求完全覆盖）</p>

<h1>金融</h1>

<p>搜寻良久，实在是找不到国内的资料，只好拿些英文的资料作为旁证了。</p>

<p>以下是来自美国的<strong>公平就业机会委员会（Equal Employment Opportunity Commission,缩写为EEOC）</strong>2006年发布的一份报告中关于<strong>女性金融从业者比例</strong>的图表：</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1eqtfg16y00j210q0gg7ez.jpg" alt="" /></p>

<p>从最后一行的汇总信息可以看出，经理级别的职位，女性占18%左右。</p>

<p>专业从业者中，女性约为26%。</p>

<p>技术与销售类的职位则只有个位数的百分点。</p>

<p>但到了书记员，抄写员（Clerical，表中最后一列）这一类的职位，却有43%是女性。</p>

<p><strong>由此不难观察到，在美国，金融这个高薪行业中女性在做着勤务工作，升到经理职位的甚少。</strong></p>

<p>这份报告的出处：
<a href="http://www.eeoc.gov/eeoc/statistics/reports/finance/finance.pdf" target="_blank">http://www.eeoc.gov/eeoc/statistics/reports/finance/finance.pdf</a></p>

<p>公平就业机会委员会的wiki页面：<a href="http://zh.wikipedia.org/wiki/公平就业机会委员会" target="_blank">http://zh.wikipedia.org/wiki/公平就业机会委员会</a></p>

<p>而另外一份来自于英国<strong>平等与人权委员会（Equality and Human Rights Commission，EHRC）</strong>2009年春季发布的报告则有些不同：</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqtfj8tpjsj214010ahcb.jpg" alt="" /></p>

<p>从这张<strong>男女性别比例</strong>的图表可以看出，英国的金融行业男女从业人数基本一比一，差距不大。
从最后一行的汇总数据来看，女性还比男性多一个百分点。</p>

<p>而下面这张出自同一报告的关于<strong>收入差距</strong>的图表，则显露了另外的信息：</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1eqtfg31dloj218c14qe6v.jpg" alt="" /></p>

<p>英国金融行业中，全职工作的男性年收入比全职工作的女性多55%。</p>

<p>而在全社会所有行业中，这个数字也有28%。</p>

<p><strong>可见在英国女性虽然以同等的人数参与进了金融行业，但是却没有拿到哪怕是接近同等的薪水。</strong></p>

<p>这份报告的出处：
<a href="http://www.equalityhumanrights.com/sites/default/files/documents/download__finance_gender_analyis_research.pdf" target="_blank">http://www.equalityhumanrights.com/sites/default/files/documents/download__finance_gender_analyis_research.pdf</a></p>

<p>平等与人权委员会的wiki页面：<a href="http://en.wikipedia.org/wiki/Equality_and_Human_Rights_Commission" target="_blank">http://en.wikipedia.org/wiki/Equality_and_Human_Rights_Commission</a></p>

<h1>IT</h1>

<p>接下来开始看三大高收入行业中的第二名：IT行业中女性的状况。</p>

<p>我找到了一份来自美国的非营利机构：<strong>National Center for Women &amp; Information Technology (NCWIT)</strong>在2009年发布的报告。</p>

<p>（没找到这个机构确切的中文翻译，就保留原文吧）</p>

<p>报告中有一张<strong>女性IT从业人员比例随年份变化的趋势图</strong>：</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1eqszx7ctf5j20vc0jujte.jpg" alt="" /></p>

<p>容易看出，从上个世纪八十年代中期到九十年代初期，女性IT从业者比例在攀升，从30%增长到37%左右。</p>

<p>在此之后则一路下降，到2008年已经减少到了25%左右。</p>

<p>出自同一报告的还有另外一张<strong>男女收入差距随工作经验变化的趋势图</strong>：</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1eqszx63er1j20vk0h8jto.jpg" alt="" /></p>

<p>可以看出，入行初期男女收入没太大区别，但从第三年开始，逐渐拉开差距，由3%增加到12%。</p>

<p>好了，又是一个高薪行业。<strong>女性只占其中的四分之一，而且收入还比男性少。</strong></p>

<p>报告出处：<a href="http://www.ncwit.org/sites/default/files/legacy/pdf/NCWIT_TheFacts_rev2010.pdf" target="_blank">http://www.ncwit.org/sites/default/files/legacy/pdf/NCWIT_TheFacts_rev2010.pdf</a></p>

<p>NCWIT的wiki页面：<a target="_blank" href="http://en.wikipedia.org/wiki/National_Center_for_Women_%26_Information_Technology">http://en.wikipedia.org/wiki/National_Center_for_Women_%26_Information_Technology</a></p>

<h1>科研</h1>

<p>高薪行业之三，科研。</p>

<p>找到了两份来自欧盟的报告。</p>

<p>第一份报告中有一张<strong>科研行业中女性从业者比例</strong>的图表，数据采集自1999年：</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqtgj4x3wdj20w80pcwhe.jpg" alt="" /></p>

<p>不难看出，其中希腊和葡萄牙的女性科研工作人员较多，占有41%和43%。</p>

<p>德国和匈牙利则很低，女性只有14%到19%。</p>

<p>其他八个国家大致是落在26%到33%这个区间。</p>

<p>第二份报告发布于2012年，其中有一张<strong>男女收入差距</strong>的图表：</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqtgj4s92yj20ty0t6wl8.jpg" alt="" /></p>

<p>该图表数据统计于2002年和2006年，从中不难看出，女性在科研行业的各个分支中收入比男性低20%到40%。</p>

<p><strong>由此可见，在欧洲，科研行业作为一个高薪行业，其中女性从业人员较少。
即便进入这个行业的女性，其收入也要较男性低。</strong></p>

<p>第一份报告出处：<a href="https://ec.europa.eu/research/swafs/pdf/pub_gender_equality/wir_final.pdf" target="_blank">https://ec.europa.eu/research/swafs/pdf/pub_gender_equality/wir_final.pdf</a></p>

<p>第二份报告出处：<a href="http://ec.europa.eu/research/science-society/document_library/pdf_06/meta-analysis-of-gender-and-science-research-synthesis-report.pdf" target="_blank">http://ec.europa.eu/research/science-society/document_library/pdf_06/meta-analysis-of-gender-and-science-research-synthesis-report.pdf</a></p>

<p>发布报告的欧盟网站：<a href="http://ec.europa.eu/index_en.htm" target="_blank">http://ec.europa.eu/index_en.htm</a></p>

<h1>小结</h1>

<p><strong>以上观察了三个薪水最高的行业：金融，IT和科研，这三个行业中都呈现出了女性从业人员少于男性，且收入低于男性的态势。</strong></p>

<p>如果这条结论和以上干巴巴的数据无法让您获得感性的认知的话，那我们再结合其他数据做个分析。</p>

<p>以下是来源于非营利组织<strong>National Association of Colleges and Employers (NACE)</strong>的一份报告中关于<strong>平均年工资涨幅</strong>的数据：</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1eqtzeznwmwj21020eqwgt.jpg" alt="" /></p>

<p>可以从最后一行看出，平均工资涨幅是每年7.5%。</p>

<p>这意味着什么呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">55</span><span class="p">,</span><span class="mi">1</span><span class="o">.</span><span class="mo">075</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">6</span><span class="o">.</span><span class="mo">05</span><span class="mi">9885534213904</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">1</span><span class="o">.</span><span class="mo">075</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5670305391527257</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">20</span><span class="p">,</span><span class="mi">1</span><span class="o">.</span><span class="mo">075</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">5210161634544224</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">40</span><span class="p">,</span><span class="mi">1</span><span class="o">.</span><span class="mo">075</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">652504958776575</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果您不是IT行业的看不懂上面的代码没关系，我来解释一下。</p>

<p>这意味着，如果您是一名金融行业的女性从业者，您旁边座位上是一名和您同时进公司的男同事。
你们的关系很好，他甚至都不介意让您看他的工资单。这给在公司属于珍稀物种的您带来了不少宽慰。
但是经过分析自己历年的工资涨幅，您会发现如果您想要和他赚到一样多的钱的话，您还要再工作<strong>六年</strong>才行。</p>

<p>而这个数字在IT行业是<strong>一年半</strong>。</p>

<p>在科研行业是<strong>两年半</strong>到<strong>四年半</strong>。</p>

<p>以上引用报告出处：<a href="https://www.naceweb.org/uploadedFiles/Content/static-assets/downloads/executive-summary/2014-september-salary-survey-executive-summary.pdf" target="_blank">https://www.naceweb.org/uploadedFiles/Content/static-assets/downloads/executive-summary/2014-september-salary-survey-executive-summary.pdf</a></p>

<p>NACE的wiki页面：<a href="http://en.wikipedia.org/wiki/National_Association_of_Colleges_and_Employers" target="_blank">http://en.wikipedia.org/wiki/National_Association_of_Colleges_and_Employers</a></p>

<h1>然后呢？</h1>

<p>以上仅仅是通过交叉引证来描述了职业女性的状况。是属于<strong>实证性的表述（positive statement）。</strong></p>

<p>而关于职业女性应该处于何种状况，那是属于<strong>规范性的表述（normative statement）</strong>，本文就不涉及了。</p>

<p>女性在这些高薪行业中人数少于男性，这是好事吗？这是坏事吗？</p>

<p>女性在这些高薪行业中收入低于男性，应该如何评价这件事呢？</p>

<p>金融，IT和科研，听起来都是理工宅男的专长啊，女的少不是属于正常现象吗？</p>

<p>女性的收入低于男性，那有可能是她们干活不给力啊，那收入低就是应该的吧？</p>

<p>所有这些问题，都属于<strong>价值判断</strong>。通过上面引用的数据，以及常识的积累，我对这些问题会有确定性的判断。
想来你也能猜到我的判断是什么。但是我不把它说出来，<strong>留待读者自己得出结论</strong>。</p>

<h1>最后</h1>

<p>如果您觉得这篇博客写的还可以，请用手机支付宝扫描下面的二维码：</p>

<p><img src="https://tfsimg.alipay.com/images/mobilecodec/T1J3FfXbpsXXXXXXXX" alt="" /></p>

<p>我会把收到的巨款用来置装，美容，健身。</p>

<p>然后穿的花枝招展，抹的五彩绚烂，露出两条人鱼线。</p>

<p>站在女程序员们旁边，给她们端茶倒水擦汗。</p>

<p>并且忘掉我也可以是一个独立的个体，也可以通过某种其他的方式体现自我价值。</p>

<p>成为一名雄性鼓励师，从此人生走上巅峰。</p>

<h1>最后的后面</h1>

<p>最后的后面怎么还有呢？因为标题已经啰嗦了，索性结尾也啰嗦一下。</p>

<p>说是不严谨的考据，但是还是用了十几个番茄钟，五六次git commit，三四次审校。</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1eqtkcps0zaj21g60zejya.jpg" alt="" /></p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1eqtkec0012j21fq0ku7a1.jpg" alt="" /></p>

<p>七易其稿也不过是如此的两倍嘛。</p>

<p>不过从此以后，我要与这样的辛劳说再见了。我要成为一个靠性别，靠脸，靠身材吃饭的男人。</p>

<p>所以，你懂的，趁我还能靠智识谋生，扫码吧。</p>

<p>别跑，说的就是你，别骗我，我知道你余额宝收益好几十块钱一天呢。</p>

<p>难道你就不想为一位志存高远的未来雄性鼓励师提供一些帮助吗？</p>

<p>（胆敢说我最终还是免不了被周树人附体的善款要x2）</p>

<p>现在，请回到页面的最上端，再看一遍那两张图片，请问您现在看到的东西和读本文之前还一样吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015第一季度]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/03/29/2015-first-season/"/>
    <updated>2015-03-29T17:48:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/03/29/2015-first-season</id>
    <content type="html"><![CDATA[<p>时间是以何种方式流逝的呢？</p>

<p>三个月瞬间就不见了。</p>

<p>对照着去年的总结和当时对未来的期望写一下2015年第一季度吧。</p>

<h1>博客</h1>

<p>惨不忍睹。</p>

<p>除了一个应付任务的tech radar的session写在了博客上，其他啥都没写。</p>

<p>去年博客有产出是因为在刷Scala这个主线任务。</p>

<p>今年做的都是支线任务，这一点那一点，难以形成有效的产出。</p>

<p>要形成有效的产出，需要有plan，有execution，有retro。</p>

<p>兴之所至，就把今年的博客主线任务定为OO与FP的比较和结合应用吧。</p>

<h1>读书</h1>

<p>不错。</p>

<p>第一个季度已经读完10本书。数量达标。</p>

<p>说过要做的笔记也做了。</p>

<p>笔记的作用确实很好，每隔一段时间回顾一次，spaced repetition可以促进和加深记忆。
不会再有“卧槽，这本书我看过吗？作者都讲了些啥啊？”的尴尬事。</p>

<p>看完了《经济学原理》的微观分册，这是最近几年来读过的最大部头的一本书。鉴于之前一直没有耐心读厚书，这可以算作是一个进步。</p>

<p>开始把待读的书按照内容领域和期待得到的效果分类放到豆列里。这样每次没书看了就去想读的豆列里挑一本。不用每次都700选一了。</p>

<p>读书的领域扩张也在按照之前的计划进行，没有风险。</p>

<p>博客需要有主线任务，读书要配合，可以优先选一些讲paradigm的书来读。</p>

<h1>MOOC</h1>

<p>尴尬。</p>

<p>这三个月一个mooc都没有跟。4月13日，reactive programming课要开，这个一定要跟，而且一定要跟完。</p>

<p>估计完成当时6门课的目标有点悬了。</p>

<p>非常无耻地修改一下mooc的目标吧：配合主线任务，以读书和mooc作为输入，博客作为产出。
数量和领域都不做具体限定。
（果然够无耻）</p>

<h1>体重</h1>

<p>稳定。</p>

<p>上次写年终总结的时候是61.1公斤，现在是61.0公斤。</p>

<p>当时写的是：</p>

<blockquote><p>明年没有太多改进的目标，维持就ok了。</p></blockquote>

<p>没有了减重目标，没有了改进方向，效果果然是不会自动出现的啊。
这是很有意思的一个现象，没有了改进的意愿，或许潜意识里对热量摄入和消耗都没有那么敏感和严格。</p>

<p>还好胸在变大，肱三在变大，腹肌在浮出水面。</p>

<h1>最后</h1>

<p>写个阶段性总结还是有用，发掘出了主线任务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tech radar 武汉 microservice envy]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/01/13/tech-radar-wuhan/"/>
    <updated>2015-01-13T23:18:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2015/01/13/tech-radar-wuhan</id>
    <content type="html"><![CDATA[<iframe src="http://cuipengfei.github.com//slides.com/pengfeicui/microservice-envy/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年总结]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/12/27/2014/"/>
    <updated>2014-12-27T17:01:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/12/27/2014</id>
    <content type="html"><![CDATA[<p>2014年即将结束，需要做一些总结。</p>

<p>既然总结是写在博客上的，第一项就先说博客吧。</p>

<h1>博客</h1>

<p>2014年写了18篇博客，其中15篇和Scala有关，自认为都是有且仅有干货的。</p>

<p>对此，我比较<em><strong>满意</strong></em>。</p>

<p>不过这个数字存在欺骗性，15篇Scala的博客，其中4篇写于1月份，6篇写于6月份，其余的零散的写就与其他月份。</p>

<p>66.66&#8230;%集中地爆发于两个月里，其余十个月只贡献了总体的33.33&#8230;%</p>

<p>可见写博客这件事于我而言并没有形成持久的习惯，只是随激情而来的自我娱乐。</p>

<p>明年可以<em><strong>改进</strong></em>的是不要嫌话题小，不要嫌话题不够深。
有了有价值的想法就记下来，形成惯性。</p>

<h1>读书</h1>

<p><img src="http://i3.tietuku.com/363db6f06852244e.png" alt="alt text" /></p>

<p>38本，加上马上快读完的一本Ruby的书，算是39本。</p>

<p>对这个数字，我比较<em><strong>满意</strong></em>。</p>

<p>但是其中直接或间接与技术相关的只有8本，只占20%。</p>

<p>所以，和上面一节类似，单独观察总体数字本身是极具欺骗性的。</p>

<p>另一个我不满意的是读书的结果。把这39本书的封面罗列出来放到面前，我都能记得我看过这本书，但是有很多我都记不起其主要观点是什么。</p>

<p>所以明年的一个<em><strong>改进</strong></em>点是做笔记和书评，有利于记忆和吸收。</p>

<p>另外一个<em><strong>改进</strong></em>点是领域，我明年需要看一些轻量级的经济、哲学和社会心理学的书。口说无凭，于此立字为据。</p>

<h1>MOOC</h1>

<p><img src="http://i2.tietuku.com/98b280b6a1ac2512.png" alt="" /></p>

<p>上图来自MOOC学院，data visualization做的很漂亮，不过没有分年统计。</p>

<p>2014年实际只上完了4门课。</p>

<p>对这些课程的质量，从中的收获我都比较<em><strong>满意</strong></em>。</p>

<p>不太满意的是数字，明年<em><strong>改进</strong></em>的目标定在6。</p>

<p>与读书不同，上课需要的时间比较长。有的课会持续两个月。一年能上完的课不会太多，领域不宜太广。</p>

<p>暂定技术相关的至少3门，其他三门如果有特别好的非技术课就上一下，没有的话就还是上技术课。给自己留一些随性自由发挥的空间：）</p>

<h1>Well-being</h1>

<p>今年体重从72.5公斤降到了61.1公斤。</p>

<p>最近三个月的数据统计</p>

<p><img src="http://i3.tietuku.com/f020ea0a6adc01a6.png" style="width: 500px;"/></p>

<p>上张一个月前的裸照：）</p>

<p><img src="http://i3.tietuku.com/df10eb25abd486c8.png" style="width: 200px;"/></p>

<p>明年没有太多改进的目标，维持就ok了。</p>

<h1>其他</h1>

<p>脾气还是不好，察言观色并据此反应的能力还是差。</p>

<p>今年试过的手段有降低分贝，减慢语速，少用激进词汇，延长反应时间，多听少说。</p>

<p>有效果，但不是很明显。执行不够有效，自我监控不够严格。</p>

<p>对此，我<em><strong>不满意</strong></em>。</p>

<p>像这种与天性作斗争的行为，其过程一定是困难，漫长，且鲜有正面自我回馈的。</p>

<p>明年需要<em><strong>改进</strong></em>的是，持续以上改进手段的执行，增加自控强度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015武汉郑大晔校第二次课]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/11/16/zdyx2015wuhansecondclass/"/>
    <updated>2014-11-16T16:45:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/11/16/zdyx2015wuhansecondclass</id>
    <content type="html"><![CDATA[<iframe src="http://cuipengfei.github.com//slides.com/pengfeicui/285849/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark RDD的fold和aggregate为什么是两个API？为什么不是一个foldLeft？]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/10/31/spark-fold-aggregate-why-not-foldleft/"/>
    <updated>2014-10-31T15:29:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/10/31/spark-fold-aggregate-why-not-foldleft</id>
    <content type="html"><![CDATA[<p>大家都知道Scala标准库的List有一个用来做聚合操作的foldLeft方法。</p>

<p>比如我定义一个公司类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Company</span><span class="o">(</span><span class="n">name</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span> <span class="n">children</span><span class="k">:</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">Company</span><span class="o">]</span><span class="k">=</span><span class="nc">Nil</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>它有名字和子公司。
然后定义几个公司：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">companies</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="nc">Company</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">),</span><span class="nc">Company</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">),</span><span class="nc">Company</span><span class="o">(</span><span class="s">&quot;T&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>三家大公司，然后呢，我假设有一家超牛逼的公司把它们给合并了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">companies</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="nc">Company</span><span class="o">(</span><span class="s">&quot;King&quot;</span><span class="o">))((</span><span class="n">king</span><span class="o">,</span><span class="n">company</span><span class="o">)</span><span class="k">=&gt;</span><span class="nc">Company</span><span class="o">(</span><span class="n">name</span><span class="k">=</span><span class="n">king</span><span class="o">.</span><span class="n">name</span><span class="o">,</span><span class="n">king</span><span class="o">.</span><span class="n">children</span><span class="o">:+</span><span class="n">company</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个执行的结果是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">companies</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="nc">Company</span><span class="o">(</span><span class="s">&quot;King&quot;</span><span class="o">))((</span><span class="n">king</span><span class="o">,</span><span class="n">company</span><span class="o">)</span><span class="k">=&gt;</span><span class="nc">Company</span><span class="o">(</span><span class="n">name</span><span class="k">=</span><span class="n">king</span><span class="o">.</span><span class="n">name</span><span class="o">,</span><span class="n">king</span><span class="o">.</span><span class="n">children</span><span class="o">:+</span><span class="n">company</span><span class="o">))</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">Company</span> <span class="o">=</span> <span class="nc">Company</span><span class="o">(</span><span class="nc">King</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">Company</span><span class="o">(</span><span class="n">B</span><span class="o">,</span><span class="nc">List</span><span class="o">()),</span> <span class="nc">Company</span><span class="o">(</span><span class="n">A</span><span class="o">,</span><span class="nc">List</span><span class="o">()),</span> <span class="nc">Company</span><span class="o">(</span><span class="n">T</span><span class="o">,</span><span class="nc">List</span><span class="o">())))</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见foldLeft的结果是一家包含了BAT三大家得新公司。</p>

<p>由List[Company]聚合出一个新的Company，这种属于foldLeft的同构聚合操作。</p>

<p>同时，foldLeft也可以做异构的聚合操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">companies</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)((</span><span class="n">acc</span><span class="o">,</span><span class="n">company</span><span class="o">)</span><span class="k">=&gt;</span><span class="n">acc</span><span class="o">+</span><span class="n">company</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>它的执行结果是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">companies</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)((</span><span class="n">acc</span><span class="o">,</span><span class="n">company</span><span class="o">)</span><span class="k">=&gt;</span><span class="n">acc</span><span class="o">+</span><span class="n">company</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'><span class="n">res7</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="nc">BAT</span>
</span></code></pre></td></tr></table></div></figure>


<p>由List[Company]聚合出一个String。</p>

<p>这样的API感觉很方便，只要是聚合，无论同构异构，都可以用它来做。</p>

<p>最近接触了Spark，其中的RDD是做分布式计算时最常用的一个类。</p>

<p>RDD有一个叫做fold的API，它和foldLeft的签名很像，唯一区别是它只能做同构聚合操作。</p>

<p>也就是说如果你有一个RDD[X]，通过fold，你只能构造出一个X。</p>

<p>如果我想通过一个RDD[X]构造一个Y出来呢？</p>

<p>那就得用aggregate这个API了，aggregate的签名是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">aggregate</span><span class="o">[</span><span class="kt">U</span><span class="o">](</span><span class="n">zeroValue</span><span class="k">:</span> <span class="kt">U</span><span class="o">)(</span><span class="n">seqOp</span><span class="k">:</span> <span class="o">(</span><span class="kt">U</span><span class="o">,</span> <span class="kt">T</span><span class="o">)</span> <span class="k">⇒</span> <span class="n">U</span><span class="o">,</span> <span class="n">combOp</span><span class="k">:</span> <span class="o">(</span><span class="kt">U</span><span class="o">,</span> <span class="kt">U</span><span class="o">)</span> <span class="k">⇒</span> <span class="n">U</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">arg0</span><span class="k">:</span> <span class="kt">ClassTag</span><span class="o">[</span><span class="kt">U</span><span class="o">])</span><span class="k">:</span> <span class="kt">U</span>
</span></code></pre></td></tr></table></div></figure>


<p>它比fold和foldLeft多需要一个combOp做参数。</p>

<p>这让我很不解，同构和异构的API干嘛非得拆成两个呢？怎么不能学Scala的标准库，把它做成类似foldLeft的样子呢？</p>

<p>后来想明白了，这是由于Spark需要分布运算造成的。</p>

<p>先想一下Scala List的foldLeft是怎么工作的？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">companies</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="nc">Company</span><span class="o">(</span><span class="s">&quot;King&quot;</span><span class="o">))((</span><span class="n">king</span><span class="o">,</span><span class="n">company</span><span class="o">)</span><span class="k">=&gt;</span><span class="nc">Company</span><span class="o">(</span><span class="n">name</span><span class="k">=</span><span class="n">king</span><span class="o">.</span><span class="n">name</span><span class="o">,</span><span class="n">king</span><span class="o">.</span><span class="n">children</span><span class="o">:+</span><span class="n">company</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>拿到初始值，即名字为king的公司，把它和list中的第一个公司合并，成为一个包含一家子公司的新公司</li>
<li>把上一步中的新公司拿来和list中的第二个公司合并，成为一个包含两家子公司的新公司</li>
<li>把上一步中的新公司拿来和list中的第三个公司合并，成为一个包含三家子公司的新公司</li>
</ol>


<p>这是同构的过程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">companies</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)((</span><span class="n">acc</span><span class="o">,</span><span class="n">company</span><span class="o">)</span><span class="k">=&gt;</span><span class="n">acc</span><span class="o">+</span><span class="n">company</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>拿到初始值，即空字符串，把它和list中的第一个公司的名字拼在一起，成为B</li>
<li>把上一步中的B第二个公司名字拼一起，成为BA</li>
<li>把上一步中的BA拿来和list中的第三个公司的名字拼一起，成为BAT</li>
</ol>


<p>这是异构的过程。</p>

<p>像多米诺骨牌一样，从左到右依次把list中的元素吸收入结果中。</p>

<p>现在假设RDD[X]中有一个类似foldLeft的API，其签名和foldLeft一致，我现在调用foldLeft，给它一个f:(Y,X)=>Y，接下来该发生什么呢？</p>

<ol>
<li>因为要分布计算，所以我先要把手里的很多个X分成几份，分发到不同的节点上去</li>
<li>每个节点把拿到的很多个X计算出一个Y出来</li>
<li>把所有节点的结果拿来，这时我手里就有了很多个Y</li>
<li>啊。。。我不知道怎么把很多个Y变成一个Y啊。。。</li>
</ol>


<p>由于Spark的RDD不像Scala的List一样只需要推倒一副多米诺骨牌，而是要推倒很多副，最后再对很多副多米诺骨牌的结果做聚合。</p>

<p>这时如果是同构还好，我只需要再用f:(X,X)=>X做一遍就ok了。</p>

<p>但是如果是异构的，那我就必须得再需要一个f:(Y,Y)=>Y了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala中Stream的应用场景及其实现原理]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/10/23/scala-stream-application-scenario-and-how-its-implemented/"/>
    <updated>2014-10-23T17:21:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/10/23/scala-stream-application-scenario-and-how-its-implemented</id>
    <content type="html"><![CDATA[<h1>假设一个场景</h1>

<p>需要在50个随机数中找到前两个可以被3整除的数字。</p>

<p>听起来很简单，我们可以这样来写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">randomList</span> <span class="k">=</span> <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">50</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">Random</span><span class="o">.</span><span class="n">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)).</span><span class="n">toList</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">isDivisibleBy3</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">isDivisible</span> <span class="k">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;$n $isDivisible&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">isDivisible</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">randomList</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个产生50个随机数的函数；</p>

<p>一个检查某数字是否能被3整除的函数；</p>

<p>最后，对含有50个随机数的List做filter操作，找到其中所有能够被3整除的数字，取其中前两个。</p>

<p>把这段代码在Scala的console里面跑一下，结果是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">randomList</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="mi">31</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">71</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">95</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">7</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">38</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">48</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">88</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">52</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">2</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">27</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">90</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">55</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">96</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">91</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">82</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">83</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">8</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">51</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">96</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">27</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">12</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">76</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">17</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">53</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">54</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">70</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">29</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">49</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">12</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">83</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">18</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">6</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">7</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">76</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">51</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">95</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">76</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">85</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">87</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">84</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">44</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">44</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">89</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">84</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">42</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">44</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">0</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">23</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">35</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">55</span> <span class="kc">false</span>
</span><span class='line'><span class="n">res34</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">48</span><span class="o">,</span> <span class="mi">27</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其最终结果固然是没有问题，找到了48和27这两个数字。但是非常明显的可以看出，isDivisibleBy3被调用了50次，找到了远多于两个的能被3整除的数字，但是最后我们只关心其中前两个结果。</p>

<p>这似乎有点浪费，做了很多多余的运算。</p>

<p>对于这个例子来说，这还没什么，我们的List很小，判断整除于否也不是什么耗时操作。</p>

<p>但是如果List很大，filter时所做的运算很复杂的话，那这种做法就不可取了。</p>

<h1>现有解法的优缺点</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">randomList</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码有一个优点：</p>

<p>用描述性、声明性的语言描述了我们要做的事是什么，而无需描述怎么做。我们只需说先用filter过滤一下，然后拿前两个，整件事就完成了。</p>

<p>但是它同时也有一个缺点：</p>

<p>做了多余的运算，浪费资源，而且这个缺点会随着数据量的增大以及计算复杂度的增加而更为凸显。</p>

<h1>试着解决其缺点</h1>

<p>解决多余运算的思路很简单，不要过滤完整个List之后再取前两个。而是在过滤的过程中如果发现已经找到两个了，那剩下的就忽略掉不管了。</p>

<p>顺着这个思路很容易写出如下很像Java的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">first2UsingMutable</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">ListBuffer</span><span class="o">[</span><span class="kt">Int</span><span class="o">]()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">randomList</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">n</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">toList</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">toList</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个可变的List，开始遍历随机数，找到能被3整除的就把它塞进可变List里面去，找够了两个就返回。</p>

<p>执行的结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">first2UsingMutable</span>
</span><span class='line'><span class="mi">31</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">89</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">21</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">29</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">12</span> <span class="kc">true</span>
</span><span class='line'><span class="n">res35</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">21</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，运算量确实变少了，找够了两个就直接收工了。</p>

<p>但是这实在很糟糕，显式使用了return同时还引入了可变量。</p>

<p>有什么东西像是一个foreach循环而又可以不引入可变量呢？fold</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">first2UsingFold</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">randomList</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="nc">Nil</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])((</span><span class="n">acc</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">acc</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="k">return</span> <span class="n">acc</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="n">n</span> <span class="o">::</span> <span class="n">acc</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">acc</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">first2UsingFold</span>
</span><span class='line'><span class="mi">98</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">77</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">68</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">93</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">93</span> <span class="kc">true</span>
</span><span class='line'><span class="n">res36</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">93</span><span class="o">,</span> <span class="mi">93</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果和上面一段代码类似，没有多余的运算。但是由于需要early termination，所以还是摆脱不了return。</p>

<p>这两种解法在去除多余运算这个缺点的同时也把原来的优点给丢掉了，我们又退化回了描述如何做而不是做什么的程度了。</p>

<h1>如何保持代码的表意性而又不用做多余运算呢？</h1>

<p>其实类似的问题是有套路化的解决方案的：使用Stream。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">randomList</span><span class="o">.</span><span class="n">toStream</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="n">toList</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码执行的结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">randomList</span><span class="o">.</span><span class="n">toStream</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="n">toList</span>
</span><span class='line'><span class="mi">86</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">15</span> <span class="kc">true</span>
</span><span class='line'><span class="mi">53</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">20</span> <span class="kc">false</span>
</span><span class='line'><span class="mi">93</span> <span class="kc">true</span>
</span><span class='line'><span class="n">res42</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="mi">93</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见没有多余运算了，而且这行代码和最初代码极为相似，都是通过描述先做filter再做take来完成任务的。缺点没有了，优点也保留了下来。</p>

<p>这同样都是filter和take，代码跟代码的差距咋就这么大呢？</p>

<p>答案就是：因为Stream利用了惰性求值（lazy evaluation），或者也可以称之为延迟执行（deferred execution）。</p>

<p>接下来就看一下这两个晦涩的名词是如何帮助Stream完成工作的吧。</p>

<h1>实现原理</h1>

<p>在这里我借用一下Functional programming in Scala这本书里对Stream实现的代码，之所以不用Scala标准库的源码是因为我们只需要实现filter，take和toList这三个方法就可以展示Stream的原理，就不需要动用重型武器了。</p>

<p>先假设我们自己实现了一个MyStream，它的用法和Stream是类似的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">MyStream</span><span class="o">(</span><span class="n">randomList</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">).</span><span class="n">filter</span><span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="n">toList</span>
</span></code></pre></td></tr></table></div></figure>


<p>以这一行代码为引子，我们来开始解剖MyStream是如何工作的。</p>

<h1>类型签名</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">MyStream</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Empty</span> <span class="k">extends</span> <span class="nc">MyStream</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Cons</span><span class="o">[</span><span class="kt">+A</span><span class="o">](</span><span class="n">h</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="n">A</span><span class="o">,</span> <span class="n">t</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">MyStream</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">extends</span> <span class="nc">MyStream</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个trait叫做MyStream，其中的内容我们暂时忽略掉。</p>

<p>它有两个子类，一个Cons，一个Empty。Empty当然是代表空Stream了。</p>

<p>而Cons则是头尾结构的，头是Stream中的一个元素，尾是Stream中余下的元素。请注意头和尾这两个参数的类型并不是A，头的类型是一个能够返回A的函数，尾的类型是一个能够返回MyStream[A]的函数。</p>

<h1>初始化</h1>

<p>有了以上的类型定义以及头尾结构，我们就可以把很多个Cons加一个Empty（或者是无限多个Cons，没有Empty）连起来就构成一个Stream了，比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Cons</span><span class="o">(()</span><span class="k">=&gt;</span><span class="mi">1</span><span class="o">,()</span><span class="k">=&gt;</span><span class="nc">Cons</span><span class="o">(()</span><span class="k">=&gt;</span><span class="mi">2</span><span class="o">,()</span><span class="k">=&gt;</span><span class="nc">Empty</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以构造一个含有1，2的Stream了。</p>

<p>不过，请注意，上面的说法并不严谨，实际上它是一个包含着两个分别会返回1和2的函数的Stream。</p>

<p>也就是说当上面的代码在构造Cons的时候，1和2还没有“出生”，它们被包在一个函数里，等着被释放出来。</p>

<p>如果说我们通常熟知的一些集合包含的是花朵的话，那Stream所包含的就是花苞，它本身不是花，但是有开出花来的能力。</p>

<h1>Smart初始化</h1>

<p>当然，如果直接暴露Cons的构造函数出去给别人用的话，那这API也未免太不友好了，所以Stream需要提供一个易用的初始化的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">MyStream</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">elems</span><span class="k">:</span> <span class="kt">A*</span><span class="o">)</span><span class="k">:</span> <span class="kt">MyStream</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">elems</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="n">empty</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">cons</span><span class="o">(</span><span class="n">elems</span><span class="o">.</span><span class="n">head</span><span class="o">,</span> <span class="n">apply</span><span class="o">(</span><span class="n">elems</span><span class="o">.</span><span class="n">tail</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">cons</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">hd</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">A</span><span class="o">,</span> <span class="n">tl</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">MyStream</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">MyStream</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">lazy</span> <span class="k">val</span> <span class="n">head</span> <span class="k">=</span> <span class="n">hd</span>
</span><span class='line'>    <span class="k">lazy</span> <span class="k">val</span> <span class="n">tail</span> <span class="k">=</span> <span class="n">tl</span>
</span><span class='line'>    <span class="nc">Cons</span><span class="o">(()</span> <span class="k">=&gt;</span> <span class="n">head</span><span class="o">,</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">tail</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">empty</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span><span class="k">:</span> <span class="kt">MyStream</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Empty</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个没有太多好解释的，我们就是用apply和小写的cons这两个方法来把客户代码原本要写的一大堆匿名函数给代劳掉。</p>

<p>需要注意的一点是apply方法看似是递归的，好像是你调用它的时候如果给它n个元素的话，它会自己调用自己n-1次。事实上它确实会调用自己n-1次，但是并不是立即发生的，为什么呢？</p>

<p>因为小写的cons方法所接受的第二个参数不是eager evaluation的，这就会使得apply(elems.tail: _*)这个表达式不会立即被求值。这就意味着，apply缺失会被调用n次，但是这n次并不是一次接一次连续发生的，它只会在我们对一个Cons的尾巴求值时才会发生一次。</p>

<p>如果说普通的集合中包含的是数据的话，那Stream中所包含的就是能够产生数据的算法。</p>

<p>如何？是不是花朵花苞的感觉又回来了？</p>

<p>还记得我们开始剖析的时候那句代码是什么吗？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">MyStream</span><span class="o">(</span><span class="n">randomList</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">).</span><span class="n">filter</span><span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="n">toList</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们算是把MyStream(randomList: _*)这一小点说清了。</p>

<p>接下来看MyStream(randomList: _*).filter(isDivisibleBy3)是如何work的。</p>

<h1>filter</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">MyStream</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">filter</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">MyStream</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Cons</span><span class="o">(</span><span class="n">h</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">(</span><span class="n">h</span><span class="o">()))</span> <span class="n">cons</span><span class="o">(</span><span class="n">h</span><span class="o">(),</span> <span class="n">t</span><span class="o">().</span><span class="n">filter</span><span class="o">(</span><span class="n">p</span><span class="o">))</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">t</span><span class="o">().</span><span class="n">filter</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Empty</span> <span class="k">=&gt;</span> <span class="n">empty</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法定义在基类里，又是一个看似递归的实现。</p>

<p>为什么说是看似呢？因为在</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">(</span><span class="n">h</span><span class="o">()))</span> <span class="n">cons</span><span class="o">(</span><span class="n">h</span><span class="o">(),</span> <span class="n">t</span><span class="o">().</span><span class="n">filter</span><span class="o">(</span><span class="n">p</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码中我们又用到了小写的cons，它所接受的参数不会被立即求值。也就是说filter一旦找到一个合适的元素，它就不再继续跑了，剩下的计算被延迟了。</p>

<p>比较值得提一下的是：这里的h()是什么呢？h是构造Cons时的第一个参数，它是什么类型的？()=>A。它就是之前提到的能够生产数据的算法，就是那个能够开出花朵的花苞。在这里我们说h()，就是在调用这个函数来拿到它所生产的数据，就是让一个花苞开出花朵。</p>

<h1>take</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">MyStream</span><span class="o">(</span><span class="n">randomList</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">).</span><span class="n">filter</span><span class="o">(</span><span class="n">isDivisibleBy3</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来就该说take是如何work的了。在这里我们可以回顾一下，MyStream(randomList: _*)返回一个类型为MyStream[Int]，其中包含很多个可以返回Int的函数的容器。然后我们调用了这个容器的filter方法，filter又返回一个包含很多个可以返回Int的函数的容器。请注意，到这里为止，真正的计算还没有开始，真正的计算被包含到了一个又一个的函数（花苞）中，等待着被调用（绽放）。</p>

<p>那对filter的结果调用take又会怎样呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">MyStream</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">take</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">MyStream</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">this</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Cons</span><span class="o">(</span><span class="n">h</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">=&gt;</span> <span class="n">cons</span><span class="o">(</span><span class="n">h</span><span class="o">(),</span> <span class="nc">MyStream</span><span class="o">.</span><span class="n">empty</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Cons</span><span class="o">(</span><span class="n">h</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">cons</span><span class="o">(</span><span class="n">h</span><span class="o">(),</span> <span class="n">t</span><span class="o">().</span><span class="n">take</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">MyStream</span><span class="o">.</span><span class="n">empty</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="nc">MyStream</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看过了前面的apply和filter之后，take就显得顺眼了很多。我们又见到了小写的cons，条件反射一般，我们就可以意识到，只要看见cons，那就意味着作为它的参数的表达式不会被立即求值，那这就意味着计算被放到了函数里，稍后再执行。那稍后到底是什么时候呢？</p>

<p>那就得看下面的toList了。</p>

<h1>toList</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">MyStream</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">toList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Cons</span><span class="o">(</span><span class="n">h</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">h</span><span class="o">()</span> <span class="o">::</span> <span class="n">t</span><span class="o">().</span><span class="n">toList</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Empty</span> <span class="k">=&gt;</span> <span class="nc">Nil</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>又是一个递归实现，但是这次可不是看似递归了，这次是实打实的递归：只要还没有遇到空节点，就继续向后遍历。这次没有使用cons，没有任何计算被延迟执行，我们通过不断地对h()求值，来把整个Stream中每一个能够生产数据的函数都调用一遍以此来拿到我们最终想要的数据。</p>

<h1>总结</h1>

<p>要把以上的代码细节全部load进脑子跑一遍确实不太容易，我们人类的大脑栈空间太浅了。</p>

<p>所以我们试着从上面所罗列出的纷繁的事实中抽象出一些适合人脑理解的描述性语句吧：</p>

<ul>
<li>List(1,2,3)会构造一个容器，容器中包含数据</li>
<li>List(1,2,3).filter(n=>n>1)会构造出一个新的容器，其中包含2和3，这两块具体的数据</li>
<li><p>List(1,2,3).filter(n=>n>1).take(1)会把上一步中构造成的容器中的第一块数据取出，放入一个新容器</p></li>
<li><p>MyStream(1,2,3)也会构造一个容器，但是这个容器中不包含数据，它包含能够生产数据的算法</p></li>
<li>MyStream(1,2,3).filter(n=>n>1)也会构造出一个新的容器，这个容器中所包含的仍然是算法，是基于上一步构造出的能生产1，2，3的算法之上的判断数字是否大于1的算法</li>
<li>MyStream(1,2,3).filter(n=>n>1).take(1)会把上一步中构造成的算法容器中的第一个算法取出，放入一个新容器</li>
<li>MyStream(1,2,3).filter(n=>n>1).take(1).toList终于把上面所有步骤构造出的算法执行了，从而得到了最终想要的结果</li>
</ul>


<p>上面对List和Stream的应用的区别在哪儿呢？</p>

<p>就在于List是先把数据构造出来，然后在一堆数据中挑选我们心仪的数据。</p>

<p>而Stream是先把算法构造出来，挑选心仪的算法，最后只执行一大堆算法中我们需要的那一部分。</p>

<p>这样，自然就不会执行多余的运算了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solving regular problems in scala]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/09/06/solving-regular-problems-in-scala/"/>
    <updated>2014-09-06T20:28:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/09/06/solving-regular-problems-in-scala</id>
    <content type="html"><![CDATA[<iframe src="http://cuipengfei.github.com//slides.com/pengfeicui/solving-regular-problems-in-scala/embed" width="800" height="600" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desugar Scala(17) -- Option和for，以及脑子里发生的事情]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/08/30/options-for/"/>
    <updated>2014-08-30T11:36:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/08/30/options-for</id>
    <content type="html"><![CDATA[<p>Scala里的for关键字是个很有趣的东西。可以用来把多层嵌套for循环写成一层。比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">i</span><span class="k">&lt;-</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">10</span><span class="o">;</span><span class="n">j</span><span class="k">&lt;-</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">10</span><span class="o">;</span><span class="n">k</span><span class="k">&lt;-</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">10</span><span class="o">)</span> <span class="k">yield</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;$i $j $k&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码执行的结果是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">6</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">7</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">8</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">9</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">1</span> <span class="mi">10</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">6</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">7</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">8</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">9</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">10</span>
</span><span class='line'><span class="o">......</span>
</span><span class='line'><span class="o">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，就可以用一行代码写出三层循环的效果。代码看起来非常紧凑，噪音很少。</p>

<p>但是今天主要要说的不是这种for，而是它和Option结合的写法。</p>

<p>Option本身是一个抽象类，代表一个可能存在，也可能不存在的值（那谁谁的喵？）。它有两个实现类，分别是Some和None。顾名思义，Some代表有值，None代表没有。</p>

<p>实际上，上面的说法不够准确，Some是一个实现类，而None实际是一个单例，不过这点对后面的内容没影响。</p>

<p>现在设想一个很简单的场景，需要用单价和数量来算总价，而单价和数量未必拿得到，那代码大概会是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">calculateTotal</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">price</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">getPrice</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">amount</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">getAmount</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">price</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">||</span> <span class="n">amount</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">None</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Some</span><span class="o">(</span><span class="n">price</span><span class="o">.</span><span class="n">get</span> <span class="o">*</span> <span class="n">amount</span><span class="o">.</span><span class="n">get</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>getPrice和getAmount都返回一个Option[Int]，就类似Java中Integer可以为null一样。计算出来的总价也是一个Option[Int]，说不定会有，也说不定没有。</p>

<p>在这段代码中先检查单价和数量是否存在，如果二者中任意一个不存在，那就返回None，代表无法求得总价。如果二者都存在，那就将二者的乘积用Some包起来返回。</p>

<p>这代码看起来还ok，很常规的写法，但是稍显啰嗦。如果用上for的话，可以大大简化这段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">calculateTotalWithFor</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">price</span> <span class="k">&lt;-</span> <span class="n">getPrice</span><span class="o">;</span> <span class="n">amount</span> <span class="k">&lt;-</span> <span class="n">getAmount</span><span class="o">)</span> <span class="k">yield</span> <span class="n">price</span> <span class="o">*</span> <span class="n">amount</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法体只有一行了，而它实现出来的行为和上面那段代码是完全一致的。</p>

<p>这感觉好神奇啊，不用判断价格和数量是否存在，也不需要根据判断结果决定到底返回None还是Some。它是怎么搞的呢？</p>

<p>看一下反编译的结果吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Option</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">calculateTotalWithFor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">getPrice</span><span class="o">().</span><span class="na">flatMap</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractFunction1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">final</span> <span class="n">Option</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">OptionAndFor</span><span class="o">..</span><span class="na">MODULE</span><span class="n">$</span><span class="o">.</span><span class="na">account</span><span class="n">$of$OptionAndFor$$getAmount</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractFunction1</span><span class="o">.</span><span class="na">mcII</span><span class="o">.</span><span class="na">sp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">price$1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">apply</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">apply$mcII$sp</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">int</span> <span class="n">apply$mcII$sp</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">price</span> <span class="o">*</span> <span class="n">amount</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个反编译的结果很不好读，不过还是可以看出个大概。它先是对getPrice的返回值调用了flatMap，给其传入一个匿名函数（AbstractFunction1），在这个匿名函数里面又对getAmount的返回值调用了map，也给其传入了一个匿名函数，再在这第二层匿名函数里做了乘法运算。</p>

<p>如果用Scala把它表达出来，是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">calculateTotalWithFlatMapAndMap</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">getPrice</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">price</span> <span class="k">=&gt;</span> <span class="n">getAmount</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">amount</span> <span class="k">=&gt;</span> <span class="n">amount</span> <span class="o">*</span> <span class="n">price</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可见，上面使用for的代码的神奇之处在于它利用了Option的flatMap和map方法。</p>

<p>这两个方法具有一个共同特征：如果被调用flatMap或者map的当前Option实例为None的话，则忽略传入的匿名函数，直接返回None。</p>

<p>这很容易理解，要参与运算的成员之一已经是None了，那就不用管剩下的成员到底是啥了，它随便是啥，最终的计算结果都会是None。这和最初写出的用 || 运算符的代码的逻辑是一致的。</p>

<p>到此为止，我们给Option和for的结合使用脱光了衣服，它就是利用Option的flatMap和map来实现紧凑的代码的。</p>

<h3>神奇之处不仅在于更短的代码，还在于它提高了信噪比，给我们提供了更加简化的思考模型</h3>

<p>最初那段用if else的代码，在写它或者读它的时候，我们的脑子里面发生了什么呢？</p>

<pre><code>1. 要获取价格和数量
2. 要判断价格是否为空，要判断数量是否为空        （与业务关联较小，属于技术范畴）
3. 如果任意一个为空，结果是空                 （与业务关联较小，属于技术范畴）
4. 如果两个都不是空，再做乘法运算
</code></pre>

<p>而在写或者读用for的那段代码的时候，脑子里又是怎么想的呢？</p>

<pre><code>1. 获取价格和数量
2. 做乘法运算
</code></pre>

<p>我们写这段代码的目的是要表述业务逻辑，是要给未来读代码的人传递和业务相关的信息。</p>

<p>而空值判断是偏技术的，把这种代码消掉，我们传递给其他程序员的信息里就含有更少的与业务无关的噪音。而且我们自己写起来的时候，脑子里也不需要考虑那么多的东西。</p>

<p>对自己，对他人都有利。这实在是一个美妙的语言特性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大理]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/08/10/da-li/"/>
    <updated>2014-08-10T20:38:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/08/10/da-li</id>
    <content type="html"><![CDATA[<p>昆明机场，等待去大理的飞机</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t5jg23zj20hs0nu0wt.jpg" width="800" alt="：）" /></p>

<p>下了飞机，出租车上，窗外有云，和蓝天</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t5lh0jvj21w02io1ky.jpg" width="800" alt="：）" /></p>

<p>第二天早上，帮校长画墙</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t6vgeh4j20f20qowfs.jpg" width="800" alt="：）" /></p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t6umefgj20qo0f23zj.jpg" width="800" alt="：）" /></p>

<p>王鹏和顺子也在画</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t5ohwv6j21w02ioe82.jpg" width="800" alt="：）" /></p>

<p>去环绕洱海</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t5rds9nj22io1w0x6p.jpg" width="1200" alt="：）" /></p>

<p>视野开阔，水面如镜</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t5tphlyj22io1w0kjl.jpg" width="1200" alt="：）" /></p>

<p>云，与水，与山</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t5vwmxkj22io1w0kjl.jpg" width="1200" alt="：）" /></p>

<p>云诡</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t5yjz3ij22io1w0kjl.jpg" width="1200" alt="：）" /></p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t677ddmj22io1w0u0x.jpg" width="1200" alt="：）" /></p>

<p>无尽的路</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t6cjok0j21w02io7wi.jpg" width="1200" alt="：）" /></p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t6ouqxcj22io1w04qq.jpg" width="1200" alt="：）" /></p>

<p>你是一株什么植物？</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t6ilxm1j22io1w0b2a.jpg" width="1200" alt="：）" /></p>

<p>你又是一簇什么花？</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t6lishyj22io1w0x6p.jpg" width="1200" alt="：）" /></p>

<p>晚上回来，墙画好了</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7twb68w8j20np0hsdh6.jpg" width="1200" alt="：）" /></p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7twfj2qfj20np0hs76x.jpg" width="1200" alt="：）" /></p>

<p>大门口也颇有点样子了</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7twdzj0gj20np0hs76v.jpg" width="1200" alt="：）" /></p>

<p>晒出一条麒麟臂</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t6tr10gj20qo0zkgya.jpg" width="1200" alt="：）" /></p>

<p>你是谁家的狗？</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t6xx53lj21w02iou0x.jpg" width="1200" alt="：）" /></p>

<p>为什么一到饭点就来？</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t70jalbj22io1w0npd.jpg" width="1200" alt="：）" /></p>

<p>扎染的布，不需要买一匹</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t740ay1j22io1w0kjm.jpg" width="1200" alt="：）" /></p>

<p>走，去喝酒</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tb6qowij20qo0f0dgu.jpg" width="1200" alt="：）" /></p>

<p>尼玛，为什么这么悲壮？</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tb7fs00j20qo0f0ta4.jpg" width="1200" alt="：）" /></p>

<p>洱海门下听歌</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7tb8ywj6j20qo0f00u6.jpg" width="1200" alt="：）" /></p>

<p>被雨困住走不了</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tb9y5zbj20qo0f0abc.jpg" width="1200" alt="：）" /></p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbb7rv4j20qo0k076g.jpg" width="1200" alt="：）" /></p>

<p>时间的轨迹变得模糊，不记得这是哪天晚上，大家在画墙</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t74us92j20hs0nujup.jpg" width="800" alt="：）" /></p>

<p>燕子来了，走，我们再去一次洱海</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbhdshdj20hs0d9dgm.jpg" width="800" alt="：）" /></p>

<p>Kratos ！ ！ ！</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tbi2kq4j20hs0d9mxy.jpg" width="800" alt="：）" /></p>

<p>大家都骑的自行车，是的</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tbc1njnj20hs0dc0to.jpg" width="800" alt="：）" /></p>

<p>停车拍照</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tbjyfjgj20hs0npmyw.jpg" width="800" alt="：）" /></p>

<p><img src="http://ww3.sinaimg.cn/mw690/8b1ece2agw1ej7tbj3z0mj20hs0dc0tz.jpg" width="800" alt="：）" /></p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t7xldcyj22io1w0x6p.jpg" width="800" alt="：）" /></p>

<p>又是波谲云诡
<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t99kua8j28c01ss4qv.jpg" target="_blank">点击看大图</a></p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t99kua8j28c01ss4qv.jpg" width="4000" alt="：）" /></p>

<p>又是无尽的路</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t9nv70uj22io1w0u0x.jpg" width="1200" alt="：）" /></p>

<p>无尽的路全景
<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7taa5gkrj28c01ssx6v.jpg" target="_blank">点击看大图</a></p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7taa5gkrj28c01ssx6v.jpg" width="4000" alt="：）" /></p>

<p>左手山，右手水
<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tatvzpgj28c01ssb2g.jpg" target="_blank">点击看大图</a></p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tatvzpgj28c01ssb2g.jpg" width="4000" alt="：）" /></p>

<p>这是我们当天的队伍</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tb640cfj20hs0d9js4.jpg" width="800" alt="：）" /></p>

<p>下午累了，吃蛋炒饭。我的索马里海盗造型。</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tb496o3j20hs0nuafg.jpg" width="800" alt="：）" /></p>

<p>脚蹬子掉了，海盗修车</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tb55t2mj20hs0dgab4.jpg" width="800" alt="：）" /></p>

<p>这是哪天的饭？</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tbglwrxj20k00qodjf.jpg" width="800" alt="：）" /></p>

<p>翻墙</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7tcodq6nj20qo0f275v.jpg" width="800" alt="：）" /></p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tcmilqjj20qo0f2jsp.jpg" width="800" alt="：）" /></p>

<p>降魔杵</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7vgwbjczj20k00qodj2.jpg" width="800" alt="：）" /></p>

<p>寺外全景
<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tc6hvxsj28c01ssu12.jpg" target="_blank">点击看大图</a></p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tc6hvxsj28c01ssu12.jpg" width="800" alt="：）" /></p>

<p><a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbxyah7j28c01ssqvc.jpg" target="_blank">点击看大图</a></p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbxyah7j28c01ssqvc.jpg" width="800" alt="：）" /></p>

<p>此为何物？</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7vgyuar9j20k00qo0ww.jpg" width="800" alt="：）" /></p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7vgxhsk3j20qo0k00u8.jpg" width="800" alt="：）" /></p>

<p>我要撤了，大家包饺子</p>

<p><img src="http://ww2.sinaimg.cn/mw690/8b1ece2agw1ej7tcgqk6lj20dc09zaac.jpg" width="600" alt="：）" /></p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7tchgeihj209y0dcmxl.jpg" width="400" alt="：）" /></p>

<p><img src="http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7tciado3j209y0dcmxd.jpg" width="400" alt="：）" /></p>

<p><img src="http://ww4.sinaimg.cn/mw690/8b1ece2agw1ej7tcjbj5cj20hs0nsdgw.jpg" width="600" alt="：）" /></p>

<p>合影</p>

<p><img src="http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7tcbixf4j20f00qowgu.jpg" width="600" alt="：）" /></p>

<p>再见！</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tceiarqj22io1w0x6p.jpg" width="1000" alt="：）" /></p>

<p>我走之后棚子搭好了</p>

<p><img src="http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7vgv5561j20qo0k0adm.jpg" width="600" alt="：）" /></p>

<p><img src="http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7vgt5k59j20qo0k0di4.jpg" width="600" alt="：）" /></p>

<p>大家还在一起吃饭</p>

<p><img src="http://ww3.sinaimg.cn/mw690/8b1ece2agw1ej7tckandsj20qo0f00ua.jpg" width="600" alt="：）" /></p>

<p><img src="http://ww4.sinaimg.cn/mw690/8b1ece2agw1ej7tcl911qj20qo0f0763.jpg" width="600" alt="：）" /></p>

<p>故事还在继续</p>

<pre><code>THE END
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在使用play framework的evolutions？需要支持SQL Server？用Liquibase吧]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/07/18/play-evolutions-to-liquibase/"/>
    <updated>2014-07-18T15:11:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/07/18/play-evolutions-to-liquibase</id>
    <content type="html"><![CDATA[<p>我所在的项目在用Scala + Play framework做一个web app。</p>

<p>Play自带的evolutions是一个DB Migration工具，从一开始我们就在用它来做所有阶段的数据迁移工作。</p>

<p>运行自动化测试时它可以帮每个测试用例在H2中创建数据（H2是Play默认的内存数据库）。
在下一个测试用例运行时evolutions则会创建一份和上次完全相同的新数据，这样我们的测试可以获得独立性而不用担心之前的测试遗留的副作用。也不用担心会给下一个测试遗留下什么脏数据。</p>

<p>在测试或者部署环境中运行时它也可以针对Postgres做数据迁移。</p>

<p>这一切看起来都挺好，我们就差喊evolutions是我们忠实的好伙伴了。</p>

<p>但是，快到给终端客户部署时，某一家客户提出他们一定要使用SQL Server，我们最初提出的使用Postgres他们不接受了。这时我们才发现evolutions的设计初衷就是在开发和测试阶段提供便利性，它根本就没想成为一个production ready的东西。</p>

<p>这样看来我们必须得寻找一个正经的DB Migration的工具了。而且这个DB Migration工具一定要满足以下几点：</p>

<ol>
<li>能够在运行自动化测试时和H2结合使用（因为我们已经有很多测试在依赖于H2跑了，要换掉成本较高）</li>
<li>能支持多种数据库（今天有人要SQL Server的支持，明天说不定还会有人要其他的）</li>
<li>在支持多种数据库时不需要我们写不同风格的SQL脚本（要写出让各个DB都不挑剔的SQL实在是太费劲了）</li>
</ol>


<p>我最先想到的就是Flyway，之前用过，而且TW的tech radar也提到过它。</p>

<p>但是它并没有入选，原因在于上面的第三点。Flyway要求使用者自己提供执行所需的SQL脚本。
这就意味着我们写SQL时需要同时兼顾H2，Postgres，SQL Server的异同。而且还无法预知未来的其他数据库会对我们现在写出的SQL脚本产生什么样的影响。</p>

<p>最后我们选择了Liquibase，我们可以通过JSON，YAML，或者XML来定义数据。Liquibase自己负责把我们定义的数据翻译给各种不同的数据库。</p>

<p>这样，通过一层中间语言。我们就隔离了数据库的差异对我们开发工作可能会造成的影响。</p>

<p>Ok，要用Liquibase这个大方向就确定了。但是具体怎么把它跑起来呢？在什么时机跑它呢？</p>

<p>用脚本跑？</p>

<p>Liquibase确实提供了Standalone，我们可以用脚本来调用它。</p>

<p>但是这怎么和build结合起来呀？在测试时调用它？在app启动时调用它？</p>

<p>那H2运行的端口每次都未必是一样的，这怎么办啊？</p>

<p>这个方案想想就费劲。</p>

<p>把它做成sbt的一个task？</p>

<p>这样确实比直接用脚本要稍微距离我们的build近一点，但是还是会有类似的问题。我们需要显式地去调用它，还要选择合适的时机去调用它。实现起来也会很麻烦。</p>

<p>而实际上，Play自己是支持plug in的。我们想要控制执行时机，而有谁比Play自己更了解它的运行时机呢？</p>

<p>而且已经有人做了liquibase play plug in。我把它fork了一份，更新了liquibase和play的版本，提高了log的level。并且部署到了sonatype去。</p>

<p>由于是Play自己的plug in，不是我们试图插入的生硬的脚本或者sbt task。Play自己知道该在什么合适的时机去执行它。</p>

<p>下面说一下如何应用它吧。</p>

<ul>
<li>在所有的conf文件中删掉所有和evolutions有关的配置</li>
</ul>


<p>这两个东西不能一起用，要不然我们需要同时维护两种DB Migration的脚本。</p>

<ul>
<li>在dependencies中加入这一项：</li>
</ul>


<p>&#8220;com.github.cuipengfei&#8221; % &#8220;play-liquibase_2.11&#8221; % &#8220;1.1&#8221;</p>

<p>很明显，这是用来引入这个plugin的。</p>

<ul>
<li>在conf目录下创建一个名为play.plugins的文件，在其中写入：</li>
</ul>


<p>400:com.github.cuipengfei.LiquibasePlugin</p>

<p>冒号前的400用来定义plugin的执行优先级，Play会由此决定何时执行该plugin。</p>

<p>冒号后是plugin的完全限定名。</p>

<ul>
<li>在你需要的conf文件中加入两行：</li>
</ul>


<p>liquibaseplugin=enabled</p>

<p>applyLiquibase.default=true</p>

<p>这样用来启用该plugin。</p>

<ul>
<li>在conf/liquibase/default/下创建一个modules.xml。</li>
</ul>


<p>在其中写入你的数据定义。（具体如何写，liquibase的官网有详细的介绍）</p>

<p>如果你用的数据库名字不是default，相应的替换就ok了。</p>

<p>这样，就大功告成了。</p>

<p>当你用sbt运行自动化测试时，liquibase会帮你创建数据。</p>

<p>当你在本地调试运行时，liquibase会帮你set up数据库。</p>

<p>当应用被部署到生产环境下去的时候，liquibase也可以帮你在第一次运行时进行数据的初创。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[论“如果trait有方法实现，那么Java类就不能实现这个trait”这句话是错的]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/06/28/scala-java-interop-trait-with-impl/"/>
    <updated>2014-06-28T12:55:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/06/28/scala-java-interop-trait-with-impl</id>
    <content type="html"><![CDATA[<p>最近还是在看郑大翻译的《Scala程序设计》，其中第十一章还有一句话：</p>

<blockquote><p>如果trait有方法实现，那么Java类就不能实现这个trait</p></blockquote>

<p>口说还是无凭，还是拍照为证：</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1ehtqjokutnj21kw23u7wh.jpg" alt="" /></p>

<p>我感觉这句话是错的，下面寻根究底地探索一下。</p>

<p>trait这个语言特性<a href="http://cuipengfei.me/blog/2013/10/13/scala-trait/">前面的博文</a>讲过。</p>

<p>一个含有方法实现的trait会被编译成一个interface，还有一个含有实现的静态方法。</p>

<p>所有extends或者是with这个trait的Scala类，实际上都是implements了这个interface，在具体实现中调用了静态方法。</p>

<p>快速的简单回忆一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">HappyThoughts</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">whatAreYouThinking</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot; food :D &quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义一个含有方法实现的trait。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="k">extends</span> <span class="nc">Animal</span> <span class="k">with</span> <span class="nc">HappyThoughts</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后让Dog去with这个trait。</p>

<p>之后就可以这样调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">new</span> <span class="nc">Dog</span><span class="o">().</span><span class="n">whatAreYouThinking</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就能打印出food :D了。虽然Dog本身是空的，但是因为with了一个trait，它也拥有了一些行为。</p>

<p>再来看看反编译出的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HappyThoughts</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">whatAreYouThinking</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">HappyThoughts</span><span class="n">$class</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">whatAreYouThinking</span><span class="o">(</span><span class="n">HappyThoughts</span> <span class="n">$this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">Predef</span><span class="o">..</span><span class="na">MODULE</span><span class="n">$</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot; food :D &quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">$init$</span><span class="o">(</span><span class="n">HappyThoughts</span> <span class="n">$this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>HappyThoughts就是上面这样的，一个interface，还有一个含有实现的静态方法。</p>

<p>Dog则是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">extends</span> <span class="n">Animal</span> <span class="kd">implements</span> <span class="n">HappyThoughts</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">whatAreYouThinking</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">HappyThoughts</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">whatAreYouThinking</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Dog</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">HappyThoughts</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="n">$init$</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它implements了HappyThoughts，其实现则依赖于上面提到的静态方法。</p>

<p>Ok，足够清晰了。</p>

<p>这么一个trait，当真在Java中不可以利用吗？</p>

<p>写点代码试试看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DogJ</span> <span class="kd">implements</span> <span class="n">HappyThoughts</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">whatAreYouThinking</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HappyThoughts$class</span><span class="o">.</span><span class="na">whatAreYouThinking</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本照抄上面反编译的代码。这段Java代码是可以编译的，而且也可以运行，运行结果也是打印出了food :D。</p>

<p>这次，我就不去探寻旧版本的Scala是如何处理trait的了。我们只要知道当前版本（比如我用的2.10.4）的Scala中定义的含有方法实现的trait，拿到Java中依然是可用的就行了。虽说用起来有一点蹩脚，但终归是可用的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[论“如果Scala类有方法接收闭包，这些方法在Java里就不可用，因为Java目前尚不支持闭包。”这句话是错的]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/06/27/scala-java-interop-closure/"/>
    <updated>2014-06-27T20:54:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/06/27/scala-java-interop-closure</id>
    <content type="html"><![CDATA[<p>最近在看郑大翻译的《Scala程序设计》，其中第十一章有一句话：</p>

<blockquote><p>如果Scala类有方法接收闭包，这些方法在Java里就不可用，因为Java目前尚不支持闭包。</p></blockquote>

<p>口说无凭，拍照为证：</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1ehszbfbsj1j20xc18g17s.jpg" alt="" /></p>

<p>当时看到这句话就感觉不对。因为JVM本身没有对函数式编程提供任何支持，所以无论是Java中常用的Guava，还是Scala，其对闭包的支持都是通过用类来包裹函数实现的。</p>

<p>如果说Java目前（其时Java 8还没面世）尚不支持闭包，那倒是还说得过去，因为毕竟是要用类包裹一层，不算真正的函数传递。</p>

<p>但是说如果Scala类有方法接收闭包，这些方法在Java里就不可用，那就不对了，包一层匿名内部类，我不还是能用吗？虽说不太好看，也不能说不能用啊。</p>

<p>为了验证一下，写点代码来试试吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">OnePluser</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">func</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">func</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先定义一个Scala类，OnePluser，它有一个plusOne方法，接收一个函数，给函数的返回值加1，然后返回。非常简单。</p>

<p>在Scala里可以这么调用它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">OnePluserCaller</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">callIt</span><span class="o">()</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">OnePluser</span><span class="o">().</span><span class="n">plusOne</span><span class="o">(()</span> <span class="k">=&gt;</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一样的简单，一个匿名函数传给它，这个匿名函数返回一个写死的5。这样最后的返回值会是6。</p>

<p>这段代码如果反编译成Java，会是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OnePluserCaller</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">callIt</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">OnePluser</span><span class="o">().</span><span class="na">plusOne</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractFunction0</span><span class="o">.</span><span class="na">mcI</span><span class="o">.</span><span class="na">sp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">apply</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">apply$mcI$sp</span><span class="o">();</span> <span class="o">}</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">int</span> <span class="n">apply$mcI$sp</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="mi">5</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>毫不出奇，调用plusOne的地方需要提供一个不接收参数，返回一个Int的函数，这个函数在Scala里是() => 5，编译出来就是一个AbstractFunction0的实例，其中的apply方法返回一个写死的5。可以想见，在plusOne中就会调用这个apply方法（已验证，非臆测）。</p>

<p>既然Scala的编译器可以用这种方式来实现函数的传递，那在Java代码中难道就不可以吗？</p>

<p>我们写点代码来验证一下吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">scala.runtime.AbstractFunction0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OnePluserCallerJ</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">callIt</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">OnePluser</span><span class="o">().</span><span class="na">plusOne</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractFunction0</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">5</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码基本就是照上面的反编译结果照抄的，AbstractFunction0的定义在scala.runtime.AbstractFunction0里，在scala-library-xxx.jar里。xxx是版本号。</p>

<p>上面的代码可以编译，可以运行，而且也可以得到6这个返回值。</p>

<p>由此可以证明在当前的Scala版本下（我现在用的是2.10.4）作者的这段话是不成立的。</p>

<p>但是，当时呢？</p>

<p>我查了一下，这本书的出版日期是09年，然后查了一下Scala的版本，08年的版本是2.7.7。于是我下载了scala-library-2.7.7.jar。发现其中确实没有AbstractFunction0的定义，但是现在版本的AbstractFunction0是实现了Function0的，而Function0的定义在2.7.7中是有的。而当时如果在Java中写一个实现了Function0的匿名内部类，不也是可行的吗？</p>

<p>Ok，不关注那么老的事儿了，可以确定的一点是，在当前版本下，在Java中是可以调用Scala中定义的接收闭包的函数的。</p>

<p>THE END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala + Play + sbt + Protractor = one build]]></title>
    <link href="http://cuipengfei.github.com/blog/2014/06/22/scala-plus-play-plus-sbt-plus-protractor-equals-one-build/"/>
    <updated>2014-06-22T17:00:00+05:30</updated>
    <id>http://cuipengfei.github.com/blog/2014/06/22/scala-plus-play-plus-sbt-plus-protractor-equals-one-build</id>
    <content type="html"><![CDATA[<p>我所在的项目的技术栈选用的是Play framework做后端API，前端用Angular JS。</p>

<p>因为用了Scala和Play，构建工具很自然用的就是sbt。</p>

<p>而由于前端用了Angular，所以functional test就选用了和Angular结合较好的protractor。</p>

<p>这一切看起来似乎很美好，一个无状态的后端，一个数据和UI双向绑定的前端。What could possibly go wrong？</p>

<p>一开始也确实如此，没什么问题。我们为了让functional test在CI上跑起来，写了一个脚本来把play dist打出的包部署到CI所在机器上，然后运行protractor。</p>

<p>这个脚本运行还算ok，偶尔有点小问题，修一修也就好了。</p>

<p>不过，这也就是说有两个因素可能会使得我们的CI挂掉，一个是用sbt跑的specs2的测试，一个是protractor的测试。而protractor的测试是基于我们自己所写的脚本的，与sbt没啥关系。</p>

<h3>麻烦来了</h3>

<p>上周五的show case，我们一个小时后就要给客户演示现有产品的示例，但是CI挂掉了，新的代码没法走到QA和UAT的环境，bug fix也过不去。</p>

<p>最后我们不得不修改jenkins的配置，把sbt test和protractor的test都暂时禁掉，才让最新的代码到了UAT上去。而这一切，是在show case之前一分钟才解决掉的。</p>

<p>事情总是这样的，出一两次小问题，修修改改就好，我们不会注意到其危害，不会想到其风险。直到琐碎的积累导致了严重的后果，我们才会正视问题的存在。而这个时候问题或许已经复杂和严重到不可修复或者是要花很大成本修复的地步了。保持一个健康的CI是如此。写代码的每一个细节也是如此。</p>

<p>还好，很幸运，我们的问题还没有那么严重，还来得及修。</p>

<p>在决定要修之后，先</p>

<h3>定义一下问题是啥</h3>

<p>往简单里说，就是CI不稳定，动不动就随便挂。</p>

<p>说的再细一些，就是我们手写脚本去做部署和测试这件事算是重新发明了轮子。而这个轮子不如已有的经过打磨的轮子那么精巧细致，那么稳定好用。以至于我们的CI偶尔就要出格一次。</p>

<p>Ok，问题定义清楚了，那么想想解决方案吧。</p>

<p>但是，在提出具体的方案之前，先想想，如果把这个现时还未存在的解决方案作用在现有问题之上，会收获一个什么样的结果呢？</p>

<h3>验证标准</h3>

<p>基于以上所述，我想解决这个问题的方案要满足以下3点：</p>

<ol>
<li>能让CI重回稳定</li>
<li>一条命令行执行整个build</li>
<li>不要再自己造轮子了</li>
</ol>


<p>第1，2点毋庸赘言，这就是我们问题的核心。关于第3点，是因为我们没有时间精力，也实在没有必要造这个轮子，如果能找到现有的轮子能够解决问题，而且还比我们自己的木头胶皮轮子好用，那岂不妙哉？</p>

<p>于是，我要开始寻找一个能让CI重归稳定的神圣轮子了！让探险的旅途就此展开吧！</p>

<p><img src="http://static.comicvine.com/uploads/original/7/75497/2189954-aragorn247_screen.jpg" height="300" width="400" alt="图" /></p>

<h3>开始寻找轮子</h3>

<p>我最初的想法是用play的test framework，其中已经集成了selenium，用来做functional test很是合适。但是由于我们基于protractor的测试数量已经不少了，全部重写成本较高，所以这个轮子就放弃了。</p>

<h3>残念，再看下一个轮子</h3>

<p>再然后我想到的是自定义一个sbt的task，这个task依赖于sbt已有的run。</p>

<p>这样就能在我的task启动之前把play跑起来，而task本身运行protractor的测试，再之后则杀掉正在运行的play app。</p>

<p>看起来不错，但是有问题：</p>

<p>第一，sbt run跑起来后是不会自己退出的，它会维持play一直在待命的状态，这也就是说我自己的task根本就没机会执行。</p>

<p>第二，即便能找到方法让我自己定义的task和run同时跑起来，protractor运行完毕后还要关掉run，免得占用端口。这又是一件麻烦事儿。</p>

<p>于是，这第二个轮子也被我自己给枪毙掉了。</p>

<h3>再次残念，还有轮子吗？</h3>

<p>会有的，总会有的，只要肯去找，还是会有的。</p>

<p>这次我想到，写sbt的task不成，那就写代码。我写个specs2测试，在case里用代码启动sbt run，然后再启动protractor，最后关闭sbt，总行了吧？</p>

<p>这样，确实是可以work的，而实际上我也把它做出来验证了可以work了，但是缺点很大。</p>

<p>第一，由于我们的specs2测试都是用sbt跑的，而在其中再启动sbt，相当于要开两个jvm，消耗很大。在我本地机器上可以压榨的只剩两位数的内存。</p>

<p>第二，在sbt已经编译好了产品代码和测试代码测试之后，再开始跑另一个sbt run，会导致sbt把代码重新编译一遍。而Scala的代码编译是很慢的。我试了一下，这两次启动sbt，两次编译所消耗的时间是四分钟左右。时间成本太高。CI的速度会被拉下来，受不了。</p>

<p>基于以上两点原因，我的第三个轮子也被我自己枪毙了。</p>

<h3>命途多舛啊，三次尝试都失败，以你为我要放弃了吗？哼~~~</h3>

<p>最后，我结合第一次的尝试和第三次的尝试找到了一个满意的答案。</p>

<p>来看代码吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ProtractorSpec</span> <span class="k">extends</span> <span class="nc">Specification</span> <span class="k">with</span> <span class="nc">NoTimeConversions</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;my application&quot;</span> <span class="n">should</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="s">&quot;pass the protractor tests&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">running</span><span class="o">(</span><span class="nc">TestServer</span><span class="o">(</span><span class="mi">9000</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">resp</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="s">&quot;http://localhost:9000&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(),</span> <span class="mi">2</span> <span class="n">seconds</span><span class="o">)</span>
</span><span class='line'>        <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">===</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">runProtractorTests</span> <span class="o">===</span> <span class="mi">0</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">runProtractorTests</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;protractor functional-test/config/ft.conf.js&quot;</span>
</span><span class='line'>      <span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">getProcessIO</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">exitValue</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">getProcessIO</span><span class="k">:</span> <span class="kt">ProcessIO</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">ProcessIO</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="o">(),</span>
</span><span class='line'>      <span class="n">stdout</span> <span class="k">=&gt;</span> <span class="n">fromInputStream</span><span class="o">(</span><span class="n">stdout</span><span class="o">).</span><span class="n">getLines</span><span class="o">().</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">),</span>
</span><span class='line'>      <span class="k">_</span> <span class="k">=&gt;</span> <span class="o">())</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就只有这么一点点代码。</p>

<p>running和TestServer都是play的test framework所提供的API。顾名思义，其作用就是把play的app跑起来。</p>

<p>然后发一个get请求，assert它的response的status是200，以此来确保play真的是把server运行起来了的。</p>

<p>再然后运行shell脚本，把protractor跑起来。这里Scala会做implicit conversion，把字符串转换成ProcessBuilder，从而可以调用其run方法。</p>

<p>最后assert，protractor的shell脚本是返回了0的，意味着functional test跑成功了。如果protractor测试挂掉，返回了1，那么specs2的这个测试也会挂掉，从而挂掉整个build。而这，正是我想要的。</p>

<h3>这个解决方案合规吗？</h3>

<p>检验一下吧。</p>

<p>由于server的启动和关闭都是有play的test framework的API负责的，比自己手写得脚本要稳定，所以符合了重归稳定性这一点。</p>

<p>由于用了specs2的测试，它可以跑在sbt里，所以符合一条命令跑build这一点。</p>

<p>整个解决方案只用了specs2和play的test framework，没有重新发明轮子，所以这一点也符合了。</p>

<p>除了符合最初定下的三条标准之外，还有额外的好处：functional test所跑到的代码会被纳入到测试覆盖率里面去。因为和其他specs2的测试一样，protractor的测试也在sbt jacoco:cover的监视下跑的，所以自然就纳入了coverage的范围。</p>

<h3>Takeaway</h3>

<p>在解决这个问题之后，我想我会有三点takeaway：</p>

<ol>
<li><p>多尝试几种方案，不要随便放弃。即便想，也不要。</p></li>
<li><p>不要屈就于working solution，要相信一定存在你现在还没想到的更好的方式。</p></li>
<li><p>重复发明轮子总是会显得很诱人，因为它看起来可以非常直接而且准确的解决我们的问题。而实际上它常常是直接而且准确的解决我们的问题的现象。如果能找到现象产生的原因，干死这个原因，问题的解决或许会更彻底。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
