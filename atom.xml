<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[崔鹏飞的Octopress Blog]]></title>
  <link href="http://cuipengfei.github.com/atom.xml" rel="self"/>
  <link href="http://cuipengfei.github.com/"/>
  <updated>2016-06-13T16:54:24+08:00</updated>
  <id>http://cuipengfei.github.com/</id>
  <author>
    <name><![CDATA[崔鹏飞]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[当锤子遇到钉子]]></title>
    <link href="http://cuipengfei.github.com/blog/2016/06/04/when-hammer-meets-nail/"/>
    <updated>2016-06-04T16:58:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2016/06/04/when-hammer-meets-nail</id>
    <content type="html"><![CDATA[<p><sub>此文标题党。更切题的标题应该叫做《如何用统计科学来黑星座》或者是《积极注册Facehub,促进统计科学蓬勃发展》 </sub></p>

<h1>锤子　JS Promise</h1>

<p>最近对JS社区里的Promises/A+规范产生了很浓的兴趣,感觉Promise这套东西确实蛮不错的,给异步算法的编写者和异步算法的消费者之间提供了一套统一的沟通手段,也为异步算法的消费者提供了更悦目易读的代码组织方式。</p>

<p>自己把它实现了一遍:<a href="https://www.npmjs.com/package/RWPromise">https://www.npmjs.com/package/RWPromise</a></p>

<p>然后在武汉run了3次workshop:<a href="http://cuipengfei.me/blog/2016/05/15/promise/">http://cuipengfei.me/blog/2016/05/15/promise/</a>。</p>

<p>手里有了这么一把锤子就总想找个钉子敲一敲。哪里有Ｎ多异步操作需要我来组织一下吗?</p>

<h1>钉子　《异类》</h1>

<p>无巧不成书,刚好最近在豆瓣上买了一本叫做《异类》的书在看:　<a href="https://read.douban.com/ebook/10580943/">https://read.douban.com/ebook/10580943/</a></p>

<p>书中一开篇就提到了关于加拿大冰球运动员选拔机制的很有趣的一件事:</p>

<blockquote><p>职业青年队绝大多数球员的生日集中在1月、2月和3月，这实在有点不可思议</p>

<p>加拿大冰球队按年龄分组所依据的分界线是1月1日，即从1月1日到当年12月31日之间出生的球员将会被分在同一组。也就是说，一个1月1日出生的选手，是在跟许多年纪比他小的队友争夺晋级权——在青春期到来之前，由于有将近12个月的年龄差距，球员之间在生理成熟度上将会表现出巨大的差异。</p>

<p>正如冰球队员的成长经历一样，因年龄大几个月而显现的微弱优势会在孩子的成长过程中不断积累，最终引导孩子走向成功或不成功，自信或不自信的轨道中，其影响会延伸许多年。</p></blockquote>

<p>能否进入加拿大职业青年冰球队竟然和出生月份有关系,实在是太有趣了。</p>

<p>假想如果你运动天赋非常好,但是不幸出生在12月,于是不得不从小和大你将近一岁的少年运动员一起训练。
表现难免显得不那么出色,不受教练待见,得不到正面反馈,出场坐冷板凳。。。逐渐逐渐,伤仲永。</p>

<p>由此就联想到了,到TW来工作的人其出生月份是否也存在什么规律呢?</p>

<h2>Facehub</h2>

<p>生日信息哪家强?
Facehub帮你忙,它可以查到每个注册用户的生日(只有月日,没有年)。</p>

<p>铺天盖地的广告宣传,每次看到觉得审美都疲劳了,能用到的时候第一个就想到了它。广告的作用,诚不我欺。</p>

<p>我先目测,Facehub用户不会超过500人。
并且用户的id是连续的自增数字,这就很好办了,我只要构造Ｎ多获取用户数据的ＧＥＴ请求就好了。
这Ｎ多的ＧＥＴ请求,肯定不能一个一个慢慢发送,那就需要异步请求了,这就是钉子啊!钉锤终于有机会合体了。</p>

<p>于是我就写了这么个脚本:　<a href="https://github.com/cuipengfei/Spikes/blob/master/js/birth/birth.js">https://github.com/cuipengfei/Spikes/blob/master/js/birth/birth.js</a></p>

<p>其中使用Promise把大量的异步Http请求组织起来,然后统计其结果。</p>

<p>(注:如果需要自己跑这个脚本,需要把第七行的token替换成你自己的合法值)</p>

<p>以下是统计结果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">获取到用户数量</span> <span class="mi">318</span>
</span><span class='line'><span class="p">[</span> <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;11&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">11.949685534591195</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">11.635220125786164</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;8&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">10.062893081761008</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">8.80503144654088</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">8.49056603773585</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">8.176100628930817</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;9&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">7.861635220125786</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">7.232704402515723</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">7.232704402515723</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">7.232704402515723</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">5.9748427672955975</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;出生月份&#39;</span><span class="o">:</span> <span class="s1">&#39;12&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">5.345911949685535</span> <span class="p">}</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可以看到,来TW工作的人,11月,10月,8月出生的最多,12月出生的最少。</p>

<p>由于样本量不够大(只有318人),所以统计数据的含义还不太好说。</p>

<h2>下面是我胡乱猜测的、不科学的、不严谨的理论</h2>

<blockquote><p>我们小学入学时卡生日印象中是用8月卡的,那么这就和加拿大的冰球挑队员卡1月类似。</p>

<p>那这样,小学入学后,优势的积累就应该会倾向于8,9,10这几月的学生(类比冰球青年职业队队员集中分布在1,2,3这几个月)。</p>

<p>这几个月生日的小学生从小积累优势,并在成年后把优势携带到了求职之中去。</p>

<p>那为什么我们统计出来是8,10,11月份的人份额多呢?怎么不是8,9,10这几个月呢?统计出来的数据为什么把9月给跳过去了呢?可怜的9月得罪谁了呢?</p>

<p>我猜是由于9月这群人会成为某种星座的几率实在是太高了,被命运之神无情的给镇压掉了。:(抱歉</p></blockquote>

<p>既然已经有了这份代码,可以统计出生月份,索性再统计些其他侧面的数据:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span> <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;天秤&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">11.949685534591195</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;狮子&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">10.377358490566039</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;天蝎&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">10.062893081761008</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;双鱼&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">9.433962264150944</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;双子&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">8.49056603773585</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;水瓶&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">8.49056603773585</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;摩羯&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">8.176100628930817</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;巨蟹&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">7.861635220125786</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;处女&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">6.918238993710692</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;白羊&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">6.918238993710692</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;射手&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">6.289308176100629</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;星座&#39;</span><span class="o">:</span> <span class="s1">&#39;金牛&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">5.031446540880504</span> <span class="p">}</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见天秤和狮子座的最多,金牛座的最少。和上面的月份排名差异不大。</p>

<p>仔细看下的话,发现我只得罪了6.9%的人,好欣慰:)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span> <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">14.150943396226415</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">14.150943396226415</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;8&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">11.0062893081761</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">10.69182389937107</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">9.119496855345911</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">7.861635220125786</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;12&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">6.289308176100629</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">6.289308176100629</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">6.289308176100629</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;11&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">5.9748427672955975</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;9&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">4.40251572327044</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;入职月份&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">:</span> <span class="mf">3.7735849056603774</span> <span class="p">}</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>入职日期,3,4月和7,8月最多,9,10月最少,这倒不算什么惊人的发现。</p>

<h1>最后</h1>

<p>由于只统计了318人的信息,所以以上猜测仅供娱乐,请勿当真。</p>

<p>请大家积极注册Facehub,并填写真实的生日信息,以促进统计科学的繁荣发展。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己动手实现Promises/A+规范]]></title>
    <link href="http://cuipengfei.github.com/blog/2016/05/15/promise/"/>
    <updated>2016-05-15T15:42:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2016/05/15/promise</id>
    <content type="html"><![CDATA[<p>Promise并不是一个新的概念,它已经有将近30年的历史.</p>

<p>其早期的雏形还有里氏替换原则的提出者Barbara Liskov的贡献在其中.</p>

<p><a href="https://en.wikipedia.org/wiki/Futures_and_promises#History">https://en.wikipedia.org/wiki/Futures_and_promises#History</a></p>

<p>而Promises/A+这个规范的出现,则为JavaScript世界中众多Promise实现库提供了一套统一的API和交互机制.</p>

<p>Promises/A+提供了配套的测试集:<a href="https://github.com/promises-aplus/promises-tests">https://github.com/promises-aplus/promises-tests</a>.</p>

<p>其中共有872个测试,如果你的实现能够让全部测试绿起来,则可以认为该实现符合了标准.</p>

<p>我的Promise实现:<a href="https://github.com/cuipengfei/Spikes/tree/master/js/promise">https://github.com/cuipengfei/Spikes/tree/master/js/promise</a></p>

<p>在npm上的发布:<a href="https://www.npmjs.com/package/RWPromise">https://www.npmjs.com/package/RWPromise</a></p>

<p>要实现Promises/A+的规范其实并不需要很多代码,我的实现只有88行.当然,仅仅是符合规范和一个可用,易用的Promise库之间还有很大的差距.</p>

<p>如果作为教学或者演示的目的,我认为我的这份实现是已有实现中最简洁的一版.</p>

<h1>自己实现Promise规范时需要注意的几点:</h1>

<h2>1. promise的状态一旦确定,不可更改</h2>

<p>一个符合规范的promise有三种可能的状态:pending,resolved,rejected。</p>

<p>这三者是互斥的。</p>

<p>一个pending的promise可以变成resolved,或者rejected。</p>

<p>但是一旦进入resolved或者rejected状态,就再也不能变了。</p>

<p>用形象的语言来描述的话:一个promise就是一个关于未来的承诺,诺言一旦履行,不能反悔。</p>

<p>假设有如下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="o">???</span><span class="p">();</span><span class="c1">//首先以某种方式拿到一个promise,假设这个promise现在是pending的</span>
</span><span class='line'><span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">);</span><span class="c1">//然后把你希望在成功和失败时执行的x,y通过then方法挂进去</span>
</span></code></pre></td></tr></table></div></figure>


<p>时间流逝,假设???()方法内部在未来某个不确定的时间执行了:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">p</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后,你的x函数应该会被调用。</p>

<p>再然后,<strong>无论p的resolve方法或者reject方法再怎么被调用,p的状态都不会再变更,x和y也再不会被执行了</strong>。</p>

<h2>2. 树状结构</h2>

<p>对then方法的多次调用会形成一个树状的数据结构。</p>

<p>假设有如下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="o">???</span><span class="p">();</span><span class="c1">//首先以某种方式拿到一个promise</span>
</span><span class='line'><span class="nx">p</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="c1">//假设这次then的调用返回的是一个新的promise实例,称之为p1</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="c1">//假设这次then的调用返回的是一个新的promise实例,称之为p2</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码等价于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="o">???</span><span class="p">();</span><span class="c1">//首先以某种方式拿到一个promise</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i2.buimg.com/425a951ceb32210c.png" /></p>

<p>当然,这个代码形成的会是类似于一个链表的结构,可以把它<strong>看作是树状结构的一个特例</strong>,也就是树中每个节点都最多只有一个子节点。</p>

<p>而如下的代码则会形成我们惯常看到的树:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="o">???</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p3</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">p4</span> <span class="o">=</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p5</span> <span class="o">=</span> <span class="nx">p3</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i2.buimg.com/83a315d738e7dc45.png" /></p>

<p>这时,树中每一个节点可以有任意多的子节点(取决于它的then被调用了多少次)。</p>

<p>了解promise的树状结构,将有助于实现promise时在自己脑子里构造递归模型。</p>

<h2>3. 回调的执行时机</h2>

<p>这是实现promise的时候,最容易把人搞晕的一点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="o">???</span><span class="p">();</span><span class="c1">//首先以某种方式拿到一个promise,假设这时p是pending的状态</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码执行完之后,我们手里有3个promise:p,p1,p2.</p>

<p>这时,a,b,c,d都还没有执行。</p>

<p>在未来某个不确定的时间,如果p的resolve方法被调用了,接下来会发生的事情是:</p>

<ul>
<li>p会把传给resolve方法的参数value记住,并把自己的状态标记为resolved (以后就再也不能变了)</li>
<li>a会被调用到,其参数为value

<ul>
<li>如果a执行过程中不出错

<ul>
<li>p1的状态被变成resolved,p1会把a的返回值记住</li>
<li>c会被调用到,其参数为a的返回值

<ul>
<li>如果c执行过程中不出错

<ul>
<li>p2的状态被变成resolved,p2会把c的返回值记住</li>
</ul>
</li>
<li>如果c执行过程中出错

<ul>
<li>p2的状态被变成rejected,p2会把c抛出的异常记住</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>如果a执行过程中出错

<ul>
<li>p1的状态被变成rejected,p1会把a抛出的异常记住</li>
<li>d会被调用到,参数为a抛出的异常

<ul>
<li>如果d执行过程中不出错

<ul>
<li>p2的状态被变成resolved,p2会把d的返回值记住</li>
</ul>
</li>
<li>如果d执行过程中出错

<ul>
<li>p2的状态被变成rejected,p2会把d抛出的异常记住</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>这样,就看出递归的意思来了。不过b并没有在上面出现,这是因为p本身是被resolve的,b只有在p被reject的时候才会执行。</p>

<p>在未来某个不确定的时间,如果p的reject方法被调用了,接下来会发生的事情是:</p>

<p>。。。 。。。</p>

<p>就不用写了,把上面的ａ替换为ｂ就好了。</p>

<p>以上的例子中,我们拿到p的时候它的状态是pending的,我们会先调用p的then,然后p才会被resolve(或者reject掉)。
也就是说当我们通过调用then传递给promise两个回调的时候,promise还没有能力确定应该执行哪个回调,只有当未来promise自己被resolve或者reject了的时候,它自己的状态确定了,它才知道该挑哪一个回调来执行。</p>

<p>还有另一种可能性,那就是当你拿到p的时候p就已经被resolve(或者reject掉了),这时如果你再调用then方法的话,所传入的两个回调,到底哪个应该被调用,马上就可以决定了。</p>

<p>也就是说回调被调用的触发点一共有三个,then,resolve,reject这三个方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用CouchBase为弱网环境构建云同步Android应用]]></title>
    <link href="http://cuipengfei.github.com/blog/2016/03/10/couchbase-android-sync/"/>
    <updated>2016-03-10T10:26:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2016/03/10/couchbase-android-sync</id>
    <content type="html"><![CDATA[<h1>背景</h1>

<p>Wifi，4G，3G，这些我们习以为常的东西，未必对所有人来说都是随时可用的。</p>

<p>以我当前所在项目为例，应用场景是某欠发达地区医疗服务机构的药品库存管理。</p>

<p>所谓欠发达，具体怎样呢？</p>

<ul>
<li>没有台式电脑</li>
<li>没有笔记本</li>
<li>只能使用低端的安卓平板</li>
<li>4G，3G信号不要想</li>
<li>我们去过现场的一位同事甚至要爬到树上去，才能勉强收到2G信号
<img src="http://img2.cache.netease.com/cnews/2009/2/2/20090202093425b68f3.jpg" alt="tree" /></li>
<li>即便是2G信号，也是时断时续，非常不稳定</li>
</ul>


<p>因此，需要随时保持连通的BS结构基本不可行，我们选择了重度依赖移动端设备本地存储的CS结构（胖客户端）。</p>

<p>网络不可用时，库存变动存储在安卓本地，何时网络可用，再将数据与服务器同步。</p>

<h1>问题</h1>

<p>以上描述的解决方案似乎合情合理，但是真实实施中还是遇到不少问题：</p>

<ul>
<li>本地schema与服务器schema不一致，中间涉及数据转换与回转</li>
<li>本地到服务器的同步数据流动链条过长（本地orm->本地Json serialization->服务器Json deserialization->服务器orm），链条中任何一环都有出差池的可能性。
换句话说，导致数据健全性受损的可能性分散在了太多的点上，一旦出错，难以定位</li>
<li>服务器到本地的数据同步，上一条中所描述的链条的逆向，同样是链条太长，潜在的出现错误的点太多</li>
<li>服务器端所掌握的数据只是客户端真实数据的一个变体，并且还未必是最新的，这样就导致当移动端应用因其本地数据而出错的时候，我们只能对着服务器干着急</li>
</ul>


<p>以上描述的问题并不是偶发性的，它不像这里有个bug今天修了，明天那里有个bug再修一次就好。</p>

<p>只要我们仍然要在弱网环境中运行应用，我们就需要重度依赖本地存储，就需要持续的在移动端和服务端进行双向数据同步，以上的问题就将会一直存在。</p>

<p>这是自然环境限制与技术选择所带来的固有的内在的问题。</p>

<h1>解决方案</h1>

<p>上面提到：</p>

<blockquote><p>这是自然环境限制与技术选择所带来的固有的内在的问题。</p></blockquote>

<p>这句话再解释明白一些，自然环境限制指的是很差的网络可用性，技术选择指的是服务器端提供REST API，移动端利用该API进行通信。</p>

<p>以上这二者相结合导致了上述情况成为了固有的内在的问题。</p>

<p>自然环境的限制我们无法突破，我们不能把基站部署过去，让大家打电话之前不用再爬到树上去。</p>

<p>但是技术选择是完全受我们控制的，是有做文章的空间的。</p>

<p>这就引出了文章标题提到的CouchBase。</p>

<h1>CouchBase</h1>

<p>关于CouchBase是一个怎样的DB，请大家自行搜索。</p>

<p>我们主要关注它推出的CouchBase-Lite（android和iOS均有对应版本）。</p>

<p><img src="https://camo.githubusercontent.com/c1aa705fde3eb12245c06730d850c23e5a84ad8d/687474703a2f2f746c657964656e2d6d6973632e73332e616d617a6f6e6177732e636f6d2f636f756368626173652d6c6974652f636f756368626173652d6c6974652d6172636869746563747572652e706e67" alt="replicate" /></p>

<p>左边的绿色方框是移动端应用，它通过蓝色标示的Sync Gateway与CouchBase Server通信。</p>

<p>请注意图中的箭头都是双向的，任何一方对本地数据库的写操作，都会导致对方的更新。任何一方的网络暂时中断也没有关系，在网络恢复的时候将会自动重试。</p>

<p>这样一来，数据同步的思路就变了，不再是在服务器端定义上传下载的API，移动端进行调用。而是利用DB自有的replication机制进行数据同步。</p>

<p>这就意味着我们在移动端只需要关注建立领域特定的模型，并将其存储入移动端本地的CouchBase即可，至于后面的序列化、网络通信等等问题就不需要我们去担心了。</p>

<p>关注点中很大一部分就这样被分离了出去，交由infrastructure去完成。</p>

<p>至于DB自有的replication机制的可靠性，应该可以比较安全的做出假设，认为一个有商用场景的DB厂商的通用数据备份机制不会比我们自己拼凑出来的更差。</p>

<h1>一个原型</h1>

<p><a href="https://github.com/cuipengfei/Spikes/tree/master/android/sync-prototype">https://github.com/cuipengfei/Spikes/tree/master/android/sync-prototype</a></p>

<p>上面的链接是一个基本可用的购物清单应用。全部代码都在，供参考。</p>

<p>下面谈如何把玩它。</p>

<h2>第一步</h2>

<p>下载CouchBase Server： <a href="http://www.couchbase.com/nosql-databases/downloads#">http://www.couchbase.com/nosql-databases/downloads#</a>，安装，配置管理员账户，不赘述。</p>

<p>在CouchBase Server的Admin console(默认地址： http://127.0.0.1:8091/index.html)中创建一个bucket，命名为demodb。</p>

<h2>第二步</h2>

<p>安装sync_gateway，Mac用户可以：</p>

<pre><code>brew install sync_gateway
</code></pre>

<p>以上github代码克隆下来后，sync-gateway路径下有个名为start_sync_gateway_server.sh的脚本，运行它来启动sync gateway。</p>

<h2>第三步</h2>

<p>运行同一个路径下的create_user.sh，来创建一个名为user1的用户，然后运行create_session.sh，为该用户创建一个session。</p>

<p>create_session.sh脚本有类似如下的输出：</p>

<pre><code>{"session_id":"a469f18027647e4957ffd1743e2ea33ce0386dbc","expires":"2016-02-21T17:51:43.071175586+08:00","cookie_name":"SyncGatewaySession"}
</code></pre>

<p>把其中的session id记下备用。</p>

<p>（注：这里的用户和session都是sync gateway需要的，与CouchBase Server无直接关系）</p>

<h2>第四步</h2>

<p>找到代码中的MainActivity类，在startSync方法中加入session id：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//......</span>
</span><span class='line'><span class="n">Replication</span> <span class="n">pullReplication</span> <span class="o">=</span> <span class="n">database</span><span class="o">.</span><span class="na">createPullReplication</span><span class="o">(</span><span class="n">syncUrl</span><span class="o">);</span>
</span><span class='line'><span class="n">pullReplication</span><span class="o">.</span><span class="na">setCookie</span><span class="o">(</span><span class="s">&quot;SyncGatewaySession&quot;</span><span class="o">,</span> <span class="s">&quot;a469f18027647e4957ffd1743e2ea33ce0386dbc&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">86400000000000L</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">pullReplication</span><span class="o">.</span><span class="na">setChannels</span><span class="o">(</span><span class="n">asList</span><span class="o">(</span><span class="s">&quot;user1&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">pullReplication</span><span class="o">.</span><span class="na">setContinuous</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Replication</span> <span class="n">pushReplication</span> <span class="o">=</span> <span class="n">database</span><span class="o">.</span><span class="na">createPushReplication</span><span class="o">(</span><span class="n">syncUrl</span><span class="o">);</span>
</span><span class='line'><span class="n">pushReplication</span><span class="o">.</span><span class="na">setCookie</span><span class="o">(</span><span class="s">&quot;SyncGatewaySession&quot;</span><span class="o">,</span> <span class="s">&quot;a469f18027647e4957ffd1743e2ea33ce0386dbc&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">86400000000000L</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">pushReplication</span><span class="o">.</span><span class="na">setChannels</span><span class="o">(</span><span class="n">asList</span><span class="o">(</span><span class="s">&quot;user1&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">pushReplication</span><span class="o">.</span><span class="na">setContinuous</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码负责启动replication，双向同步从此而起。</p>

<p>找到createGroceryItem，为其中创建document的代码指定其所归属的用户：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//......</span>
</span><span class='line'><span class="n">Document</span> <span class="n">document</span> <span class="o">=</span> <span class="n">database</span><span class="o">.</span><span class="na">createDocument</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">properties</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;channels&quot;</span><span class="o">,</span> <span class="n">asList</span><span class="o">(</span><span class="s">&quot;user1&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这几行代码可以保证各个移动端用户之间的数据不会混杂在一起。</p>

<h2>第五步</h2>

<p>在genymotion中启动android虚拟机（如果使用其他虚拟设备或者真机，请注意修改代码中的服务器ip地址）。</p>

<p>在购物清单中创建几条记录，然后清空移动端本机数据，重启应用，可以看到刚刚被清空的购物清单会从服务器上同步回来。</p>

<p>也可以尝试把虚拟机的网络连接断掉，创建或者修改几条记录，稍后重新连通网络，可以发现数据仍然可以上传到服务器。</p>

<p>还可以尝试用第三步中提到的脚本多创建几个用户，在不同的android虚拟机中使用不同用户，可以发现它们对彼此的数据是没有访问权的。</p>

<h1>总结</h1>

<p>以上第五步提到的双向同步，离线操作，不同用户之间的数据隔离，都不需要我们写任何特殊的代码来实现。</p>

<p>我们移动端的代码与CouchBase的集成基本就只涉及到第四步中提到的启动replication和创建document，那这样移动端剩下的工作就只有构建业务逻辑了。</p>

<p>如果你的移动端应用也需要在弱网环境下进行离线操作，在网络恢复时与服务器同步数据的话，不妨尝试一下CouchBase。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015]]></title>
    <link href="http://cuipengfei.github.com/blog/2016/01/03/2015/"/>
    <updated>2016-01-03T01:03:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2016/01/03/2015</id>
    <content type="html"><![CDATA[<p>2015年结束了，一如已经结束了的每一年，非常迅速。</p>

<p>按惯例，从博客说起。</p>

<h1>博客</h1>

<p>15年写了16篇博客，其中9篇是与Scala，Reactive，OODP相关的。这个数字倒还不算太坏。</p>

<p>14年总结的时候说：</p>

<blockquote><p>明年可以改进的是不要嫌话题小，不要嫌话题不够深。 有了有价值的想法就记下来，形成惯性。</p></blockquote>

<p>15年第一季度没有执行这一条原则。其原因在于懒惰。</p>

<p>15年第二季度超额执行。其原因在于找到了主线任务，足够的探索便促成了足够的产出。</p>

<p>第三季度和第四季度未执行。其原因在于到客户现场去工作彻底打乱了所有的日常习惯与日程计划。</p>

<p>这么看来，博客这一块有得有失，得者为要找到一个足够有趣的主线任务，用来催生产出。失者为习惯的打破与难以重补。</p>

<p>由此得出16年需要执行的事项：</p>

<p>主线任务要明确，暂定为Reactive以及与之相关的一切。Review不能每个季度做一次，要每个月做一次，每次可以短，不能没有，这样强迫自己去关注进度，不可斜视。</p>

<h1>读书</h1>

<p><img src="http://i4.tietuku.com/9ba5abac153d116a.png"></p>

<p><img src="http://i4.tietuku.com/607f32c9450c71cf.png"></p>

<p>这个数字可以，分布情况不太漂亮。5月和9月是两个空档。</p>

<p>5月是因为刚去TWU，说得过去。9月是因为去了客户现场，其实也说得过去。</p>

<p>但是内容控制的不好。</p>

<p>14年总结说的是：</p>

<blockquote><p>另外一个改进点是领域，我明年需要看一些轻量级的经济、哲学和社会心理学的书。口说无凭，于此立字为据。</p></blockquote>

<p>这方面第一季度执行的可以，第二季度开始用trello track，也不错。
但是下半年就废了，还是前文提过的同样的原因。</p>

<p>16年的trello重新建了一个board，遵循上段同样的方式，每个月review。</p>

<h1>MOOC</h1>

<p>极其差。</p>

<p>一年只上完了一门课。没有勇气提16年的目标了。看际遇吧。</p>

<h1>健身</h1>

<p>这个坚持执行的很好。还探索出了好的玩法。</p>

<p><img src="http://i4.tietuku.com/59dfa3e76e11f382.jpg"></p>

<p>数据统计不完整，但是可以凑合看，增重0.4，减脂0.1，算是净增1斤肌肉。曲线不难看，但是这个数字不算漂亮。</p>

<p><img src="http://i4.tietuku.com/93656571b24423e4.jpg"></p>

<p>从8月4号开始用bodyspace来track运动量，至此共91次，重量累计935吨。</p>

<p>这个数字累积到1000吨（也就是100万千克）时就换方法，不着重统计重量了，而是统计围度。</p>

<p>下面统计下出勤率：</p>

<p>从14年6月8日到现在,共574天。出勤362次，出勤率63%。</p>

<h1>时间管理与统计</h1>

<p>这个统计是从15年4月1日开始的，9，10月份由于去客户现场的原因，中断掉了。数据就放在这儿，不分析了。</p>

<p><img src="http://i4.tietuku.com/5e3c1b5be12d1fe5.png"></p>

<h1>其他</h1>

<p>这一年脾气见好，不错。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015第三季度]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/10/05/2015-3rd-season/"/>
    <updated>2015-10-05T01:03:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/10/05/2015-3rd-season</id>
    <content type="html"><![CDATA[<p>惨。</p>

<p>八月份上了一个大客户的项目，到了晚上没力气也没心情做任何事情。</p>

<h1>博客</h1>

<p>没写。上个季度六月的系列告一段落后7月没写。到了8月就不用说了。</p>

<h1>读书</h1>

<p>七月八月读了7本书，9月一本未读。</p>

<p>在trello中建的计划，其中7月执行的不错，8月一般，九月，当让，啥都没做。</p>

<h1>MOOC</h1>

<p>无。</p>

<h1>翻译</h1>

<p>上次提到的书已经交稿了，坐等出版。</p>

<h1>健身</h1>

<p>这项不错，我从一开始就想好，无论什么事没时间没心情做，这件事不能停。</p>

<p>从八月份开始，有了系统的计划</p>

<p><img src="http://i13.tietuku.com/3c423d466868f0e6.png" alt="Alt text" /></p>

<p>三个大肌群，所有小肌群，各自一个计划。</p>

<p>从八月初执行至今，共记录41次workout，举铁345吨。</p>

<p><img src="http://i13.tietuku.com/237378291054c70a.png" alt="Alt text" /></p>

<p>平均每次去健身房8吨，日最高记录15吨。</p>

<p>这段时间出勤率67%。</p>

<p>从去年6月8日到现在，共485天，出勤314次，出勤率64%。</p>

<p>其中武汉201次，印度72次，成都41次。</p>

<h1>总之</h1>

<p><img src="http://i.ytimg.com/vi/qQNvkINSEsY/hqdefault.jpg" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015第二季度]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/07/04/2015-second-season/"/>
    <updated>2015-07-04T20:37:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/07/04/2015-second-season</id>
    <content type="html"><![CDATA[<p>2015竟然这么快就过去一半了。逝者如斯夫。</p>

<h1>博客</h1>

<p>第一季度总结的时候说：</p>

<blockquote><p>今年的博客主线任务定为OO与FP的比较和结合应用吧。</p></blockquote>

<p>这个任务完成的不错，这个主题写了7篇博客。</p>

<p>迭代器已经irrelevant了，中介者和备忘录太简单就没写，状态模式没找到好的FP实现方式。
这样11种行为模式除去上述4个，算是基本覆盖完了。</p>

<p>Principles of Reactive Programming作业导学写了两篇，后面的有点难，写不出来了。。。
这一点后面MOOC再说。</p>

<p>还有一篇gender pay gap的博客，算是今年到目前为止阅读量最多的得意之作。</p>

<p>在武汉做了一次学英语的workshop，在TWU做了pecha kucha，总结成了两篇。</p>

<p>这样，不算季度总结的博客，写了12篇，数量和内容自己都满意。和技术相关的还可以充当复习和刷新记忆的资料。</p>

<p>不错，博客这方面达标了。</p>

<h1>读书</h1>

<p>这个季度比较惨。这一季度只读了五本书。</p>

<p>一部分原因在于TWU的日程太紧，一部分原因在于博客，MOOC和翻译占用的时间很多，不可兼得。</p>

<p>还好第一季度看书比较多，所以到目前为止这半年一共读过16本书，总体数量还不算太惨。</p>

<p>这十六本书里有7本有笔记，可以充当复习和刷新记忆的资料，而且效果很好。自己写的笔记，瞄一眼，整本书的内容和重点就全部复活。</p>

<p>不过看书的领域方面有点杂，2014总结的时候说：</p>

<blockquote><p>明年需要看一些轻量级的经济、哲学和社会心理学的书。</p></blockquote>

<p>这方面执行的不好。</p>

<p><img src="http://i1.tietuku.com/26b6dd870a313983.png" alt="http://i1.tietuku.com/26b6dd870a313983.png" /></p>

<p>于是建了一个trello，把2015下半年要读的书预先plan出来。每个月plan两三本，一部分符合上述他山之石的领域，一部分符合OOP和FP的技术主线。</p>

<p><img src="http://i1.tietuku.com/09607b3bd8c47d1d.png" alt="http://i1.tietuku.com/09607b3bd8c47d1d.png" /></p>

<p>这样plan的数量并不大，如果突然出现兴趣很高，或者优先级很高的书的话，可以随时插入计划中。</p>

<p>另外，pipeline定义清晰，每本书要读完，有笔记，有复习，有某种形式的产出（笔记也算）。</p>

<h1>MOOC</h1>

<p>把Principles of Reactive Programming跟完了，证书拿到了。</p>

<p><img src="http://i1.tietuku.com/cff384ac4788e10b.png" alt="http://i1.tietuku.com/cff384ac4788e10b.png" /></p>

<p>但是照实说，这门课没学懂，只是应付过了。后四周的作业导学没写出来。</p>

<p>主要原因在于事先对课程难度估计过低，投入时间不够。下次开课，需要再跟一遍。</p>

<p>除此之外，下半年对于MOOC这方面不做过多预期，有特别好的特别感兴趣的就跟，没有就算了。</p>

<p>算是对年初说过的话彻底食言了。。。</p>

<h1>体重</h1>

<p>在印度这段时间健身房出勤率74%左右，还挺好。</p>

<p>现在，60.5公斤，第一季度结束时是61。基本算是没变。充分说明了没有改进目标就不会有成绩。</p>

<p>不过鉴于我现在已经不算胖子了，这方面仍然不做过多奢求，维持就好。</p>

<p>另外，腹肌的轮廓开始出现了，我很开心：）</p>

<p><img src="http://i1.tietuku.com/4866dc89e0ffac6a.jpg" style="width: 300px;"/></p>

<p><img src="http://i1.tietuku.com/6b5710437ae31c2f.jpg" style="width: 300px;"/></p>

<h1>翻译</h1>

<p>接了出版社一个翻译的活儿，《Seven more languages in seven weeks》，是本蛮不错的书。这个额外的任务投入时间较多也是读书方面有欠缺的原因之一。</p>

<p>对出版充满期待。</p>

<h1>时间管理与统计</h1>

<p>从四月一号开始，开始使用pomotodo这款超赞的番茄钟软件。从开始的第一天开始，到现在为止，凡是需要坐下来专心执行的事情都有记录。</p>

<p><img src="http://i1.tietuku.com/50d083b12ab39342.png" alt="http://i1.tietuku.com/50d083b12ab39342.png" /></p>

<p>这款软件的统计分析功能很好用，每个番茄钟还可以加tag。可以看到，这三个月做多的时间放在了TWU的备课上（26%），其次是翻译书（16%），mooc和blog紧跟其后（13%和10%），然后还有读书和写TWU需要的总结反馈（都是7%）。</p>

<p>这样，有数据，为什么读书少就一目了然了。</p>

<p>另外，可以看到这三个月平均日完成7.55个番茄钟。这个数量很说明问题，工作的效率靠感觉是感觉不出来的，要靠统计数据和分析。
7.55个番茄钟，相当于四个小时左右。每天平均专心工作，执行任务的时间只有四个小时啊！</p>

<p>这里面有一部分原因是TWU过程中需要听别的讲师的很多sessions，如果没有这个因素，日均数量应该是9个左右。</p>

<p>下个季度这方面的数据会是什么样的很难说，如果做的工作中有很大部分涉及沟通和协调的话，这个数字或许会走低。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模板方法模式：子类型多态和高阶函数]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/06/23/template-method-pattern/"/>
    <updated>2015-06-23T15:42:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/06/23/template-method-pattern</id>
    <content type="html"><![CDATA[<blockquote><p>模板方法模式定义了一个算法的步骤，并允许次类别为一个或多个步骤提供其实践方式。让次类别在不改变算法架构的情况下，重新定义算法中的某些步骤。</p></blockquote>

<p>以上是wiki对模板方法的定义。</p>

<p>比较容易理解，我们有一个算法，其中某些步骤是确定的不太会变的代码。而另外一些步骤则需要变化并且自由组合。</p>

<p>《Head First Design Patterns》里有一个🌰：</p>

<p>假设我们需要制作咖啡因饮品，其实就是咖啡和茶。制作步骤有些类似，分为四步：1烧水，2泡，3装杯，4加调料。</p>

<p>其中第一步和第三步是稳定的代码，变化可能性不大，而第二步和第四步则每种饮品有自己的风味。</p>

<p>这样就有了下面的代码：</p>

<h1>Java</h1>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/templatemethodJ/CaffeineBeverage.java?slice=1:&footer=minimal">
</script>


<p>首先有一个咖啡因饮品的抽象类，定义一个算法骨架：1烧水，2泡，3装杯，4加调料。
其中的第二步和第四步是有待实现的抽象方法，留给子类决定怎么搞。第一步和第三步是写死的。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/templatemethodJ/Coffee.java?slice=1:">
</script>


<p>接下来是咖啡，它实现了过滤咖啡和添加牛奶、糖的步骤。这样当它的实例的prepareRecipe方法被调用时就会执行父类的烧水、装杯，以及自己的泡和加调料。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/templatemethodJ/Tea.java?slice=1:">
</script>


<p>还有，就是茶了。它和咖啡不一样，是用浸泡而不是过滤，加的是柠檬而不是牛奶和糖。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/templatemethodJ/BeverageTestDrive.java?slice=1:">
</script>


<p>最后用一个main函数来执行制作咖啡和茶的代码。</p>

<p>很好，如果再有其他的咖啡因饮品，只需要增加一个子类，并且实现两个方法就好了。只要我们对于四个步骤的定义在该领域中足够稳定，这份代码就是很好很强大，易于扩展的。</p>

<p>有代码如此，夫复何求呢？</p>

<h2>不过再想一下</h2>

<p>这个模式想要达到的，不过是将一个算法的某些部分做的灵活一些，可以自由替换和组合。</p>

<p>那这个，不就是函数组合吗？如果我们使用的是允许高阶函数的语言的话，那还有什么必要把这些函数包装在类里呢？</p>

<h1>functions</h1>

<p>接下来是用Scala实现的版本：</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/templatemethodS/Beverages.scala?slice=1:">
</script>


<p>首先，定义三个type，分别是泡和加调料这两个步骤，还有饮品本身（这三个type其实是一样的，看起来有点傻）。</p>

<p>然后有一个算法骨架，把第一和第三步锁死，把第二和第四步空出来，分别用一个参数来实现注入不同的实现。</p>

<p>接下来有泡和加调料的四种不同实现，分别是一个函数，符合各自的函数签名。</p>

<p>最后，用一个main函数来执行。可以看到，泡和加调料的函数是作为参数传入的。如果我们需要加牛奶和糖的茶，或者是柠檬味的咖啡的话，也会变得非常容易。</p>

<p>就这样，51行代码变成了28行。四个类变成了一个object。</p>

<p>而如果是要用子类型多态（subtype polymorphism）来做到这样的自由组合，那么我们需要的或许就是策略模式，把泡和加调料分别写成接口并提供不同的实现类来组合。可以想象，这会导致很多的boilerplate。</p>

<h1>结语</h1>

<p>Java代码中实现多态的方式是通过子类继承父类并且实现抽象方法来实现的。而Scala代码中则是通过把不同的函数传入骨架组合出一个新的函数来实现的。</p>

<p>子类型多态（subtype polymorphism）是个好东西，但是在某些场景下显得有点重。能用高阶函数这种轻量级的方式来实现的时候，就没有必要选择子类型多态这种过重的方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[访问者模式 in FP：Pattern Matching]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/06/16/visitor-pattern-pattern-match/"/>
    <updated>2015-06-16T19:11:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/06/16/visitor-pattern-pattern-match</id>
    <content type="html"><![CDATA[<blockquote><p>访问者模式是一种将算法与对象结构分离的软件设计模式。</p>

<p>这个模式的基本想法如下：首先我们拥有一个由许多对象构成的对象结构，这些对象的类都拥有一个accept方法用来接受访问者对象；访问者是一个接口，它拥有一个visit方法，这个方法对访问到的对象结构中不同类型的元素作出不同的反应；在对象结构的一次访问过程中，我们遍历整个对象结构，对每一个元素都实施accept方法，在每一个元素的accept方法中回调访问者的visit方法，从而使访问者得以处理对象结构的每一个元素。我们可以针对对象结构设计不同的实在的访问者类来完成不同的操作。</p></blockquote>

<p>以上是wiki对访问者模式的定义。</p>

<p>这个定义着实难读。我们来看wiki给出的例子：</p>

<p>假设我们要为汽车建模，汽车有不同的组成部件，轮胎，车身，和引擎。</p>

<p>在开车之前需要先检查车辆每个部件的状况，然后依次启动所有部件以启动汽车。</p>

<p>在这里我们很容易识别出车的组件各自应该是一个实体。而对车辆组件进行检查和启动的代码应该分别处于不同的实体中。</p>

<p>这样就有了访问者的代码（来自wiki）：</p>

<h1>Java</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">ICarElement</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ICarElementVisitor</span> <span class="n">visitor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Wheel</span> <span class="kd">implements</span> <span class="n">ICarElement</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Wheel</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ICarElementVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">visitor</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Engine</span> <span class="kd">implements</span> <span class="n">ICarElement</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ICarElementVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">visitor</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Body</span> <span class="kd">implements</span> <span class="n">ICarElement</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ICarElementVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">visitor</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Car</span> <span class="kd">implements</span> <span class="n">ICarElement</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ICarElement</span><span class="o">[]</span> <span class="n">elements</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Car</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ICarElement</span><span class="o">[]{</span><span class="k">new</span> <span class="n">Wheel</span><span class="o">(</span><span class="s">&quot;front left&quot;</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Wheel</span><span class="o">(</span><span class="s">&quot;front right&quot;</span><span class="o">),</span> <span class="k">new</span> <span class="n">Wheel</span><span class="o">(</span><span class="s">&quot;back left&quot;</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Wheel</span><span class="o">(</span><span class="s">&quot;back right&quot;</span><span class="o">),</span> <span class="k">new</span> <span class="n">Body</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Engine</span><span class="o">()};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ICarElementVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">ICarElement</span> <span class="n">elem</span> <span class="o">:</span> <span class="n">elements</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">elem</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">visitor</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先是汽车部件的实体。它们都实现同一个ICarElement的接口。
该接口定义一个accept方法，用来接受访问者然后用访问者来访问所有汽车部件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">ICarElementVisitor</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Wheel</span> <span class="n">wheel</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Engine</span> <span class="n">engine</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Body</span> <span class="n">body</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Car</span> <span class="n">car</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">CarElementPrintVisitor</span> <span class="kd">implements</span> <span class="n">ICarElementVisitor</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Wheel</span> <span class="n">wheel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Visiting &quot;</span> <span class="o">+</span> <span class="n">wheel</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; wheel&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Engine</span> <span class="n">engine</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Visiting engine&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Body</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Visiting body&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Visiting car&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">CarElementDoVisitor</span> <span class="kd">implements</span> <span class="n">ICarElementVisitor</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Wheel</span> <span class="n">wheel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Kicking my &quot;</span> <span class="o">+</span> <span class="n">wheel</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; wheel&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Engine</span> <span class="n">engine</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Starting my engine&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Body</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Moving my body&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Starting my car&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后就是访问者的实体。它们都实现ICarElementVisitor接口。
这个接口里定义的方法有点多，分别对应每个汽车部件定义了一个visit方法的重载。</p>

<p>在实现的时候自然是做检查的实体实现每个部件的检查，启动的实体实现每个部件的启动。</p>

<p>这里就有一个陷阱，如果代码发展的趋势是汽车部件的种类会增加的话，那这个接口就很不稳定。每增加一种汽车部件就要修改接口并且修改每个实现类。</p>

<p>而如果代码发展的趋势是在自检和启动之外加一些保养啊，洗车啊之类的话就没问题，不需要对已有代码进行修改。</p>

<p>所以使用访问者模式的时候要注意识别被访问者是否是相对稳定而访问者是有扩展趋势的，这样用这个模式才合适。</p>

<p>接下来的代码把以上所有代码串起来执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VisitorDemo</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ICarElement</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Car</span><span class="o">();</span>
</span><span class='line'>        <span class="n">car</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="n">CarElementPrintVisitor</span><span class="o">());</span>
</span><span class='line'>        <span class="n">car</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="n">CarElementDoVisitor</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从最后的main函数来看，只要能确保汽车部件的数量不会增加，而只有访问者增加，那么客户代码只需要增加一行就能够增加对整车进行清洗或者保养的行为。</p>

<p>车的部件和对部件的操作相互分离，独立发展。很灵活，很巧妙，对吧？</p>

<h2>不过再想一下</h2>

<p>其实也不需要使劲想了，如果你看过这一系列博文前面的几篇的话，想必已经能够猜到我的用意了。</p>

<p>这些访问者存在的意义就在于承载对汽车部件的某些具体操作，操作是个好听的词儿，说白了就是函数啊。</p>

<p>那既然这些类只是承载函数而已，何不直接就用函数而不费劲去用类包裹一层呢？</p>

<h1>functions</h1>

<p>那接下来就是用Scala的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">CarElement</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">accept</span><span class="o">(</span><span class="n">visitor</span><span class="k">:</span> <span class="kt">Visitor</span><span class="o">)</span> <span class="k">=</span> <span class="n">visitor</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Body</span><span class="o">()</span> <span class="k">extends</span> <span class="nc">CarElement</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Engine</span><span class="o">()</span> <span class="k">extends</span> <span class="nc">CarElement</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Wheel</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">CarElement</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Car</span><span class="o">()</span> <span class="k">extends</span> <span class="nc">CarElement</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">elements</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">CarElement</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">Wheel</span><span class="o">(</span><span class="s">&quot;front left&quot;</span><span class="o">),</span> <span class="nc">Wheel</span><span class="o">(</span><span class="s">&quot;front right&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">Wheel</span><span class="o">(</span><span class="s">&quot;back left&quot;</span><span class="o">),</span> <span class="nc">Wheel</span><span class="o">(</span><span class="s">&quot;back right&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">Body</span><span class="o">(),</span> <span class="nc">Engine</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">accept</span><span class="o">(</span><span class="n">visitor</span><span class="k">:</span> <span class="kt">Visitor</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">elements</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">))</span>
</span><span class='line'>    <span class="n">visitor</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上是汽车各种部件的定义，和Java代码没有太大区别。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Visitors</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Visitor</span> <span class="o">=</span> <span class="nc">CarElement</span> <span class="k">=&gt;</span> <span class="nc">Unit</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">printVisitor</span><span class="k">:</span> <span class="kt">Visitor</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Wheel</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Visiting $name wheel&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Body</span><span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Visiting Body&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Engine</span><span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Visiting Engine&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Car</span><span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Visiting Car&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">doVisitor</span><span class="k">:</span> <span class="kt">Visitor</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Wheel</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Kicking my $name wheel&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Body</span><span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Moving my body&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Engine</span><span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Starting my engine&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Car</span><span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Starting my car&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这一段定义了一个叫做Visitor的type，它只是一个函数签名。任何接受一个汽车部件作为参数并且没有返回值的函数都符合它的签名，也就可以被视作Visitor。</p>

<p>接下来是两个符合Visitor签名的函数，都是用pattern match实现的。</p>

<p>pattern match这种神奇的语言特性是如何实现的呢？背后的原因并不神奇，更多详情请参考我之前的另一篇博客：<a href="http://cuipengfei.me/blog/2013/12/29/desugar-scala-8/">http://cuipengfei.me/blog/2013/12/29/desugar-scala-8/</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">VisitorDemo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">car</span> <span class="k">=</span> <span class="nc">Car</span><span class="o">()</span>
</span><span class='line'>    <span class="n">car</span><span class="o">.</span><span class="n">accept</span><span class="o">(</span><span class="n">printVisitor</span><span class="o">)</span>
</span><span class='line'>    <span class="n">car</span><span class="o">.</span><span class="n">accept</span><span class="o">(</span><span class="n">doVisitor</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后定义一个main函数，与Java的main函数做的事情是等价的。</p>

<p>这样，100行变成了45行。Visitor不再作为臃肿的实体存在，而只是函数。</p>

<p>而且如果遵照同样的假设，认为车的部件是稳定的，而访问者是会增多的，那这段Scala代码的增长趋势是每加一个访问者就加一个函数。与Java代码的增长趋势相同。</p>

<h1>结语</h1>

<p>这次分析的访问者模式和之前的一些模式很类似，当我们需要的实体仅仅是作为承载某种行为的一个载具，那就可以考虑将实体消去，而换用函数这种更简单，更轻量级的抽象方式来实现我们想要的东西。</p>

<p>当年OO模式出现的时候，FP并不盛行，原作者提出的方案无可厚非。不过我们今天有了FP这种更趁手的工具，就可以考虑在合适的时候将其与OO结合使用来达到更好的设计的目的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[观察者模式 in FP：Mutation vs Transformation]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/06/13/observers-pattern-fp/"/>
    <updated>2015-06-13T22:49:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/06/13/observers-pattern-fp</id>
    <content type="html"><![CDATA[<h1>观察者模式</h1>

<blockquote><p>观察者模式（有时又被称为发布/订阅模式）是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实作事件处理系统。</p></blockquote>

<p>以上是wiki对观察者模式的解释。</p>

<p>举一个《Head first design pattern》中的例子：</p>

<p>比如说有一个气象站，每当气象有变化的时候就需要显示当前天气。
需要显示历史平均气温，最高气温和最低气温。
还需要根据气压预测晴雨。</p>

<p>这种情况就很适合使用观察者模式，每种需要显示气象的装置作为观察者，气象数据本身作为可以被观察的对象。
每当气象变化的时候，被观察的对象就会通知观察者来根据新的数据作出新的显示。</p>

<p>以下是书中给出的代码：</p>

<h1>Java</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="kt">float</span> <span class="n">temp</span><span class="o">,</span> <span class="kt">float</span> <span class="n">humidity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">pressure</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">o</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先定义两个接口，一个是观察者，接收新的气象数据。一个是被观察者，可以注册观察者以及通知观察者。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WeatherData</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;</span> <span class="n">observers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">temperature</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">humidity</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">pressure</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">observers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span> <span class="o">:</span> <span class="n">observers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">observer</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">temperature</span><span class="o">,</span> <span class="n">humidity</span><span class="o">,</span> <span class="n">pressure</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMeasurements</span><span class="o">(</span><span class="kt">float</span> <span class="n">temperature</span><span class="o">,</span> <span class="kt">float</span> <span class="n">humidity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">pressure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">humidity</span> <span class="o">=</span> <span class="n">humidity</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">pressure</span> <span class="o">=</span> <span class="n">pressure</span><span class="o">;</span>
</span><span class='line'>        <span class="n">notifyObservers</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来定义气象数据本身。代码很容易理解，把观察者保存在一个list里，每当气象数据变化的时候就通知这些观察者去做出新的处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrentConditionsDisplay</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">CurrentConditionsDisplay</span><span class="o">(</span><span class="n">Subject</span> <span class="n">weatherData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">weatherData</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="kt">float</span> <span class="n">temperature</span><span class="o">,</span> <span class="kt">float</span> <span class="n">humidity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">pressure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Current conditions: &quot;</span> <span class="o">+</span> <span class="n">temperature</span>
</span><span class='line'>                <span class="o">+</span> <span class="s">&quot;F degrees and &quot;</span> <span class="o">+</span> <span class="n">humidity</span> <span class="o">+</span> <span class="s">&quot;% humidity&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StatisticsDisplay</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">maxTemp</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">minTemp</span> <span class="o">=</span> <span class="mi">200</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">tempSum</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">numReadings</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">StatisticsDisplay</span><span class="o">(</span><span class="n">WeatherData</span> <span class="n">weatherData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">weatherData</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="kt">float</span> <span class="n">temp</span><span class="o">,</span> <span class="kt">float</span> <span class="n">humidity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">pressure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">tempSum</span> <span class="o">+=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>        <span class="n">numReadings</span><span class="o">++;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">temp</span> <span class="o">&gt;</span> <span class="n">maxTemp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">maxTemp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">temp</span> <span class="o">&lt;</span> <span class="n">minTemp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">minTemp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Avg/Max/Min temperature = &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">tempSum</span> <span class="o">/</span> <span class="n">numReadings</span><span class="o">)</span>
</span><span class='line'>                <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">maxTemp</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">minTemp</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ForecastDisplay</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">currentPressure</span> <span class="o">=</span> <span class="mf">29.92f</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">lastPressure</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ForecastDisplay</span><span class="o">(</span><span class="n">WeatherData</span> <span class="n">weatherData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">weatherData</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="kt">float</span> <span class="n">temp</span><span class="o">,</span> <span class="kt">float</span> <span class="n">humidity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">pressure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">lastPressure</span> <span class="o">=</span> <span class="n">currentPressure</span><span class="o">;</span>
</span><span class='line'>        <span class="n">currentPressure</span> <span class="o">=</span> <span class="n">pressure</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Forecast: &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">currentPressure</span> <span class="o">&gt;</span> <span class="n">lastPressure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Improving weather on the way!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">currentPressure</span> <span class="o">==</span> <span class="n">lastPressure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;More of the same&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">currentPressure</span> <span class="o">&lt;</span> <span class="n">lastPressure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Watch out for cooler, rainy weather&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后有三个观察者，分别负责显示当前气象，气象历史分析和晴雨预测。</p>

<p>CurrentConditionsDisplay是最简单的，没有任何状态，它只是负责在每次气象有变化的时候把最新的气象显示出来。</p>

<p>StatisticsDisplay复杂一点点，它需要记录历史气温，以便于计算平均温度，最高和最低气温。这是一个会有状态变化的对象。</p>

<p>ForecastDisplay也有状态变化，它需要记录上次的气压，以便于根据气压变化来预测晴雨。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WeatherStation</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">WeatherData</span> <span class="n">weatherData</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeatherData</span><span class="o">();</span>
</span><span class='line'>        <span class="n">CurrentConditionsDisplay</span> <span class="n">currentDisplay</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CurrentConditionsDisplay</span><span class="o">(</span><span class="n">weatherData</span><span class="o">);</span>
</span><span class='line'>        <span class="n">StatisticsDisplay</span> <span class="n">statisticsDisplay</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StatisticsDisplay</span><span class="o">(</span><span class="n">weatherData</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ForecastDisplay</span> <span class="n">forecastDisplay</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ForecastDisplay</span><span class="o">(</span><span class="n">weatherData</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">weatherData</span><span class="o">.</span><span class="na">setMeasurements</span><span class="o">(</span><span class="mi">80</span><span class="o">,</span> <span class="mi">65</span><span class="o">,</span> <span class="mf">30.4f</span><span class="o">);</span>
</span><span class='line'>        <span class="n">weatherData</span><span class="o">.</span><span class="na">setMeasurements</span><span class="o">(</span><span class="mi">82</span><span class="o">,</span> <span class="mi">70</span><span class="o">,</span> <span class="mf">29.2f</span><span class="o">);</span>
</span><span class='line'>        <span class="n">weatherData</span><span class="o">.</span><span class="na">setMeasurements</span><span class="o">(</span><span class="mi">78</span><span class="o">,</span> <span class="mi">90</span><span class="o">,</span> <span class="mf">29.2f</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，有一个main函数，把以上所有代码串起来。</p>

<p>三个观察者都在观察同一个气象数据，每当气象有变化的时候，三个观察者都会被通知，并作出相应处理。</p>

<p>如果我们需要其他的更复杂的气象显示装置，只需要实现Observer接口，注册到气象数据上去，那么在每次气象有变化的时候就可以收到通知并作出处理。不需要对已有代码做出任何改变。</p>

<p>很灵活，很强大，对吧？</p>

<h2>不过再想一下</h2>

<p>观察者模式有没有更好地实现方式呢？</p>

<p>答案肯定是有的。</p>

<p>C#的delegate和Event就是一种用来实现观察者模式的很好的语言特性。它在语言级别为添加事件订阅和取消订阅提供了支持。</p>

<p>不过这一篇博客主要是想要讲一个immutable的观察者模式实现，C#就不多讲了。</p>

<p>可以想一下，上面的Java代码里的三个观察者，CurrentConditionsDisplay是没有任何状态变化的，它存在的意义仅在于其update方法。
而这个方法每次都是接受最新的气象数据，并作出输出。</p>

<p>StatisticsDisplay和ForecastDisplay则是截取气象历史数据不同的片段，将其作为可变状态封装在内部，并据其状态的改变决定update方法的行为。</p>

<p>这样看来，如果我们有一种方式，可以提供完整的气象数据历史，那么这三个观察者就都可以各取所需，而不需要拥有自己的可变状态了。</p>

<p>具体该怎么做呢？</p>

<h1>functions</h1>

<p>以下是Scala的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">WeatherData</span><span class="o">(</span><span class="n">temperature</span><span class="k">:</span> <span class="kt">Float</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">humidity</span><span class="k">:</span> <span class="kt">Float</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">pressure</span><span class="k">:</span> <span class="kt">Float</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">observers</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Observer</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Nil</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">history</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">WeatherData</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="nc">WeatherData</span><span class="o">(</span><span class="n">history</span> <span class="k">=</span> <span class="nc">Nil</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">register</span><span class="o">(</span><span class="n">observer</span><span class="k">:</span> <span class="kt">Observer</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">temperature</span><span class="o">,</span> <span class="n">humidity</span><span class="o">,</span> <span class="n">pressure</span><span class="o">,</span> <span class="n">observers</span> <span class="o">:+</span> <span class="n">observer</span><span class="o">,</span> <span class="n">history</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">weatherChanged</span><span class="o">(</span><span class="n">weatherData</span><span class="k">:</span> <span class="kt">WeatherData</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">newHistory</span> <span class="k">=</span> <span class="n">history</span> <span class="o">:+</span> <span class="n">weatherData</span>
</span><span class='line'>    <span class="n">observers</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">observer</span> <span class="k">=&gt;</span> <span class="n">observer</span><span class="o">(</span><span class="n">newHistory</span><span class="o">))</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">temperature</span><span class="o">,</span> <span class="n">humidity</span><span class="o">,</span> <span class="n">pressure</span><span class="o">,</span> <span class="n">observers</span><span class="o">,</span> <span class="n">newHistory</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Observers</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Observer</span> <span class="o">=</span> <span class="nc">Seq</span><span class="o">[</span><span class="kt">WeatherData</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">currentConditionsDisplay</span><span class="k">:</span> <span class="kt">Observer</span> <span class="o">=</span> <span class="n">history</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Current conditions: &quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">s</span><span class="s">&quot;${history.last.temperature} F degrees and &quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">s</span><span class="s">&quot;${history.last.humidity} % humidity&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">statisticsDisplay</span><span class="k">:</span> <span class="kt">Observer</span> <span class="o">=</span> <span class="n">history</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Avg/Max/Min temperature = &quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">s</span><span class="s">&quot;${history.map(_.temperature).sum / history.size}&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">s</span><span class="s">&quot;/${history.map(_.temperature).max}&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">s</span><span class="s">&quot;/${history.map(_.temperature).max}&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">forecastDisplay</span><span class="k">:</span> <span class="kt">Observer</span> <span class="o">=</span> <span class="n">history</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">currentPressure</span> <span class="k">=</span> <span class="n">history</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">pressure</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">lastPressure</span> <span class="k">=</span> <span class="n">history</span><span class="o">.</span><span class="n">dropRight</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">last</span><span class="o">.</span><span class="n">pressure</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">print</span><span class="o">(</span><span class="s">&quot;Forecast: &quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">currentPressure</span> <span class="o">&gt;</span> <span class="n">lastPressure</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Improving weather on the way!&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">currentPressure</span> <span class="o">==</span> <span class="n">lastPressure</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;More of the same&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">currentPressure</span> <span class="o">&lt;</span> <span class="n">lastPressure</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Watch out for cooler, rainy weather&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">WeatherStation</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">weatherData</span> <span class="k">=</span> <span class="nc">WeatherData</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="n">register</span><span class="o">(</span><span class="n">currentConditionsDisplay</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">register</span><span class="o">(</span><span class="n">statisticsDisplay</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">register</span><span class="o">(</span><span class="n">forecastDisplay</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">weatherData</span>
</span><span class='line'>      <span class="o">.</span><span class="n">weatherChanged</span><span class="o">(</span><span class="nc">WeatherData</span><span class="o">(</span><span class="mi">80</span><span class="o">,</span> <span class="mi">65</span><span class="o">,</span> <span class="mf">30.4f</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">weatherChanged</span><span class="o">(</span><span class="nc">WeatherData</span><span class="o">(</span><span class="mi">82</span><span class="o">,</span> <span class="mi">70</span><span class="o">,</span> <span class="mf">29.2f</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">weatherChanged</span><span class="o">(</span><span class="nc">WeatherData</span><span class="o">(</span><span class="mi">78</span><span class="o">,</span> <span class="mi">90</span><span class="o">,</span> <span class="mf">29.2f</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是Scala实现的全部代码了。</p>

<p>开始分析之前，先做一个极其复杂的数学运算：
106行的Java代码，等价于54行Scala代码。
7个类，变成了3个。</p>

<p>下面开始正经的分析。</p>

<p>首先有一个叫做WeatherData的case class，它是完全不可变的。</p>

<p>其register方法，接受一个新的Observer作为参数，并产生一个新的包含比原来多一个Observer的WeatherData实例。</p>

<p>其weatherChanged方法接受一个新的气象数据，生成一个新的历史数据Seq，并把目前为止包含所有历史气象数据的Seq传递给每一个Observer去做处理。最后返回一个包含最新历史数据的新的WeatherData实例。</p>

<p>那么这些Observer具体是怎么定义的呢？</p>

<p>首先Observer只是一个type，不是一个class，它是没有状态的，用来定义函数签名。</p>

<p>三个具体的display仅仅是三个符合Observer签名的函数，它们都接受气象历史数据作为参数，在历史数据中各取所需，作出处理。都是没有任何副作用的。
这很合理，毕竟只是display，仅需要对数据进行分析和显示，只读不写，没有什么要改变已有数据的必要性。</p>

<p>最后一个main函数把所有代码串起来，就得到了一份没有任何可变性的代码。</p>

<h1>Mutation vs Transformation</h1>

<p>在Java版的代码中，不同的显示设备不断地根据最新的气象数据改变自己的状态，并根据改变之后的状态来决定其update的行为。</p>

<p>而在Scala代码中，不同的显示设备没有状态，它们都仅仅是函数而已。它们在每次气象变化时根据全部气象历史数据决定自己的行为。</p>

<p>全部代码中没有重新赋值语句，所有的赋值操作都是对局部变量的赋值，程序员可以感知到的变化就只在于observers列表和history列表的增长。而即便是这两个数据结构的增长都是通过不断生成新的不可变的Seq来实现的。</p>

<p>总结来说，Java版代码通过改变已有数据来达成行为的改变。而Scala代码则通过利用不可变的函数和不断生成不可变的数据来实现行为的改变。</p>

<p>这种不可变的代码于什么优势呢？</p>

<p>其好处在于需要程序员操心的事情更少。变化的点越少，麻烦事越少。</p>

<p>如果以上的Java代码有问题，程序员除了需要检查计算平均气温，最高最低气温，气压变化的算法之外，还需要检查重新赋值语句所造成的效果。气温的sum是否算对了？测温次数是否算错了？气压变化是否记录对了？这些都是变化的点，这些都是导致错误的可能性之所在。</p>

<p>而在Scala代码中，如果代码有问题，同样需要检查算法的正确性，也就是检查不可变的函数的正确性。除此之外，只需要检查history列表的增长就可以了。而一个列表的增长是很难出错的。</p>

<p>Java中所有对象状态的改变分散在代码中不同的地方，到了Scala代码中它们都集中到了一个列表的增长上，仅仅通过对这个列表的transformation就驱动了其余全部代码的行为改变。减少了变化的点，就减少了出错的可能情况的数量，减少了程序员的负担。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解释器模式：OOP versus Functional Decomposition]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/06/05/interpreter-pattern-oop-versus-functional-decomposition/"/>
    <updated>2015-06-05T15:34:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/06/05/interpreter-pattern-oop-versus-functional-decomposition</id>
    <content type="html"><![CDATA[<h1>解释器模式</h1>

<blockquote><p>In computer programming, the interpreter pattern is a design pattern that specifies how to evaluate sentences in a language. The basic idea is to have a class for each symbol (terminal or nonterminal) in a specialized computer language. The syntax tree of a sentence in the language is an instance of the composite pattern and is used to evaluate (interpret) the sentence for a client.</p></blockquote>

<p>以上是wiki对解释器模式的描述。</p>

<p>这是一个学术性稍强的模式，不太好找到生活化的比喻。</p>

<p>就直接上代码吧。</p>

<h1>Java</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Expression</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">interpret</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Expression</span><span class="o">&gt;</span> <span class="n">variables</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先有一个表达式的接口，定义一个求值的方法，该方法接收一个String -> Expression的map。</p>

<p>可以猜到，这个map就是该表达式求值的时候需要用到的context。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Plus</span> <span class="kd">implements</span> <span class="n">Expression</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Expression</span> <span class="n">leftOperand</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Expression</span> <span class="n">rightOperand</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Plus</span><span class="o">(</span><span class="n">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="n">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">leftOperand</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>        <span class="n">rightOperand</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">interpret</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Expression</span><span class="o">&gt;</span> <span class="n">variables</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">leftOperand</span><span class="o">.</span><span class="na">interpret</span><span class="o">(</span><span class="n">variables</span><span class="o">)</span> <span class="o">+</span> <span class="n">rightOperand</span><span class="o">.</span><span class="na">interpret</span><span class="o">(</span><span class="n">variables</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Minus</span> <span class="kd">implements</span> <span class="n">Expression</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Expression</span> <span class="n">leftOperand</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Expression</span> <span class="n">rightOperand</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Minus</span><span class="o">(</span><span class="n">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="n">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">leftOperand</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>        <span class="n">rightOperand</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">interpret</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Expression</span><span class="o">&gt;</span> <span class="n">variables</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">leftOperand</span><span class="o">.</span><span class="na">interpret</span><span class="o">(</span><span class="n">variables</span><span class="o">)</span> <span class="o">-</span> <span class="n">rightOperand</span><span class="o">.</span><span class="na">interpret</span><span class="o">(</span><span class="n">variables</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Number</span> <span class="kd">implements</span> <span class="n">Expression</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Number</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">interpret</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Expression</span><span class="o">&gt;</span> <span class="n">variables</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Variable</span> <span class="kd">implements</span> <span class="n">Expression</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Variable</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">interpret</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Expression</span><span class="o">&gt;</span> <span class="n">variables</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">variables</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">variables</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="na">interpret</span><span class="o">(</span><span class="n">variables</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后有表达式的四个实现类：加法表达式，减法表达式，数字表达式，还有变量。</p>

<p>数字表达式在求值的时候就直接返回它被创建时拿到的数字就好了，这是最简单的。</p>

<p>加法和减法的interpret方法在求值的时候仅仅是把行为委托给了两个子表达式，再对子表达式的求值结果做加减法。</p>

<p>变量在求值的时候则是去context里面寻找其name对应的表达式（也就是它所指向的表达式），然后对其求值。</p>

<p>下面是对它们的结合使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InterpreterExample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Expression</span><span class="o">&gt;</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;w&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Number</span><span class="o">(</span><span class="mi">5</span><span class="o">));</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Number</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;z&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Number</span><span class="o">(</span><span class="mi">42</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Plus</span> <span class="n">expr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Plus</span><span class="o">(</span><span class="k">new</span> <span class="n">Variable</span><span class="o">(</span><span class="s">&quot;w&quot;</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Minus</span><span class="o">(</span><span class="k">new</span> <span class="n">Variable</span><span class="o">(</span><span class="s">&quot;x&quot;</span><span class="o">),</span>
</span><span class='line'>                        <span class="k">new</span> <span class="nf">Variable</span><span class="o">(</span><span class="s">&quot;z&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">expr</span><span class="o">.</span><span class="na">interpret</span><span class="o">(</span><span class="n">context</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先构造一个context，里面有w，x，z三个数字。然后计算w+(x-z)的值（看着像不像Lisp？）。</p>

<h2>不过再想一下</h2>

<p>这些代码实际做的是什么事呢？</p>

<p>实际就是把一个以遇到Number为退出条件的递归算法拆碎了。</p>

<p>如果我们不把它拆碎，就写成递归函数会如何呢？</p>

<h1>functions</h1>

<p>用Scala试着实现一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Expr</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Plus</span><span class="o">(</span><span class="n">left</span><span class="k">:</span> <span class="kt">Expr</span><span class="o">,</span> <span class="n">right</span><span class="k">:</span> <span class="kt">Expr</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Expr</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Minus</span><span class="o">(</span><span class="n">left</span><span class="k">:</span> <span class="kt">Expr</span><span class="o">,</span> <span class="n">right</span><span class="k">:</span> <span class="kt">Expr</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Expr</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Number</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Expr</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Var</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Expr</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">ExprEval</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">eval</span><span class="o">(</span><span class="n">expr</span><span class="k">:</span> <span class="kt">Expr</span><span class="o">,</span> <span class="n">context</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Expr</span><span class="o">])</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">expr</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Plus</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">eval</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">context</span><span class="o">)</span> <span class="o">+</span> <span class="n">eval</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">context</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Minus</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">eval</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">context</span><span class="o">)</span> <span class="o">-</span> <span class="n">eval</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">context</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Var</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">eval</span><span class="o">(</span><span class="n">context</span><span class="o">(</span><span class="n">name</span><span class="o">),</span> <span class="n">context</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Number</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">n</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">context</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;w&quot;</span> <span class="o">-&gt;</span> <span class="nc">Number</span><span class="o">(</span><span class="mi">5</span><span class="o">),</span> <span class="s">&quot;x&quot;</span> <span class="o">-&gt;</span> <span class="nc">Number</span><span class="o">(</span><span class="mi">10</span><span class="o">),</span> <span class="s">&quot;z&quot;</span> <span class="o">-&gt;</span> <span class="nc">Number</span><span class="o">(</span><span class="mi">42</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">expr</span> <span class="k">=</span> <span class="nc">Plus</span><span class="o">(</span><span class="nc">Var</span><span class="o">(</span><span class="s">&quot;w&quot;</span><span class="o">),</span> <span class="nc">Minus</span><span class="o">(</span><span class="nc">Var</span><span class="o">(</span><span class="s">&quot;x&quot;</span><span class="o">),</span> <span class="nc">Var</span><span class="o">(</span><span class="s">&quot;z&quot;</span><span class="o">)))</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">eval</span><span class="o">(</span><span class="n">expr</span><span class="o">,</span> <span class="n">context</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是全部代码，与Java版等价。
递归函数很容易看懂，其退出条件也很容易看出来。</p>

<p>69行代码变成了26行。</p>

<p>四个case class代表四种表达式，其中并没有什么方法，只是用来作为数据的承载者。</p>

<p>一个eval函数，用pattern match来对四种表达式进行不同的处理。</p>

<p>不过这次我倒不是要宣扬说解释器模式属于是用不合适的工具解决问题。</p>

<p>而是要介绍两种组织代码的方式：按行组织还是按列组织。</p>

<h1>按行组织代码与按列组织代码</h1>

<p>昨天我在看解释器模式，准备写一个Java实现，再写一个Scala实现，并以此来达到我黑Java的阴暗目的。</p>

<p>但是看了wiki上的示例代码后，马上就想起了去年上过的一门MOOC：<a href="https://www.coursera.org/course/proglang">《Programming languages》</a>。
（这门课是由华盛顿大学的Dan Grossman教授讲授的，内容极好，强烈推荐。）</p>

<p>这门课里有一节就提到了上面说的两种组织代码的方式：按行组织还是按列组织。
这节课的视频在这里：<a href="https://www.youtube.com/watch?v=uEHnI3pq_FM">https://www.youtube.com/watch?v=uEHnI3pq_FM）</a></p>

<p>比如我们上面的两版代码，Java代码把对表达式的求值分散在每个不同的表达式类里。</p>

<p>而Scala代码把求值代码集中写在一个函数里，pattern match每种表达式类型并求值。</p>

<p>如果要做成一个表格的话，就是这样的：</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1esug8rpnudj207o0bwt8v.jpg" alt="table" /></p>

<p>其中的问号代表具体的求值实现。</p>

<p>Java代码横向组织，有一个Plus类，里面有interpret方法，有一个Minus类，里面有interpret方法，等等。这是按照行组织。</p>

<p>而Scala代码则纵向组织，有一个eval函数，纵向把四种表达式的求值都包揽了。这是按列组织。</p>

<p>上面的表格太小，看着不明显，现在假设我们需要打印表达式的功能。那么表格就会变成这样：</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1esugg4y9wij20ba0c43yu.jpg" alt="table2" /></p>

<p>可以想象，Java代码里会在每个表达式类里加一个toString函数的实现。横向扩展，一个类把数据和算法组织在一起。</p>

<p>而在Scala代码里则会写一个toString的递归函数，包揽所有字符串打印的工作。纵向扩展，一个函数去分辨数据类型，并据此选择计算策略。</p>

<h1>OOP versus Functional Decomposition</h1>

<p>那到底哪种组织方式更好呢？</p>

<p>并没有确定的答案，Dan Grossman教授在课程中给出的解释是这样的：</p>

<blockquote><p>FP and OOP often doing the same thing in exact opposite way: organize the program “by rows” or “by columns”.
Which is “most natural” may depend on what you are doing (e.g., an interpreter vs. a GUI) or personal taste.</p></blockquote>

<p>到底如何组织取决于你想要解决什么样的问题，比如你要做一个GUI库，那么数据与算法放在一起，互相接近是最自然的组织方式。这时选择OOP是最好的设计决策。</p>

<p>而如果你要实现的东西类似于本文中的解释器，那么一个递归的算法来统一处理所有表达式类型则是最自然的。这时选择Functional Decomposition是最好的设计决策。</p>

<h1>结语</h1>

<p>OOP与Functional Decomposition，这二者并不是完全对立的。</p>

<p>熟练掌握多种抽象与代码组织方式，正确识别应用场景，据此选择合适的范式，或者是选择多种范式结合使用，才是这一系列博文的真实用意。</p>

<p>只不过由于传统的OO设计模式过于盛行，FP范式接受度不够，才会有这一系列博文黑Java，捧Scala的表象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命令模式的不爽就像用指甲刀刮胡子]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/06/01/command-pattern-fp-implementation/"/>
    <updated>2015-06-01T21:51:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/06/01/command-pattern-fp-implementation</id>
    <content type="html"><![CDATA[<h1>命令模式</h1>

<blockquote><p>在面向对象程式设计的范畴中，命令模式是一种设计模式，它尝试以物件来代表实际行动。命令物件可以把行动(action) 及其参数封装起来，于是这些行动可以被：</p>

<ul>
<li>重复多次</li>
<li>取消（如果该物件有实作的话）</li>
<li>取消后又再重做</li>
</ul>
</blockquote>

<p>以上是wiki对命令模式的定义（术语像是台湾的）。</p>

<p>下面是来自《Head first design patterns》的一个例子：</p>

<p>假设你有很多家用电器：电灯泡，电视，音响，还有一个水疗浴缸。（就是没有手电筒）</p>

<p>每个家用电器都有自己的开关装置，处于不同的位置。如果你想把它们都开启，需要一个一个地去按按钮。</p>

<p>现在你想要有一个遥控器，一键开启所有电器，一键关闭所有电器。</p>

<p>或者是一键完成任意的电器操作组合。</p>

<p>每个电器的接口都是不同的，但是又需要和同一个遥控器集成，于是呢，肯定要有一个统一的接口了。</p>

<p>于是就有了下面命令模式的实现代码。</p>

<h1>Java</h1>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/appliances/Light.java?slice=1:&footer=minimal">
</script>


<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/appliances/TV.java?slice=1:&footer=minimal">
</script>


<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/appliances/Stereo.java?slice=1:&footer=minimal">
</script>


<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/appliances/Hottub.java?slice=1:&footer=minimal">
</script>


<p>首先是有四大件家用电器。各自之间没有什么关系。</p>

<p>这里面的代码都有点傻，不过没关系，我们就想象这都是些很复杂的硬件通信之类的代码就好了。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/Command.java?slice=1:&footer=minimal">
</script>


<p>然后，定义一个Command接口，其中只有一个execute()方法。</p>

<p>之后我们会用它的实现类来操作各种电器。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/commands/LightOnCommand.java?slice=4:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/commands/LightOffCommand.java?slice=4:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/commands/TVOnCommand.java?slice=4:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/commands/TVOffCommand.java?slice=4:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/commands/StereoOnCommand.java?slice=4:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/commands/StereoOffCommand.java?slice=4:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/commands/HottubOnCommand.java?slice=4:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/commands/HottubOffCommand.java?slice=4:&footer=minimal">
</script>


<p>这一大坨，就是Command的实现了。</p>

<p>四大件电器，于是便有八个Command，分别负责每个电器的开启和关闭。</p>

<p>有些电器的开启和关闭比别的要复杂一些，不过这没有关系，因为它们的细节都被封装在Command的实现类里面了，我们接下来的代码只要和Command这个接口打交道就好了。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/MacroCommand.java?slice=1:&footer=minimal">
</script>


<p>还有一个宏命令，用来组合其他命令。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/runner/RemoteControl.java?slice=3:&footer=minimal">
</script>


<p>可以实现遥控器了。</p>

<p><img src="http://elisabethrobson.com/wp-content/uploads/2014/07/Command.jpg" alt="http://elisabethrobson.com/wp-content/uploads/2014/07/Command.jpg" /></p>

<p>这个遥控器上的按钮都是空白的，我们可以给它置入任意我们想要的命令。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/command/runner/RemoteLoader.java?slice=9:&footer=minimal">
</script>


<p>终于可以写一个main函数了：</p>

<ul>
<li>把家用电器和其对应的Command联系起来</li>
<li>把各种Command组合成开启和关闭两个宏命令</li>
<li>把宏命令置入遥控器</li>
</ul>


<p>然后，只要按一个按钮，就可以开启所有电器，享受资产阶级奢靡的生活了。</p>

<p>享受够了之后只要再按一个按钮就可以把所有电器关闭掉。</p>

<p>如果再有别的电器，只需要实现几个新的Command，把新的Command组合入宏命令，继续使用遥控器就好了。</p>

<p>换句话说，因为遥控器和电器之间通过Command解耦了，增加新的电器和新的Command对于遥控器没有影响，遥控器的代码是稳定的。这也就是所谓的对扩展开放，对修改关闭。</p>

<p>很好，很符合良好的设计原则，看着就舒服对吧？</p>

<h2>不过再想一下</h2>

<p>电灯的开启和关闭这两个命令仅仅是对电灯的两个方法的简单代理。</p>

<p>音响的开启和关闭这两个命令仅仅是对音响的两个方法的简单代理。</p>

<p>电视机的关闭也是简单的代理。</p>

<p>这些命令类是否看起来太单薄了呢？它们的方法异常瘦弱，营养不良。</p>

<p>它们除了持有一个需要操作的电器的实例之外，基本没有什么实例级状态。</p>

<p>（电视开机还好，由于需要选择频道，好歹调用了两个方法。
水疗浴缸操作比较复杂，需要调节温度，所以也还稍微好一些。）</p>

<p>每次看到这种贫血的类，我就怀疑它们存在的必要性。</p>

<p>如果我们只是想要给家用电器内的方法构造一个统一个的对外接口，是不是可以用函数式来实现呢？</p>

<h1>functions</h1>

<p>来试试用Scala实现：</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/commandFP/appliances/Light.scala?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/commandFP/appliances/TV.scala?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/commandFP/appliances/Stereo.scala?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/commandFP/appliances/Hottub.scala?slice=1:&footer=minimal">
</script>


<p>首先是有四大件家用电器，这部分和Java的代码等价。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/commandFP/Commands.scala?slice=3:&footer=minimal">
</script>


<p>这一段用来定义各种命令的代码就不同了。</p>

<p>我们对家用电器的各种方法的调用都是只期待其副作用，不期待任何返回值的。所以可以定义一个函数签名Command来涵盖所有这类操作。</p>

<p>和上面的Java代码类似，这里也有一个宏命令，只不过实现简单一些。</p>

<p>电视的开启，水疗浴缸的开和关都有对应的方法来把家用电器的实例封入闭包中。</p>

<p>咦？电灯的开关，音响的开关，以及电视的关闭都跑哪儿去了呢？</p>

<p>由于这几个操作都只涉及到一个方法的调用，它们直接就符合Command的函数签名，所以不用再封入任何闭包了。这一点看下面的代码就明白了。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/commandFP/RemoteControl.scala?slice=3:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/commandFP/RemoteLoader.scala?slice=4:&footer=minimal">
</script>


<p>我们可以定义一个遥控器。其中有开启，和关闭两排按钮。</p>

<p>最后，可以写一个main函数，其中所做的事情和之前Java代码main函数所做的事情是一样的。</p>

<p>只不过，不需要创建各种Command的实例。</p>

<p>而且light.on，stereo.on，light.off，stereo.off，tv.off这几个方法由于符合Command的签名，是可以直接拿来当Command用的。（注意方法名后面没有()，不是调用，而是函数传递）</p>

<p>前后两版代码是等价的。只不过：</p>

<ul>
<li>247行代码变成了93行代码</li>
<li>16个实体变成了7个</li>
</ul>


<p>作为一个多按几个按钮都嫌麻烦的好逸恶劳的资产阶级，这个结果是我所乐于见到的。</p>

<p>更少，更紧凑的代码。更少的实体。我终于可以用更小的成本来享受我昂贵的家用电器了。</p>

<h1>指甲刀刮胡子</h1>

<p>最后回到标题上去：指甲刀刮胡子，意即用不合适的工具解决问题。</p>

<p>命令模式想要做到的事情其实就是给各种不同的操作寻找一个统一的接口，从而实现调用者（遥控器）和被调用者（家用电器）之间的解耦。</p>

<p>给不同的操作寻找一个统一的接口这件事可以通过接口来做，但是我们同时要承担写一堆贫血类的代价。</p>

<p>而如果直接用函数来做的话，则可以得到更紧凑简洁的代码（就像object Commands这个实体内的代码一样）。</p>

<p>该模式提出的时候FP并不如今日盛行，其作者选用了可能会导致贫血类泛滥的解决方案，这无可厚非。传播了解耦和开闭等良好设计的原则也实为功德。</p>

<p>不过今天我们有了剃须刀，就无需一定要用指甲刀来刮胡子了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[职责链模式的别扭就像用门框夹核桃]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/05/30/fp-implementation-of-chain-of-responsibility/"/>
    <updated>2015-05-30T09:40:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/05/30/fp-implementation-of-chain-of-responsibility</id>
    <content type="html"><![CDATA[<h1>职责链模式</h1>

<blockquote><p>责任链模式在面向对象程式设计里是一种软件设计模式，它包含了一些命令对象和一系列的处理对象。每一个处理对象决定它能处理哪些命令对象，它也知道如何将它不能处理的命令对象传递给该链中的下一个处理对象。该模式还描述了往该处理链的末尾添加新的处理对象的方法。</p></blockquote>

<p>以上是wiki对职责链模式的定义。</p>

<p>举个例子来说，我们的系统中需要记录日志的功能。日志需要根据优先级被发送到不同的地方。</p>

<p>低优先级的日志输出到命令行就好了。而高优先级的错误信息则需要通过邮件通知相关人员并且输出到命令行。</p>

<p>这个例子也是来自wiki的。</p>

<p>以下是wiki提供的Java实现：</p>

<h1>Java</h1>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/chainofresponsibility/Logger.java?slice=1:&footer=minimal">
</script>


<p>首先定义一个Logger抽象类。从其setNext和message这两个方法可以看出，我们后面会把多个具有不同writeMessage实现的Logger链到一起，并且依次让它们处理某件需要被记录的事件。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/chainofresponsibility/StdoutLogger.java?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/chainofresponsibility/EmailLogger.java?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/chainofresponsibility/StderrLogger.java?slice=1:&footer=minimal">
</script>


<p>然后有三个Logger的实现，分别为向命令行输出消息，发送邮件（当然是假的），向命令行输出错误。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/chainofresponsibility/ChainOfResponsibilityExample.java?slice=1:&footer=minimal">
</script>


<p>最后，有一个main函数，创建三个Logger的实例，把它们通过setNext链在一起。 只需要调用一次message就可以让三个Logger依次工作。</p>

<p>如果以后再有更多的Logger呢，还是可以通过同样的方式把它们链接起来协同工作。</p>

<p>很好，很强大，很易于扩展，对吧？</p>

<h2>不过再想一下</h2>

<p>这三个Logger的实现类看起来都非常的单薄，弱不禁风。</p>

<p>一个接收mask的构造函数，其唯一职责就是把接收到的mask传递给父类的构造函数。</p>

<p>然后父类根据mask和所发生事件优先级的大小关系决定到底要不要调用子类实现的writeMessage方法。</p>

<p>也就是说，子类完全没有定义自己的实例级状态，其实例级方法的行为也就谈不上随着其状态的变化而变化了。</p>

<p>换句话说，这几个子类存在的价值就在于为父类提供writeMessage这个函数。</p>

<p>啊。。。。。。！</p>

<p>一说到提供函数，我就想到了。。。。。。</p>

<h1>functions</h1>

<p>我想到的自然是FP了，既然需要的是函数，那我们就使用函数好了。</p>

<p>何必用更重的抽象手段：类，去包裹函数呢？</p>

<p>下面就是比较偏函数式的Scala实现：</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/chain/Loggers.scala?slice=1:&footer=minimal">
</script>


<p>这个代码已经简短到我不想解释的程度了。不过还是解释一下吧。</p>

<p>三个log的的等级ERR，NOTICE和DEBUG和之前Java的实现是一样的。</p>

<p>一个case class Event，用来包裹需要被log的事件。</p>

<p>type Logger则是声明了一个函数签名，凡是符合这个签名的函数都可以作为logger被使用。</p>

<p>然后便是三个函数实现，它们将mask通过闭包封进函数内。这三个函数共同依赖一个私有handleEvent函数，其作用和Java代码中的message类似，判断mask和正在发生的事件之间优先级大小关系，并以此决定当前logger是否需要处理该事件。</p>

<p>哎？等一下，这个是职责链模式啊，那个啥，链在哪儿呢？就在main函数里。其中的andThen就可以把三个logger链在一起。</p>

<p>这个andThen是个什么东西？何以如此神奇？</p>

<p>欲知详情，请参考我之前的另一篇博客： <a href="http://cuipengfei.me/blog/2013/12/30/desugar-scala-9/">http://cuipengfei.me/blog/2013/12/30/desugar-scala-9/</a></p>

<p>而链接之后的结果本身也是一个函数，于是我们就可以调用chain并传入Event了。</p>

<p>这份代码和前面Java版的行为是等价的，输出是一致的。</p>

<h1>门框夹核桃</h1>

<p>最后回到标题上去：门框夹核桃，意即用不合适的工具解决问题。</p>

<p>职责链模式想要做到的事情其实就是把多个函数链起来调用。</p>

<p>该模式提出的时候FP并不如今日盛行，其作者选用类来包装需要被链接的多个函数，这无可厚非。</p>

<p>无论是class，还是function，都是为程序员提供抽象的手段。当我们想要链接的东西就是多个function，选择直接用function而非class就会显得更加自然，也更加轻量且合适。</p>

<p>当年design pattern的作者广为传播各种patterns，实为功德。</p>

<p>不过今天我们有了核桃夹，就无需一定要用门框了。</p>

<p>最后，依照惯例，羞辱Java一小下下。
以上wiki提供的实现有77行，偏FP风的实现只有38行，只有一个实体Event。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[策略模式的尴尬就像用菜刀开啤酒]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/05/27/trait-and-fp-makes-strategy-pattern-irrelevant/"/>
    <updated>2015-05-27T08:55:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/05/27/trait-and-fp-makes-strategy-pattern-irrelevant</id>
    <content type="html"><![CDATA[<h1>策略模式</h1>

<blockquote><p>策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。</p></blockquote>

<p>以上是中文wiki中对策略模式的定义。</p>

<blockquote><p>In computer programming, the strategy pattern (also known as the policy pattern) is a software design pattern that enables an algorithm&#8217;s behavior to be selected at runtime. The strategy pattern:
  - defines a family of algorithms,
  - encapsulates each algorithm, and
  - makes the algorithms interchangeable within that family.</p>

<p>Strategy lets the algorithm vary independently from clients that use it.</p></blockquote>

<p>以上是英文版的。</p>

<h1>鸭子</h1>

<p>这种偏学术性的描述实在太绕嘴，来思考一个实例：</p>

<p>我们需要创建一些鸭子，鸭子有什么行为呢？</p>

<ul>
<li>鸭子会飞</li>
<li>会叫</li>
<li>会游泳</li>
</ul>


<p>不过，是否所有的鸭子都是这样呢？万一是玩具鸭子呢？万一是猎人放在水里的用来勾引公鸭子的木质母鸭子呢？万一是外星来客太空鸭呢？</p>

<p>你已经知道什么意思了。</p>

<p>鸭子的各个子类的飞和叫的行为不尽相同。所以我们想把飞和叫这两种行为独立开来，让它们可以自由组合在鸭子的不同子类中。</p>

<p>以上例子来自著名的《Head first design patterns》。</p>

<h1>Java</h1>

<p>以下是《Head first design patterns》附带的代码：</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/strategy/fly/FlyBehavior.java?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/strategy/fly/FlyWithWings.java?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/strategy/fly/FlyNoWay.java?slice=1:&footer=minimal">
</script>


<p>飞行的接口，以及两个实现：一个真会飞，一个不会飞。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/strategy/quack/QuackBehavior.java?slice=1:&footer=minimal">
</script>


<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/strategy/quack/Quack.java?slice=1:&footer=minimal">
</script>


<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/strategy/quack/MuteQuack.java?slice=1:&footer=minimal">
</script>


<p>叫的接口，两个实现，一个真会叫，一个不会叫。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/strategy/ducks/Duck.java?slice=4:&footer=minimal">
</script>


<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/strategy/ducks/MallardDuck.java?slice=4:&footer=minimal">
</script>


<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/java/strategy/ducks/DecoyDuck.java?slice=4:&footer=minimal">
</script>


<p>最后，终于到了鸭子。鸭子的顶层抽象类声明两个字段，一个用来飞，一个用来叫。</p>

<p>这样在子类里就可以把这两个字段锁定到某个特定的实现，以实现任意的组合。</p>

<p>可以看到，绿头鸭（mallard）组合了真会飞和真会叫。而诱饵鸭（decoy，猎人用来勾引鸭子上钩的那个）则组合了不会飞和不会叫。</p>

<p>可以想象随着飞和叫这两个家族的扩大，我们可以组合出更多种类的鸭子来。</p>

<p>很好，很灵活，很强大，对吧？</p>

<h2>不过再想一下</h2>

<p>我们想要的不过是把两个家族的不同行为塞到鸭子的子类里去。是否有更容易的办法来做到呢？</p>

<h1>trait</h1>

<p>一说到把行为塞到某个类里，就会想到mix in，很自然就想到了Scala的trait。</p>

<p>更多关于Scala的trait的详情请参考我的另一篇博客： <a href="http://cuipengfei.me/blog/2013/10/13/scala-trait/">http://cuipengfei.me/blog/2013/10/13/scala-trait/</a></p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/strategytrait/Fly.scala?slice=1:&footer=minimal">
</script>


<p>飞行家族。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/strategytrait/Quack.scala?slice=1:&footer=minimal">
</script>


<p>叫的行为的家族。</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/strategytrait/Duck.scala?slice=1:&footer=minimal">
</script>


<p>最后，鸭子的各种实现。</p>

<p>貌似和Java版的实现差距不大，飞和叫的interface和class变成了trait。</p>

<p>Duck原来是持有Fly和Quack的实例，现在则是变成了混入Fly和Quack这两个trait。</p>

<p>这个代码比Java短一些，紧凑一些，构造函数中的赋值变成了类型声明时的混入。</p>

<h2>不过再想一下</h2>

<p>我们不过是想要把某种行为塞入到某个类里面去，真的有必要用interface，class，trait来把这些行为包裹起来吗？</p>

<p>行为通常是以哪种形式承载的呢？</p>

<h1>functions</h1>

<p>行为通常是以函数承载的。</p>

<p>也就是说我们想要做的不过是把符合某个签名的函数塞到鸭子的子类里去而已，而却用interface，class，trait来把这些行为包裹起来了。有些臃肿不是吗？</p>

<p>下面是直接把函数塞入鸭子子类的做法：</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/blob/master/OODPFP/src/main/scala/strategyfp/Duck.scala?slice=3:&footer=minimal">
</script>


<p>Fly和Quack不再是interface或者是trait。而是type aliase。</p>

<p>Scala的type aliase就类似于C#的delegate，用来声明function signature。</p>

<p>更多关于type aliase的更多详情请参考我的另一篇博客： <a href="http://cuipengfei.me/blog/2013/12/23/desugar-scala-4/">http://cuipengfei.me/blog/2013/12/23/desugar-scala-4/</a></p>

<p>这样，会飞不会飞，会叫不会叫就无需被class或者trait包裹着了，直接就是一个个的函数。</p>

<p>鸭子的子类通过构造函数接收飞和叫的两个函数作为参数，就能够组合不同的行为了。</p>

<p>如果说之前triat的实现方式与Java实现版相比偏重了inheritance而不是composition，这一版的实现则又回到了纯composition的路上了。</p>

<p>紧凑程度，实体数量都比以上两版有改进。这一点从行数上可以窥见：Java版63行，trait版29行，最后一版21行。</p>

<h1>菜刀开啤酒</h1>

<p>最后回到标题上去：菜刀开啤酒，意即用不合适的工具解决问题。</p>

<p>strategy patten要解决的问题其实就是如何把一族行为的不同实现注入到某个类里去。</p>

<p>这一点，最开头的wiki定义已经说的很明白了：</p>

<blockquote><p>Strategy lets the algorithm vary independently from clients that use it.</p></blockquote>

<p>无论是class，还是function，都是为程序员提供抽象的手段。当我们想要抽象的东西就是一段algorithm（正如wiki所说）的时候，用function来做抽象就是更加轻量且合适的选择。</p>

<p>该模式提出的时候FP并不如今日盛行，其作者选用纯OO的方式解决了问题，并广为传播，实为功德。</p>

<p>不过今天我们有了开瓶器，就无需一定要用菜刀了。</p>

<p>最后是一个Java 8的实现：</p>

<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/tree/master/OODPFP/src/main/java/strategyj8/Fly.java?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/tree/master/OODPFP/src/main/java/strategyj8/Quack.java?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/tree/master/OODPFP/src/main/java/strategyj8/BehaviorsRepo.java?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/tree/master/OODPFP/src/main/java/strategyj8/Duck.java?slice=1:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/tree/master/OODPFP/src/main/java/strategyj8/MallardDuck.java?slice=4:&footer=minimal">
</script>




<script src="http://gist-it.appspot.com/https://github.com/cuipengfei/BlogCode/tree/master/OODPFP/src/main/java/strategyj8/DecoyDuck.java?slice=4:&footer=minimal">
</script>


<p>看起来比最开始的那一版好一些，但是我还是看它不顺眼。</p>

<p>为什么呢？</p>

<p>一定是由于我强烈的偏见而没有其他任何原因，一定是这样的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of Reactive Programming Week Two作业导学]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/26/principles-of-reactive-programming-week-2/"/>
    <updated>2015-04-26T17:56:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/26/principles-of-reactive-programming-week-2</id>
    <content type="html"><![CDATA[<h1>声明</h1>

<p>这系列博文的目标读者仅限于报名参加了这门课并且看完了视频，看完了作业的instruction之后仍有困难的同学。</p>

<p>这系列博文不会公布作业的答案，那是违反Coursera的code of honor的。</p>

<p>我只会试着解释作业中已有的代码，以及应该如何入手。</p>

<p>其实，写这个系列博文对我的帮助比对读者的帮助要大。</p>

<p>这周的作业不太难，主要就是一个观察者模式。</p>

<h1>Signal是怎么work的？</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">Var</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">a</span><span class="k">:</span> <span class="kt">calculator.Var</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">calculator</span><span class="o">.</span><span class="nc">Var</span><span class="k">@</span><span class="mi">7</span><span class="n">ca6f5b9</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="nc">Var</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="n">b</span><span class="k">:</span> <span class="kt">calculator.Var</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">calculator</span><span class="o">.</span><span class="nc">Var</span><span class="k">@</span><span class="mi">2286</span><span class="n">d26</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="nc">Signal</span><span class="o">(</span><span class="n">a</span><span class="o">()</span> <span class="o">+</span> <span class="n">b</span><span class="o">())</span>
</span><span class='line'><span class="n">c</span><span class="k">:</span> <span class="kt">calculator.Signal</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">calculator</span><span class="o">.</span><span class="nc">Signal</span><span class="k">@</span><span class="mi">5</span><span class="n">c60548d</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">()</span>
</span><span class='line'><span class="n">res8</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">()</span><span class="k">=</span><span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">()</span>
</span><span class='line'><span class="n">res10</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">b</span><span class="o">()</span><span class="k">=</span><span class="mi">20</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">()</span>
</span><span class='line'><span class="n">res12</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果能搞懂上面的代码是如何work的，作业题中需要用到Signal的地方就不会有太大问题了。</p>

<p>a=1，b=2，c=a+b，所以c就是3。</p>

<p>a变成10之后c就变成了12（10+2）。</p>

<p>b再变成20之后，c就变成了30（10+29）。</p>

<p>这个级联的变化是如何发生的呢？</p>

<p>有两个关键点：</p>

<ul>
<li>Signal的constructor</li>
<li>Signal的update方法</li>
</ul>


<p>先看Signal的constructor。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Signal</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">expr</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">T</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//......</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上是它的签名，关键在于expr的类型签名，expr的类型不是T，而是=>T。</p>

<p>这就意味着expr可以是任何类型为T的表达式，可以是一个字面量，也可以是任意复杂的代码块。</p>

<p>比如Signal(123)是可以的，Signal(complicatedMethodCall())也可以。</p>

<p>最上面那块代码中的val c = Signal(a() + b())就属于后一种。</p>

<p>a() + b()不会被立即求值成3然后传入Signal的constructor，而是整体作为一个可以被反复求值的表达式被记录在Signal的实例中。</p>

<p>constructor的入口参数可以被反复求值是级联变化的基础，那是什么触发了真正的变化呢？</p>

<p>那就是关键点之二：update方法。</p>

<p>update方法的妙处在于，如果一个类A有update方法，那么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">()</span>
</span><span class='line'><span class="n">x</span><span class="o">(</span><span class="n">y</span><span class="o">)</span><span class="k">=</span><span class="n">z</span>
</span></code></pre></td></tr></table></div></figure>


<p>在编译之后会变成这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">()</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="n">y</span><span class="o">,</span><span class="n">z</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>详情请见我之前的一篇博客：<a href="http://cuipengfei.me/blog/2014/06/12/scala-update-method/">http://cuipengfei.me/blog/2014/06/12/scala-update-method/</a></p>

<p>Signal的update方法是protected的，不可访问，所以它只可以从变，不可自变。</p>

<p>而Var把update方法public出来了，这样，在下面这样的代码执行时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">a</span><span class="o">()</span><span class="k">=</span><span class="mi">10</span>
</span><span class='line'><span class="c1">//a.update(10)</span>
</span></code></pre></td></tr></table></div></figure>


<p>a就会通知它的observers去重新求值。
这样就实现了a或者b这样的Var变化的时候，c这样的Signal跟着变化的效果。</p>

<p>搞懂了上面的内容就足以去做作业了。</p>

<h1>怎么和html页面结合起来的？</h1>

<p>执行instruction里提到的webUI/fastOptJS这个task就会把Scala作业代码编译成js。</p>

<p>这个task是scalajs这个dependency带进来的（在webui.sbt里）。</p>

<p>webui这个项目里有一个CalculatorUI.scala文件，也会被编译成js。其中的代码就把作业代码和html的UI结合起来了。</p>

<p>就是这样了，这周的作业不难懂也不太难做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[twu pecha kucha]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/22/twu-pecha-kucha/"/>
    <updated>2015-04-22T14:19:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/22/twu-pecha-kucha</id>
    <content type="html"><![CDATA[<iframe src="http://cuipengfei.github.com//slides.com/pengfeicui/deck-4/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of Reactive Programming Week One作业导学]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/19/principles-of-reactive-programming-week-one/"/>
    <updated>2015-04-19T13:59:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/19/principles-of-reactive-programming-week-one</id>
    <content type="html"><![CDATA[<h1>前尘</h1>

<p>Principles of Reactive Programming在4月13号又开课了。
<a href="https://www.coursera.org/course/reactive">https://www.coursera.org/course/reactive</a></p>

<p>上次开课是在2013年的11月，当时我刚第一次上完Functional programming principles in Scala，热情很高于是就报名参加了这门课。
还群发了一个邮件找人一起上课。</p>

<p>但是上了几周发现有点难，于是就放弃了。现在去bitbucket看，最后一次push停留在了2013-11-18。</p>

<p>后来还在上海被8x鄙视于无形之中。</p>

<h1>后世</h1>

<p>14年做了几个月的Scala开发，后来Functional programming principles in Scala再次开课又上了一遍，拿了个认证证书。</p>

<p>感觉似乎可以再挑战一次。</p>

<h1>今生</h1>

<p>上课习得的知识放在脑子里是不牢靠的。大脑有遗忘周期。</p>

<p>需要有成文或者成代码的产出，作为日后回忆和做spaced repetition的资料。</p>

<p>于是就有了这个即将成为系列的博文中的第一篇《Principles of Reactive Programming Week One作业导学》。</p>

<p>这系列博文的目标读者仅限于报名参加了这门课并且看完了视频，看完了作业的instruction之后仍有困难的同学。</p>

<p>这系列博文不会公布作业的答案，那是违反Coursera的code of honor的。</p>

<p>我只会试着解释作业中已有的代码，以及应该如何入手。</p>

<p>其实，写这个系列博文对我的帮助比对读者的帮助要大。</p>

<h1>正文</h1>

<h2>Heap.scala</h2>

<p>第一周的代码下载下来之后，先来看一下Heap.scala这个文件。</p>

<p>这个文件里定义了很多个trait。现在只需要关注其中一个Heap。</p>

<p>这个就是所有其他trait都会去extend的基类（这个说法合适吗？）。
它定义了所有Heap的实现者都需要实现的方法。</p>

<p>然后BinomialHeap完整实现了Heap定义的所有东西。</p>

<p>Bogus1BinomialHeap到Bogus5BinomialHeap都是继承自BinomialHeap，其中各自覆盖了BinomialHeap的不同方法，以不同的方式引入了bug。
第一周作业的目的就是用ScalaCheck把其中的bug找出来。</p>

<p>这个文件里还有一个IntHeap，这个稍后再说。</p>

<p>实现代码其实就只有这一个文件，接下来看测试代码。</p>

<h2>QuickCheckSuite.scala</h2>

<p>这个文件里主要定义了QuickCheckSuite这个测试类。</p>

<p>这个测试类继承自FunSuite，这是ScalaTest的测试基类。同时mix in了Checkers，这是ScalaTest为了与ScalaCheck集成而提供的trait。</p>

<p>接下来看测试的case：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">checkBogus</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">foundBug</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">check</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">TestFailedException</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="n">foundBug</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">assert</span><span class="o">(</span><span class="n">foundBug</span><span class="o">,</span> <span class="s">&quot;A bogus heap should NOT satisfy all properties. Try to find the bug!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span><span class="o">(</span><span class="s">&quot;Binomial heap satisfies properties.&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">check</span><span class="o">(</span><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">BinomialHeap</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span><span class="o">(</span><span class="s">&quot;Bogus (1) binomial heap does not satisfy properties.&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">checkBogus</span><span class="o">(</span><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">Bogus1BinomialHeap</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span><span class="o">(</span><span class="s">&quot;Bogus (2) binomial heap does not satisfy properties.&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">checkBogus</span><span class="o">(</span><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">Bogus2BinomialHeap</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，每个case都调用了check这个方法，或者是check的变体-checkBogus。</p>

<p>checkBogus里面则调用了check，并且assert说一定要出现TestFailedException异常了，测试才算成功。也就是说checkBogus的目的就是要在某些Heap的实现中找到bug。</p>

<p>现在来看check这个方法本身。它接受一个类型为Prop的参数，这些参数从哪儿来呢？这些参数就是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">BinomialHeap</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">Bogus1BinomialHeap</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些代码。</p>

<p>这就意味着QuickCheckHeap一定要是一个Prop，是不是这样呢？</p>

<h2>QuickCheckHeap.scala</h2>

<p>那就到QuickCheckHeap.scala这个文件中来看一下。</p>

<p>可以看到QuickCheckHeap这个抽象类确实是extends了Properties，而properties又extends了Prop。那么，没问题，这个类型是匹配的。</p>

<p>QuickCheckHeap里可以定义任意多个property，这些property将会检查Heap的实现正确与否。</p>

<p>而且它还mix in了IntHeap，就是前面略过的那个trait。它的目的是锁定Heap这个trait里所定义的A这个元素的类型到Int。</p>

<h2>全部连起来</h2>

<p>第一周作业的已有代码很少，有用的就是这三个文件。</p>

<p>Heap.scala定义了很多个Heap的不同实现。有些是正确的，有些是有bug的。</p>

<p>QuickCheckSuite.scala则是测试的入口点，它由JunitRunner拽着跑起来。
其中的test case使用ScalaCheck去检查对于Heap这种数据结构恒定为true的properties是不是hold住的。</p>

<p>对于Heap这种数据结构恒定为true的properties从哪儿来呢？就来自于QuickCheckHeap.scala。
QuickCheckHeap本身是一个抽象类，不可以被实例化。但是由于有了牛逼的trait，就可以用这种代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">BinomialHeap</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nc">QuickCheckHeap</span> <span class="k">with</span> <span class="nc">Bogus1BinomialHeap</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建出实例，进行测试了。</p>

<p>最后，我们的任务就是在QuickCheckHeap.scala添加更多的properties，把所有实现有误的Heap都揪出来。</p>

<h1>题外话</h1>

<p>有没有发现QuickCheckHeap.scala里面有些奇怪的代码？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">property</span><span class="o">(</span><span class="s">&quot;min1&quot;</span><span class="o">)</span> <span class="k">=</span> <span class="n">forAll</span> <span class="o">{</span> <span class="o">(</span><span class="n">heap</span><span class="k">:</span> <span class="kt">H</span><span class="o">,</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">min</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">(</span><span class="n">heap</span><span class="o">))</span> <span class="n">a</span> <span class="k">else</span> <span class="n">findMin</span><span class="o">(</span><span class="n">heap</span><span class="o">)</span>
</span><span class='line'>  <span class="n">findMin</span><span class="o">(</span><span class="n">insert</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">heap</span><span class="o">))</span> <span class="o">==</span> <span class="n">min</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>property(&#8220;min should be min&#8221;)，这看起来像是一个方法调用啊。</p>

<p>尼玛，方法调用后面怎么跟着一个等号啊？等号后面还有一个有返回值的表达式啊？</p>

<p>这是啥啊？</p>

<p>这是个乍一看很自然，但是仔细一想很费解的Scala语言特性-update方法。</p>

<p>详情请见我之前的一篇博客：<a href="http://cuipengfei.me/blog/2014/06/12/scala-update-method/">http://cuipengfei.me/blog/2014/06/12/scala-update-method/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[English workshop Wuhan 2015.04.14]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/11/wuhan-english-workshop/"/>
    <updated>2015-04-11T14:28:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/11/wuhan-english-workshop</id>
    <content type="html"><![CDATA[<iframe src="http://cuipengfei.github.com//slides.com/pengfeicui/deck/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[职业女性确实处于劣势吗？记一次不甚严谨的考据 -- 向胡适之先生的遥远致敬]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/04/04/women-in-finance-it-and-r-and-d/"/>
    <updated>2015-04-04T01:09:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/04/04/women-in-finance-it-and-r-and-d</id>
    <content type="html"><![CDATA[<h1>源起</h1>

<p>前两天，在一个武汉本地程序员聚集的技术社区微信群里某位群友发了两张图片：</p>

<p><img src="http://ww4.sinaimg.cn/mw690/8b1ece2agw1eqsw4fbiytj20fe0a6q8i.jpg" alt="" /></p>

<p><img src="http://ww1.sinaimg.cn/mw690/8b1ece2agw1eqsw4dzf8ej20fe09v0z9.jpg" alt="" /></p>

<p>这是某个IT公司的招聘宣传，为程序员提供的鼓励师。</p>

<p>（由于图片出现在愚人节期间，不确定该公司是真的有这样的人员配备，还是恶作剧的，此处暂且存疑）</p>

<p>马上群里就有一位X君跳出来说这种事情就是混蛋啊，怎么女人就得给男人端茶倒水擦汗啊。</p>

<p>另外一位Y君就说没有啊，这就是开个玩笑啊，不要这么较真啊。</p>

<p>X君继续说：！@#￥%……&amp;*啊</p>

<p>Y君回应：*&amp;……%￥#@！啊</p>

<p>于是，你也可以猜到的，这中间X君就说了IT行业对于女性从业者存在歧视，收入不平等之类的话。</p>

<p>这让我颇为感慨：武汉也无非是这样。武大的樱花烂熳的时节，群中却有这样标致极了的讨论。其实，又何止武汉呢？</p>

<p>正当X君与Y君酣战之时，有另外一位群友问声称存在收入歧视的X君是否有数据支持其观点。</p>

<p>恰巧我这周正在看《胡适文选》。胡适之先生反复提醒读者<strong>要有怀疑精神，凡事要讲求证据，要用科学的手段得出科学的结论。</strong></p>

<p><strong>胡适之先生之言于我心有戚戚焉，于是我便想要搜罗数据，深入了解一下这个话题，算作是对胡适之先生的遥远致敬。</strong></p>

<p>以上，为源起。</p>

<h1>定题</h1>

<p>近来我正尝试着自我疏离本性中近似于周树人先生的那一部分。</p>

<p>便不太愿用“歧视”这个颇为尖刻的词汇，因而本文的标题中用了“劣势”这一稍为中性的说法。</p>

<p>既然要考据，就不妨把话题放大些，不独观察IT行业的女性，莫若把视角扩宽到整个职业女性上去。</p>

<p>再加上我不是专业的考据家，并没有投入大量时间精力去搜索资料，交叉引证也不够详备，那就不能怕会过谦，也在标题上加上“不甚严谨”这几个字。</p>

<p>于是便有了这个颇显啰嗦的标题：<strong>《职业女性确实处于劣势吗？记一次不甚严谨的考据 &#8211; 向胡适之先生的遥远致敬》。</strong></p>

<p>是为题目由来。</p>

<h1>开篇</h1>

<p>我是一个颇为庸俗的人，也时常会被称为理性的人。</p>

<p><strong>于是，别人看待职业女性的眼光、上司是否会给小鞋穿、同事是否会区别对待等等这些无法量化，难以考量的因素均不采用。</strong></p>

<p><strong>我就只认准了：</strong></p>

<p><strong>在一个行业中具有某种特征的人群占多数就可以被称作是有优势的</strong></p>

<p><strong>在一个行业中具有某种特征的人群挣钱多就可以被称作是有优势的</strong></p>

<p><strong>这两条考校标准。</strong></p>

<p>所以接下来通篇都围绕着<strong>人数多寡和挣钱多少</strong>展开。</p>

<h1>什么行业收入高？</h1>

<p><strong>中华人民共和国国家统计局，中国统计年鉴（2014）</strong>中有一个条目：<strong>按行业分城镇单位就业人员平均工资</strong>，以Excel格式提供：</p>

<p>（这一行Excel实在是太长了，我把它分开截了两张图）</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqsy6hday7j21wc090q76.jpg" alt="" /></p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1eqsy4ojncwj21dq09a0wn.jpg" alt="" /></p>

<p>其中收入最高的三个行业标记为了红色，分别为金融，IT和科研。</p>

<p>原数据可以在这里找到：
<a href="http://www.stats.gov.cn/tjsj/ndsj/2014/indexch.htm" target="_blank">http://www.stats.gov.cn/tjsj/ndsj/2014/indexch.htm</a></p>

<p>点击左侧的“四、就业和工资”然后点击第“4-15”项，里面可以下载Excel。</p>

<p>或者也可以直接通过这个链接下载Excel：
<a href="http://www.stats.gov.cn/tjsj/ndsj/2014/zk/html/Z0415C.xls">http://www.stats.gov.cn/tjsj/ndsj/2014/zk/html/Z0415C.xls</a></p>

<p>那接下来就按图索骥，考量这三个行业中女性的状况。</p>

<p>（为什么只有三个？笔者精力有限，只求管窥，不求完全覆盖）</p>

<h1>金融</h1>

<p>搜寻良久，实在是找不到国内的资料，只好拿些英文的资料作为旁证了。</p>

<p>以下是来自美国的<strong>公平就业机会委员会（Equal Employment Opportunity Commission,缩写为EEOC）</strong>2006年发布的一份报告中关于<strong>女性金融从业者比例</strong>的图表：</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1eqtfg16y00j210q0gg7ez.jpg" alt="" /></p>

<p>从最后一行的汇总信息可以看出，经理级别的职位，女性占18%左右。</p>

<p>专业从业者中，女性约为26%。</p>

<p>技术与销售类的职位则只有个位数的百分点。</p>

<p>但到了书记员，抄写员（Clerical，表中最后一列）这一类的职位，却有43%是女性。</p>

<p><strong>由此不难观察到，在美国，金融这个高薪行业中女性在做着勤务工作，升到经理职位的甚少。</strong></p>

<p>这份报告的出处：
<a href="http://www.eeoc.gov/eeoc/statistics/reports/finance/finance.pdf" target="_blank">http://www.eeoc.gov/eeoc/statistics/reports/finance/finance.pdf</a></p>

<p>公平就业机会委员会的wiki页面：<a href="http://zh.wikipedia.org/wiki/公平就业机会委员会" target="_blank">http://zh.wikipedia.org/wiki/公平就业机会委员会</a></p>

<p>而另外一份来自于英国<strong>平等与人权委员会（Equality and Human Rights Commission，EHRC）</strong>2009年春季发布的报告则有些不同：</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqtfj8tpjsj214010ahcb.jpg" alt="" /></p>

<p>从这张<strong>男女性别比例</strong>的图表可以看出，英国的金融行业男女从业人数基本一比一，差距不大。
从最后一行的汇总数据来看，女性还比男性多一个百分点。</p>

<p>而下面这张出自同一报告的关于<strong>收入差距</strong>的图表，则显露了另外的信息：</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1eqtfg31dloj218c14qe6v.jpg" alt="" /></p>

<p>英国金融行业中，全职工作的男性年收入比全职工作的女性多55%。</p>

<p>而在全社会所有行业中，这个数字也有28%。</p>

<p><strong>可见在英国女性虽然以同等的人数参与进了金融行业，但是却没有拿到哪怕是接近同等的薪水。</strong></p>

<p>这份报告的出处：
<a href="http://www.equalityhumanrights.com/sites/default/files/documents/download__finance_gender_analyis_research.pdf" target="_blank">http://www.equalityhumanrights.com/sites/default/files/documents/download__finance_gender_analyis_research.pdf</a></p>

<p>平等与人权委员会的wiki页面：<a href="http://en.wikipedia.org/wiki/Equality_and_Human_Rights_Commission" target="_blank">http://en.wikipedia.org/wiki/Equality_and_Human_Rights_Commission</a></p>

<h1>IT</h1>

<p>接下来开始看三大高收入行业中的第二名：IT行业中女性的状况。</p>

<p>我找到了一份来自美国的非营利机构：<strong>National Center for Women &amp; Information Technology (NCWIT)</strong>在2009年发布的报告。</p>

<p>（没找到这个机构确切的中文翻译，就保留原文吧）</p>

<p>报告中有一张<strong>女性IT从业人员比例随年份变化的趋势图</strong>：</p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1eqszx7ctf5j20vc0jujte.jpg" alt="" /></p>

<p>容易看出，从上个世纪八十年代中期到九十年代初期，女性IT从业者比例在攀升，从30%增长到37%左右。</p>

<p>在此之后则一路下降，到2008年已经减少到了25%左右。</p>

<p>出自同一报告的还有另外一张<strong>男女收入差距随工作经验变化的趋势图</strong>：</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1eqszx63er1j20vk0h8jto.jpg" alt="" /></p>

<p>可以看出，入行初期男女收入没太大区别，但从第三年开始，逐渐拉开差距，由3%增加到12%。</p>

<p>好了，又是一个高薪行业。<strong>女性只占其中的四分之一，而且收入还比男性少。</strong></p>

<p>报告出处：<a href="http://www.ncwit.org/sites/default/files/legacy/pdf/NCWIT_TheFacts_rev2010.pdf" target="_blank">http://www.ncwit.org/sites/default/files/legacy/pdf/NCWIT_TheFacts_rev2010.pdf</a></p>

<p>NCWIT的wiki页面：<a target="_blank" href="http://en.wikipedia.org/wiki/National_Center_for_Women_%26_Information_Technology">http://en.wikipedia.org/wiki/National_Center_for_Women_%26_Information_Technology</a></p>

<h1>科研</h1>

<p>高薪行业之三，科研。</p>

<p>找到了两份来自欧盟的报告。</p>

<p>第一份报告中有一张<strong>科研行业中女性从业者比例</strong>的图表，数据采集自1999年：</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqtgj4x3wdj20w80pcwhe.jpg" alt="" /></p>

<p>不难看出，其中希腊和葡萄牙的女性科研工作人员较多，占有41%和43%。</p>

<p>德国和匈牙利则很低，女性只有14%到19%。</p>

<p>其他八个国家大致是落在26%到33%这个区间。</p>

<p>第二份报告发布于2012年，其中有一张<strong>男女收入差距</strong>的图表：</p>

<p><img src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqtgj4s92yj20ty0t6wl8.jpg" alt="" /></p>

<p>该图表数据统计于2002年和2006年，从中不难看出，女性在科研行业的各个分支中收入比男性低20%到40%。</p>

<p><strong>由此可见，在欧洲，科研行业作为一个高薪行业，其中女性从业人员较少。
即便进入这个行业的女性，其收入也要较男性低。</strong></p>

<p>第一份报告出处：<a href="https://ec.europa.eu/research/swafs/pdf/pub_gender_equality/wir_final.pdf" target="_blank">https://ec.europa.eu/research/swafs/pdf/pub_gender_equality/wir_final.pdf</a></p>

<p>第二份报告出处：<a href="http://ec.europa.eu/research/science-society/document_library/pdf_06/meta-analysis-of-gender-and-science-research-synthesis-report.pdf" target="_blank">http://ec.europa.eu/research/science-society/document_library/pdf_06/meta-analysis-of-gender-and-science-research-synthesis-report.pdf</a></p>

<p>发布报告的欧盟网站：<a href="http://ec.europa.eu/index_en.htm" target="_blank">http://ec.europa.eu/index_en.htm</a></p>

<h1>小结</h1>

<p><strong>以上观察了三个薪水最高的行业：金融，IT和科研，这三个行业中都呈现出了女性从业人员少于男性，且收入低于男性的态势。</strong></p>

<p>如果这条结论和以上干巴巴的数据无法让您获得感性的认知的话，那我们再结合其他数据做个分析。</p>

<p>以下是来源于非营利组织<strong>National Association of Colleges and Employers (NACE)</strong>的一份报告中关于<strong>平均年工资涨幅</strong>的数据：</p>

<p><img src="http://ww1.sinaimg.cn/large/8b1ece2agw1eqtzeznwmwj21020eqwgt.jpg" alt="" /></p>

<p>可以从最后一行看出，平均工资涨幅是每年7.5%。</p>

<p>这意味着什么呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">55</span><span class="p">,</span><span class="mi">1</span><span class="o">.</span><span class="mo">075</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">6</span><span class="o">.</span><span class="mo">05</span><span class="mi">9885534213904</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">1</span><span class="o">.</span><span class="mo">075</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5670305391527257</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">20</span><span class="p">,</span><span class="mi">1</span><span class="o">.</span><span class="mo">075</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">5210161634544224</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">40</span><span class="p">,</span><span class="mi">1</span><span class="o">.</span><span class="mo">075</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">652504958776575</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果您不是IT行业的看不懂上面的代码没关系，我来解释一下。</p>

<p>这意味着，如果您是一名金融行业的女性从业者，您旁边座位上是一名和您同时进公司的男同事。
你们的关系很好，他甚至都不介意让您看他的工资单。这给在公司属于珍稀物种的您带来了不少宽慰。
但是经过分析自己历年的工资涨幅，您会发现如果您想要和他赚到一样多的钱的话，您还要再工作<strong>六年</strong>才行。</p>

<p>而这个数字在IT行业是<strong>一年半</strong>。</p>

<p>在科研行业是<strong>两年半</strong>到<strong>四年半</strong>。</p>

<p>以上引用报告出处：<a href="https://www.naceweb.org/uploadedFiles/Content/static-assets/downloads/executive-summary/2014-september-salary-survey-executive-summary.pdf" target="_blank">https://www.naceweb.org/uploadedFiles/Content/static-assets/downloads/executive-summary/2014-september-salary-survey-executive-summary.pdf</a></p>

<p>NACE的wiki页面：<a href="http://en.wikipedia.org/wiki/National_Association_of_Colleges_and_Employers" target="_blank">http://en.wikipedia.org/wiki/National_Association_of_Colleges_and_Employers</a></p>

<h1>然后呢？</h1>

<p>以上仅仅是通过交叉引证来描述了职业女性的状况。是属于<strong>实证性的表述（positive statement）。</strong></p>

<p>而关于职业女性应该处于何种状况，那是属于<strong>规范性的表述（normative statement）</strong>，本文就不涉及了。</p>

<p>女性在这些高薪行业中人数少于男性，这是好事吗？这是坏事吗？</p>

<p>女性在这些高薪行业中收入低于男性，应该如何评价这件事呢？</p>

<p>金融，IT和科研，听起来都是理工宅男的专长啊，女的少不是属于正常现象吗？</p>

<p>女性的收入低于男性，那有可能是她们干活不给力啊，那收入低就是应该的吧？</p>

<p>所有这些问题，都属于<strong>价值判断</strong>。通过上面引用的数据，以及常识的积累，我对这些问题会有确定性的判断。
想来你也能猜到我的判断是什么。但是我不把它说出来，<strong>留待读者自己得出结论</strong>。</p>

<h1>最后</h1>

<p>如果您觉得这篇博客写的还可以，请用手机支付宝扫描下面的二维码：</p>

<p><img src="https://tfsimg.alipay.com/images/mobilecodec/T1J3FfXbpsXXXXXXXX" alt="" /></p>

<p>我会把收到的巨款用来置装，美容，健身。</p>

<p>然后穿的花枝招展，抹的五彩绚烂，露出两条人鱼线。</p>

<p>站在女程序员们旁边，给她们端茶倒水擦汗。</p>

<p>并且忘掉我也可以是一个独立的个体，也可以通过某种其他的方式体现自我价值。</p>

<p>成为一名雄性鼓励师，从此人生走上巅峰。</p>

<h1>最后的后面</h1>

<p>最后的后面怎么还有呢？因为标题已经啰嗦了，索性结尾也啰嗦一下。</p>

<p>说是不严谨的考据，但是还是用了十几个番茄钟，五六次git commit，三四次审校。</p>

<p><img src="http://ww2.sinaimg.cn/large/8b1ece2agw1eqtkcps0zaj21g60zejya.jpg" alt="" /></p>

<p><img src="http://ww4.sinaimg.cn/large/8b1ece2agw1eqtkec0012j21fq0ku7a1.jpg" alt="" /></p>

<p>七易其稿也不过是如此的两倍嘛。</p>

<p>不过从此以后，我要与这样的辛劳说再见了。我要成为一个靠性别，靠脸，靠身材吃饭的男人。</p>

<p>所以，你懂的，趁我还能靠智识谋生，扫码吧。</p>

<p>别跑，说的就是你，别骗我，我知道你余额宝收益好几十块钱一天呢。</p>

<p>难道你就不想为一位志存高远的未来雄性鼓励师提供一些帮助吗？</p>

<p>（胆敢说我最终还是免不了被周树人附体的善款要x2）</p>

<p>现在，请回到页面的最上端，再看一遍那两张图片，请问您现在看到的东西和读本文之前还一样吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015第一季度]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/03/29/2015-first-season/"/>
    <updated>2015-03-29T17:48:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/03/29/2015-first-season</id>
    <content type="html"><![CDATA[<p>时间是以何种方式流逝的呢？</p>

<p>三个月瞬间就不见了。</p>

<p>对照着去年的总结和当时对未来的期望写一下2015年第一季度吧。</p>

<h1>博客</h1>

<p>惨不忍睹。</p>

<p>除了一个应付任务的tech radar的session写在了博客上，其他啥都没写。</p>

<p>去年博客有产出是因为在刷Scala这个主线任务。</p>

<p>今年做的都是支线任务，这一点那一点，难以形成有效的产出。</p>

<p>要形成有效的产出，需要有plan，有execution，有retro。</p>

<p>兴之所至，就把今年的博客主线任务定为OO与FP的比较和结合应用吧。</p>

<h1>读书</h1>

<p>不错。</p>

<p>第一个季度已经读完10本书。数量达标。</p>

<p>说过要做的笔记也做了。</p>

<p>笔记的作用确实很好，每隔一段时间回顾一次，spaced repetition可以促进和加深记忆。
不会再有“卧槽，这本书我看过吗？作者都讲了些啥啊？”的尴尬事。</p>

<p>看完了《经济学原理》的微观分册，这是最近几年来读过的最大部头的一本书。鉴于之前一直没有耐心读厚书，这可以算作是一个进步。</p>

<p>开始把待读的书按照内容领域和期待得到的效果分类放到豆列里。这样每次没书看了就去想读的豆列里挑一本。不用每次都700选一了。</p>

<p>读书的领域扩张也在按照之前的计划进行，没有风险。</p>

<p>博客需要有主线任务，读书要配合，可以优先选一些讲paradigm的书来读。</p>

<h1>MOOC</h1>

<p>尴尬。</p>

<p>这三个月一个mooc都没有跟。4月13日，reactive programming课要开，这个一定要跟，而且一定要跟完。</p>

<p>估计完成当时6门课的目标有点悬了。</p>

<p>非常无耻地修改一下mooc的目标吧：配合主线任务，以读书和mooc作为输入，博客作为产出。
数量和领域都不做具体限定。
（果然够无耻）</p>

<h1>体重</h1>

<p>稳定。</p>

<p>上次写年终总结的时候是61.1公斤，现在是61.0公斤。</p>

<p>当时写的是：</p>

<blockquote><p>明年没有太多改进的目标，维持就ok了。</p></blockquote>

<p>没有了减重目标，没有了改进方向，效果果然是不会自动出现的啊。
这是很有意思的一个现象，没有了改进的意愿，或许潜意识里对热量摄入和消耗都没有那么敏感和严格。</p>

<p>还好胸在变大，肱三在变大，腹肌在浮出水面。</p>

<h1>最后</h1>

<p>写个阶段性总结还是有用，发掘出了主线任务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tech radar 武汉 microservice envy]]></title>
    <link href="http://cuipengfei.github.com/blog/2015/01/13/tech-radar-wuhan/"/>
    <updated>2015-01-13T23:18:00+08:00</updated>
    <id>http://cuipengfei.github.com/blog/2015/01/13/tech-radar-wuhan</id>
    <content type="html"><![CDATA[<iframe src="http://cuipengfei.github.com//slides.com/pengfeicui/microservice-envy/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]></content>
  </entry>
  
</feed>
