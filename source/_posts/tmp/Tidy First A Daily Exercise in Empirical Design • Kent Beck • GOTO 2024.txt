00:04 [Music] 00:04 [音乐]
00:12 thank you so much for that introduction uh uh sorry to start with a correction 00:12 非常感谢您的介绍，呃，抱歉以一个更正开始
00:17 I'm not just a signatory of the agile Manifesto I am the first 00:17 我不仅仅是敏捷宣言的签署者，我是第一个
00:25 signatory alphabetically so 00:25 按字母顺序排列的第一个签署者
00:31 um I what a pleasure it's been to be here so far uh I'll be delighted to have 00:31 呃，到目前为止能在这里真是荣幸，呃，我很高兴能有
00:37 this talk over but uh I've been having great conversations with people learning 00:37 这次演讲结束，但呃，我一直在与人们进行很好的交流，学习
00:43 Lots from uh different people's perspectives and it's h it's great to be among a group of Geeks um I tend to talk 00:43 从不同人的观点中学习很多，能和一群极客在一起真是太好了，呃，我倾向于
00:52 to more business people these days and uh it feels great to be home 00:52 最近更多地与商业人士交谈，呃，在这里感觉很棒
00:58 where I can I'll be talking a little bit about some math and I don't need to worry about scaring anybody and so it's 00:58 在这里我可以稍微谈一些数学，我不需要担心吓到任何人，所以
01:05 good to be here in uh in the Bible uh it talks 01:05 能在这里真是太好了，在圣经中谈到
01:11 about the lifespan of a person being uh three score years and 10 70 years but uh 01:11 一个人的寿命是七十岁，但呃
01:20 with medical advances of course we we've extended the lifespan and so I like to think of it in 01:20 随着医学的进步，我们当然延长了寿命，所以我喜欢这样想
01:27 terms of three billion seconds we we all 3 billion seconds is about 92 01:27 用三十亿秒来计算，我们都是三十亿秒大约是92
01:34 years so uh 2/3 of mine are gone uh for most of you onethird of 01:34 年，所以呃，我的三分之二已经过去了，对你们大多数人来说三分之一
01:42 yours is gone but there's something that's driven me my whole career which is I hate 01:42 你的时间已经过去了，但有一件事一直驱动着我的整个职业生涯，那就是我讨厌
01:49 wasting time each second is a a precious opportunity and giving it up to 01:49 浪费时间，每一秒都是宝贵的机会，把它放弃给
01:58 activities that create no value value that aren't enjoyable is an opportunity 01:58 那些不创造价值的活动，那些不愉快的价值，是一个机会
02:06 never never to be returned every second one of these seconds is ticking off I hope I'm not triggering any like 02:06 永远不会回来，每一秒这些秒数都在滴答作响，我希望我没有触发任何类似
02:13 existential crises but if so feel free to take a 02:13 存在危机，但如果有的话，请随意休息一下
02:19 moment and early on in my career I saw software development activities uh 02:19 时刻，在我职业生涯早期，我看到了软件开发活动
02:28 advocated that were very very clearly waste of time a 02:28 提倡的那些非常非常明确是浪费时间
02:36 long when I tell the the kids these days uh about documentation measured in in 02:36 很久以前，当我告诉现在的孩子们关于文档测量在
02:42 meters they don't believe me but there really were meters of documentation on a 02:42 米时，他们不相信我，但确实有米长的文档在
02:48 shelf that were then never looked at again so that's a waste of those seconds 02:48 架子上，然后就再也没有看过了，所以那是浪费了那些秒数
02:55 it's a waste of opportunity what could we do that would be different now we're Engineers when 02:55 这是浪费机会，我们能做什么会有所不同呢？现在我们是工程师，当
03:02 you optimize you don't maximize there's always some tradeoff so we can't try to waste zero 03:02 你优化时不要最大化，总是有一些权衡，所以我们不能试图浪费零
03:09 seconds but we sure can try and waste fewer of them and that was the 03:09 秒，但我们当然可以尝试浪费更少的秒数，这就是
03:15 motivation behind extreme programming what if we stripped software development back to its Essence and we did the stuff 03:15 极限编程背后的动机，如果我们把软件开发剥离到其本质，我们做那些
03:22 that we absolutely knew absolutely mattered and we did as little of the 03:22 我们绝对知道绝对重要的东西，我们尽可能少地做
03:28 other stuff as possible what's that going to look like and it turns out it has 03:28 其他的事情，那会是什么样子，结果证明它有
03:33 profound technical social business implications if you start from from that 03:33 深刻的技术、社会、商业影响，如果你从那个
03:40 perspective but uh that's the direction I've tried to go with uh with everything 03:40 视角开始，但呃，这是我试图去的方向，用一切
03:47 that I've done with software development it's not like okay and you can also draw these kind of diagrams and you can also 03:47 我在软件开发方面所做的一切，不是说好吧，你也可以画这些图表，你也可以
03:53 have that kind of meeting sure there's lots of reasons to add stuff but what if we stripped it 03:53 有那种会议，当然有很多理由添加东西，但如果我们将它
03:60 down to its Essence and had geeky people talking to 03:60 剥离到其本质，让极客们与
04:06 people with needs that's the essence of software development as part of that process I 04:06 有需求的人交谈，这就是软件开发的本质，在这个过程中我
04:14 I've gotten to meet many interesting people and in 2005 I got to meet two of 04:14 我遇到了许多有趣的人，在2005年我遇到了其中两个
04:20 my heroes I was uh on a panel at oopsa celebrating the 25th anniversary 04:20 我的英雄，我当时在oopsa的一个小组讨论会上庆祝25周年
04:28 of the publication of the book structured design structured design is kind of a green book I had it as a 04:28 结构化设计这本书的出版，结构化设计是一本绿色的书，我把它作为
04:36 college textbook and I got to meet the authors 04:36 大学教科书，我得以见到作者们
04:41 Larry Constantine and uh Ed Jordan a blessed memory and as I Was preparing for 04:41 拉里·康斯坦丁和呃，埃德·乔丹，愿他安息，当我在准备
04:50 this this uh panel I thought you know I really should read this book it was a 04:50 这个小组讨论会时，我想你知道我真的应该读这本书，这是一本
04:56 college text so of course I didn't read it then and even if I had that wouldn't understood it so I started looking at 04:56 大学教材，所以我当然没有读过它，即使我读了也不会理解，所以我开始看
05:04 this then 25y old book 44 years old now 05:04 这本当时25岁的书，现在44岁了
05:09 wow and I just got so excited the more I looked at it the more I realized that 05:09 哇，我变得如此兴奋，我越看它，我越意识到
05:16 these two guys back in the the early early days of computing had laid out the equivalent of 05:16 这两个人在计算的早期就制定了相当于
05:24 Newton's Laws of Motion for software development they had laid out here's why 05:24 软件开发的牛顿运动定律，他们制定了这里为什么
05:31 software development costs so much and here's what you can do about it 05:31 软件开发如此昂贵，以及你能对此做些什么
05:37 but the examples were dated to say the least there was a 05:37 但这些例子过时了，至少可以说，有一个
05:42 long discussion of higher level languages versus Assembly Language who's going to 05:42 关于高级语言与汇编语言的长篇讨论，谁会
05:48 win there were examples with paper tapes and punch cards and I thought people 05:48 获胜，有纸带和打孔卡的例子，我想人们
05:54 just aren't going to get this book because the examples are are uh out of 05:54 只是不会理解这本书，因为这些例子是呃过时的
06:01 date but the principles the principles are absolutely dead on oh I was so 06:01 但原则，原则是绝对正确的，哦，我太
06:07 excited so I got to meet Ed Larry had a a memorable breakfast with them we were 06:07 兴奋了，所以我遇到了埃德，拉里和他们一起吃了难忘的早餐，我们是
06:13 on the panel they kicked my butt as you should in a situation like that they 06:13 在小组讨论会上，他们像那样踢了我的屁股，正如你应该在那种情况下做的那样，他们
06:20 were my elders and uh at that time I vowed I'm going to 06:20 是我的长辈，呃，在那时我发誓我要
06:28 write the updated version of structured design and the Heart of structured 06:28 写结构化设计的更新版本，结构化设计的核心
06:34 design the heart of the argument is that uh coupling is the key issue in software 06:34 设计的核心论点是耦合是软件中的关键问题
06:43 design and they had a very specific definition of coupling which we've kind of lost and I'm going to advocate for 06:43 设计，他们对耦合有一个非常具体的定义，我们已经有点失去了，我要倡导
06:50 coming back to here today their definition of coupling is 06:50 回到今天他们的耦合定义是
06:56 two elements in a design are coupled if when you change one you have to change 06:56 设计中的两个元素如果当你改变其中一个时，你必须改变
07:02 the other that's that's the original definition of coupling um and I'll get into why that's 07:02 另一个，这就是耦合的原始定义，呃，我会讲到为什么
07:11 uh why that's expensive and what we can do about it uh as I get through the 07:11 那很昂贵，以及我们能对此做些什么，呃，当我完成
07:16 talk so 2005 you know how hard can this 07:16 演讲时，所以2005年，你知道这有多难
07:22 be so many worthwhile and annoying things start by asking how hard can this 07:22 能有多少值得的和烦人的事情从问这有多难开始
07:28 be and so was with this book started collecting examples I kind 07:28 能，所以这本书也是如此，开始收集例子，我
07:34 of I mean I figured I knew how to design software so yeah I just have to explain 07:34 意思是我认为我知道如何设计软件，所以是的，我只需要解释
07:41 what I'm thinking about when I do a good job and we're 07:41 我在做好的工作时在想什么，我们就
07:46 finished so I came up with one kind of uh branding overarching view of of what 07:46 完成了，所以我想出了一个关于什么的总体品牌观点
07:55 I meant by Design and that went a little ways and then it fell apart and then I 07:55 我所说的"设计"的意思，那走了一段路，然后就崩溃了，然后我
08:09 did some other stuff and back and forth and back and forth so 08:09 做了一些其他的事情，来回反复
08:16 finally three three four years ago now four years ago now I had some 08:16 终于三三四年前，现在四年前，我有一些
08:23 time and I said okay I'm just going to start over from scratch I have two weeks that unexpectedly free let me just dive 08:23 时间，我说好吧，我要从头开始，我有两周意外的空闲时间，让我直接投入
08:28 in and see how much of this book I can get written maybe I'm ready 08:28 进去看看我能写多少这本书，也许我准备好了
08:34 now and uh and I sat down I started typing and the first words off of my 08:34 现在，呃，我坐下来开始打字，从我的手指中出来的第一个词是
08:41 finger were software design is an exercise in human 08:41 软件设计是人类关系的练习
08:47 relationships no no no no no no like I I'm all for that human stuff you know I 08:47 关系，不不不不不不，就像我完全支持那些人类的东西，你知道我
08:54 participate in it most days but I want to talk about coupling and cohesion and 08:54 大多数时候都参与其中，但我想谈论耦合和内聚性以及
08:60 power laws and and like making large changes in small safe steps and all that 08:60 幂律，以及像在小的安全步骤中做出大的改变等等
09:01 that how in the world is this a story about human relationships and the further I got into 09:01 那些，这怎么是一个关于人类关系的故事，我越深入
09:08 it the more I wrote about it the more I realized that every technical detail I 09:08 它，我写得越多，我越意识到每一个技术细节我
09:13 was discussing really did come out come around to how people got along and the 09:13 讨论的真的都归结到人们如何相处以及
09:19 reasons we had trouble with software design wasn't because we didn't know what to 09:19 我们在软件设计方面遇到麻烦的原因不是因为我们不知道要
09:25 design is because we didn't get along trust is lost 09:25 设计，而是因为我们相处不好，信任丧失了
09:30 people things are delayed unnecessarily incentives diverge and then collapse that's what makes software 09:30 人们事情不必要地延迟，激励措施分歧然后崩溃，这就是使软件
09:39 design difficult we need Superior skills as designers in service of the 09:39 设计困难，我们需要作为设计师的卓越技能来服务于
09:46 relationships in software development and I'll talk more about what I mean by that in a 09:46 软件开发中的关系，我会更多地谈论我的意思
09:53 second so then book writing is uh br exercise in 09:53 第二个，所以写书是呃范围削减的练习
10:00 scope cutting I always start with an idea about a okay I'm going to write a book and I hadn't written a book for 15 10:00 我总是从一个想法开始，好吧我要写一本书，我已经15年没有写书了
10:07 years so already I'm like can I still do this turns out if you just put your butt 10:07 年了，所以我已经在想我还能做到吗，结果证明如果你只是坐下来
10:13 in the seat and you type long enough you'll have a book I don't know what it's going to be 10:13 在座位上，打字足够长时间，你就会有一本书，我不知道它会是什么
10:18 about I don't know if it all hangs together I don't know if anybody wants to read it but 50,000 words is 50,000 10:18 关于，我不知道它是否都连贯，我不知道是否有人想读它，但5万字就是5万
10:25 words so yeah I I could still write a book but I got I always the process is 10:25 字，所以是的，我仍然可以写书，但我总是这个过程是
10:31 always the same here's a topic oh that's way too small I couldn't possibly write a whole book about that right right 10:31 总是相同的，这里有一个主题，哦，那太小了，我不可能写一整本书关于那个，对对
10:38 right right right oh crap that's way more than it's going to fit into one book which 10:38 对对对，哦，糟糕，那比能装进一本书的多得多，哪个
10:43 part of it I want I want to talk about all of it oh which part of it am I going to talk about okay this little part here 10:43 部分，我想我想谈论所有这些，哦，哪个部分我要谈论，好的，这里这个小部分
10:51 all right but that's way too small to fit in a book type type type oh crap 10:51 好吧，但那太小了，装不进一本书，打字打字打字，哦，糟糕
10:57 that's way too much to fit into one book which part of it so I went through that at least three 10:57 那太多了，装不进一本书，哪个部分，所以我至少经历了三次
11:05 times and I came up with the first book that I published last year called tidy 11:05 次，我想出了去年出版的第一本书，叫做整洁
11:12 first question mark uh if you're thinking of writing a book don't put 11:12 第一问号，呃，如果你在考虑写书，不要放
11:17 punctuation in the title just like as a logistical matter 11:17 标点符号在标题中，就像作为一个后勤问题
11:23 it's a pain so anyway I have this book with a punctuation in the title called 11:23 这很痛苦，所以无论如何我有这本标题中有标点符号的书叫做
11:28 tidy first and and here's the moment I wanted to talk about software design in 11:28 整洁第一，而这就是我想谈论软件设计的时刻
11:35 modern society but the boiled it down to this moment every programmer Encounters 11:35 现代社会，但将其简化为这个时刻，每个程序员都会遇到
11:42 this moment 20 times a day there's some code I need to change it it's a mess do 11:42 这个时刻一天20次，有一些代码我需要改变它，它一团糟，做
11:51 I tidy first that is a softwar design moment 11:51 我先整理一下，那是一个软件设计时刻
11:57 it's the it's the smallest Quantum of software design that 11:57 它是最小的软件设计量子
12:03 you can do cuz sometimes you can just power through but 12:03 你能做的，因为有时你可以直接冲过去，但是
12:08 sometimes you're like well let me make my job a little easier before I do my job and should you tidy first answer is 12:08 有时你会想，让我在做工作之前让我的工作变得容易一些，你应该先整理吗？答案是
12:18 sometimes yes sometimes no probably yes but don't get carried away that's the 12:18 有时是，有时不是，可能是是，但不要被冲昏头脑，这就是
12:24 now you don't have to read the book so I knew I was going to do that right 12:24 现在你不必读这本书，所以我知道我要做对了
12:32 okay so that's that's the micro that's the book that came out last year tidy 12:32 好吧，那就是微观的，那是去年出版的书，整洁
12:38 first and I'll talk about some of the themes in it but for today I'm working 12:38 第一，我会谈论其中的一些主题，但今天我在工作
12:43 on book two which is about called tidy together about how the Tidy first is 12:43 在第二本书上，叫做一起整洁，关于整洁第一是
12:50 really about your relationship with yourself you're a programmer you have to change some janky 12:50 真的是关于你与自己的关系，你是一个程序员，你必须改变一些蹩脚的
12:56 code do you this is a self-care for PR grammar you know let me just extract 12:56 代码，你这是程序员的自我护理，你知道让我提取
13:02 some helpers before I change things oh but I don't have enough time and uh and 13:02 一些助手在我改变事情之前，哦，但我没有足够的时间，呃，
13:08 I should be able to power through this and or maybe you're like no let me just make my job a little 13:08 我应该能够冲过这个，或者也许你就像不，让我让我的工作变得容易一些
13:15 easier okay so it's about your relationship with yourself and there's 13:15 更容易，好的，所以这是关于你与自己的关系，还有
13:20 technique involved and there's theory behind why it works and when it works and when you shouldn't do it tidy 13:20 技术涉及，还有理论解释为什么它有效以及何时有效以及何时不应该这样做，整洁
13:26 together the book I'm working on now is about teams of programmers working together now we have interpersonal 13:26 一起，我现在正在写的书是关于程序员团队一起工作的，现在我们有人际关系
13:33 relationships as difficult as intrapersonal relationship is interpersonal oh my 13:33 就像内在关系一样困难，人际交往，哦我的天
13:40 God this people stuff is not my strong suit let me tell you but as designers 13:40 上帝，这人际交往不是我的强项，让我告诉你，但作为设计师
13:47 when we make design decisions we're not just interacting and we're in a team we're not just 13:47 当我们做设计决策时，我们不仅仅是在互动，我们在一个团队中，我们不仅仅是在
13:53 interacting with the code anymore we're interacting with our whole team maybe not this moment 13:53 与代码互动，我们在与整个团队互动，也许不是这个时刻
13:60 but over time so how's that going to 14:00 但随着时间的推移，那么那将如何进行
14:05 work what I'm going to talk about today is even a step back from 14:05 工作，我今天要谈论的是甚至比这更进一步
14:10 that and kind of where I'm going with this I'm imagining a Trilogy Where tidy first is 14:10 那，以及我在这方面的发展方向，我想象一个三部曲，其中整洁第一是
14:18 this is about you and yourself tidy together is about your immediate 14:18 这是关于你和你自己，一起整洁是关于你的直接
14:24 colleagues and the third part of the trilogy is about the relationship between technology and 14:24 同事，三部曲的第三部分是关于技术与
14:32 business um so and that'll be more at an architectural level if I ever get around 14:32 商业的关系，呃，如果我有时间的话，那将在架构层面
14:38 to writing it but we don't know these things I have plans 14:38 来写它，但我们不知道这些事情，我有计划
14:44 but okay so that's where we are 14:44 但好的，那就是我们现在的处境
14:51 um I like handwriting my slides because then if I have a thought 14:51 呃，我喜欢手写幻灯片，因为那样如果我有一个想法
14:58 we can all share it 14:58 我们都可以分享它
15:03 um here's what here's what software development looks like at the at the highest 15:03 呃，这就是这就是软件开发在最高层面上的样子
15:12 levels somebody has an idea for how the software is going to change oh I forgot 15:12 层次，有人对软件将如何改变有一个想法，哦，我忘了
15:18 to mention that why do we design so we can change 15:18 提到那为什么要设计，所以我们能改变
15:23 things we have the software it runs the way it runs we don't care the the computer 15:23 事情，我们有软件，它按其方式运行，我们不在乎，计算机
15:29 doesn't care how it's designed if we don't have to change it we don't care about how it's designed either it's only 15:29 不关心它是如何设计的，如果我们不必改变它，我们也不关心它是如何设计的，只有
15:37 when we want to change its behavior in some way that the design becomes 15:37 当我们想要以某种方式改变其行为时，设计才变得
15:42 important so somebody has an idea for how the 15:42 重要，所以有人对如何
15:47 system could behave differently now maybe it's behaved differently with respect to users maybe it's behaved 15:47 系统可以表现得不同，现在也许它在用户方面表现得不同，也许它在
15:54 differently with respect to the resources that we use with operations but the behavior the system as observed 15:54 资源使用方面表现得不同，但行为，系统作为观察到的
16:00 from the outside has to change in some 16:00 从外部来看必须以某种方式改变
16:07 way and then we Implement some feature and part of the Magi of software 16:07 方式，然后我们实现一些功能，软件魔法的一部分
16:13 is the more features we implement the more ideas we get which is a good 16:13 是我们实现的功能越多，我们得到的想法就越多，这是好事
16:20 thing um and if this was all there was to software development it really would 16:20 事情，呃，如果这就是软件开发的全部，那真的会
16:27 would be I mean it's difficult but is relatively 16:27 会是，我的意思是它很困难，但相对
16:34 straightforward fortunately unfortunately I don't it's just true that there's another layer under the 16:34 直接，幸运的是不幸的是我没有，这只是真的，在
16:43 water we don't just implement the features we implement the features in the presence of some 16:43 水下还有另一层，我们不仅仅实现功能，我们在一些
16:49 structure of the system and the structure of the system 16:49 系统结构的存在下实现功能，系统的结构
16:55 profoundly affects how expensive those features will be to implement 16:55 深刻影响着这些功能实现的费用
17:00 and the structure is never right is never perfect now take the Tidy first 17:00 结构从来不是正确的，从来不是完美的，现在以整洁第一为例
17:07 example where I'm got a dysfunction and it's kind of janky the structure is 17:07 例子，我有一些功能失调，它有点蹩脚，结构是
17:12 wrong I can change the structure so that the change I'm about to make is easier 17:12 错误的，我可以改变结构，使我即将做出的改变更容易
17:18 to do that's the Tidy first flow so I have an idea first thing I do is change the 17:18 做，这就是整洁第一的流程，所以我有一个想法，我做的第一件事是改变
17:26 structure then I implement the feature 17:26 结构，然后我实现功能
17:32 and here we're already starting to come into conflicts those features are very 17:32 在这里我们已经开始出现冲突，这些功能非常
17:38 visible to the everybody who's affected by the software the structur is only 17:38 可见于受软件影响的每个人，结构只是
17:44 visible to the programmer who's walking the path nobody else can see that so 17:44 可见于走在路径上的程序员，其他人都看不到，所以
17:53 the intuition that I hear over and over from programmers is we're not inves 17:53 我从程序员那里反复听到的直觉是我们没有投资
17:59 investing anywhere near enough in the structure of the system technical debt 17:59 在系统结构上的投资远远不够，技术债务
18:04 is the classic example and part of the reason for that is that 18:04 是经典例子，部分原因是
18:12 that structure is only indirectly 18:12 结构只是间接地
18:17 observable the investors in the software and the users of the software might be able to see that features are coming 18:17 可观察的，软件的投资者和软件的用户可能能够看到功能正在到来
18:25 more slowly than they used to be they might be able to see that there are more defects than there used to 18:25 比以前更慢，他们可能能够看到缺陷比以前更多
18:30 be and that's caused by an underinvestment in structure 18:30 是由对结构的投资不足造成的
18:37 but it's by then it's way too late 18:37 但到那时已经太晚了
18:43 so part of the goal of this I call I call the whole theme of what I'm 18:43 所以这部分目标，我称之为我把我的整个主题称为
18:49 studying empirical software design and I'll I'll say what I mean by empirical in a 18:49 研究实证软件设计，我会说我所说的实证是什么意思
18:55 second um the goal of empirical software or design is to bring balance to the 18:55 第二个，呃，实证软件或设计的目标是为
19:01 investment in features and in 19:01 功能和结构的投资带来平衡
19:06 structure now part of the magic of software is uh sometimes you implement a feature 19:06 现在软件魔法的一部分是，呃，有时你实现一个功能
19:15 and that leads you to realize that the structure could be better oh we we want to implement a 19:15 这让你意识到结构可以更好，哦，我们想要实现一个
19:21 bunch of things like this so let's improve the structure and then future 19:21 这样的事情，所以让我们改进结构，然后未来的
19:27 features will be easier and the economic magic of software is 19:27 功能会更容易，软件的经济魔法是
19:34 sometimes the structure suggests 19:34 有时结构会建议
19:39 ideas oh implementing these kinds of things is easy so let's just do that I 19:39 想法，哦，实现这些事情很容易，所以让我们就这样做，我
19:46 worked at a a payroll company called Gusto for three 19:46 在一家叫做Gusto的薪资公司工作了三年
19:51 years and we kind of accidentally implemented two two payroll calculators 19:51 年，我们意外地实现了两个薪资计算器
19:59 now payroll calculation is really expensive complicated difficult to implement in the US 19:59 现在薪资计算在美国真的昂贵复杂难以实现
20:06 anyway 8700 tax authorities in United 20:06 无论如何，美国有8700个税务机关
20:12 States yeah seems like it would be easy it is definitely not easy and we had two 20:12 个州，是的，看起来应该很容易，但绝对不容易，我们有两个
20:17 copies of it you know whoops somebody implemented one over 20:17 个副本，你知道，哎呀，有人在
20:23 here for good reason somebody else implemented another one over here for good reason now they both got 20:23 这里实现了一个，有充分理由，另一个人在那边实现了一个，也有充分理由，现在它们都得到了
20:32 maintained and uh I mean we it was a small company we felt the pain of it the 20:32 维护，呃，我的意思是这是一家小公司，我们感受到了痛苦
20:38 opportunity cost lost because we had to update in two places at once but when's the activation energy 20:38 机会成本损失，因为我们必须同时在两个地方更新，但是激活能什么时候
20:47 ever going to be high enough to unify the two well eventually it it did get high enough oh did you know that about 20:47 足够高来统一这两个呢，好吧，最终它确实变得足够高了，哦，你知道关于
20:54 the frog the frog jumps out of the water frogs don't actually boil to death 20:54 青蛙的事吗，青蛙跳出水面，青蛙实际上不会被煮死
21:01 eventually there's some kind of randomy moment where they just go no this is too hot and they jump out before they die 21:01 最终会有一个随机的时刻，它们只是说不，这太热了，然后在死之前跳出来
21:11 anyway I you never know where the value is going to come from in a talk like this 21:11 无论如何，你永远不会知道在这种演讲中价值会从哪里来
21:18 so there So eventually the activation 21:18 所以最终激活
21:24 energy was high enough we took the time and it took a long time to unify the two 21:24 能量足够高，我们花了时间，花了很长时间来统一这两个
21:30 payroll calculators and then somebody said oh you know what since now it's easy to 21:30 薪资计算器，然后有人说，哦，你知道吗，既然现在很容易
21:37 call the payroll calculator let's embed the payroll calculator in our homepage as part of 21:37 调用薪资计算器，让我们把薪资计算器嵌入到我们的主页中作为
21:43 our marketing oh okay and it became a very popular feature you could just go to 21:43 我们的营销，哦，好的，它成为了一个非常受欢迎的功能，你可以直接去
21:49 gusto.com type in the requirements for this month's payroll for one person poof 21:49 gusto.com，输入一个人本月薪资的要求，砰
21:57 outc comes the answer that you really could you you could copy those numbers with a pen and put them onto some piece 21:57 答案就出来了，你真的可以，你可以用笔复制那些数字并把它们放在一些
20:03 of paper cuz this is America okay I can't I can't go down 20:03 纸上，因为这是美国，好吧，我不能我不能往下说
20:10 that road okay uh but we would never have implemented this marketing feature if it 20:10 那条路，好的，呃，但如果
20:17 hadn't been cheap number one and number two we would have never implemented this marketing feature if somebody hadn't 20:17 不便宜，第一，如果我们没有实现这个营销功能，第二，如果我们没有实现这个营销功能，如果有人没有
20:23 known that using a payroll calculator was cheap today where it was really 20:23 知道使用薪资计算器今天很便宜，而在那里它真的
20:28 expensive expensive 3 months ago and that's another source of value 20:28 昂贵，三个月前很昂贵，那是另一个价值来源
20:35 in software part of the part of this I don't want to waste my time is I don't want to waste 20:35 在软件中，这部分我不想浪费时间，我不想浪费
20:43 opportunities and software has this magical nonlinear payoff 20:43 机会，软件有这种神奇的非线性回报
20:49 function where sometimes you can cross a threshold and either dramatically 20:49 函数，有时你可以跨越一个阈值，要么戏剧性地
20:56 increase the value of a feature or dramatically reduce its cost and that's 20:56 增加功能的价值，要么戏剧性地降低其成本，那就是
21:02 what I'm going for here I don't want things to be a little bit I don't want to work a little bit harder for a little 21:02 我在这里追求的，我不希望事情只是一点点，我不希望为了得到一点点
21:07 bit more value I want to work a little bit different for the chance for those 21:07 更多价值而稍微努力一点，我想要稍微不同地工作，为了那些
21:15 jackpot payoffs that's what I'm going for and when I say jackpot payoffs I 21:15 头奖回报，这就是我追求的，当我说头奖回报时，我
21:20 don't might be money it might be satisfaction it might be societal 21:20 可能不是金钱，可能是满足感，可能是社会的
21:25 impact I'm as a good geek is I'm just going to ignore which of those goals I'm trying 21:25 影响，作为一个好极客，我只是会忽略我正在尝试的那些目标
21:31 to achieve at the moment and just see if it's 21:31 在此刻实现，并只是看看是否
21:40 possible okay so we want to do software design so we 21:40 可能，好的，所以我们想要做软件设计，所以我们
21:46 can change the software so that we can achieve these nonlinear outputs what are 21:46 可以改变软件，这样我们就能实现这些非线性输出，什么是
21:53 the constraints on any process of design I'm not going to tell you how to design 21:53 任何设计过程的约束，我不会告诉你如何设计
22:00 but I am going to be uncompromising about saying what the constraints are on 22:00 但我会坚决地说出约束条件是什么
22:08 any style of design that you choose so the first constraint is 22:08 你选择的任何设计风格，所以第一个约束是
22:16 um as I said I social what are the social 22:16 呃，正如我所说，我是社会的，什么是社会的
22:21 constraints for software design 22:21 软件设计的约束
22:32 we have to get along we have to build and maintain 22:32 我们必须相处，我们必须建立和维护
22:37 trust we have to repair relationships when they've been 22:37 信任，当关系被破坏时我们必须修复它们
22:42 damaged you know if I have an API and you're calling the API and I want to change the design of the API and I go to 22:42 损坏，你知道如果我有一个API，你在调用API，我想改变API的设计，我去找
22:50 you and I say he new API 22:50 你，我说嘿，新API
22:56 sucker I mean that qualifies as as uh as high class social skills for me 22:56 笨蛋，我的意思是这对我来说算是高级社交技能
23:04 so okay you have to change all your code to call the new API 23:04 所以好的，你必须改变你所有的代码来调用新的API
23:11 like you're not going to be happy with me if if that's how I approach it 23:11 就像如果我这样接近它，你不会对我满意的
23:17 so the way to address that is to align Authority and responsibility 23:17 所以解决这个问题的方法是使权威和责任对齐
23:30 if I create work for other people I go help at least help do that work better 23:30 如果我为其他人创造工作，我去帮助至少帮助做好那项工作
23:37 yet not to create work for other people now the work might be okay there's some 23:37 还是不要为其他人创造工作，现在工作可能是好的，有一些
23:42 code and it called the old API now calls the new API but there's also um you had 23:42 代码，它调用了旧的API，现在调用新的API，但也有一些，你有
23:49 to understand the thinking behind the old API and now maybe you have to understand the thinking behind the new a 23:49 理解旧API背后的想法，现在也许你必须理解新API背后的想法
23:57 API and it's my responsibility as the designer the person making the design 23:57 ，作为设计师，作为做设计决定的人，这是我的责任
24:02 change it is my responsibility to make sure that everybody learns what they 24:02 改变，我的责任是确保每个人学会他们需要的
24:08 need to learn in order to adapt to the new design change it's not enough to just uh merge 24:08 学习，以适应新的设计变化，仅仅合并是不够的
24:16 these two files that's the beginning of the story the responsibility of the designer 24:16 这两个文件，这只是故事的开始，设计师的责任
24:23 extends throughout the social relationships 24:23 贯穿整个社会关系
24:29 uh another constraint that any style of software design has to deal with is uh 24:29 呃，任何软件设计风格都必须处理的另一个约束是
24:42 incentives if you're going to design software you need to recognize that everybody's incentives are not the same 24:42 激励，如果你要设计软件，你需要认识到每个人的激励是不同的
24:50 there are people who just love designing software and who don't particularly like 24:50 有些人只是喜欢设计软件，而不太喜欢
24:56 designing features or implementing features and vice versa and neither of 24:56 设计功能或实现功能，反之亦然，两者都不是
25:01 those people is an idiot necessarily there's different 25:01 那些人必然是白痴，有不同的
25:08 perspectives on it there's a often times a product 25:08 观点，经常有一个产品
25:13 organization whose incentives are aligned with 25:13 组织，其激励与
25:18 features and an engineering organization whose incentives are immediate incentives are more aligned with the 25:18 功能对齐，而工程组织的激励是直接激励，更与
25:26 structure and those two don't match up it's okay we don't all have to see 25:26 结构对齐，这两者不匹配，没关系，我们不必都看到
25:32 things the same way but we do have to agree on what next step to 25:32 事情以同样的方式，但我们必须同意下一步该
25:38 take so any style of software design is going to have to acknowledge the fact 25:38 采取，所以任何软件设计风格都必须承认这个事实
25:43 that incentives diverge and yet we have to come together 25:43 激励措施分歧，然而我们必须团结起来
25:49 into in order to get our our needs 25:49 为了满足我们的需求
25:55 met uh a third uh constraint on software design is that the 25:55 满足，呃，第三个软件设计的约束是
26:02 social fabric is going to change over time so Juniors don't stay Juniors 26:02 社会结构会随着时间改变，所以初级不会一直是初级
26:09 forever not if you do it right seniors don't say seniors forever 26:09 永远，如果你做对了，高级不会说高级永远
26:15 not if you do it right people come people go markets change technology 26:15 不，如果你做对了，人们来来去去，市场变化，技术
26:22 changes the social structure that you build is going to change over 26:22 变化，你建立的社会结构会随着时间改变
26:27 time now now one of the is this an advantage or a 26:27 现在，现在其中一个，这是优势还是
26:33 disadvantage okay I'm old I've seen stuff come around multiple 26:33 劣势，好的，我老了，我见过东西多次出现
26:39 times now like the whole AI is coming for your jobs yeah case was coming for 26:39 次，现在像整个AI要抢你的工作，是的，案例要抢
26:46 my jobs the compiler was coming for my job fine 26:46 我的工作，编译器要抢我的工作，好吧
26:53 sure if you have questions about that I'll answer the questions but I'm not going to interrupt this even though I 26:53 当然，如果你有相关问题，我会回答问题，但我不打算打断这个，尽管我
26:59 have a great rant about Ai and programming so 26:59 对AI和编程有很好的抱怨
27:06 um the the social structure we're talking about design as a soot technical 27:06 呃，我们谈论的社会结构，设计作为一个技术
27:13 system and it's the and it's the first derivative of that soot technical system 27:13 系统，它是那个技术系统的一阶导数
27:19 the people involved are going to change their relationships are going to change 27:19 涉及的人员会改变，他们的关系会改变
27:24 and the thing they're working on is going to change too at the same time oh and I even remembered why I claimed to 27:24 他们正在处理的事情也会同时改变，哦，我甚至记得为什么我声称
27:30 be old uh documentation documentation is back I mean the whole water falls back but 27:30 变老了，呃，文档，文档回来了，我的意思是整个瀑布又回来了，但是
27:37 that's another another rant but documentation is back if only you had 27:37 那是另一个抱怨，但文档回来了，如果你只有
27:43 written down everything you were thinking as you were programming I wouldn't have to go figure it out you 27:43 写下你编程时的所有想法，我就不用去弄清楚你
27:50 know what it doesn't work by the time you want to you need to 27:50 知道什么，当你想要时它不起作用，你需要
27:57 read the documentation it is out of date and if you try and break that 27:57 阅读文档，它已经过时了，如果你试图打破那个
28:03 constraint by keeping it up to date okay that that was not a very 28:03 通过保持更新来约束，好吧，那不是一个很好的
28:10 compassionate way to say that it's just going to be more it's a 28:10 有同情心的说法，它只会更多，它是一个
28:16 snowplow more and more work until you abandon it 28:16 雪犁，越来越多的工作，直到你放弃它
28:21 entirely so there's a lot you can do to communicate through 28:21 完全，所以有很多你可以通过
28:27 code written two books about it and there's more than what's in the 28:27 代码来交流，写了两本书，还有比书里更多的
28:33 books but documentation is not going to fix this problem of social 28:33 书籍，但文档不会解决这个社会问题
28:40 change so that's one set of constraints another set of constraints are the the features of the 28:40 变化，所以那是一组约束，另一组约束是
28:50 medium that we work with as software designers 28:50 我们作为软件设计师工作的媒介的特征
29:01 somebody said they just somebody on stage said they just hated Vin diagrams trigger 29:01 有人说他们只是，舞台上有人说他们只是讨厌Vin图表，触发
29:09 warning Here Comes one um okay software is different than other 29:09 警告，来了一个，呃，好的，软件与其他
29:17 mediums for engineering what we do is genuinely 29:17 工程媒介不同，我们所做的确实是
29:24 engineering but the medium we work with is different 29:24 工程，但我们工作的媒介是不同的
29:29 and if we and if we're going to be designers we need to take those 29:29 如果我们要成为设计师，我们需要考虑那些
29:35 differences into account so the nature of cost in 29:35 差异，所以成本的本质在
29:43 software works like this I called this in the Tidy first I called this Constantine's equivalence because this 29:43 软件中是这样的，我在整洁第一中称之为康斯坦丁等价，因为这个
29:50 is the argument that Larry Constantine made in structured design he said the 29:50 是拉里·康斯坦丁在结构化设计中的论点，他说
29:56 cost of the software is is mostly in the cost of changing the 30:02 软件的成本主要在于改变软件的成本，而不是首先编写它，但所有这些变化都不是
30:10 really the same there's different kinds of changes there's lots of little changes and there's a few really big 30:10 真正相同的，有不同类型的变化，有很多小变化，有几个真正大的
30:16 changes that you have to make so the cost of the changes is actually the cost 30:16 变化，你必须做出，所以变化的成本实际上是成本
30:23 of those big changes mostly and 30:23 主要是那些大变化的
30:30 the cost of those big changes happens because software is broken into a bunch 30:30 那些大变化的成本发生是因为软件被分解成一堆
30:37 of parts those those big expensive changes are come from I change this part 30:37 部分，那些昂贵的大变化来自我改变这个部分
30:44 which means I have to change these four parts which mean I have to change these 75 Parts which mean I have to change 30:44 这意味着我必须改变这四个部分，这意味着我必须改变这75个部分，这意味着我必须改变
30:52 these 4,000 things those are the that's the nature 30:52 这4000个东西，那些就是本质
30:58 of the big changes if if we took a bag of features 30:58 大变化的，如果我们拿一袋功能
31:04 to add to our software implemented them in any order we would discover that most of the 31:04 添加到我们的软件中，以任何顺序实现它们，我们会发现大多数
31:10 changes were easy and every once in a while A change is going to be ridiculously hard one 31:10 变化是容易的，偶尔一个变化会变得荒谬地困难
31:17 week one week one week six months what and from the outside if you 31:17 一周，一周，一周，六个月，什么，从外面如果你
31:23 don't know anything about the structure this this seems like program just want 31:23 对结构一无所知，这看起来像程序只是想要
31:29 to go on vacation oh you're just going to leave for 5 months and 3 weeks and then you're 31:29 去度假，哦，你只是要离开5个月零3周，然后你
31:35 just going to implement the feature in the next week but that doesn't happen at random 31:35 只是在下一周实现功能，但这不是随机发生的
31:42 the reason it happens and this is part of the beauty of studying software design deeply this is a natural process 31:42 发生的原因，这也是深入研究软件设计之美的一部分，这是一个自然过程
31:49 this is exactly the same process that results in uh in 31:49 这正是导致的结果
31:54 Avalanches most avalanches one SN f Falls over that's it not much of an 31:54 雪崩，大多数雪崩，一个雪花倒下，就是这样，不是什么大
32:01 avalanche but if if the exponent is ever 32:01 雪崩，但如果指数曾经
32:07 so slightly greater than one one uh snowflake Falls over and it moves 32:07 稍微大于一，一个雪花倒下，它移动
32:14 two more snowflakes and the two more snowflakes all over and and 32:14 两个更多的雪花，两个更多的雪花到处都是，和
32:19 and it's the same exact kind of process involved in these gigantic jackpot 32:19 这正是涉及这些巨大头奖的过程
32:26 changes in in software development I make a change here oh I got to change 32:26 在软件开发中的变化，我在这里做一个改变，哦，我必须改变
32:32 those things I got to change those oh and that means ooh I really wish that I 32:32 那些东西，我必须改变那些，哦，那意味着，哦，我真希望我
32:38 had except I didn't so now I have to go and 32:38 有，除了我没有，所以现在我必须去
32:45 and so if we want to address the cost of 32:45 所以如果我们想要解决成本
32:50 change we design because we want to change we want the changes not to be expensive if we want to address the cost 32:50 变化，我们设计是因为我们想要改变，我们希望变化不要昂贵，如果我们想要解决成本
32:56 of change to rec recn the structure of these 33:07 成本，做我20分钟，我昨天写了这个演讲
33:14 yesterday and uh one of the things about writing talk is the first time you give it you have no idea how long it's going 33:14 昨天，呃，关于写演讲的一件事是，你第一次发表时，你不知道它会持续多长时间
33:21 to take so uh ask me a question about power l 33:21 所以，呃，问我一个关于幂律的问题
33:28 distributions if you want to ask a question about I'm going to leave some time at the end for for questions but 33:28 分布，如果你想问一个问题，我会在最后留一些时间来提问，但是
33:33 I'm not going to talk about it now even though it's a really cool 33:33 我现在不会谈论它，尽管它真的很酷
33:39 topic but what we're dealing with here is the cost of coupling and as I said coupling has come 33:39 话题，但我们要处理的是耦合的成本，正如我所说，耦合已经变得
33:46 to mean sometimes it's is dynamic oh I have this service and it calls that 33:46 意味着有时它是动态的，哦，我有这个服务，它调用那个
33:51 service and so they're coupled no no no no no there's something there's a relationship between those two Services 33:51 服务，所以它们是耦合的，不不不不不，这两个服务之间有关系
33:58 if this one goes down this one goes down we can talk about that but we're talking about the cost of making changes to the 34:06 系统，如果这个下去，那个也下去，我们可以谈论那个，但我们在谈论对系统进行更改的成本
34:13 system and the elements are coupled with respect to a particular 34:13 系统，元素相对于特定的
34:20 change if changing one implies changing the other if I change the name of this 34:20 变化是耦合的，如果改变一个意味着改变另一个，如果我改变这个的名称
34:27 function then I have to go to all the callers and change the name also but if I change the formatting 34:27 函数，那么我必须去所有调用者那里改变名称，但如果我改变格式
34:34 inside of this function I don't have to go change any colors so they aren't coupled with respect to formatting but 34:34 在这个函数内部，我不必去改变任何颜色，所以它们在格式化方面不耦合，但是
34:41 they are coupled with respect to naming it gets more complicated than 34:41 它们在命名方面是耦合的，这变得比
34:48 that because what if I have an IDE that lets me change the name and all the 34:48 那更复杂，因为如果我有一个IDE让我改变名称和所有
34:55 callers all at the same time are they coupled anymore nope one change doesn't 34:55 调用者同时，它们还耦合吗？不，一个改变不会
35:01 spread doesn't go anywhere coupling is about the propagation of 35:01 传播，不会去任何地方，耦合是关于传播的
35:07 change oh of course then if I have external customers for the function it's 35:07 变化，哦，当然，如果我有函数的外部客户，它是
35:14 part of an API and I want to change the name now now I can't change it in just one go and so there is coupling and it's 35:14 API的一部分，我想改变名称，现在我不能一次就改变它，所以有耦合，它是
35:21 external coupling and that's even more expensive so we can dig into layers and layers of coupling but software design 35:21 外部耦合，那甚至更昂贵，所以我们可以深入到一层又一层的耦合，但软件设计
35:28 needs to deal with coupling anytime you're dealing with 35:28 需要处理耦合，任何时候你在处理
35:35 coupling you have a you're in a trade-off space you know this is the international symbol for a trade-off 35:35 耦合时，你在一个权衡空间中，你知道这是权衡的国际符号
35:42 space so you're in a trade-off space you have the cost of the coupling okay if I 35:42 空间，所以你在权衡空间中，你有耦合的成本，好吧，如果我
35:48 change this I have to change those four things which who knows what's going to happen 35:48 改变这个，我必须改变那四件事，谁知道会发生什么
35:53 there but you also have the cost of decoupling if I find some way to 35:53 那里，但你也有解耦的成本，如果我找到某种方法
35:59 eliminate the con that coupling connection between the two elements but I I have to pay to do that so where am I 35:59 消除两个元素之间的耦合连接，但我必须付费这样做，所以我在哪里
36:08 in that trade-off space is it worth it to make this design change or 36:08 在那个权衡空间中，做这个设计改变值得吗
36:16 not okay okay we're good I 36:16 不，好的，好的，我们很好，我
36:22 promise and so that's two we have two two legs on the stool now but there's 36:22 承诺，所以那是两个，我们有两条凳腿，但现在有
36:28 another leg which is the uh economic 36:28 另一条腿，它是经济的
36:39 uh constraints on software design this is something it took me a long time to learn 36:39 呃，软件设计的约束，这是我花了很长时间才学会的
36:45 about helped to go Implement a bunch of financial software so I had 36:45 东西，帮助去实现一堆金融软件，所以我有
36:51 to actually grapple with the the uh details of the calculations 36:51 实际上要处理计算的细节
36:59 for these Concepts you know that's how as programmers that's how we learn we program stuff and then realize we don't 37:06 理解这些概念，你知道，作为程序员，我们就是这样学习的，我们编程东西，然后意识到我们不
37:12 understand it no better better way of realizing you don't understand something than the program 37:12 理解它，没有比编程更好的方式来意识到你不理解某事
37:18 it and the programmer the your computers just so uncompromising about telling you 37:18 它，程序员，你的计算机就是如此不妥协地告诉你
37:24 about you're an idiot so 37:24 关于你是个白痴，所以
37:30 economics three factors that are all extremely important and the reason I bring economics into this is I see so 37:30 经济学，三个因素都极其重要，我把经济学引入其中的原因是我看到这么多
37:37 much well-intentioned advice about software design that ignores economic 37:37 良好意图的软件设计建议，忽略了经济
37:43 realities and you might be able to do that for a little while but if somebody's paying you to design the 37:43 现实，你可能能够这样做一段时间，但如果有人付钱让你设计
37:49 software you can't ignore it for long so this is where all the big design 37:49 软件，你不能长时间忽略它，所以这就是所有大设计的地方
37:56 up front isn't ineffective because it's stupid or hubristic or no it's uh 37:56 前置是无效的，不是因为它愚蠢或傲慢，不，它是
38:06 it's ineffective because it ignores the economic Drive 38:06 无效的，因为它忽略了经济驱动
38:13 if we want our activities to be sustainable so uh the the first one is H 38:13 如果我们希望我们的活动是可持续的，所以呃，第一个是H
38:19 just survival I read the book ergodicity by 38:19 只是生存，我读了卢卡·德兰诺写的遍历性这本书
38:24 uh Luca Delano last year and it really rewired my 38:24 呃，去年，它真的重新连接了我的
38:29 brain uh software starts in a 38:29 大脑，呃，软件开始于一个
38:35 default uh failure mode you start to write a program it's probably just going 38:35 默认的失败模式，你开始写程序，它可能只是要去
38:40 to go away and then maybe it's become successful and it starts growing but the default 38:40 消失，然后也许它变得成功并开始增长，但默认
38:48 mode is still that you're going to fail to grow and it's only when you cross that 38:48 模式仍然是你将无法成长，只有当你跨越那个
38:54 threshold of sustainability that the default becomes okay the software is going to last quite 38:54 可持续性的阈值时，默认才变成好的，软件将持续相当
39:00 a while and if you ignore the those first two 39:00 长时间，如果你忽略前两个
39:07 phases what I call explore and expand uh 39:07 阶段，我称之为探索和扩展，呃
39:13 and the software just doesn't survive at all now we're back to those three 39:13 软件根本无法生存，现在我们回到那三个
39:18 billion seconds why did I invest my time in doing this work if the whole thing was just going to 39:18 十亿秒，如果整个事情只是要去
39:25 fail so whatever style of design we choose is going to have to improve the 39:25 失败，那么无论我们选择什么设计风格都必须改善
39:32 chances of the survival of the software through those early years 39:32 软件在早期几年的生存机会
39:42 the second economic imperative is uh Net Present 39:42 第二个经济要求是净现值
39:53 Value and this is a concept that took me a while to hammer into my thick 39:53 价值，这是一个花了我一段时间才敲进我厚实的
40:02 skull uh time and it boils down to the simple 40:02 头骨的概念，呃，时间，它归结为简单的
40:09 statement time is money but here's why it matters when you spend 40:09 陈述，时间就是金钱，但这就是为什么当你花费时它很重要
40:16 a euro is as important as how many euros you 40:16 一欧元与你花费多少欧元同样重要
40:22 spend put another way uh earning sooner is exactly the 40:22 花费，换句话说，呃，更早赚到钱正是
40:29 same as earning more so if we're going to 40:29 与赚更多钱相同，所以如果我们打算
40:35 design and we want to create more value earning sooner creates 40:35 设计，我们想要创造更多价值，更早赚到钱会创造
40:42 value oftentimes you can't control how much you earn but you can control when 40:42 价值，通常你无法控制赚多少，但你可以控制何时
40:47 you earn it and the same is true of spending spending later is exactly 40:47 赚到，花钱也是如此，以后花钱正是
40:52 economically equivalent to spending less so a software design style that 40:52 经济上等同于花更少的钱，所以一个软件设计风格
41:01 pushes uh costs out into the future is creating value 41:01 将成本推到未来是在创造价值
41:08 maybe even if you you end up spending more later the trade-off may be 41:08 也许即使你最终以后花更多钱，权衡可能是
41:15 fine so npv is is um part of why 41:15 好的，所以净现值是为什么的一部分
41:22 designing upfront is a bad idea I'm going to invest all of these uh the 41:22 前期设计是个坏主意，我要投资所有这些，呃
41:28 money into these design decisions today for some future payoff well if if we take one of those 41:28 钱到这些设计决策上，为了未来的回报，好吧，如果我们采取其中一个
41:35 design decisions and we can push that out into the future that means we earn that much 41:35 设计决策，我们可以将其推到未来，这意味着我们赚到了那么多
41:42 sooner we pay that much later we've created value by moving one of those 41:42 更早，我们以后付那么多，我们通过移动其中一个创造了价值
41:47 design decisions out into the future now me being an obsessive person I just want to say how many of those design 41:47 设计决策到未来，现在我作为一个强迫症患者，我只想说有多少设计
41:54 decisions can we push out how far into the future let's see how far we can can 41:54 决策我们可以推出去，多远到未来，让我们看看我们能
42:00 push this but that's the second economic imperative and the last economic 42:00 推多远，但那是第二个经济要求，最后一个经济
42:05 imperative is optionality 42:05 要求是选择性
42:14 that is what can I do with this software in the 42:14 那就是我能在未来用这个软件做什么
42:20 future so as we said software design is preparation for 42:20 所以正如我们所说，软件设计是为了
42:27 change the more changes you can make in the in more different 42:27 变化，你能在更多不同的方向上做出的变化越多
42:32 directions the more valuable the work that you you've done is 42:32 ，你所做的工作就越有价值
42:38 whatever Dimension we're we're measuring that success so if I have if I have one 42:38 无论我们测量成功的哪个维度，所以如果我有一个
42:44 system that takes in a million euros a month and another system that takes in a million euros a month but I could change 42:44 系统每月收入一百万欧元，另一个系统每月收入一百万欧元，但我可以改变
42:50 it a different ways to do new things that might increase future earnings I'm going to 42:50 它以不同的方式做新事情，可能会增加未来收入，我要
42:56 pay you more for the system with the options and software 42:56 为有选择的系统付给你更多钱，软件
43:02 design investment in structure creates 43:02 设计，在结构上的投资创造了
43:08 options at gusta once we' unified the two payroll calculators we had new 43:08 选择，在Gusto，一旦我们统一了两个薪资计算器，我们有了新的
43:14 options for what we' implemented in the future did we know at the time we did it did we know that we'd created 43:14 选择，对于我们未来实施的内容，我们在做这件事时知道吗？我们知道我们创造了
43:20 value kind of a engineer gut says yes two payroll calculators are you 43:20 价值，有点像工程师的直觉说是的，两个薪资计算器，你
43:26 kidding me just aesthetically displeasing and now now they're unified 43:26 在开玩笑吗，只是审美上令人不快，现在它们统一了
43:32 do we know how we going to use it no but it was already more 43:32 我们知道如何使用它吗？不，但它已经更
43:38 valuable so one one time I I got a book on options pricing algorithms and I just 43:38 有价值了，所以有一次我得到了一本关于期权定价算法的书，我只是
43:43 implemented them all cuz anyway and that's where I I really 43:43 实现了它们所有，无论如何，那是我真正
43:49 learned I had a intuition for optionality and the beauty of 43:49 学到的，我对选择性有直觉，以及
43:55 options is that the less predictable your environment is the more the options 43:55 期权的美妙之处在于，你的环境越不可预测，期权就越多
44:01 are worth usually you'd think okay I want some very predictable Revenue stream but if 44:01 值钱，通常你会想，好吧，我想要一些非常可预测的收入流，但如果
44:08 you if you have options you want things to be wildly unpredictable so that you 44:08 你有选择，你希望事情变得极度不可预测，这样你
44:14 could do whatever it is that you want to go in whatever 44:14 可以做任何你想做的事，走向任何
44:20 Direction so these these 44:20 方向，所以这些
44:26 factors are what steers any style of 44:26 因素是指引任何风格的
44:31 software design and you can ignore some of these 44:31 软件设计，你可以忽略其中一些
44:37 constraints for a little while but the constraints aren't going to ignore 44:37 约束一段时间，但约束不会忽略
44:43 you if you practice a style of design that that doesn't meet one of these 44:43 你，如果你实践一种不符合这些要求之一的设计风格
44:49 constraints that will catch up with you at some point and I'd rather I don't like those kind 44:49 约束，那会在某个时候追上你，我宁愿我不喜欢那种
44:55 of surprises I would rather take a step back look at it say all right well this 44:55 惊喜，我宁愿退一步，看看它，说好吧，这个
45:01 is a way harder problem than should we use event sourcing just to pick on a favorite 45:01 是一个比我们是否应该使用事件溯源更难的问题，只是挑一个喜欢的
45:08 design decision which may or may not be a good idea at some point in the development of 45:08 设计决策，在系统开发的某个阶段可能是个好主意也可能不是好主意
45:15 the system okay so th that's the constraints 45:15 好吧，所以那就是约束
45:21 what what are the implications of this that I draw now you you can draw whatever uh uh implications you'd like 45:21 什么是我现在得出的推论，你现在可以得出任何你想要的推论
45:28 but what are the implications that I draw from this well and this is something that 45:28 但我从这得出的推论是什么，这是某件事
45:34 Dave Farley said uh grow like a 45:34 戴夫·法利说的，呃，像
45:41 tree most of design is going to be 45:41 树一样成长，大部分设计将是
45:47 differentiation I make a thing I split it into Parts I take one of those parts 45:47 分化，我做一个东西，我把它分成部分，我拿其中一个部分
45:53 I expand it eventually it splits into more parts that's what most of software 45:53 我扩展它，最终它分裂成更多部分，这就是大部分软件
45:58 design is going to be so I start with something that's very small it's just a seed then one little root and one little 45:58 设计将是，所以我从一个非常小的东西开始，它只是一颗种子，然后一个小根和一个小
46:05 shoot with two little leaves on it that's an oak tree it's already an 46:05 芽，上面有两片小叶子，那是一棵橡树，它已经是一棵
46:11 oak tree this is a very very small oak 46:11 橡树，这是一棵非常小的橡树
46:16 tree so now their 46:16 树，所以现在它们
46:22 differentiation uh falls down when you have duplication when you have duplication like the two payroll 46:22 分化，呃，当你有重复时会下降，当你有像两个薪资一样的重复时
46:29 calculators then you have also have a unification 46:29 计算器，那么你也有了统一
46:35 activity that takes place but mostly we're going to grow like a tree 46:35 活动发生，但大多数情况下我们会像树一样成长
46:42 grows a second implication I take here is that design is an 46:42 成长，第二个推论我认为设计是一个
46:48 activity now I wouldn't think that I would have to explain that 46:48 活动，现在我不会认为我必须解释这一点
46:54 but this is the extreme programming you know we had these big phases with meters 46:54 但这是极限编程，你知道我们有这些大的阶段，有米长的
46:59 of documentation that were the fa that were the the the concrete manifestation 46:59 文档，那是具体的体现
47:07 of the phases extreme programming said no we we're going to take all those activity all those activities are 47:07 阶段的，极限编程说不，我们要采取所有那些活动，所有那些活动都是
47:12 valuable we have to do them but it's a question of when we're going to take the phases and we're going to turn them into 47:12 有价值的，我们必须做它们，但这是关于何时我们要采取阶段，我们要把它们变成
47:21 activities so if design is an activity and it's going to be taking place periodically as we go 47:21 活动，所以如果设计是一个活动，它将在我们进行时定期发生
47:27 along that requires a different style so for example this feature 47:27 那需要不同的风格，所以例如这个功能
47:35 hamster wheel or the the Jura pellets where uh there just always 47:35 仓鼠轮或Jura颗粒，呃，总是有
47:41 another feature and always another feature and the pressure is always to implement the next feature as quickly as 47:41 另一个功能和另一个功能，压力总是要尽快实现下一个功能
47:47 possible that's that's leaving so much money on the table that is picking up 47:47 可能，那是把太多钱留在桌子上，那是捡起
47:53 crumbs and the cake is sitting right there we want to bring balance to the 47:53 面包屑，而蛋糕就在那里，我们想要为
48:00 investment in features and in structure if uh design is an 48:00 功能和结构的投资带来平衡，如果设计是一个
48:09 activity then design then some of the design changes we make are going to take 48:09 活动，那么设计，那么我们做的一些设计变更将需要
48:14 a while and if they're going to take a 48:14 一段时间，如果它们将需要
48:21 while I have to think 48:21 一段时间，我必须思考
48:26 then then we're going to have to interrupt the design change in order to 48:26 然后我们将不得不中断设计变更以
48:34 get back to Features the there's a quote in one of my early 48:34 回到功能，我的早期书籍中有一句引言
48:41 books it says I'm trying to heal the rift between business and technology and 48:41 说，我试图弥合业务和技术之间的裂痕，而
48:46 I I still feel that way part of the rift 48:46 我仍然有这种感觉，裂痕的一部分
48:52 is the the the that moment that moment when you say you know we have been on 48:52 是那个时刻，当你说到你知道我们一直在
48:58 the hamster wheel for a long time it's such a mess we have to we have 48:58 仓鼠轮上很长时间了，太乱了，我们必须
49:04 to just stop and fix this we have to stop for six months and fix this that is 49:04 只是停下来修复这个，我们必须停止六个月来修复这个，那是
49:11 such a relationship killer well six months from now I'm 49:11 如此破坏关系，那么从现在起六个月，我
49:18 going to have software and it's going to do exactly what it does today it's the best 49:18 将拥有软件，它将做今天完全相同的事情，这是最好的
49:25 case so we need to there's there's features going in and there's design 49:25 情况，所以我们需要，有功能进入，有设计
49:32 activities and this Feature Feature Feature Feature design design design design that ignores the realities of the 49:32 活动，这个功能功能功能功能设计设计设计设计忽略了
49:39 human relationships we're talking about now the design design design 49:39 我们现在谈论的人际关系现实，设计设计设计
49:45 Feature Feature Feature also ignores the the economic realities and also your 49:45 功能功能功能也忽略了经济现实，也忽略了你的
49:51 sponsors probably want to start seeing some features so uh something there has to be this 49:51 赞助商可能想要开始看到一些功能，所以呃，那里必须有这种
49:58 kind of interlacing of feature and design back and forth now once you do 49:58 功能和设计来回交织，现在一旦你这样做
50:05 this does it matter if people say oh you just don't want to design at all I want to do some design up front fine that 50:05 这，如果人们说哦，你只是根本不想设计，我想先做一些设计，好吧
50:12 much do that much design up front if we're going to grow like a tree grows 50:12 那么多，先做那么多设计，如果我们要像树一样成长
50:18 but this is not months worth it's just a bit because you're 50:18 但这不是几个月的价值，只是一点点，因为你是
50:23 going to get to design again in the future I think that's the fear for programmers is like well they're just never going to let me 50:23 将来会再次进行设计，我认为程序员的担忧是，他们会永远不会让我
50:30 refactor so I'm just going to design now what if what if they did 50:30 重构，所以我就现在设计，如果如果他们这样做了呢
50:37 though so the key technical skill in this interruptible 50:37 但是，所以在这个可中断的
50:44 style of design is uh is working in parallels having the old design and the 50:44 设计风格中的关键技术技能是呃，并行工作，拥有旧设计和
50:51 new design exist for a time 50:51 新设计共存一段时间
50:57 together and uh I see this at all all scales you know if I want to change the 50:57 一起，呃，我在所有尺度上都看到这一点，你知道，如果我想改变
51:04 type of a parameter to a function I'll add the new par I'll add a new parameter 51:04 函数参数的类型，我会添加新参数，我会添加一个新参数
51:09 with the new type make sure everything's okay I can push that to production I'm I'm good 51:09 与新类型，确保一切正常，我可以推送到生产环境，我很好
51:16 already it's interruptible then I replace the use of the 51:16 已经可中断了，然后我替换使用
51:21 old the variable or the parameter with the old type with the parameter with the new type again I can still push to 51:21 旧的变量或参数，用旧类型与新类型的参数，再次我仍然可以推送到
51:28 production even though I have an unused parameter we're fine then I delete the old one so that's a micro micro version 51:28 生产环境，即使我有一个未使用的参数，我们很好，然后我删除旧的，所以这是一个微观的微观版本
51:35 of parallels if you're willing to do the extra work to include parallels then 51:35 并行，如果你愿意做额外的工作来包含并行，那么
51:41 you're design design activities are always interruptable and if your design activities are always 51:41 你的设计活动总是可中断的，如果你的设计活动总是
51:47 interruptable you'll be able to serve the relationships that are driving 51:47 可中断的，你将能够服务于驱动的关系
51:52 development more smoothly there's another 51:52 开发更顺利，还有另一个
51:59 implication which is at the macro 51:59 推论，它在宏观上
52:06 level changes to features and changes to structure Just Happening all the time 52:06 层次，功能变化和结构变化一直在发生
52:11 it's just this mess mess it's as a a 52:11 这只是一团糟，一团糟，它作为一个
52:16 symphony that sounds so much better or maybe a jazz combo is slightly closer at 52:16 交响乐听起来好多了，或者也许爵士组合稍微更接近
52:23 the micro level though I practice a absolute split 52:23 微观层次，尽管在微观层次上我实践绝对的分离
52:29 between feature changes and structure changes so if I've you know sometimes 52:29 功能变化和结构变化之间，所以如果我，你知道有时
52:34 you program along you're like oh and the name of this variable is a little wrong and uh let me put a if statement here 52:34 你编程时，你会想，哦，这个变量的名字有点不对，呃，让我在这里放一个if语句
52:40 and and you've mixed feature changes and structure changes I go back start over 52:40 和，你混合了功能变化和结构变化，我回去重新开始
52:46 so that they're absolutely split at the micro level at the macro level that 52:46 这样它们在微观层次上绝对分离，在宏观层次上
52:51 enables you to preserve this illusion that the Design's getting better and 52:51 使你能够保持这种错觉，即设计正在变得更好，而
52:56 we're getting more features all the time which is the best you can 52:56 我们一直在获得更多功能，这是你能做到的最好的
53:03 have uh let me close with one more and this is this is something I've just been 53:03 拥有，呃，让我以另一个结束，这是我刚刚
53:08 explor exploring lately and it's kind of off the it's a 53:08 探索的东西，它有点偏离了，它是一个
53:15 little in a different direction than the other the others of these if you want to lead a software 53:15 稍微不同的方向，比其他这些，如果你想领导一个软件
53:22 project and you want the kind of benefits that I'm talking about relationships that strengthen over 53:22 项目，你想要我谈论的那种好处，随着时间推移而加强的关系
53:29 time with features that improve over time with structure that improves over time you're never going to get that with 53:29 时间，随着时间推移而改进的功能，随着时间推移而改进的结构，你永远不会通过
53:36 pressure pressure the if you just you could you 53:36 压力，压力，如果你只是，你能
53:42 just stay a couple extra hours could you work a little harder is never going to achieve that because software design is 53:42 只是多待几个小时，你能更努力工作吗，永远不会实现这一点，因为软件设计是
53:49 a creative activity and creative creative activities need space but they 53:49 一种创造性的活动，创造性的活动需要空间，但它们
53:55 also need impetus and leading with purpose instead 53:55 也需要动力，以目标为导向而不是
54:02 of with pressure is what creates that combination of impetus for change and 54:02 压力，是创造了改变的动力和
54:08 space for creativity that allows us to more fully realize our potential as 54:08 创造力的空间，使我们能够更充分地实现我们的潜力作为
54:14 programmers this remarkable medium that we get to work in and realize that potential for our 54:14 程序员，这种我们工作的非凡媒介，并实现我们的潜力
54:20 own satisfaction satisfaction of the users whose lives we affect with the decisions 54:20 自身的满足感，我们通过决策影响其生活的用户的满足感
54:26 we make every day investors and eventually society as a 54:26 我们每天做出的决策，投资者，最终作为社会的
54:32 whole thank you thank you very much 54:32 整体，谢谢，非常感谢