gotopia 多播平台
Watch 观看

Read 阅读

Discover 发现

Events 活动

Search in gotopia 在gotopia中搜索

C C

Home  Bookclub Episodes  From Objects to ... 首页 读书会 播客 从对象到...
From Objects to Functions: Build Your Software Faster and Safer with Functional Programming and Kotlin 从对象到函数：使用函数式编程和Kotlin更快更安全地构建软件
From Objects to Functions: Build Your Software Faster and Safer with Functional Programming and Kotlin 从对象到函数：使用函数式编程和Kotlin更快更安全地构建软件
Duncan McGregor • Uberto Barbini | Gotopia Bookclub Episode • April 2024 Duncan McGregor • Uberto Barbini | Gotopia读书会节目 • 2024年4月

Add to collection 添加到收藏

Explore the dynamic journey of software development through 'From Objects to Functions,' where Uberto Barbini's passion for functional programming meets the pragmatic realities of building real-world applications. Delving into the nuances of Kotlin, Uberto Barbini, and Duncan McGregor navigate the intersection of object-oriented and functional paradigms, revealing how thinking in morphisms fosters better software solutions. They also share insights into the evolution of his understanding and the transformative power of functional programming. From tackling complex concepts to advocating for a more creative approach to teaching programming, this GOTO Book Club episode offers a comprehensive exploration of modern software development and inspires you to embrace functional thinking in your own coding adventures. 通过《从对象到函数》探索软件开发的动态历程，其中Uberto Barbini对函数式编程的热情与构建真实应用的现实需求相遇。深入探讨Kotlin的细微差别，Uberto Barbini和Duncan McGregor游走于面向对象和函数式编程范式之间，揭示了如何通过态射思维促进更好的软件解决方案。他们还分享了对函数式编程理解的演变和变革力量的见解。从处理复杂概念到倡导更具创造性的编程教学方法，这期GOTO读书会节目全面探索了现代软件开发，并激励你在自己的编程冒险中拥抱函数式思维。

Share on: 分享到：
See transcript 查看文字稿
Transcript 文字稿
Functional Kotlin 函数式Kotlin
Duncan McGregor: Hello and welcome to "GOTO Book Club." I'm Duncan McGregor, and today I'm delighted to be interviewing Uberto Barbini about his book "From Objects to Functions: Build Your Software Faster and Safer with Functional Programming and Kotlin." It was published by Pragmatic Programmer in September. Uberto Barbini, welcome to GOTO Book Club. Duncan McGregor：大家好，欢迎来到"GOTO读书会"。我是Duncan McGregor，今天很高兴能采访Uberto Barbini关于他的书《从对象到函数：使用函数式编程和Kotlin更快更安全地构建软件》。这本书由Pragmatic Programmer在9月出版。Uberto Barbini，欢迎来到GOTO读书会。
Uberto Barbini: Hi, nice to be here, Duncan. Uberto Barbini：你好，很高兴来到这里，Duncan。
Duncan McGregor: So, Uberto, we worked in the same circles in London. You were a technical reviewer on the book that I wrote with Nat Price, and then I returned a favor by being a technical reviewer on your book, but we've never actually worked together. So, how did you come to work on Kotlin Projects in London and now in Japan? Duncan McGregor：那么，Uberto，我们在伦敦的同一个圈子里工作过。你曾是我和Nat Price合著的书的技术审稿人，后来我投桃报李，成为你书的技术审稿人，但我们从未真正一起工作过。那么，你是如何开始在伦敦从事Kotlin项目的，现在又到了日本？
Uberto Barbini: I was working in banks in London, and... I started learning about Kotlin many years ago, before Version 1. At that time there was also another programming language in the JVM that seemed more promising. But after a few years, Kotlin grew on me and I started using it in the banks. Then I started looking basically, at the beginning we were using Kotlin, you know, introducing slowly creeping to write a test, to write a little tools. Then I started looking for a gig where I could write Kotlin all the time. I think more or less we got in touch and at the time London Kotlin community, back then the Kotlin community was not that big. Uberto Barbini：我当时在伦敦的银行工作，而且...我在很多年前就开始学习Kotlin，在1.0版本之前。那时JVM上还有另一种编程语言看起来更有前景。但几年后，Kotlin逐渐赢得了我的青睐，我开始在银行中使用它。然后我开始寻找机会，基本上一开始我们使用Kotlin，你知道，慢慢引入来写测试，写一些小工具。然后我开始寻找可以一直使用Kotlin的工作。我想我们或多或少取得了联系，当时伦敦的Kotlin社区，那时Kotlin社区还不是很大。
Duncan McGregor: So what prompted you to write the book? Who's it for? Duncan McGregor：那么是什么促使你写这本书的？它是为谁而写的？
Uberto Barbini: I'm very passionate about functional programming, but also about writing good code, you know, with good practice. And I didn't find much content outside about, yeah, how to put together the two things. So, all the books about, you know, TDD, or clean programming or stuff like that tend to be very object-oriented. And all the book about functional programming tends to be quite, you know, very specific exercises on specific things on functional programming. There was no book about, yeah, how to set up a full project from scratch and adopt a functional program with a kind of pragmatical point of view, let's say. So, I think it's quite a useful book for people that came from a Java background also culturally, but use a bit of a, like Java Agile, I mean, simple Java, and they wanted to touch a bit of functional programming. Or people coming from more functional, advanced stuff like Haskell or Scala and wanted to use a... I mean, take advantage of Kotlin's simplicity and productivity. Uberto Barbini：我对函数式编程充满热情，也对编写好的代码很感兴趣，你知道，用好的实践。我在外面没有找到太多关于如何将这两者结合的内容。所以，所有关于TDD、清洁编程或类似内容的书籍往往都非常面向对象。而所有关于函数式编程的书籍往往都是，你知道，非常具体的函数式编程特定内容的练习。没有一本书是关于如何从头开始建立一个完整项目并采用函数式编程的实用观点。所以，我认为这本书对那些有Java背景的人很有用，文化上也是如此，但他们使用的是类似Java敏捷的，我的意思是简单的Java，并且想要接触一些函数式编程。或者那些来自更函数式、高级内容如Haskell或Scala的人，想要利用Kotlin的简洁性和生产力。
Duncan McGregor: I should say, the book isn't a sort of academic book. It takes a project, it takes, the example is a sort of to-do list if I remember. And it takes us from sort of inception, the initial sort of prototyping through to a sort of complete database-backed application with a web frontend and so on. And I found that was quite refreshing, it's not just how do you... It's not just, "These are bits of functional programming." It is how to plug functional programming into an entire project lifecycle. Duncan McGregor：我应该说，这本书不是那种学术书籍。它以一个项目为例，我记得例子是一个待办事项列表。它带领我们从最初的概念阶段，初始的原型设计，一直到完整的数据库支持的应用程序和Web前端等等。我觉得这很令人耳目一新，它不仅仅是关于如何...不仅仅是"这些是函数式编程的一些片段"。而是如何将函数式编程融入整个项目生命周期。
Uberto Barbini: We have a lot of beta readers for this book. And I mean, most of them appreciated that. Some people were a bit, let's say not pissed off, but a bit disappointed that there was not much theory or more drilling down super specific functional programming thing. But I kind of stand my position, because I think it's not functional programming for the sake of doing functional programming. I mean, the point is to deliver an application at the end. In our job, we want to deliver value to the user. So, I'm trying to say, "Come on, with functional programming, we can be more productive," at least for a kind of applications like backends, where... So, this is something that I did, and I think sharing, it can be useful for other people. It's not about let's learn how to use a 25 kind of monads or stuff like that. Uberto Barbini：这本书有很多测试读者。我的意思是，大多数人都很欣赏这一点。有些人有点，可以说不是生气，但有点失望，因为没有太多理论或更深入的超级具体的函数式编程内容。但我坚持我的立场，因为我认为函数式编程不是为了做函数式编程而做。我的意思是，最终目标是交付一个应用程序。在我们的工作中，我们想要为用户交付价值。所以，我想说的是，"来吧，通过函数式编程，我们可以更高效，"至少对于后端这类应用程序来说是这样...所以，这是我做的事情，我认为分享出来对其他人有用。这不是要学习如何使用25种monad或类似的东西。
Recommended talk: Should Kotlin Be Your Go-To Language? • Garth Gilmour & Eamonn Boyle • GOTO 2019 推荐演讲：Kotlin应该成为你的首选语言吗？• Garth Gilmour & Eamonn Boyle • GOTO 2019
Balancing Object-Oriented and Functional Paradigms 平衡面向对象和函数式编程范式
Duncan McGregor: Kotlin is a sort of multi-paradigm language. I think Scala took that mantle first, but we can write procedural, we can write object-oriented or functional style. I think, I mean, Kotlin sort of probably starts from OO, being on the JVM. Lots of the sort of libraries we use are object-oriented. But how would you look at some Kotlin code and decide that it was functional versus OO? What characterizes functional programming for you? Duncan McGregor：Kotlin是一种多范式语言。我认为Scala首先承担了这个角色，但我们可以写过程式、面向对象或函数式风格的代码。我认为，我的意思是，Kotlin可能从面向对象开始，因为它在JVM上。我们使用的很多库都是面向对象的。但是你会如何看一些Kotlin代码并判断它是函数式的还是面向对象的？对你来说，什么特征定义了函数式编程？
Uberto Barbini: The first thing is that it's not that important that is functional programming object-oriented, but I appreciate that the advantage of functional programming is having functions, basically everything is designed using functions, and putting the function together to do some feature, I mean, to do some tasks. The good thing is that you know, combining these functions, each function does just a bit piece of work and is very defined, clearly defined, from the input to the output. So, it's easy to test, and it's easy to use in another place if you have to do the same things. And then you put it together and you have a function. So, when instant code started to reference external things like singleton or external calls without being specified by the type system, then it became also very hard to reuse. I mean, I remember someone that... Actually in the banks at some point, someone was doing some calculations and got a function from another piece of the program. But that function was locking a lot of stuff, and just using that function slowed down the whole application. And we realized in production. So, this kind of stuff it's kind of easier with the functional programming to see what you are doing without the kind of casting the code. Uberto Barbini：首先，函数式编程和面向对象哪个更重要并不重要，但我很欣赏函数式编程的优势在于有函数，基本上一切都是用函数设计的，把函数组合起来实现某个功能，我的意思是执行某些任务。好处是，你知道，组合这些函数时，每个函数只做一小部分工作，并且从输入到输出都有非常明确的定义。所以，它很容易测试，如果要做同样的事情，在另一个地方也很容易使用。然后你把它们组合起来就得到了一个函数。所以，当即时代码开始引用外部事物如单例或外部调用而没有被类型系统指定时，就变得很难重用了。我的意思是，我记得有人...实际上在银行里某个时候，有人在做一些计算，从程序的另一部分得到了一个函数。但那个函数锁定了很多东西，仅仅使用那个函数就拖慢了整个应用程序。我们在生产环境中意识到了这一点。所以，这类问题用函数式编程更容易看出你在做什么，而不需要那种强制转换代码的方式。
Duncan McGregor: My experience of good OO is that it sort of shares those same sort of properties. Do you think there's still a place for object-oriented programming? Or do you think we should look at all problems as functional? Duncan McGregor：我对于好的面向对象编程的经验是，它似乎具有那些相同的属性。你认为面向对象编程还有存在的空间吗？或者你认为我们应该把所有问题都看作是函数式的？
Uberto Barbini: No, no. I mean, I think this is a great thing about Kotlin that you can use both. Because a lot of classes of problems are much easier to do in functional programming. Or also if we wanted to break the rule, let's say, and have a, like an internal cache or stuff like that so far, that is clearly defined. And it's very convenient, convenient I mean, it's very productive. I can just do this stuff keeping the code clean and having this stuff done. Plus all these kinds of problems require a kind of simulation, where you keep a lot of objects with an internal state that is alive for a long time, they are a much better fit for object-oriented programming than... Functional programming is great when you have a kind of flow of transformation. So, it fits more naturally web server or ETL application that just reads from a message queue and writes to another message. This kind of stuff, which is quite common in the banks and another kind of big backend is great, I think. Uberto Barbini：不，不。我的意思是，我认为Kotlin的伟大之处在于你可以两者兼用。因为很多类问题用函数式编程更容易解决。或者如果我们想打破规则，比如说，有一个内部缓存或类似的东西，那是明确定义的。这很方便，我的意思是，很有成效。我可以保持代码清洁的同时完成这些事情。另外，所有这些问题都需要一种模拟，你需要保持很多对象，这些对象有长期存活的内部状态，它们比...面向对象编程更适合。当你有一种转换流时，函数式编程很棒。所以它更自然地适用于Web服务器或ETL应用程序，这些应用程序只是从消息队列读取并写入另一个消息。这种东西在银行中很常见，另一种大型后端也很棒，我认为。
Duncan McGregor: Certainly that's something I've sort of come to realize. I suppose only read recently that the object-oriented programming I learned was about, in memory, user interfaces where everything about the system was in one place, we could manage state in our memory. Whereas he says, we just don't have those... We don't program like that anymore, everything is thrown away between requests, and nothing stays in memory. We assume that our state is all gonna be held somewhere outside of our program. So, do you think that functional programming... Where am I going with this? Yeah, functional programming has sort of risen with web-scale things. And that you've... Duncan McGregor：当然，这是我逐渐意识到的一点。我想我最近才读到，我学到的面向对象编程是关于内存中的用户界面，系统的所有内容都在一个地方，我们可以在内存中管理状态。而他说，我们不再有那些...我们不再那样编程了，请求之间一切都消失了，内存中什么都不保留。我们假设我们的状态都保存在程序之外的某个地方。那么，你认为函数式编程...我要说什么来着？是的，函数式编程随着web规模的东西而兴起。而你...
Uberto Barbini: For this kind of, yeah, cloud or, what is it, a cloud-native, or however you want to call it. This kind of application, where you just, yeah, process the request to responses. And everything is... You keep the state outside the application, so you wanted to have a kind of security around the state to avoid it making... To have a runtime error or stuff like that, because the connection was not open or something like that. All this stuff came very naturally. I mean, it very naturally fits with functional programming. I think in your book you mentioned working along the grain of the language. And in this sense, it's also working along the grain of the application. I mean, you need to do something like that in a kind of cloud-native distributed stuff. The functional program is a very good approach in my opinion. Uberto Barbini：对于这种，是的，云或，叫什么来着，云原生，或者你想怎么称呼它都行。这种应用程序，你只是，是的，处理请求到响应。而一切都是...你将状态保存在应用程序外部，所以你想要在状态周围有一种安全保障，以避免它造成...运行时错误或类似的问题，因为连接没有打开或类似的情况。所有这些东西都很自然地出现。我的意思是，它与函数式编程非常自然地契合。我想在你的书中你提到了顺着语言的纹理工作。从这个意义上说，它也顺着应用程序的纹理工作。我的意思是，在云原生分布式的东西中你需要做类似的事情。在我看来，函数式编程是一个非常好的方法。
Duncan McGregor: I think I've concluded that we are still using OO, but the objects that we have are servers now. And that we're using message passing, polymorph, and all those sorts of things to implement OO between things and then functional programming inside those applications? Duncan McGregor：我认为我的结论是，我们仍在使用面向对象，但我们现在的对象是服务器。我们使用消息传递、多态和所有这些技术在事物之间实现面向对象，然后在这些应用程序内部使用函数式编程？
Uberto Barbini: That's definitely a way to see. I mean, the actual service work is kind of external, from an architectural point of view, they work a bit of a light object. And also this is a bit what... I mean, we are doing a bit of philosophy or history of computing, but Alan Kay came up with this idea that basically objects are a bit like computers on the net. Something like that. Which is not super helpful in my opinion. I mean, it's not super performance-wise a great idea to implement everything like that. But when you have the stuff that is on the net is very good. Uberto Barbini：这绝对是一种看待方式。我的意思是，实际的服务工作是外部的，从架构角度来看，它们有点像轻量级对象。这也有一点...我的意思是，我们在做一些计算哲学或历史，但Alan Kay提出了这个想法，基本上对象有点像网络上的计算机。类似这样的。在我看来这并不是特别有帮助。我的意思是，从性能角度来说，把一切都这样实现并不是一个好主意。但当你处理网络上的东西时，这是非常好的。
Recommended talk: Programming Kotlin: Why, How & Its Future • Venkat Subramaniam & Hadi Hariri • GOTO 2021 推荐演讲：Kotlin编程：为什么、如何以及它的未来 • Venkat Subramaniam & Hadi Hariri • GOTO 2021
Duncan McGregor: I think Alan Kay also said something about the things that Java and I suppose Kotlin, do in terms of OO is not object-oriented programming. It's class-based programming. One of the things that I struggle with in functional programming is that we learned, in OO, that encapsulation was a thing that, like, having data and the operation on those classes together was an important thing. Functional programming says, "No, actually they should be separate." Where do you sit on that spectrum? When do we decide? How do we decide? Duncan McGregor：我想Alan Kay还说过，Java以及我想Kotlin在面向对象方面做的事情并不是真正的面向对象编程，而是基于类的编程。我在函数式编程中遇到的一个问题是，我们在面向对象中学会了封装是一个重要的东西，就是将数据和对这些类的操作放在一起。函数式编程说："不，实际上它们应该是分开的。"你在这个光谱上的哪个位置？我们什么时候决定？我们如何决定？
Uberto Barbini: In our team, we have the thumb rule that, to decide when to use lambda or an interface just to, maybe it's clear to you, but to clarify. Let's say that you have a function that needs to assess the database. And so you need your function that writes something and you pass another function that assesses the database and gets the user. And then at some other point, you need a function to write a user to a database. Now, the general object-oriented approach will be to define a kind of interface of the database layer or stuff like that, where you put all this stuff together and it's fine. I don't have anything, but if I needed to pass this data assessment object, every time I needed to assess the database I made to pass too much. Because if I just needed to get a user, I'm passing an interface with 10 methods or 20 methods that I really don't need. So in that case, just passing a single function is an advantage. It creates less coupling. Yeah. Our, rule of thumb is that if you need one is okay, if you need two lambda it's okay. But if you need a three lambda from the same kind of interface just pass the interface, something like that. Uberto Barbini：在我们团队中，我们有一个经验法则来决定何时使用lambda或接口，也许对你来说很清楚，但让我澄清一下。假设你有一个需要访问数据库的函数。所以你需要你的函数来写入一些东西，你传递另一个函数来访问数据库并获取用户。然后在某个其他点，你需要一个函数将用户写入数据库。现在，一般的面向对象方法是定义一种数据库层的接口或类似的东西，把所有这些东西放在一起，这样就可以了。我没有什么问题，但如果我需要传递这个数据评估对象，每次我需要评估数据库时都要传递太多东西。因为如果我只需要获取一个用户，我却在传递一个有10个方法或20个方法的接口，而我实际上并不需要这些方法。所以在这种情况下，只传递一个函数是有优势的。它创造了更少的耦合。是的。我们的经验法则是，如果你需要一个lambda是可以的，如果你需要两个lambda也是可以的。但如果你需要来自同一种接口的三个lambda，那就传递接口，类似这样。
Duncan McGregor: I think that's probably the rule of thumb we came up with in the book as well, that if you have to express a coupling on reading and writing, then you should probably have an interface. But if it's just reading or writing, then just one thing. Yeah. Duncan McGregor：我想这可能也是我们在书中提出的经验法则，如果你必须在读取和写入上表达耦合，那么你可能应该有一个接口。但如果只是读取或写入，那就只用一个东西。是的。
Uberto Barbini: That's another great thing about Kotlin, that they allow you, first to leverage on the whole Java world libraries that are huge. And then you can kind of take the Java library and just pass the method, the lambda reference without having... I mean, in Scala enclosure, you need to do a lot of things to be able to interact with Java. It's not that easy. Uberto Barbini：这是Kotlin的另一个伟大之处，它允许你首先利用整个Java世界的庞大库。然后你可以拿Java库，只传递方法，lambda引用而不需要...我的意思是，在Scala中，你需要做很多事情才能与Java交互。这并不容易。
Beyond Kotlin: Embracing Functional Thinking 超越Kotlin：拥抱函数式思维
Duncan McGregor: Your book has Kotlin in the subtitle, but I don't think you... Would you call it a Kotlin book? Duncan McGregor：你的书副标题中有Kotlin，但我不认为你...你会称它为Kotlin书吗？
Uberto Barbini: I mean, it's definitely, it's a Kotlin book. You needed to read Kotlin in the book, but I think the kind of teaching, or the approach, let's say is not specific to Kotlin. A couple of beta readers don't use Kotlin as a main language and one learns Kotlin just reading the book. And they were using TypeScript mostly. They said that they can mix a lthey ot of sensoro the support for TypeScript application as well. Uberto Barbini：我的意思是，它绝对是，它是一本Kotlin书。你需要在书中阅读Kotlin，但我认为这种教学，或者说这种方法，并不特定于Kotlin。几个测试读者不使用Kotlin作为主要语言，有人通过阅读这本书学会了Kotlin。他们主要使用TypeScript。他们说他们也可以将很多传感器混合到TypeScript应用程序的支持中。
Duncan McGregor: It's my experience that Java developers and TypeScript developers come to Kotlin quite easily. There are sort of changes in syntax, but lots of the sort of fundamentals are there. It's an easy language to read, and it's quite an easy language to write. Could you have written the book in a different language? Duncan McGregor：根据我的经验，Java开发者和TypeScript开发者很容易转向Kotlin。语法上有一些变化，但很多基本原理都在那里。这是一门容易阅读的语言，也是一门相当容易编写的语言。你能用不同的语言写这本书吗？
Uberto Barbini: I mean, why not? Uberto Barbini：我的意思是，为什么不呢？
Duncan McGregor: How would it have changed if you'd written it in a different language, I suppose? Duncan McGregor：我想，如果你用不同的语言写会有什么改变？
Uberto Barbini: There are a few culturally specific things. I mean, things that make more sense. And I had to work on a Java project recently, to be honest, and it's kind of painful to use functional study in Java because everything became a bit harder and harder and harder. So you tend to write less functional stuff because the type declarations are very long. To do some transformation in the collection, you needed to use a stream. Everything is more verbose and it came so... And on the other side, Java programmers when they switch to Kotlin, intend to keep the same Java approach before learning kind of Kotlin idiomatic way. But the main... Sorry, just the main point, I mean, writing this application, I think if had to write in Typescript or some other language with a bit of functional capabilities, it won't be that different. Uberto Barbini：有一些文化特定的东西。我的意思是，一些更有意义的事情。我最近不得不在一个Java项目上工作，老实说，在Java中使用函数式编程有点痛苦，因为一切都变得越来越困难。所以你倾向于写更少的函数式内容，因为类型声明非常长。要在集合中做一些转换，你需要使用流。一切都更冗长，就这样...另一方面，Java程序员转向Kotlin时，他们打算在学习Kotlin的惯用方式之前保持相同的Java方法。但主要的...抱歉，只是主要的一点，我的意思是，写这个应用程序，我想如果必须用Typescript或其他一些具有函数式能力的语言来写，不会有太大不同。
Duncan McGregor: I think it's trendy to say that the language doesn't matter. But, I do find that the things that our language makes hard we don't do. I had a comment on one of my videos recently. Duncan McGregor：我觉得说语言不重要是一种潮流。但是，我发现我们语言中困难的事情我们就不做。我最近在一个视频上收到了评论。
Recommended talk: TypeScript vs KotlinJS • Eamonn Boyle & Garth Gilmour • GOTO 2022 推荐演讲：TypeScript vs KotlinJS • Eamonn Boyle & Garth Gilmour • GOTO 2022
Uberto Barbini: Doesn't make sense. Uberto Barbini：没有意义。
Duncan McGregor: Somebody was saying, it was a video on property-based testing and somebody was saying, "Oh, you introduced a type here in a way that I don't think that a Java programmer would, because, you know, introducing a type would've been too painful." But because in Kotlin it's sort of like three lines to introduce a type then it's very natural, I find, in the language to solve problems with types, it's a natural language to solve problems with the things that are easy to do in the language. Duncan McGregor：有人在说，这是一个关于基于属性测试的视频，有人说："哦，你在这里引入了一个类型，我觉得Java程序员不会这样做，因为，你知道，引入一个类型会太痛苦。"但是在Kotlin中引入一个类型大概只需要三行代码，所以我觉得，在语言中用类型解决问题是很自然的，这是一种用语言中容易做的事情来解决问题的自然语言。
Uberto Barbini: In Java, just the fact that you needed to create a new file kind of stops you. I mean, even if the file is just two lines is a bit different if you just put the template, yeah, it's smaller. Uberto Barbini：在Java中，仅仅是需要创建一个新文件这一事实就会阻止你。我的意思是，即使文件只有两行，如果你只是放入模板，是有点不同的，是的，它更小。
Duncan McGregor: I was an object-oriented developer in the 90s, and I had the definition of polymorphism of Pat. It was required in job interviews at the time, but your book talks a lot about thinking in morphisms, what do you mean by that? Duncan McGregor：我是90年代的面向对象开发者，我有Pat的多态性定义。当时在工作面试中这是必需的，但你的书大量谈论了态射思维，你这是什么意思？
Uberto Barbini: The kind of breakthrough of functional programming is when I started realizing that data is not that important. What is more important is data transformation. So, looking at the programming, like the design of the application, like a chain of transformation instead of a flow of data, let's say. And this transformation, I mean, categorically, well, the most general way to call a transformation, yeah, is called a morphism in mathematics. This idea of thinking in morphis, how you transform, without even looking at the code first, but just start looking at a web server as a machine that transforms a request in responses. And then for each possible part, you see, here, I'm transforming a user ID in a user content or web page. And every step is at the end is transformation. And there is this theorem in category theory, which is called Yoneda Lemma, which mostly says, I'm paraphrasing, that, "If you know all the functions from a data type and to the data type, you can identify univocally the data type." This idea that the connection is actually more important than the data shape itself. Uberto Barbini：函数式编程的突破点是当我开始意识到数据并不是那么重要。更重要的是数据转换。所以，看待编程，比如应用程序的设计，就像一连串的转换而不是数据流，可以这么说。而这种转换，我的意思是，从范畴论的角度来看，嗯，称呼转换的最一般方式，是的，在数学中被称为态射。这种用态射思维的想法，你如何转换，甚至不先看代码，而是开始把Web服务器看作是一台将请求转换为响应的机器。然后对于每个可能的部分，你看，这里，我正在将用户ID转换为用户内容或网页。每一步最终都是转换。在范畴论中有一个定理，叫做Yoneda引理，它主要说的是，我转述一下，"如果你知道从一个数据类型到该数据类型的所有函数，你就可以唯一地识别该数据类型。"这种连接实际上比数据形状本身更重要的想法。
Duncan McGregor: Yes, I've heard you say that a type is not the data, it's the operations on that data. Is this the thing that defines the type for us? Duncan McGregor：是的，我听过你说类型不是数据，而是对数据的操作。这就是为我们定义类型的东西吗？
Uberto Barbini: The type is, yeah, the shape of the data, but it kind of gets uniquely defined by the regulation that it has with the other data. So looking at... Uberto Barbini：类型是的，数据的形状，但它通过与其他数据的关系得到了唯一的定义。所以看...
Duncan McGregor: I'm interested in your background. We didn't hear your education. Where did you learn Category Theory? How has this this come to be? Duncan McGregor：我对你的背景很感兴趣。我们没有听到你的教育经历。你在哪里学习范畴论的？这是怎么发生的？
Uberto Barbini: I mean, it's self-learned, and I'm not an expert. But I mean, I spent part time... I always been, to be honest, interested in mathematics. I didn't finish the university, but I mean, I was studying. Category theory is very mathematical. And I also, to be completely honest, I don't think it's needed to... I mean, if you like, I think it is great, I got a lot of fun and insights. But you don't need to learn category theory to use a functional programming. It's a bit like you don't need to speak Japanese to prepare sushi or to appreciate sushi. Uberto Barbini：我的意思是，这是自学的，我不是专家。但我的意思是，我花了一部分时间...我一直，老实说，对数学很感兴趣。我没有完成大学学业，但我的意思是，我在学习。范畴论是非常数学化的。而且，完全诚实地说，我不认为有必要...我的意思是，如果你喜欢，我觉得很棒，我得到了很多乐趣和见解。但你不需要学习范畴论来使用函数式编程。这有点像你不需要说日语来制作寿司或欣赏寿司。
Decoding Functional Paradigms 解码函数式范式
Duncan McGregor: Can you give an example where thinking in morphism leads to better software? Duncan McGregor：你能举一个用态射思维带来更好软件的例子吗？
Uberto Barbini: For me it's a bit like, when we approach a problem and, you know, just we need to do this typically this new API to connect these other two systems to get some result and give the result to the user. This is kind of typical. And instead of, you know, start drawing squares and arrows like this, for me, it's a bit of a, "Okay, what is our input and what is our output?" Trying to identify the transformation and then see, okay, this is the main transformation. So we have, I don't know, a financial product ID and the output is some kind of price or fair value. How do we get from here to there? There are a lot of possible transformations, and possible ways to do this using the system and trying to concentrate on this kind of flow, let's say. And this for me, I mean, thinking in this way, thinking about all transformation, how to put the transformation together, rather than trying to think about, "I create a service A, a service B, service A call to service B." The result may be similar but the mental process for me is very different. Uberto Barbini：对我来说，这有点像，当我们面对一个问题时，你知道，我们通常需要做这个新的API来连接另外两个系统以获得一些结果并将结果给用户。这是典型的。而不是，你知道，开始画这样的方块和箭头，对我来说，这有点像，"好吧，我们的输入是什么，输出是什么？"试图识别转换，然后看，好吧，这是主要的转换。所以我们有，我不知道，一个金融产品ID，输出是某种价格或公允价值。我们如何从这里到达那里？有很多可能的转换，以及使用系统做到这一点的可能方式，试图专注于这种流程，可以这么说。对我来说，我的意思是，用这种方式思考，思考所有转换，如何将转换组合在一起，而不是试图思考，"我创建服务A，服务B，服务A调用服务B。"结果可能相似，但对我而言心理过程非常不同。
Duncan McGregor: I wonder whether that's a place where...AI can help us, that if, as you say, effectively you're thinking of the type signatures of this transformation, and we know we've got... I've got this ID for this thing and this way of trading this ID for this piece of information, I need this piece of information to find this, that maybe AIs would be good at plugging together those sort of pipelines. Duncan McGregor：我想知道这是否是一个...AI可以帮助我们的地方，如果，正如你所说，实际上你在思考这种转换的类型签名，我们知道我们有...我有这个东西的ID和用这个ID换取这部分信息的方式，我需要这部分信息来找到这个，也许AI会擅长将这些管道连接在一起。
Uberto Barbini:  I mean, in a sense, I don't know, maybe just me, but I always find...You said that you started object-oriented in the '90s. I was starting programming in the '90s, and I think I got object-oriented in 2005. So, after 10 years that I was trying to do that... And object-oriented for me has been always a kind of, you know, poetic, it's a bit like literature To get something that works together is a bit hard. Instead functional program is more mathematic, so it's probably something easier for AI to plug together and verify that is... Uberto Barbini：我的意思是，在某种意义上，我不知道，也许只是我，但我总是发现...你说你在90年代开始面向对象。我在90年代开始编程，我想我在2005年掌握了面向对象。所以在尝试了10年之后...对我来说，面向对象一直是一种，你知道，诗意的东西，有点像文学。让一些东西协同工作有点困难。而函数式编程更数学化，所以对AI来说可能更容易将它们连接在一起并验证...
Duncan McGregor: So, on that subject, I mean, yes, OO has a sort of, not mystique, but it has a sensibility, a sort of like, there is this idea of smells and this idea that this is the system that wants to come out of this problem, isn't there? I've heard it said that we don't need patterns in functional programming. Because patterns were sort of the OO's way of collecting things that didn't smell, ways of collecting nice shapes of things. And there was a lot of talk early at least that patterns were working around the lack of functional paradigms in the languages. But it seems to me there are lots of places in functional programming where we have to learn these reusable solutions to problems. I think from your book, I read about the Reader monad, and that finally sort of clicked for me what problem the Reader monad was solving. But is the Reader monad a pattern in functional programming? Duncan McGregor：那么，在这个话题上，我的意思是，是的，面向对象有一种，不是神秘感，但它有一种敏感性，有点像，有这种气味的概念和这种想法，即这是从这个问题中想要出现的系统，不是吗？我听说我们在函数式编程中不需要模式。因为模式是面向对象收集那些有异味的东西的方式，是收集事物美好形状的方式。至少早期有很多讨论说模式是在语言中缺乏函数式范式的情况下工作的。但在我看来，函数式编程中有很多地方我们必须学习这些可重用的问题解决方案。我想从你的书中，我读到了Reader monad，最后我明白了Reader monad解决了什么问题。但是Reader monad是函数式编程中的一种模式吗？
Recommended talk: Effective Haskell • Rebecca Skinner & Emily Pillmore • GOTO 2024 推荐演讲：高效的Haskell • Rebecca Skinner & Emily Pillmore • GOTO 2024
Uberto Barbini: I'm a bit, let's say, why is he using the monad word because have a lot of weird... I mean, some people are saying, "Monads, no, no, no, no." Some people say, "Yes, monads only monads," which are both wrong approaches. And the point is that the monads are a mathematical construct. How you translated that mathematical construct in code is not a given. There could be several ways that you can do that. And, of course, everybody tends to use the kind of an... Well, there are a few variations, but mostly the same approach, but it's still just one possible approach. I think this kind of approach is a pattern. The monad itself is a kind of a mathematical concept that sometimes, I mean, stuff that has been called monads are not much more monads. No programming monad is 100% a mathematical monad. But some are not, probably not even 10%. They just use monads because... Uberto Barbini：我有点，可以说，他为什么要使用monad这个词，因为有很多奇怪的...我的意思是，有些人说，"Monad，不，不，不，不。"有些人说，"是的，只有monad，"这两种方法都是错误的。关键是monad是一个数学构造。你如何在代码中翻译那个数学构造并不是给定的。有几种方法可以做到这一点。当然，每个人都倾向于使用那种...嗯，有一些变化，但主要是相同的方法，但这仍然只是一种可能的方法。我认为这种方法是一种模式。Monad本身是一种数学概念，有时，我的意思是，被称为monad的东西并不是真正的monad。没有编程monad是100%的数学monad。但有些不是，可能甚至不到10%。他们只是使用monad因为...
Duncan McGregor: The same, of course, is true of patterns that we learn patterns, but then the thing we call that pattern is not necessarily all of the patterns as it's defined and so on. We kind of stitch these things together, don't we? We build software out of things that play this part in this pattern, or this part in this, you know, in this other pattern. Duncan McGregor：当然，对于我们学习的模式也是如此，但我们称之为那种模式的东西并不一定是所有按定义的模式等等。我们把这些东西拼接在一起，不是吗？我们用在这些模式中扮演这部分角色的东西，或在你知道的其他模式中扮演那部分角色的东西来构建软件。
Uberto Barbini: I remember when the pattern book came out and people at that time were writing stuff like this is a visitor pattern class or abstract factory. You put the name of the pattern in the class, and then the class may be changed. So, in the end, it became super confusing and stuff like that. So I tend now not to use any monad name in my classes. Just use the monads pattern if you want. The idea that trust... It's just a generic that you can transform basically, and you can combine it with other generic, and this idea of transformation makes a lot of sense to me. And also kind of a mark when you have something... if you have a generics around database connection or transaction, that function will be called in a context. It came quite naturally. It's also a good point to mark.. Uberto Barbini：我记得当模式书出版时，那时的人们在写这样的东西，这是一个访问者模式类或抽象工厂。你在类中放入模式的名称，然后类可能会被改变。所以，最终，它变得超级混乱等等。所以我现在倾向于不在我的类中使用任何monad名称。如果你想的话就使用monad模式。信任的想法...它基本上只是一个你可以转换的泛型，你可以将它与其他泛型组合，这种转换的想法对我来说很有意义。而且当你有某种东西时也是一种标记...如果你有围绕数据库连接或事务的泛型，那个函数将在上下文中被调用。这很自然。这也是一个很好的标记点..
Duncan McGregor: It seems to me that pattern names in the names or types were an anti-pattern, but they were useful for documenting what role this thing had. So, it was good for documentation, good for comments, but not so good for the names of things. And I guess that's probably true of, you know, functional patterns, readers, writers, and so on. Duncan McGregor：在我看来，模式名称在名称或类型中是一种反模式，但它们对记录这个东西有什么作用很有用。所以，这对文档很好，对注释很好，但对事物的名称不太好。我想这对你知道的函数式模式，读取器、写入器等等也是如此。
Uberto Barbini: It makes sense if the other people know about you can communicate very quickly, but if the rest of the team is not familiar, it's just confusing. Uberto Barbini：如果其他人了解你，可以快速沟通，这是有意义的，但如果团队的其他成员不熟悉，这就只是令人困惑。
Functional Programming: Balancing Pleasure and Frustration 函数式编程：平衡愉悦与挫折
Duncan McGregor: On the subject of the rest of the team, I think your book taught me a lot about how, what should I say? Real functional programmers think about solving problems and how to evolve that software as we ask for new features. But how would you go about evolving software on a team from objects to functions? Duncan McGregor：关于团队的其他成员，我认为你的书教会了我很多关于如何，我应该说什么？真正的函数式程序员如何思考解决问题以及当我们要求新功能时如何演进软件。但是你会如何在团队中从面向对象演进到函数式软件呢？
Uberto Barbini: I think the important thing is to keep the team together, so as not to fight any code that the team is not comfortable with. On the other side, I think is a good idea to keep a bit of heat on. So always trying to introduce a new concept and stuff like that. In my previous team, I mean, same company, but the previous, we were two people of us was coming from, yeah, this kind of functional culture. We introduced the idea to the rest of the team about using results in the operation and stuff like that. And the rest of the team was a bit like, "Well, this is different from using exceptional, how we are using, but let's have a try." And they enjoyed it. The whole project switched very quickly from one to another party. But I mean, I've been in another team where the feeling was really, "No, no, no, we always did it like that. This is not what we are going to do." But yeah, that's also fine. Uberto Barbini：我认为重要的是要让团队团结在一起，这样就不会与团队不适应的任何代码产生冲突。另一方面，我认为保持一些热度是个好主意。所以总是试图引入新概念等等。在我之前的团队中，我的意思是，同一家公司，但之前的团队，我们两个人来自，是的，这种函数式文化。我们向团队的其他成员介绍了在操作中使用结果等想法。团队的其他成员有点像，"嗯，这与我们使用异常的方式不同，但让我们试试。"他们很喜欢。整个项目很快就从一方转向了另一方。但我的意思是，我在另一个团队中，感觉真的是，"不，不，不，我们一直都是这样做的。这不是我们要做的事情。"但是的，那也很好。
Duncan McGregor: So, in the preface, you say, "Functional programming makes my job more pleasant every day, even if it drives me crazy sometimes." I think your book does a good job of showing how you can make software more pleasant, but in what ways does functional programming drive you crazy? Duncan McGregor：那么，在序言中，你说："函数式编程让我的工作每天都更愉快，即使有时它让我抓狂。"我认为你的书很好地展示了你如何让软件更愉快，但函数式编程在哪些方面让你抓狂？
Uberto Barbini: I really enjoy having fun about, solving the problem in using transformation. So okay, I can do this with a side effect, but if I can make this explicit to the type system using maybe C class or some kind of stuff like that, it's better. So, this is the stuff that I really enjoy to do that. I think the final code is less backbone, but sometimes it's very hard or you sometimes say, "Okay, now let's go back because it's..." So sometimes making the stuff compile is the most difficult factor, and once it's compiled, you are quite sure that it's correct. Uberto Barbini：我真的很享受通过使用转换来解决问题的乐趣。所以好吧，我可以用副作用来做这件事，但如果我能使用maybe C类或某种类似的东西向类型系统明确这一点，那就更好了。所以，这是我真正喜欢做的事情。我认为最终代码更少骨干，但有时它非常困难，或者你有时会说，"好吧，现在让我们回去因为它..."所以有时让这些东西编译是最困难的因素，一旦它编译了，你就相当确定它是正确的。
Duncan McGregor: That balance of pragmatism versus correctness, I think, especially again, as we were saying earlier, where what your language makes easy defines pragmatism, I suppose. I know there are places where the Kotlin-type system... There are things where you end up casting that you might in another language than language might see that something was safe, for example. Certainly my experience of Kotlin is it's pragmatism can lead to frustration sometimes because we can't express something we want to, in the same way as we might have problems with Java, making it harder to create new types than we'd like. Duncan McGregor：实用主义与正确性之间的平衡，我认为，特别是再次如我们之前所说，你的语言让什么变得容易定义了实用主义，我想。我知道Kotlin类型系统有地方...有些地方你最终会强制转换，在另一种语言中可能会看到某些东西是安全的，例如。当然，我对Kotlin的经验是它的实用主义有时会导致挫折，因为我们无法以我们想要的方式表达某些东西，就像我们在Java中可能遇到的问题一样，比我们希望的更难创建新类型。
Recommended talk: Functional Programming in 40 Minutes • Russ Olsen • GOTO 2018 推荐演讲：40分钟函数式编程 • Russ Olsen • GOTO 2018
Uberto Barbini: There was some stuff that I would really like Kotlin to make a bit easier to do, because there are some, yeah... For example, yeah, the companion object, a bit under user in Kotlin, in my opinion, would be a much better way to use that. And to express some time would be nicer. But actually, yeah, this is true. But what they see is that most people, they really got scared from the beginning when they see the kind of code that I show at the end of the book where basically everything is just a chain of, you know, map, fold and transformation, binding. And so every functionality is just in a single expression. And people got a bit scared about that. On the other side, I think... I mean, in the book there is this origami... Because, you know, in functional programming there is this faulty function. But it's really that functional programming is a bit like origami, and seems much harder than it is actually is, after a while if you learn origami, it's not that... Uberto Barbini：有一些东西我真的希望Kotlin能让它们变得更容易做，因为有一些，是的...例如，是的，伴生对象，在Kotlin中，据我看来，会是一种更好的使用方式。表达一些时间会更好。但实际上，是的，这是真的。但他们看到的是，大多数人，当他们从一开始看到我在书末展示的那种代码时真的被吓到了，基本上一切都是，你知道，map、fold和转换、绑定的链。所以每个功能都在一个表达式中。人们对这一点有点害怕。另一方面，我认为...我的意思是，在书中有关于折纸的内容...因为，你知道，在函数式编程中有这个有缺陷的函数。但实际上函数式编程有点像折纸，看起来比实际要困难得多，过一段时间如果你学会了折纸，就不是那样了...
Duncan McGregor: From what I know about origami, though, sometimes you have to start off with a lot bigger piece of paper than you think you might from the end result. Duncan McGregor：不过，从我对折纸的了解来看，有时你必须从比你从最终结果想象的要大得多的纸张开始。
Uberto Barbini: Ah, well, I mean, the professional one, they really start with the, like, one square-meter piece of paper to do. Uberto Barbini：啊，好吧，我的意思是，专业的折纸者，他们真的从一平方米的纸张开始做。
The Evolution of Software: Learnings from Writing 'From Objects to Functions 软件的演进：从编写《从对象到函数》中获得的启示
Duncan McGregor: I know the process of writing a book helped me to think about software. Did the book turn out as you sort of planned it at the beginning, or did it change your understanding as you wrote it? Duncan McGregor：我知道写书的过程帮助我思考软件。这本书的成果是否如你最初计划的那样，还是在写作过程中改变了你的理解？
Uberto Barbini: No, this changed a lot. I kind of rewrote it two or three times, I mean, depending on... A bit from the... I mean, the original idea was to have a book, like, "This is the theory, this is the practice." And the editor told me, "No, let's just be the practice. Forget the theory." I think that was a very good suggestion. Then when we got to the beta readers, also I found that I was skipping a lot of mental processes and stuff like that. And when I started doing it slowly, I tried to put it down, I also realized that, yeah, maybe I can change things and make it clearer. And when I finished the book, I realized that, "Okay, if I had to rewrite this book again, I'll probably remove also a lot of...not to remove, but put the theory after. I don't think you need that. I mean, I kind of passionate, I really enjoy doing mathematical stuff, but some people bit got scared about that and it's not really needed. But, yeah, well, you can always skip that part of the book. Uberto Barbini：不，这改变了很多。我重写了两三次，我的意思是，取决于...有点来自...我的意思是，最初的想法是有一本书，像，"这是理论，这是实践。"编辑告诉我，"不，让我们只关注实践。忘记理论。"我认为这是一个很好的建议。然后当我们到了测试读者那里，我也发现我跳过了很多心理过程等等。当我开始慢慢做时，我试着把它写下来，我也意识到，是的，也许我可以改变一些东西让它更清楚。当我写完这本书时，我意识到，"好吧，如果我必须再次重写这本书，我可能会删除很多...不是删除，而是把理论放在后面。我认为你不需要那个。我的意思是，我有点热情，我真的很喜欢做数学方面的东西，但有些人对此有点害怕，这并不是真正需要的。但是，是的，好吧，你总是可以跳过书的那部分。
Duncan McGregor: Personally, I found the book sort of challenging. But it was enjoyable because it took us through, as I say, unlike most functional programming books, it took us through an actual example from the beginning to the end. There's motivation there in every step. So, we are solving problems and looking at how those problems will be solved in a functional way, rather than just having them in the abstract. So, we are motivated to read the theory, I think. That worked very well for me. Duncan McGregor：就我个人而言，我觉得这本书有些挑战性。但很愉快，因为它带领我们，正如我所说，与大多数函数式编程书籍不同，它带领我们从头到尾经历了一个实际的例子。每一步都有动机。所以，我们在解决问题，并观察这些问题如何以函数式的方式解决，而不是仅仅在抽象层面。所以，我们有动力去阅读理论，我认为。这对我很有效。
Uberto Barbini: The book is a to-do application, which may be, I mean, to-do list, but actually it's quite a hard problem to solve, to write a good to-do list application. Originally Java do a kind of a more, you know, kind of, Jira kind of software to ticket-processing software. But I realized that just to-do application is a lot of code to write and to explain the code, it really takes a lot of time. Uberto Barbini：这本书是一个待办事项应用程序，可能是，我的意思是，待办事项列表，但实际上解决这个问题相当困难，写一个好的待办事项列表应用程序。最初Java做一种更，你知道，类似Jira的软件到票据处理软件。但我意识到仅仅待办事项应用程序就需要写很多代码，解释代码真的需要很多时间。
Duncan McGregor: And so finally, Uberto, do you have another book in you? Or is it too soon? Duncan McGregor：那么最后，Uberto，你还有另一本书在酝酿吗？还是太早了？
Uberto Barbini: I still have some blogs to write about this book, I mean, and things that I couldn't really put in the book. But my daughter is a 9-year-old and I'm teaching her to do programming, but without pushing, but we do some sessions. And also to her classmate. And I really find it fascinating teaching programming to kids. And I don't know, sometimes I would like to write something about it or to put it together, the experience. I am not very happy with how they teach programming in courses and stuff like that. And instead working with kids is so rewarding, but, you know, you need to raise the interest and let them explore. Programming is a creative activity. Most of the courses seem that programming is like typing. Uberto Barbini：我仍然有一些博客要写关于这本书，我的意思是，还有一些我无法真正放进书里的东西。但我的女儿9岁了，我在教她编程，但没有强迫，我们做一些课程。还有她的同学。我真的很喜欢教孩子们编程。我不知道，有时我想写一些关于这个的东西或者把经验整理在一起。我对他们在课程中教授编程的方式不太满意等等。而和孩子们一起工作是如此有回报，但是，你知道，你需要提高兴趣并让他们探索。编程是一项创造性的活动。大多数课程似乎编程就像打字。
Duncan McGregor: I think we've come to the end of our time. Is there anything else you'd like to say about your book? Duncan McGregor：我想我们的时间到了。关于你的书，还有什么想说的吗？
Uberto Barbini: Yes. One thing that we didn't mention, is that in the book I also put an exercise at the end of each chapter and this exercise is very useful to learn functional programming, but there is no solution in the book because of clearly a choice. But all the solutions are still available on my GitHub repository. And we will put the links here. If you have the book and you want to see my solution, which is not given, that is the best one, you can always see it in the GitHub repository. Uberto Barbini：是的。我们没有提到的一件事是，在书中我还在每章末尾放了一个练习，这个练习对学习函数式编程非常有用，但由于明显的选择，书中没有提供解决方案。但所有解决方案仍然在我的GitHub仓库中可用。我们会在这里放链接。如果你有这本书，想看我的解决方案，虽然没有给出，但那是最好的一个，你总是可以在GitHub仓库中看到它。
Duncan McGregor: Wonderful. So as Uberto says, that will be in the show notes as well as a link to his book, "From Objects to Functions: Build Your Software Faster and Safer with Functional Programming, Kotlin." Uberto, thank you very much. It's been enlightening. Duncan McGregor：太棒了。所以正如Uberto所说，那将在节目笔记中，以及他书的链接，《从对象到函数：使用函数式编程和Kotlin更快更安全地构建软件》。Uberto，非常感谢。这很有启发性。
Uberto Barbini: Thank you very much, Duncan. Uberto Barbini：非常感谢，Duncan。
About the speakers 关于演讲者
Duncan McGregor Duncan McGregor
Duncan McGregor ( interviewer ) Duncan McGregor（采访者）
Uberto Barbini Uberto Barbini
Uberto Barbini ( author ) Uberto Barbini（作者）
Related topics 相关主题
#Kotlin #Kotlin
#functional programming #函数式编程
#Java #Java
From Objects to Functions: Build Your Software Faster and Safer with Functional Programming and Kotlin 从对象到函数：使用函数式编程和Kotlin更快更安全地构建软件
View book 查看书籍
Watch Next 接下来观看
Using Ktor 3.0 with All the Shiny Things 使用Ktor 3.0与所有闪亮的功能
Using Ktor 3.0 with All the Shiny Things 使用Ktor 3.0与所有闪亮的功能

June 2024 2024年6月

10 Reasons to Try Kotlin Multiplatform 尝试Kotlin多平台的10个理由
10 Reasons to Try Kotlin Multiplatform 尝试Kotlin多平台的10个理由

October 2023 2023年10月

Spring Boot: Up and Running Spring Boot：启动并运行
Spring Boot: Up and Running Spring Boot：启动并运行

October 2022 2022年10月

Enterprise Java in the Age of Microservices, Containers and Cloud-Native 微服务、容器和云原生时代的企业Java
Enterprise Java in the Age of Microservices, Containers and Cloud-Native 微服务、容器和云原生时代的企业Java

December 2021 2021年12月

Privacy policy 隐私政策
Powered by: 由...提供支持：
Trifork Logo Trifork标志
© 2025 Trifork © 2025 Trifork
