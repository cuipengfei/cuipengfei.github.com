<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《编程之美——微软技术面试心得》“中国象棋的将帅问题”C#实现</title>
    <url>/blog/2008/07/02/%E3%80%8A%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E2%80%94%E2%80%94%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97%E3%80%8B%E2%80%9C%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B%E7%9A%84%E5%B0%86%E5%B8%85%E9%97%AE%E9%A2%98%E2%80%9DCSharp%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>《编程之美——微软技术面试心得》“中国象棋的将帅问题”C#实现</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Class1</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">static</span> <span class="type">byte</span> counter = <span class="number">81</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Main</span><span class="params">(string[] a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (counter-- != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (counter / <span class="number">9</span> % <span class="number">3</span> == counter % <span class="number">9</span> % <span class="number">3</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				System.<span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;a=&quot;</span> + (counter / <span class="number">9</span> + <span class="number">1</span>).<span class="built_in">ToString</span>() + <span class="string">&quot;b=&quot;</span> + (counter % <span class="number">9</span> + <span class="number">1</span>).<span class="built_in">ToString</span>());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.<span class="built_in">Console</span>.<span class="built_in">Read</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>《编程之美——微软技术面试心得》的C#实现</tag>
      </tags>
  </entry>
  <entry>
    <title>《编程之美——微软技术面试心得》一摞烧饼的排序 （不会做，看不懂）</title>
    <url>/blog/2008/07/03/%E3%80%8A%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E2%80%94%E2%80%94%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97%E3%80%8B%E4%B8%80%E6%91%9E%E7%83%A7%E9%A5%BC%E7%9A%84%E6%8E%92%E5%BA%8F%20%EF%BC%88%E4%B8%8D%E4%BC%9A%E5%81%9A%EF%BC%8C%E7%9C%8B%E4%B8%8D%E6%87%82%EF%BC%89/</url>
    <content><![CDATA[<p>《编程之美——微软技术面试心得》一摞烧饼的排序 （不会做，看不懂）</p>
<p>留个位置</p>
]]></content>
      <tags>
        <tag>《编程之美——微软技术面试心得》的C#实现</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式的简单应用（C#）</title>
    <url>/blog/2008/07/30/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%EF%BC%88CSharp%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">OperSuper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">double</span> <span class="title">GetResult</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Add</span> : <span class="title">OperSuper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetResult</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Minus</span> : <span class="title">OperSuper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetResult</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Context</span></span><br><span class="line">    &#123;</span><br><span class="line">        OperSuper os = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">double</span> A, B;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params">OperSuper o, <span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            os = o;</span><br><span class="line">            A = a;</span><br><span class="line">            B = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetResult</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> os.GetResult(A, B);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Context c = <span class="keyword">new</span> Context(<span class="keyword">new</span> Add(), <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">            Console.WriteLine(c.GetResult());</span><br><span class="line">            c = <span class="keyword">new</span> Context(<span class="keyword">new</span> Minus(), <span class="number">20</span>, <span class="number">10</span>);</span><br><span class="line">            Console.WriteLine(c.GetResult());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>简单工厂的最最简单应用（C#）</title>
    <url>/blog/2008/07/29/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E7%9A%84%E6%9C%80%E6%9C%80%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%EF%BC%88CSharp%EF%BC%89/</url>
    <content><![CDATA[<p>简单工厂的最最简单应用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculate cal = factory.CreateOper(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            cal.A = <span class="number">10</span>;</span><br><span class="line">            cal.B = <span class="number">20</span>;</span><br><span class="line">            Console.WriteLine(cal.GetResult());</span><br><span class="line"></span><br><span class="line">            cal = factory.CreateOper(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">            cal.A = <span class="number">10</span>;</span><br><span class="line">            cal.B = <span class="number">20</span>;</span><br><span class="line">            Console.WriteLine(cal.GetResult());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Calculate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> _NumA = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">double</span> _B = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> A</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _NumA; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _NumA = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> B</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _B; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _B = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">double</span> <span class="title">GetResult</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Add</span> : <span class="title">Calculate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetResult</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> A + B;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Minus</span> : <span class="title">Calculate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetResult</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> A - B;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">factory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calculate</span></span><br><span class="line"><span class="function">            <span class="title">CreateOper</span>(<span class="params"><span class="built_in">string</span> oper</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculate op = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (oper)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line"></span><br><span class="line">                    op = <span class="keyword">new</span> Add();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line"></span><br><span class="line">                    op = <span class="keyword">new</span> Minus();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> op;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰模式的简单实现（C#）内有图一张,嘿嘿.....</title>
    <url>/blog/2008/07/31/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%EF%BC%88CSharp%EF%BC%89%E5%86%85%E6%9C%89%E5%9B%BE%E4%B8%80%E5%BC%A0,%E5%98%BF%E5%98%BF...../</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080731/ClassDiagram1.jpg" alt="ok"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Ring r = <span class="keyword">new</span> Ring();</span><br><span class="line">            EarRing er = <span class="keyword">new</span> EarRing();</span><br><span class="line">            NeckLace nl = <span class="keyword">new</span> NeckLace();</span><br><span class="line"></span><br><span class="line">            r.Decrate(p);</span><br><span class="line">            er.Decrate(r);</span><br><span class="line">            nl.Decrate(er);</span><br><span class="line">            nl.Show();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125; <span class="comment">//重载一个没有参数的构造函数，给其他子类用</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;拥有以上装饰物品&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Decrator</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person p;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            p.Show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Decrate</span>(<span class="params">Person p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.p = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Ring</span> : <span class="title">Decrator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;戒指&quot;</span>);</span><br><span class="line">            <span class="keyword">base</span>.Show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">EarRing</span> : <span class="title">Decrator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;耳环&quot;</span>);</span><br><span class="line">            <span class="keyword">base</span>.Show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">NeckLace</span> : <span class="title">Decrator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;项链&quot;</span>);</span><br><span class="line">            <span class="keyword">base</span>.Show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>编程之美 C#实现 1</title>
    <url>/blog/2008/07/02/%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%20CSharp%E5%AE%9E%E7%8E%B0%201/</url>
    <content><![CDATA[<p>适用于1.8GHZ左右的CPU 50%占用率</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManageCpu</span> </span>&#123;</span><br><span class="line">	staticvoid Main(string[] a) &#123;</span><br><span class="line">		<span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (true) &#123;</span><br><span class="line">			st = System.Environment.TickCount;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span> (System.Environment.TickCount - st &lt; <span class="number">90</span>) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			System.Threading.Thread.Sleep(<span class="number">90</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>《编程之美——微软技术面试心得》的C#实现</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--代理模式的简单实现（C#）+类关系图</title>
    <url>/blog/2008/08/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%EF%BC%88CSharp%EF%BC%89+%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080801/ClassDiagram1.jpg" alt="关系图"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Proxy p = <span class="keyword">new</span> Proxy();</span><br><span class="line">            p.DoYourStuff();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ProxyBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">DoYourStuff</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Subject</span> : <span class="title">ProxyBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoYourStuff</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;do my job&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Proxy</span> : <span class="title">ProxyBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        Subject s;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoYourStuff</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s = <span class="keyword">new</span> Subject();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            s.DoYourStuff();</span><br><span class="line"><span class="comment">//throw new NotImplementedException();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--原型模式（附带类关系图一张）</title>
    <url>/blog/2008/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%99%84%E5%B8%A6%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE%E4%B8%80%E5%BC%A0%EF%BC%89/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080803/ClassDiagram1.jpg" alt="原型模式"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Simple</span> : <span class="title">ICloneable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> field1;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> field2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Property1</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> field1; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; field1 = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Property2</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> field2; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; field2 = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Clone</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.MemberwiseClone();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Complecated</span> : <span class="title">ICloneable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Simple simple;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Complecated</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            simple = <span class="keyword">new</span> Simple();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Complecated</span>(<span class="params">Simple s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            simple = (Simple) s.Clone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Clone</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Complecated c = <span class="keyword">new</span> Complecated(simple);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetMe</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            simple.Property1 = a;</span><br><span class="line">            simple.Property2 = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(simple.Property1);</span><br><span class="line">            Console.WriteLine(simple.Property2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Complecated c = <span class="keyword">new</span> Complecated();</span><br><span class="line">            c.SetMe(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            Complecated c2 = (Complecated) c.Clone();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            c2.SetMe(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            c.Show();</span><br><span class="line">            c2.Show();</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--工厂模式</title>
    <url>/blog/2008/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080802/ClassDiagram1.jpg" alt="工厂模式"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            IFactory i = <span class="keyword">new</span> AddFactory();</span><br><span class="line">            Math oper = i.CreateOperation();</span><br><span class="line">            oper.A = <span class="number">5</span>;</span><br><span class="line">            oper.B = <span class="number">10</span>;</span><br><span class="line">            Console.WriteLine(oper.DoTheMath());</span><br><span class="line"></span><br><span class="line">            i = <span class="keyword">new</span> SubFactory();</span><br><span class="line">            oper = i.CreateOperation();</span><br><span class="line">            oper.A = <span class="number">10</span>;</span><br><span class="line">            oper.B = <span class="number">3</span>;</span><br><span class="line">            Console.WriteLine(oper.DoTheMath());</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Math</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> _a;</span><br><span class="line">        <span class="built_in">double</span> _b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> A</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; _a = <span class="keyword">value</span>; &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _a; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> B</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; _b = <span class="keyword">value</span>; &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _b; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">double</span> <span class="title">DoTheMath</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Add</span> : <span class="title">Math</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">DoTheMath</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> A + B;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Sub</span> : <span class="title">Math</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">DoTheMath</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> A - B;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Math <span class="title">CreateOperation</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">AddFactory</span> : <span class="title">IFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Math <span class="title">CreateOperation</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Add();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">SubFactory</span> : <span class="title">IFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Math <span class="title">CreateOperation</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Sub();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--模板方法模式（照旧，有类关系图）</title>
    <url>/blog/2008/08/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%85%A7%E6%97%A7%EF%BC%8C%E6%9C%89%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE%EF%BC%89/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080804/ClassDiagram1.jpg" alt="设计模式--模板方法模式（照旧，有类关系图）"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TheFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BaseMethod1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;吃了吗？&quot;</span>);</span><br><span class="line">            BaseMethod2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BaseMethod2</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Son1</span> : <span class="title">TheFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BaseMethod2</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;吃了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Son2</span> : <span class="title">TheFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BaseMethod2</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;还没呢&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            TheFather obj = <span class="keyword">new</span> Son1();</span><br><span class="line">            obj.BaseMethod1();</span><br><span class="line"></span><br><span class="line">            obj = <span class="keyword">new</span> Son2();</span><br><span class="line">            obj.BaseMethod1();</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--外观模式</title>
    <url>/blog/2008/08/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Facade</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Func1 field1;</span><br><span class="line">        <span class="keyword">private</span> Func2 field2;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Facade</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            field1 = <span class="keyword">new</span> Func1();</span><br><span class="line">            field2 = <span class="keyword">new</span> Func2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            field1.Method();</span><br><span class="line">            field1.Method1();</span><br><span class="line">            field2.Method();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            field2.Method();</span><br><span class="line">            field2.Method1();</span><br><span class="line">            field1.Method();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Func1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;功能类1的方法1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;功能类1的方法2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Func2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;功能类2的方法1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;功能类2的方法2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Facade f = <span class="keyword">new</span> Facade();</span><br><span class="line">            f.Method();</span><br><span class="line">            f.Method1();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080805/ClassDiagram1.jpg"></p>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---观察者模式（恐怖袭击、地震的例子，有类关系图）</title>
    <url>/blog/2008/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%81%90%E6%80%96%E8%A2%AD%E5%87%BB%E3%80%81%E5%9C%B0%E9%9C%87%E7%9A%84%E4%BE%8B%E5%AD%90%EF%BC%8C%E6%9C%89%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE%EF%BC%89/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080807/ClassDiagram1.jpg" alt="设计模式---观察者模式（恐怖袭击、地震的例子，有类关系图）"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">Warning</span></span><br><span class="line">    &#123;</span><br><span class="line">        String Situation &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Warn</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Add</span>(<span class="params">PeopleInSchool p</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Sub</span>(<span class="params">PeopleInSchool p</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">PoliceStation</span> : <span class="title">Warning</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IList&lt;PeopleInSchool&gt; field = <span class="keyword">new</span> List&lt;PeopleInSchool&gt;();</span><br><span class="line">        <span class="built_in">string</span> situation;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Situation</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> situation; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; situation = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Warn</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (PeopleInSchool p <span class="keyword">in</span> field)</span><br><span class="line">            &#123;</span><br><span class="line">                p.WarningReceived();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">PeopleInSchool p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            field.Add(p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sub</span>(<span class="params">PeopleInSchool p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            field.Remove(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">EarthquakeDepartment</span> : <span class="title">Warning</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> situation;</span><br><span class="line">        <span class="keyword">private</span> IList&lt;PeopleInSchool&gt; field = <span class="keyword">new</span> List&lt;PeopleInSchool&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Situation</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> situation; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; situation = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Warn</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (PeopleInSchool p <span class="keyword">in</span> field)</span><br><span class="line">            &#123;</span><br><span class="line">                p.WarningReceived();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">PeopleInSchool p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            field.Add(p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sub</span>(<span class="params">PeopleInSchool p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            field.Remove(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">PeopleInSchool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> Warning field;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PeopleInSchool</span>(<span class="params">Warning w</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            field = w;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">WarningReceived</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">PeopleInSchool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params">Warning w</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">w</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WarningReceived</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是老师&quot;</span> + field.Situation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">PeopleInSchool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params">Warning w</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">w</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WarningReceived</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是学生&quot;</span> + field.Situation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            PoliceStation p = <span class="keyword">new</span> PoliceStation();</span><br><span class="line">            Teacher t = <span class="keyword">new</span> Teacher(p);</span><br><span class="line">            Student s = <span class="keyword">new</span> Student(p);</span><br><span class="line">            p.Add(t);</span><br><span class="line">            p.Add(s);</span><br><span class="line">            p.Situation = <span class="string">&quot;有恐怖袭击！！！&quot;</span>;</span><br><span class="line">            p.Warn();</span><br><span class="line">            p.Situation = <span class="string">&quot;注意防火防盗！！！&quot;</span>;</span><br><span class="line">            p.Warn();</span><br><span class="line">            EarthquakeDepartment e = <span class="keyword">new</span> EarthquakeDepartment();</span><br><span class="line">            t = <span class="keyword">new</span> Teacher(e);</span><br><span class="line">            s = <span class="keyword">new</span> Student(e);</span><br><span class="line">            e.Add(t);</span><br><span class="line">            e.Add(s);</span><br><span class="line">            e.Situation = <span class="string">&quot;要地震了！！！&quot;</span>;</span><br><span class="line">            e.Warn();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---中介者模式（打出来是“终结者.......”）</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%89%93%E5%87%BA%E6%9D%A5%E6%98%AF%E2%80%9C%E7%BB%88%E7%BB%93%E8%80%85.......%E2%80%9D%EF%BC%89/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080818/ClassDiagram1.jpg" alt="设计模式---中介者模式（打出来是“终结者.......”）"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FBIAgent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SendMessage</span>(<span class="params"><span class="built_in">string</span> m</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadMessage</span>(<span class="params"><span class="built_in">string</span> m</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">AgentInRussia</span> : <span class="title">FBIAgent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> FBICenter center;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AgentInRussia</span>(<span class="params">FBICenter f</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            center = f;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SendMessage</span>(<span class="params"><span class="built_in">string</span> m</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            center.Send(<span class="keyword">this</span>, m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">AgentInEngland</span> : <span class="title">FBIAgent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> FBICenter center;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SendMessage</span>(<span class="params"><span class="built_in">string</span> m</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            center.Send(<span class="keyword">this</span>, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AgentInEngland</span>(<span class="params">FBICenter f</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            center = f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FBICenter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params">FBIAgent f, <span class="built_in">string</span> m</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">RealFBICenter</span> : <span class="title">FBICenter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> FBIAgent agentinrussia;</span><br><span class="line">        <span class="keyword">private</span> FBIAgent agentinengland;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> FBIAgent russia</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; agentinrussia = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> FBIAgent england</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; agentinengland = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params">FBIAgent f, <span class="built_in">string</span> m</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (f == agentinengland)</span><br><span class="line">            &#123;</span><br><span class="line">                agentinrussia.ReadMessage(m);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                agentinengland.ReadMessage(m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            RealFBICenter fc = <span class="keyword">new</span> RealFBICenter();</span><br><span class="line">            AgentInEngland eng = <span class="keyword">new</span> AgentInEngland(fc);</span><br><span class="line">            AgentInRussia rus = <span class="keyword">new</span> AgentInRussia(fc);</span><br><span class="line">            fc.england = eng;</span><br><span class="line">            fc.russia = rus;</span><br><span class="line">            eng.SendMessage(<span class="string">&quot;我在英国搞情报，hia~hia~&quot;</span>);</span><br><span class="line">            rus.SendMessage(<span class="string">&quot;我在俄罗斯搞情报，xia~ixa~&quot;</span>);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---单例模式（singleton）</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%88singleton%EF%BC%89/</url>
    <content><![CDATA[<p>设计模式—单例模式（singleton）</p>
<p><img data-src="http://hiphotos.baidu.com/yansuochonglou/pic/item/c56fe019dbd71a62dbb4bd42.jpg" alt="c56fe019dbd71a62dbb4bd42.jpg"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton s;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Singleton s1 = Singleton.GetInstance();</span><br><span class="line">            Singleton s2 = Singleton.GetInstance();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">object</span>.ReferenceEquals(s1, s2))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;一样的&quot;</span>);</span><br><span class="line">                Console.WriteLine(s1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---建造者（Builder）模式，有关系图</title>
    <url>/blog/2008/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%BB%BA%E9%80%A0%E8%80%85%EF%BC%88Builder%EF%BC%89%E6%A8%A1%E5%BC%8F%EF%BC%8C%E6%9C%89%E5%85%B3%E7%B3%BB%E5%9B%BE/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Builder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SetPrice</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SetName</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">TVBuilder</span> : <span class="title">Builder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> RawMateria rm;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TVBuilder</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            rm = <span class="keyword">new</span> RawMateria();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetPrice</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            rm.Price = <span class="string">&quot;1500&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetName</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            rm.Name = <span class="string">&quot;TV&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RawMateria <span class="title">GetTV</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> rm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">PCBuilder</span> : <span class="title">Builder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> RawMateria rm;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PCBuilder</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            rm = <span class="keyword">new</span> RawMateria();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetName</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            rm.Name = <span class="string">&quot;PC&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetPrice</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            rm.Price = <span class="string">&quot;2000&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RawMateria <span class="title">GetPC</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> rm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">RawMateria</span></span><br><span class="line">    &#123;</span><br><span class="line">        String _name;</span><br><span class="line">        String _price;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String Price</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _price; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _price = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;    &quot;</span> \ + <span class="keyword">this</span>.Price );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Director</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> PCBuilder pcbuilder = <span class="keyword">new</span> PCBuilder();</span><br><span class="line">        <span class="keyword">private</span> TVBuilder tvbuilder = <span class="keyword">new</span> TVBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RawMateria <span class="title">GiveMeTV</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            tvbuilder.SetName();</span><br><span class="line">            tvbuilder.SetPrice();</span><br><span class="line">            <span class="keyword">return</span> tvbuilder.GetTV();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RawMateria <span class="title">GiveMePC</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            pcbuilder.SetName();</span><br><span class="line">            pcbuilder.SetPrice();</span><br><span class="line">            <span class="keyword">return</span> pcbuilder.GetPC();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Director d = <span class="keyword">new</span> Director();</span><br><span class="line">            d.GiveMePC().Show();</span><br><span class="line">            d.GiveMeTV().Show();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080806/ClassDiagram1.jpg" alt="设计模式---建造者（Builder）模式，有关系图"></p>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---命令模式</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>设计模式—命令模式</p>
<p><img data-src="http://hiphotos.baidu.com/yansuochonglou/pic/item/d1fc651edbf349ec1ad5765a.jpg" alt="d1fc651edbf349ec1ad5765a.jpg"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Order</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> General general;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Order</span>(<span class="params">General g</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.general = g;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Excute</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Fire</span> : <span class="title">Order</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Fire</span>(<span class="params">General g</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">g</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Excute</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            general.ExcuteFire();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Retreat</span> : <span class="title">Order</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Retreat</span>(<span class="params">General g</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">g</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Excute</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            general.ExcuteRetreat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Soldier</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Soldier</span>(<span class="params"><span class="built_in">string</span> n</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExcuteFire</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(name + <span class="string">&quot;开火&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExcuteRetreat</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(name + <span class="string">&quot;撤退&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">General</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Soldier soldier;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExcuteFire</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            soldier.ExcuteFire();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetSoldier</span>(<span class="params">Soldier s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.soldier = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExcuteRetreat</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            soldier.ExcuteRetreat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            General g = <span class="keyword">new</span> General();</span><br><span class="line">            Soldier s = <span class="keyword">new</span> Soldier(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            g.SetSoldier(s);</span><br><span class="line">            Order o = <span class="keyword">new</span> Fire(g);</span><br><span class="line">            o.Excute();</span><br><span class="line">            o = <span class="keyword">new</span> Retreat(g);</span><br><span class="line">            o.Excute();</span><br><span class="line">            g.SetSoldier(<span class="keyword">new</span> Soldier(<span class="string">&quot;李四&quot;</span>));</span><br><span class="line">            o.Excute();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---备忘录模式（CSDN没有恢复迹象......）</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F%EF%BC%88CSDN%E6%B2%A1%E6%9C%89%E6%81%A2%E5%A4%8D%E8%BF%B9%E8%B1%A1......%EF%BC%89/</url>
    <content><![CDATA[<p>设计模式—备忘录模式（CSDN没有恢复迹象……）</p>
<p><img data-src="http://hiphotos.baidu.com/yansuochonglou/pic/item/7f6bab1990e5495243a9ad1c.jpg" alt="7f6bab1990e5495243a9ad1c.jpg"></p>
<pre><code>using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleApplication1
&#123;
    class 人物状态
    &#123;
        private int _血;
        private int _气;

        public 人物状态()
        &#123;
            _气 = 100;
            _血 = 100;
        &#125;

        public int 血
        &#123;
            get &#123; return _血; &#125;
            set &#123; _血 = value; &#125;
        &#125;

        public int 气
        &#123;
            get &#123; return _气; &#125;
            set &#123; _气 = value; &#125;
        &#125;

        public 存档 存档()
        &#123;
            return new 存档(_血, _气);
        &#125;

        public void 读档(存档 c)
        &#123;
            this.气 = c.气;
            this.血 = c.血;
        &#125;

        public void 战斗()
        &#123;
            System.Random r = new System.Random();

            this._血 = r.Next(100);
            this._气 = r.Next(100);
        &#125;

        public void ShowState()
        &#123;
            Console.WriteLine(this.气 + &quot; &quot; + this.血);
        &#125;
    &#125;

    class 存档
    &#123;
        private int _气;

        private int _血;

        public 存档(int x, int q)
        &#123;
            this._气 = q;
            this._血 = x;
        &#125;

        public int 气
        &#123;
            get &#123; return _气; &#125;
        &#125;

        public int 血
        &#123;
            get &#123; return _血; &#125;
        &#125;
    &#125;

    class 管理器
    &#123;
        private 存档 savedfile;

        public 存档 SavedFile
        &#123;
            get &#123; return savedfile; &#125;
            set &#123; savedfile = value; &#125;
        &#125;
    &#125;

    class 调用者
    &#123;
        public static void Main()
        &#123;
            人物状态 r = new 人物状态();
            r.ShowState();

            管理器 g = new 管理器();
            g.SavedFile = r.存档();
            r.战斗();
            r.ShowState();
            r.读档(g.SavedFile);
            r.ShowState();
            Console.Read();
        &#125;
    &#125;
&#125;
``

</code></pre>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---桥接模式</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>2008年08月15日 星期五 下午 05:23</p>
<p>松耦合</p>
<p><img data-src="http://hiphotos.baidu.com/yansuochonglou/pic/item/09e79510c02a0e19203f2e7e.jpg" alt="09e79510c02a0e19203f2e7e.jpg"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> Engine e;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">InstallEngine</span>(<span class="params">Engine e</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">RacingCar</span> : <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;跑车&quot;</span>);</span><br><span class="line">            e.Show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">InstallEngine</span>(<span class="params">Engine e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Tractor</span> : <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;拖拉机&quot;</span>);</span><br><span class="line">            e.Show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">InstallEngine</span>(<span class="params">Engine e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Engine</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">RacingCarEngine</span> : <span class="title">Engine</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;跑车引擎&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">TractorEngine</span> : <span class="title">Engine</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;拖拉机引擎&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vehicle v = <span class="keyword">new</span> RacingCar();</span><br><span class="line">            v.InstallEngine(<span class="keyword">new</span> RacingCarEngine());</span><br><span class="line">            v.Show();</span><br><span class="line"></span><br><span class="line">            v = <span class="keyword">new</span> Tractor();</span><br><span class="line">            v.InstallEngine(<span class="keyword">new</span> TractorEngine());</span><br><span class="line">            v.Show();</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---抽象工厂模式+反射+配置文件</title>
    <url>/blog/2008/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F+%E5%8F%8D%E5%B0%84+%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">SportMan</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Come</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ChineseSportMan</span> : <span class="title">SportMan</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;中国运动员来了~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">RussianSportMan</span> : <span class="title">SportMan</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;俄罗斯运动员来了~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">TheController</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SportMan <span class="title">CreateSportMan</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//string s = (string)ConfigurationSettings.AppSettings[&quot;Nation&quot;];</span></span><br><span class="line">            <span class="keyword">return</span> (SportMan) Assembly.Load(<span class="string">&quot;ConsoleApplication1&quot;</span>)</span><br><span class="line">                .CreateInstance(<span class="string">&quot;ConsoleApplication1.&quot;</span> + ConfigurationSettings.AppSettings[<span class="string">&quot;Nation&quot;</span>].ToString());</span><br><span class="line">            <span class="comment">//ConfigurationSettings.AppSettings[];</span></span><br><span class="line">            <span class="comment">//return new ChineseSportMan();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            TheController.CreateSportMan().Come();</span><br><span class="line">            <span class="comment">//s.Come();</span></span><br><span class="line">            <span class="comment">//SportMan  c=(SportMan)Assembly.Load(&quot;ConsoleApplication1&quot;).CreateInstance(&quot;ConsoleApplication1.ChineseSportMan&quot;);</span></span><br><span class="line">            <span class="comment">//c.Come();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080808/ClassDiagram1.jpg" alt="设计模式---抽象工厂模式+反射+配置文件"></p>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---状态模式（今天CSDN竟然上不去，暂时发在这里） (从百度空间转回来的)</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BB%8A%E5%A4%A9CSDN%E7%AB%9F%E7%84%B6%E4%B8%8A%E4%B8%8D%E5%8E%BB%EF%BC%8C%E6%9A%82%E6%97%B6%E5%8F%91%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%89%20(%E4%BB%8E%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E8%BD%AC%E5%9B%9E%E6%9D%A5%E7%9A%84)/</url>
    <content><![CDATA[<p>设计模式—状态模式（今天CSDN竟然上不去，暂时发在这里）</p>
<p><img data-src="http://hiphotos.baidu.com/yansuochonglou/pic/item/58cbf8feaccd5d265d60085a.jpg" alt="58cbf8feaccd5d265d60085a.jpg"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">DoWhatIShouldDo</span>(<span class="params">Worker w</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Young</span> : <span class="title">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoWhatIShouldDo</span>(<span class="params">Worker w</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (w.Age &lt;= <span class="number">35</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;我年轻，逍遥自在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                w.State = <span class="keyword">new</span> MiddleAge();</span><br><span class="line">                w.DoWhatIShouldDo();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">MiddleAge</span> : <span class="title">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoWhatIShouldDo</span>(<span class="params">Worker w</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (w.Age &lt;= <span class="number">50</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;人到中年&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                w.State = <span class="keyword">new</span> Old();</span><br><span class="line">                w.DoWhatIShouldDo();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Old</span> : <span class="title">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoWhatIShouldDo</span>(<span class="params">Worker w</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;老年生活&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Worker</span></span><br><span class="line">    &#123;</span><br><span class="line">        State state;</span><br><span class="line">        <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            age = <span class="number">1</span>;</span><br><span class="line">            state = <span class="keyword">new</span> Young();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; age = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> State State</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> State; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; state = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWhatIShouldDo</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            state.DoWhatIShouldDo(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Worker w = <span class="keyword">new</span> Worker();</span><br><span class="line">            w.Age = <span class="number">5</span>;</span><br><span class="line">            w.DoWhatIShouldDo();</span><br><span class="line">            w.Age = <span class="number">45</span>;</span><br><span class="line">            w.DoWhatIShouldDo();</span><br><span class="line">            w.Age = <span class="number">80</span>;</span><br><span class="line">            w.DoWhatIShouldDo();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---职责链模式</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>2008年08月17日 星期日 下午 04:28</p>
<p><img data-src="http://hiphotos.baidu.com/yansuochonglou/pic/item/0dceef368c252b290b55a959.jpg" alt="0dceef368c252b290b55a959.jpg"></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ConsoleApplication1</span><br><span class="line">&#123;</span><br><span class="line">    abstract <span class="keyword">class</span> <span class="title class_">Officer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> Officer myboss;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Officer</span><span class="params">(Officer o)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            myboss = o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> abstract <span class="type">void</span> <span class="title">Deal</span><span class="params">(Action a)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">PoliceMan</span> : Officer</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PoliceMan</span><span class="params">(Officer o)</span></span></span><br><span class="line"><span class="function">            : base(o)</span></span><br><span class="line"><span class="function">        &#123;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">Deal</span><span class="params">(Action a)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (a == Action.逮捕罪犯)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;我是警察，我去逮捕罪犯&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (myboss != null)</span><br><span class="line">            &#123;</span><br><span class="line">                myboss.<span class="built_in">Deal</span>(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FBI</span> : Officer</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FBI</span><span class="params">(Officer o)</span></span></span><br><span class="line"><span class="function">            : base(o)</span></span><br><span class="line"><span class="function">        &#123;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">Deal</span><span class="params">(Action a)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (a == Action.暗杀)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;我是FBI，我去暗杀&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (myboss != null)</span><br><span class="line">            &#123;</span><br><span class="line">                myboss.<span class="built_in">Deal</span>(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Precident</span> : Officer</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Precident</span><span class="params">(Officer o)</span></span></span><br><span class="line"><span class="function">            : base(o)</span></span><br><span class="line"><span class="function">        &#123;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">Deal</span><span class="params">(Action a)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (a == Action.干掉萨达姆)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;我是总统，我去找人干掉萨达姆&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (myboss != null)</span><br><span class="line">            &#123;</span><br><span class="line">                myboss.<span class="built_in">Deal</span>(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Action</span></span><br><span class="line">    &#123;</span><br><span class="line">        逮捕罪犯,</span><br><span class="line">        暗杀,</span><br><span class="line">        干掉萨达姆</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Officer police = <span class="keyword">new</span> <span class="built_in">PoliceMan</span>(<span class="keyword">new</span> <span class="built_in">FBI</span>(<span class="keyword">new</span> <span class="built_in">Precident</span>(null)));</span><br><span class="line">            police.<span class="built_in">Deal</span>(Action.逮捕罪犯);</span><br><span class="line">            police.<span class="built_in">Deal</span>(Action.暗杀);</span><br><span class="line">            police.<span class="built_in">Deal</span>(Action.干掉萨达姆);</span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">Read</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---组合模式（CSDN依然没有恢复迹象......）</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%EF%BC%88CSDN%E4%BE%9D%E7%84%B6%E6%B2%A1%E6%9C%89%E6%81%A2%E5%A4%8D%E8%BF%B9%E8%B1%A1......%EF%BC%89/</url>
    <content><![CDATA[<p>设计模式—组合模式（CSDN依然没有恢复迹象……）</p>
<p><img data-src="http://hiphotos.baidu.com/yansuochonglou/pic/item/7fef7ad965c15b3411df9b0d.jpg" alt="7fef7ad965c15b3411df9b0d.jpg"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractCompany</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> String Name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AbstractCompany</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">AbstractCompany c</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">AbstractCompany c</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"><span class="built_in">int</span> len</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">DoJob</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">RealCompany</span> : <span class="title">AbstractCompany</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IList&lt;AbstractCompany&gt; Son = <span class="keyword">new</span> List&lt;AbstractCompany&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RealCompany</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">AbstractCompany c</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Son.Add(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoJob</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(Name + <span class="string">&quot;公司正常运转&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (AbstractCompany a <span class="keyword">in</span> Son)</span><br><span class="line">            &#123;</span><br><span class="line">                a.DoJob();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">AbstractCompany c</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Son.Remove(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"><span class="built_in">int</span> len</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">new</span> String(<span class="string">&#x27;-&#x27;</span>, len) + Name);</span><br><span class="line">            <span class="keyword">foreach</span> (AbstractCompany a <span class="keyword">in</span> Son)</span><br><span class="line">            &#123;</span><br><span class="line">                a.Show(len + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">HR</span> : <span class="title">AbstractCompany</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HR</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">AbstractCompany c</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoJob</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(Name + <span class="string">&quot;人事部正常运转&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">AbstractCompany c</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"><span class="built_in">int</span> len</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;-&#x27;</span>, len) + Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            AbstractCompany root = <span class="keyword">new</span> RealCompany(<span class="string">&quot;总公司&quot;</span>);</span><br><span class="line">            root.Add(<span class="keyword">new</span> HR(<span class="string">&quot;总公司人事部&quot;</span>));</span><br><span class="line"></span><br><span class="line">            RealCompany r = <span class="keyword">new</span> RealCompany(<span class="string">&quot;分公司&quot;</span>);</span><br><span class="line">            r.Add(<span class="keyword">new</span> HR(<span class="string">&quot;分公司人事部&quot;</span>));</span><br><span class="line"></span><br><span class="line">            root.Add(r);</span><br><span class="line"></span><br><span class="line">            root.Show(<span class="number">1</span>);</span><br><span class="line">            root.DoJob();</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---迭代器模式（昨天停电了......）</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%98%A8%E5%A4%A9%E5%81%9C%E7%94%B5%E4%BA%86......%EF%BC%89/</url>
    <content><![CDATA[<p>设计模式—迭代器模式（昨天停电了……）</p>
<p><img data-src="http://hiphotos.baidu.com/yansuochonglou/pic/item/4344c2b42f22096b8ad4b242.jpg" alt="4344c2b42f22096b8ad4b242.jpg"></p>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---适配器模式（从百度转回来的）</title>
    <url>/blog/2008/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BB%8E%E7%99%BE%E5%BA%A6%E8%BD%AC%E5%9B%9E%E6%9D%A5%E7%9A%84%EF%BC%89/</url>
    <content><![CDATA[<p><img data-src="http://hiphotos.baidu.com/yansuochonglou/pic/item/53a941eefca8a5ecb3fb9578.jpg" alt="53a941eefca8a5ecb3fb9578.jpg"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Birds</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Shout</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Duck</span> : <span class="title">Birds</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子飞&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Shout</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子叫唤&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Chick</span> : <span class="title">Birds</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;小鸡飞&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Shout</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;小鸡飞&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Adapter</span> : <span class="title">Birds</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Eagle eagle = <span class="keyword">new</span> Eagle();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            eagle.Fly();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Shout</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            eagle.Shout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Eagle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;老鹰飞&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Shout</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;老鹰叫唤&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Birds b = <span class="keyword">new</span> Duck();</span><br><span class="line">            b.Fly();</span><br><span class="line">            b.Shout();</span><br><span class="line">            b = <span class="keyword">new</span> Chick();</span><br><span class="line">            b.Fly();</span><br><span class="line">            b.Shout();</span><br><span class="line">            b = <span class="keyword">new</span> Adapter();</span><br><span class="line">            b.Fly();</span><br><span class="line">            b.Shout();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---享元模式</title>
    <url>/blog/2008/08/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MovieTheater</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Hashtable movies = <span class="keyword">new</span> Hashtable();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GiveMeAMovie</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Movie m;</span><br><span class="line">            <span class="keyword">if</span> (movies.ContainsKey(name))</span><br><span class="line">            &#123;</span><br><span class="line">                m = (Movie) movies[name];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                m = <span class="keyword">new</span> ConcreteMovie(name);</span><br><span class="line">                movies.Add(name, m);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m.ShowTheMovie();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HowManyMoviesHaveWeOrdered</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(movies.Count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Movie</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Movie</span>(<span class="params"><span class="built_in">string</span> n</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ShowTheMovie</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteMovie</span> : <span class="title">Movie</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ConcreteMovie</span>(<span class="params"><span class="built_in">string</span> n</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">n</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ShowTheMovie</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            MovieTheater mth = <span class="keyword">new</span> MovieTheater();</span><br><span class="line">            mth.GiveMeAMovie(<span class="string">&quot;Hell Boy&quot;</span>);</span><br><span class="line">            mth.GiveMeAMovie(<span class="string">&quot;Wanted&quot;</span>);</span><br><span class="line">            mth.GiveMeAMovie(<span class="string">&quot;Wall-E&quot;</span>);</span><br><span class="line">            mth.GiveMeAMovie(<span class="string">&quot;Hell Boy&quot;</span>);</span><br><span class="line">            mth.GiveMeAMovie(<span class="string">&quot;Hell Boy&quot;</span>);</span><br><span class="line">            mth.GiveMeAMovie(<span class="string">&quot;Wanted&quot;</span>);</span><br><span class="line">            mth.GiveMeAMovie(<span class="string">&quot;Wall-E&quot;</span>);</span><br><span class="line">            mth.GiveMeAMovie(<span class="string">&quot;Hell Boy&quot;</span>);</span><br><span class="line">            mth.HowManyMoviesHaveWeOrdered();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080819/ClassDiagram1.jpg"></p>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSDN被和谐期间的Blog都发到百度空间去了</title>
    <url>/blog/2008/08/19/CSDN%E8%A2%AB%E5%92%8C%E8%B0%90%E6%9C%9F%E9%97%B4%E7%9A%84Blog%E9%83%BD%E5%8F%91%E5%88%B0%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E5%8E%BB%E4%BA%86/</url>
    <content><![CDATA[<p>粘贴回来格式一片混乱，百度似乎还有图床保护？干脆留个地址在这里</p>
<p><a href="http://hi.baidu.com/yansuochonglou/blog/calendar/200808"> http://hi.baidu.com/yansuochonglou/blog/calendar/200808
</a></p>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于显式接口实现</title>
    <url>/blog/2008/08/20/%E5%85%B3%E4%BA%8E%E6%98%BE%E5%BC%8F%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>第一个问题：<br><a href="http://topic.csdn.net/u/20080819/22/0bafb453-d03e-4d89-9a7a-1c087a13007a.html"> http://topic.csdn.net/u/20080819/22/0bafb453-d03e-4d89-9a7a-1c087a13007a.html </a></p>
<p>第二个问题：<br><a href="http://topic.csdn.net/u/20080819/22/0665f814-dddd-4cdd-a461-85620dca21b3.html"> http://topic.csdn.net/u/20080819/22/0665f814-dddd-4cdd-a461-85620dca21b3.html </a></p>
<p>MSDN的解释：<br><a href="http://msdn.microsoft.com/zh-cn/library/ms173157(VS.80).aspx"> http://msdn.microsoft.com/zh-cn/library/ms173157(VS.80).aspx</a></p>
<p>留此存根</p>
]]></content>
      <tags>
        <tag>《你必须知道的.NET》</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---翻译器模式</title>
    <url>/blog/2008/08/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%BF%BB%E8%AF%91%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080820/ClassDiagram1.jpg"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Expretion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Words w</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = w.MyWords.Substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            w.MyWords = w.MyWords.Substring(<span class="number">2</span>);</span><br><span class="line">            Excute(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Excute</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">EnglishExpretion</span> : <span class="title">Expretion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Excute</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (s)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;e&quot;</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;对方说的英语&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">GermanExpretion</span> : <span class="title">Expretion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Excute</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (s)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;g&quot;</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;对方说的德语&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Words</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> words;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> MyWords</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> words; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; words = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Words w = <span class="keyword">new</span> Words();</span><br><span class="line">            w.MyWords = <span class="string">&quot;e g e e g &quot;</span>;</span><br><span class="line">            Expretion e = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (w.MyWords.Length &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (w.MyWords.Substring(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;e&quot;</span>:</span><br><span class="line">                        e = <span class="keyword">new</span> EnglishExpretion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;g&quot;</span>:</span><br><span class="line">                        e = <span class="keyword">new</span> GermanExpretion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                e.Translate(w);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MSIL的条件跳转（不知道正确与否）</title>
    <url>/blog/2008/08/24/MSIL%E7%9A%84%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC%EF%BC%88%E4%B8%8D%E7%9F%A5%E9%81%93%E6%AD%A3%E7%A1%AE%E4%B8%8E%E5%90%A6%EF%BC%89/</url>
    <content><![CDATA[<p>C# Code：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">Main3_3_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> y = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Console</span>.<span class="built_in">Read</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应MSIL及其注释：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">.method  public  hidebysig  static  void  Main3_3_3() cil managed </span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">.maxstack <span class="number">2</span> </span><br><span class="line">.locals init ( </span><br><span class="line">[<span class="number">0</span>] int32 x, </span><br><span class="line">[<span class="number">1</span>] int32 y, </span><br><span class="line">[<span class="number">2</span>]  bool  CS$<span class="number">4</span>$<span class="number">0000</span>)  <span class="comment">//定义三个变量</span></span><br><span class="line"><span class="symbol">L_0000:</span> nop </span><br><span class="line"><span class="symbol">L_0001:</span> ldc.i4.s <span class="number">10</span>  <span class="comment">//把整型值10载入堆栈 </span></span><br><span class="line"><span class="symbol">L_0003:</span> stloc<span class="number">.0</span>  <span class="comment">//把刚才载入堆栈的10赋值给第一个local变量，也就是int x=10; </span></span><br><span class="line"><span class="symbol">L_0004:</span> ldc.i4<span class="number">.6</span>  <span class="comment">//把整型值6载入堆栈 </span></span><br><span class="line"><span class="symbol">L_0005:</span> stloc<span class="number">.1</span>  <span class="comment">//把刚才载入堆栈的6赋值给第二个local变量，也就是int y=6; </span></span><br><span class="line"><span class="symbol">L_0006:</span> ldloc<span class="number">.0</span> </span><br><span class="line"><span class="symbol">L_0007:</span> ldloc<span class="number">.1</span>  <span class="comment">//这两句，把x,y两个local变量载入堆栈 </span></span><br><span class="line"><span class="symbol">L_0008:</span> cgt  <span class="comment">//比较x，y的大小，结果会保存在堆栈最上方（结果以0或1表示true ，false） </span></span><br><span class="line"><span class="symbol">L_000a:</span> ldc.i4<span class="number">.0</span>  <span class="comment">//把0载入堆栈 </span></span><br><span class="line"><span class="symbol">L_000b:</span> ceq  <span class="comment">//比较0和cgt的运算结果是否相等，结果会保存在堆栈最上方（结果以0或1表示true ，false） </span></span><br><span class="line"><span class="symbol">L_000d:</span> stloc<span class="number">.2</span>  <span class="comment">//ceq的运算结果保存入bool变量中 </span></span><br><span class="line"><span class="symbol">L_000e:</span> ldloc<span class="number">.2</span>  <span class="comment">//再把ceq运算结果载入 </span></span><br><span class="line"><span class="symbol">L_000f:</span> brtrue.s L_001a  <span class="comment">//判断跳转，若跳转显式Y，不跳转显式X </span></span><br><span class="line"><span class="symbol">L_0011:</span> ldloc<span class="number">.0</span> </span><br><span class="line"><span class="symbol">L_0012:</span> callvoid  [mscorlib]System.Console::WriteLine(int32)</span><br><span class="line"><span class="symbol">L_0017:</span> nop </span><br><span class="line"><span class="symbol">L_0018:</span> br.s L_0021 </span><br><span class="line"><span class="symbol">L_001a:</span> ldloc<span class="number">.1</span> </span><br><span class="line"><span class="symbol">L_001b:</span> callvoid  [mscorlib]System.Console::WriteLine(int32)</span><br><span class="line"><span class="symbol">L_0020:</span> nop </span><br><span class="line"><span class="symbol">L_0021:</span> call int32 [mscorlib]System.Console::Read() </span><br><span class="line"><span class="symbol">L_0026:</span> pop </span><br><span class="line"><span class="symbol">L_0027:</span> ret </span><br><span class="line"><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>《你必须知道的.NET》</tag>
      </tags>
  </entry>
  <entry>
    <title>new关键字用作修饰符</title>
    <url>/blog/2008/08/28/new%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E4%BD%9C%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<p>用new修饰的方法,在编译期按变量类型调用</p>
<p>所以：</p>
<p>Number number &#x3D; new IntNumber();<br>number.ShowInfo();</p>
<p>会显示”base class—“</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">static</span> <span class="type">int</span> i = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ShowInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;base class---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ShowNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(i.<span class="built_in">ToString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntNumber</span> : Number</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">public</span> <span class="type">static</span> <span class="type">int</span> i = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ShowInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;Derived class---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">ShowNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;Base number is &#123;0&#125;&quot;</span>, Number.i.<span class="built_in">ToString</span>());</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;New number is &#123;0&#125;&quot;</span>, i.<span class="built_in">ToString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_Number</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> <span class="comment">//Main_6_1_1</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Number num = <span class="keyword">new</span> <span class="built_in">Number</span>();</span><br><span class="line">        num.<span class="built_in">ShowNumber</span>();</span><br><span class="line">        IntNumber intNum = <span class="keyword">new</span> <span class="built_in">IntNumber</span>();</span><br><span class="line">        intNum.<span class="built_in">ShowNumber</span>();</span><br><span class="line">        intNum.<span class="built_in">ShowInfo</span>();</span><br><span class="line">        Number number = <span class="keyword">new</span> <span class="built_in">IntNumber</span>();</span><br><span class="line">        <span class="comment">//究竟调用了谁？</span></span><br><span class="line">        number.<span class="built_in">ShowInfo</span>();</span><br><span class="line">        <span class="comment">//究竟调用了谁？</span></span><br><span class="line">        number.<span class="built_in">ShowNumber</span>();</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">Read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>《你必须知道的.NET》</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---访问者模式（应该是最后一篇了）</title>
    <url>/blog/2008/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%BA%94%E8%AF%A5%E6%98%AF%E6%9C%80%E5%90%8E%E4%B8%80%E7%AF%87%E4%BA%86%EF%BC%89/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20080821/ClassDiagram1.jpg"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Element</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor v</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Elem1</span> : <span class="title">Element</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor v</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            v.VisitElem1(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Elem2</span> : <span class="title">Element</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor v</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            v.VisitElem2(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Visitor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">VisitElem1</span>(<span class="params">Elem1 e1</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">VisitElem2</span>(<span class="params">Elem2 e2</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Visitor1</span> : <span class="title">Visitor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitElem1</span>(<span class="params">Elem1 e1</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.GetType().Name + <span class="string">&quot;  &quot;</span> + e1.GetType().Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitElem2</span>(<span class="params">Elem2 e2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.GetType().Name + <span class="string">&quot;  &quot;</span> + e2.GetType().Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Visitor2</span> : <span class="title">Visitor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitElem1</span>(<span class="params">Elem1 e1</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.GetType().Name + <span class="string">&quot;  &quot;</span> + e1.GetType().Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitElem2</span>(<span class="params">Elem2 e2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.GetType().Name + <span class="string">&quot;  &quot;</span> + e2.GetType().Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ObjStructure</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Element&gt; elems = <span class="keyword">new</span> List&lt;Element&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params">Element e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            elems.Add(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span>(<span class="params">Visitor v</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (Element e <span class="keyword">in</span> elems)</span><br><span class="line">            &#123;</span><br><span class="line">                e.Accept(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            ObjStructure o = <span class="keyword">new</span> ObjStructure();</span><br><span class="line">            o.<span class="keyword">add</span>(<span class="keyword">new</span> Elem1());</span><br><span class="line">            o.<span class="keyword">add</span>(<span class="keyword">new</span> Elem2());</span><br><span class="line">            o.visit(<span class="keyword">new</span> Visitor1());</span><br><span class="line">            o.visit(<span class="keyword">new</span> Visitor2());</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>引用类型参数的按值传递</title>
    <url>/blog/2008/08/28/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0%E7%9A%84%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<p>一个小问题： <a href="http://topic.csdn.net/u/20080826/21/1b29e906-4ebb-49ab-98e3-982b7f2249f5.html"> http://topic.csdn.net/u/20080826/21/1b29e906-4ebb-49ab-98e3-982b7f2249f5.html </a></p>
]]></content>
      <tags>
        <tag>《你必须知道的.NET》</tag>
      </tags>
  </entry>
  <entry>
    <title>一个关于深层拷贝的问题（迷惑在私有构造函数）</title>
    <url>/blog/2008/09/04/%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E6%B7%B1%E5%B1%82%E6%8B%B7%E8%B4%9D%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E8%BF%B7%E6%83%91%E5%9C%A8%E7%A7%81%E6%9C%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%89/</url>
    <content><![CDATA[<p>一个关于深层拷贝的问题（迷惑在私有构造函数）</p>
<p>地址：<br><a href="http://topic.csdn.net/u/20080903/16/0f89b388-0c33-4c0f-931c-0520c907fdad.html"> http://topic.csdn.net/u/20080903/16/0f89b388-0c33-4c0f-931c-0520c907fdad.html </a></p>
]]></content>
      <tags>
        <tag>《你必须知道的.NET》</tag>
      </tags>
  </entry>
  <entry>
    <title>可以为null的值类型</title>
    <url>/blog/2008/09/09/%E5%8F%AF%E4%BB%A5%E4%B8%BAnull%E7%9A%84%E5%80%BC%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>可以为null的值类型</p>
<p>地址：<br> <a href="http://topic.csdn.net/u/20080909/11/ad46c1db-327d-4c23-a78a-d65deebd9d1d.html"> http://topic.csdn.net/u/20080909/11/ad46c1db-327d-4c23-a78a-d65deebd9d1d.html </a></p>
]]></content>
      <tags>
        <tag>《你必须知道的.NET》</tag>
      </tags>
  </entry>
  <entry>
    <title>《编程之美——微软技术面试心得》的C#实现---电梯调度问题解法一</title>
    <url>/blog/2008/09/11/%E3%80%8A%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E2%80%94%E2%80%94%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97%E3%80%8B%E7%9A%84CSharp%E5%AE%9E%E7%8E%B0---%E7%94%B5%E6%A2%AF%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98%E8%A7%A3%E6%B3%95%E4%B8%80/</url>
    <content><![CDATA[<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span>[] person = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">15</span>&#125;; <span class="comment">//总共六层楼，没有0层</span></span><br><span class="line">        <span class="type">int</span> needed = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> target = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            needed = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//目的在i层以下的</span></span><br><span class="line">                needed += person[j] * (i - j);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//目的在i层上面的</span></span><br><span class="line">                needed += person[j] * (j - i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (min == <span class="number">0</span> || min &gt;= needed)</span><br><span class="line">            &#123;</span><br><span class="line">                min = needed;</span><br><span class="line">                target = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(target);</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">Read</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>《编程之美——微软技术面试心得》的C#实现</tag>
      </tags>
  </entry>
  <entry>
    <title>编译不可通过?short s1 = 1;short s2 = 2;short s3 = s1 + s2; why??</title>
    <url>/blog/2008/08/28/%E7%BC%96%E8%AF%91%E4%B8%8D%E5%8F%AF%E9%80%9A%E8%BF%87%20why/</url>
    <content><![CDATA[<p>连接： <a href="http://topic.csdn.net/u/20080826/00/092e304d-b342-4e75-b62d-801142b556ca.html"> http://topic.csdn.net/u/20080826/00/092e304d-b342-4e75-b62d-801142b556ca.html </a></p>
]]></content>
      <tags>
        <tag>疑难</tag>
      </tags>
  </entry>
  <entry>
    <title>cpu占用率为正弦曲线（C#实现）基本照抄书上的C++</title>
    <url>/blog/2008/09/17/cpu%E5%8D%A0%E7%94%A8%E7%8E%87%E4%B8%BA%E6%AD%A3%E5%BC%A6%E6%9B%B2%E7%BA%BF%EF%BC%88CSharp%E5%AE%9E%E7%8E%B0%EF%BC%89%E5%9F%BA%E6%9C%AC%E7%85%A7%E6%8A%84%E4%B9%A6%E4%B8%8A%E7%9A%84C++/</url>
    <content><![CDATA[<p>internal值根据配置调整</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Text;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> Program</span><br><span class="line">    &#123;</span><br><span class="line">        static <span class="type">void</span> Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            const <span class="type">double</span> SPLIT = <span class="number">0.01</span>;</span><br><span class="line">            const <span class="type">int</span> COUNT = <span class="number">200</span>;</span><br><span class="line">            const <span class="type">double</span> PI = <span class="number">3.14159265</span>;</span><br><span class="line">            const <span class="type">int</span> <span class="type">INTERVAL</span> = <span class="number">100</span>;</span><br><span class="line">            <span class="type">double</span>[] busySpan = <span class="built_in">new</span> <span class="type">double</span> [COUNT]; //<span class="keyword">array</span> <span class="keyword">of</span> busy times</span><br><span class="line">            <span class="type">double</span>[] idleSpan = <span class="built_in">new</span> <span class="type">double</span> [COUNT]; //<span class="keyword">array</span> <span class="keyword">of</span> idle times</span><br><span class="line">            <span class="type">int</span> half = <span class="type">INTERVAL</span> / <span class="number">2</span>;</span><br><span class="line">            <span class="type">double</span> radian = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; COUNT; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                busySpan[i] = (<span class="type">double</span>) (half + (Math.Sin(PI * radian) * half));</span><br><span class="line">                idleSpan[i] = <span class="type">INTERVAL</span> - busySpan[i];</span><br><span class="line">                radian += SPLIT;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> startTime = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j = j % COUNT;</span><br><span class="line">                startTime = Environment.TickCount;</span><br><span class="line">                <span class="keyword">while</span> ((Environment.TickCount - startTime) &lt;= busySpan[j]) ;</span><br><span class="line">                <span class="keyword">System</span>.Threading.Thread.Sleep((<span class="type">int</span>) idleSpan[j]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>《编程之美——微软技术面试心得》的C#实现</tag>
      </tags>
  </entry>
  <entry>
    <title>编程之美---1的个数C#笨（效率低）方法实现</title>
    <url>/blog/2008/09/18/%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E---1%E7%9A%84%E4%B8%AA%E6%95%B0CSharp%E7%AC%A8%EF%BC%88%E6%95%88%E7%8E%87%E4%BD%8E%EF%BC%89%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>编程之美—1的个数C#笨（效率低）的方法实现</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="function"><span class="keyword">Program</span></span></span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">Program</span></span> p = new <span class="function"><span class="keyword">Program</span><span class="params">()</span></span>;</span><br><span class="line">        Console.WriteLine(p.count_1_in_a_bounch_of_nums(<span class="number">13</span>));</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> count_1_in_a_num(<span class="built_in">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">count</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num <span class="comment">!= 0)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">count</span> += (num % <span class="number">10</span>) == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> count_1_in_a_bounch_of_nums(<span class="built_in">int</span> <span class="keyword">end</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">count</span> = <span class="number">0</span>;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="keyword">end</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">count</span> += count_1_in_a_num(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>《编程之美——微软技术面试心得》的C#实现</tag>
      </tags>
  </entry>
  <entry>
    <title>编程之美---阶乘末尾有几个&quot;零&quot;?(C#实现)</title>
    <url>/blog/2008/09/18/%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E---%E9%98%B6%E4%B9%98%E6%9C%AB%E5%B0%BE%E6%9C%89%E5%87%A0%E4%B8%AA0(CSharp%E5%AE%9E%E7%8E%B0)/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">delegate</span> <span class="built_in">long</span> <span class="title">DoMath</span>(<span class="params"><span class="built_in">long</span> num</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Program p = <span class="keyword">new</span> Program();</span><br><span class="line">            p.GetFactorial(<span class="number">26</span>);</span><br><span class="line">            DoMath d = <span class="keyword">new</span> DoMath(p.HowManyZero);</span><br><span class="line">            d += p.HowManyZero2;</span><br><span class="line">            d(<span class="number">26</span>);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">HowManyZero</span>(<span class="params"><span class="built_in">long</span> num</span>) <span class="comment">//第一种解法</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">long</span> result = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">long</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">long</span> j = i;</span><br><span class="line">                <span class="keyword">while</span> (j % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    result++; <span class="comment">//检查每一个数可以分解因式出多少个5</span></span><br><span class="line">                    j /= <span class="number">5</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">HowManyZero2</span>(<span class="params"><span class="built_in">long</span> num</span>) <span class="comment">//第二种</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">long</span> ret = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (num != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ret += num / <span class="number">5</span>; <span class="comment">//可以被5整除，然后是25、125、625......</span></span><br><span class="line">                num /= <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(ret);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">GetFactorial</span>(<span class="params"><span class="built_in">long</span> num</span>) <span class="comment">//获得阶乘</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">decimal</span> ret = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">long</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ret *= i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(ret);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 书上只标了2颗星，我怎么觉得这么费劲….<br>PS：decimal都算不到30的阶乘啊……</p>
<p>具体讲解书上有</p>
<p>顺便复习一下delegate~~~~~~~</p>
]]></content>
      <tags>
        <tag>《编程之美——微软技术面试心得》的C#实现</tag>
      </tags>
  </entry>
  <entry>
    <title>文字竖排工具BY烟锁重楼</title>
    <url>/blog/2008/10/09/%E6%96%87%E5%AD%97%E7%AB%96%E6%8E%92%E5%B7%A5%E5%85%B7BY%E7%83%9F%E9%94%81%E9%87%8D%E6%A5%BC/</url>
    <content><![CDATA[<p>运行库：.net 2.0</p>
<p>下载地址：<br><a href="http://pickup.mofile.com/7286535210268103"> http://pickup.mofile.com/7286535210268103</a></p>
<p>备用地址：<br><a href="http://ishare.iask.sina.com.cn/cgi-bin/fileid.cgi?fileid=4452071"> http://ishare.iask.sina.com.cn/cgi-bin/fileid.cgi?fileid=4452071</a></p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20081009/jietu01.jpg"></p>
<p>ps:烟锁重楼是我原来的网名  </p>
]]></content>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>文字竖排工具 By 崔鹏飞 没有混淆，可以用reflector看代码</title>
    <url>/blog/2008/10/12/%E6%96%87%E5%AD%97%E7%AB%96%E6%8E%92%E5%B7%A5%E5%85%B7%20By%20%E5%B4%94%E9%B9%8F%E9%A3%9E%20%E6%B2%A1%E6%9C%89%E6%B7%B7%E6%B7%86%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%A8reflector%E7%9C%8B%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>功能全面的文字竖排工具。</p>
<p>实现功能：截图、设置字体、繁体转换、文字竖排、设置行列数实现分页、输入原文的时候同步显示竖排文字、一键复制到剪切板等。</p>
<p>注意：C#编写，需要.net framework 2.0</p>
<p>下载地址：<br><a href="http://download.csdn.net/source/686787"> http://download.csdn.net/source/686787</a></p>
<p>发现缺陷、不足、bug，请告知我，我会尽快修改</p>
<p>ps：没有混淆，可以用reflector看代码</p>
<p>图片：<br><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20081012/jietu00.jpg"></p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090210/jietu05.jpg"></p>
]]></content>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>对Graphic的应用，实现类似九宫格的绘制字符串、制定圆心，半径绘制圆形、用火柴棍拼字[Java ME]</title>
    <url>/blog/2008/10/03/%E5%AF%B9Graphic%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BC%E4%B9%9D%E5%AE%AB%E6%A0%BC%E7%9A%84%E7%BB%98%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%88%B6%E5%AE%9A%E5%9C%86%E5%BF%83%EF%BC%8C%E5%8D%8A%E5%BE%84%E7%BB%98%E5%88%B6%E5%9C%86%E5%BD%A2%E3%80%81%E7%94%A8%E7%81%AB%E6%9F%B4%E6%A3%8D%E6%8B%BC%E5%AD%97%5BJava%20ME%5D/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20081003/jietu03.jpg"></p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20081003/jietu02.jpg"></p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20081003/jietu01.jpg"></p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20081003/jietu00.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  javax.microedition.midlet.*;</span><br><span class="line"><span class="keyword">import</span>  javax.microedition.lcdui.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork</span> <span class="keyword">extends</span> <span class="title class_">MIDlet</span> <span class="keyword">implements</span> <span class="title class_">CommandListener</span> &#123;</span><br><span class="line">	<span class="type">Display</span> <span class="variable">d</span> <span class="operator">=</span> Display.getDisplay(<span class="built_in">this</span>);</span><br><span class="line">	FormattedFloatingDecimal.<span class="type">Form</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Form</span>(<span class="string">&quot;主窗口&quot;</span>);</span><br><span class="line">	<span class="type">Command</span> <span class="variable">back</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Command</span>(<span class="string">&quot;返回&quot;</span>, Command.BACK, <span class="number">1</span>);</span><br><span class="line">	<span class="type">Command</span> <span class="variable">exit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Command</span>(<span class="string">&quot;退出&quot;</span>, Command.EXIT, <span class="number">1</span>);</span><br><span class="line">	<span class="type">Command</span> <span class="variable">drs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Command</span>(<span class="string">&quot;绘制字符串&quot;</span>, Command.OK, <span class="number">1</span>);</span><br><span class="line">	<span class="type">Command</span> <span class="variable">drc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Command</span>(<span class="string">&quot;画圆&quot;</span>, Command.OK, <span class="number">1</span>);</span><br><span class="line">	<span class="type">Command</span> <span class="variable">drn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Command</span>(<span class="string">&quot;火柴棍拼字&quot;</span>, Command.OK, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//用于画圆的</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span> &#123;</span><br><span class="line">		<span class="type">int</span> pointX, pointY, len;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">			g.setColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">			g.fillArc(pointX, pointY, len, len, <span class="number">0</span>, <span class="number">360</span>);</span><br><span class="line">			g.drawRect(pointX, pointY, len, len);  <span class="comment">//框住了就代表对了</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">			pointX = x - r;</span><br><span class="line">			pointY = y - r;</span><br><span class="line">			len = <span class="number">2</span> * r;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//用于在指定位置绘制字符串</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">printword</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="type">int</span>[] myenum = &#123;</span><br><span class="line">			<span class="number">0</span>, <span class="number">0</span>, Graphics.LEFT | Graphics.TOP,</span><br><span class="line">			getWidth() / <span class="number">2</span>, <span class="number">0</span>, Graphics.HCENTER | Graphics.TOP,</span><br><span class="line">			getWidth(), <span class="number">0</span>, Graphics.RIGHT | Graphics.TOP,</span><br><span class="line">			<span class="number">0</span>, getHeight() / <span class="number">2</span>, Graphics.LEFT | Graphics.TOP, getWidth() / <span class="number">2</span>,</span><br><span class="line">			getHeight() / <span class="number">2</span>, Graphics.HCENTER | Graphics.TOP,</span><br><span class="line">			getWidth(), getHeight() / <span class="number">2</span>, Graphics.RIGHT | Graphics.TOP, <span class="number">0</span>,</span><br><span class="line">			getHeight(), Graphics.LEFT | Graphics.BOTTOM,</span><br><span class="line">			getWidth() / <span class="number">2</span>,</span><br><span class="line">			getHeight(), Graphics.HCENTER | Graphics.BOTTOM,</span><br><span class="line">			getWidth(), getHeight(), Graphics.RIGHT | Graphics.BOTTOM</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span>[] position = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">			g.setColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">			g.drawString(printword, position[<span class="number">0</span>], position[<span class="number">1</span>], position[<span class="number">2</span>]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DrawMyStrin</span><span class="params">(String s, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">			printword = s;</span><br><span class="line">			position[<span class="number">0</span>] = myenum[pos * <span class="number">3</span> - <span class="number">3</span>];</span><br><span class="line">			position[<span class="number">1</span>] = myenum[pos * <span class="number">3</span> - <span class="number">2</span>];</span><br><span class="line">			position[<span class="number">2</span>] = myenum[pos * <span class="number">3</span> - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//用火柴棍拼字</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatchNum</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span> &#123;</span><br><span class="line">		<span class="type">int</span>[][] lines =</span><br><span class="line"></span><br><span class="line">			&#123;</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">100</span>, <span class="number">100</span>, <span class="number">120</span>, <span class="number">100</span></span><br><span class="line">				&#125;,  <span class="comment">//0</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">100</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span></span><br><span class="line">				&#125;,  <span class="comment">//1</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">100</span>, <span class="number">140</span>, <span class="number">120</span>, <span class="number">140</span></span><br><span class="line">				&#125;,  <span class="comment">//2 //三个横</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">120</span></span><br><span class="line">				&#125;,  <span class="comment">//3</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">100</span>, <span class="number">120</span>, <span class="number">100</span>, <span class="number">140</span></span><br><span class="line">				&#125;,  <span class="comment">//4//左边的两竖</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">120</span>, <span class="number">100</span>, <span class="number">120</span>, <span class="number">120</span></span><br><span class="line">				&#125;,  <span class="comment">//5</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">140</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;  <span class="comment">//6//右边的两竖</span></span><br><span class="line">		<span class="type">int</span>[][] nums =</span><br><span class="line"></span><br><span class="line">			&#123;</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">				&#125;,  <span class="comment">//0</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">5</span>, <span class="number">6</span></span><br><span class="line">				&#125;,  <span class="comment">//1</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span></span><br><span class="line">				&#125;,  <span class="comment">//2</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">				&#125;,  <span class="comment">//3</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span></span><br><span class="line">				&#125;,  <span class="comment">//4</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span></span><br><span class="line">				&#125;,  <span class="comment">//5</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span></span><br><span class="line">				&#125;,  <span class="comment">//6</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">				&#125;,  <span class="comment">//7</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">				&#125;,  <span class="comment">//8</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span></span><br><span class="line">				&#125;,  <span class="comment">//9</span></span><br><span class="line">			&#125;;</span><br><span class="line">		<span class="type">int</span>[] temp;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawMyNum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">			temp = nums[n];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">			g.setColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">			<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> temp.length;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">				<span class="type">int</span>[] a = lines[temp[j]];</span><br><span class="line">				g.drawLine(a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startApp</span><span class="params">()</span> &#123;</span><br><span class="line">		f.addCommand(exit);</span><br><span class="line">		f.addCommand(drs);</span><br><span class="line">		f.addCommand(drc);</span><br><span class="line">		f.addCommand(drn);</span><br><span class="line">		f.setCommandListener(<span class="built_in">this</span>);</span><br><span class="line">		d.setCurrent(f);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commandAction</span><span class="params">(Command c, Displayable dis)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == exit)</span><br><span class="line">			destroyApp(<span class="literal">false</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (c == drs) &#123;</span><br><span class="line">			<span class="type">MyCanvas</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line">			m.addCommand(back);</span><br><span class="line">			m.setCommandListener(<span class="built_in">this</span>);</span><br><span class="line">			m.DrawMyStrin(<span class="string">&quot;字符串&quot;</span>, <span class="keyword">new</span> <span class="title class_">java</span>.util.Random().nextInt(<span class="number">8</span>) + <span class="number">1</span>);</span><br><span class="line">			d.setCurrent(m);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == drc) &#123;</span><br><span class="line">			<span class="type">CircleCanvas</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleCanvas</span>();</span><br><span class="line">			cc.addCommand(back);</span><br><span class="line">			cc.setCommandListener(<span class="built_in">this</span>);</span><br><span class="line">			cc.drawCircle(<span class="number">60</span>, <span class="number">60</span>, <span class="number">40</span>);</span><br><span class="line">			d.setCurrent(cc);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == drn) &#123;</span><br><span class="line">			<span class="type">MatchNum</span> <span class="variable">mn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MatchNum</span>();</span><br><span class="line">			mn.addCommand(back);</span><br><span class="line">			mn.setCommandListener(<span class="built_in">this</span>);</span><br><span class="line">			mn.drawMyNum(<span class="keyword">new</span> <span class="title class_">java</span>.util.Random().nextInt(<span class="number">9</span>));</span><br><span class="line">			d.setCurrent(mn);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == back) &#123;</span><br><span class="line">			d.setCurrent(f);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pauseApp</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyApp</span><span class="params">(<span class="type">boolean</span> unconditional)</span> &#123;</span><br><span class="line">		notifyDestroyed();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>graphics</tag>
      </tags>
  </entry>
  <entry>
    <title>Good news from O&#39;Reilly&#39;s Chinese website</title>
    <url>/blog/2008/10/30/Good%20news%20from%20O&#39;Reilly&#39;s%20Chinese%20website/</url>
    <content><![CDATA[<p>官方即将出版中文版，看图：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20081030/jietu06.jpg"></p>
<p>本系列预计将在官方中文版available之后停止翻译</p>
<p>以后大家可以看质量有保证的了~~</p>
<p>但在正版出现之前，我将继续更新，希望大家继续关注，谢谢~~~~~~~~~</p>
]]></content>
      <tags>
        <tag>我翻译的Head First C#（习作）</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构：用队列模拟理发店的排队情况（C#）</title>
    <url>/blog/2008/11/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E7%94%A8%E9%98%9F%E5%88%97%E6%A8%A1%E6%8B%9F%E7%90%86%E5%8F%91%E5%BA%97%E7%9A%84%E6%8E%92%E9%98%9F%E6%83%85%E5%86%B5%EF%BC%88CSharp%EF%BC%89/</url>
    <content><![CDATA[<p>题目内容：使用的排队现象，通过仿真手法评估其营业状况。<br>*基本要求：设某理发馆有N把理发椅，可同时为N位顾客进行理发。<br>*当顾客进门时，若有空椅，则可以立即坐下理发，否则需要依次排队等候。<br>*一旦有顾客理完发离去时，排在队头的顾客便可开始理发。<br>*若理发馆每天连续营业T小时，求一天内顾客在理发馆内的平均逗留时间<br>*顾客排队等候的队列平均长度 </p>
<p>N和T在运行的时候输入</p>
<p>用C#写的，有注释，很混乱，请高人指教~~</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Text;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections;</span><br><span class="line"></span><br><span class="line">namespace 队列应用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> Seat</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">public</span> <span class="type">bool</span> IsFree;</span><br><span class="line">        <span class="built_in">public</span> Customer cus = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">public</span> Seat(<span class="type">bool</span> b)</span><br><span class="line">        &#123;</span><br><span class="line">            IsFree = b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> Customer</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">public</span> <span class="type">int</span> cometime;</span><br><span class="line">        <span class="built_in">public</span> <span class="type">int</span> timetogo;</span><br><span class="line">        <span class="built_in">public</span> <span class="type">int</span> <span class="keyword">cost</span> = <span class="number">30</span> - <span class="built_in">new</span> Random().Next(<span class="number">10</span>); //理发需要<span class="number">20</span>~<span class="number">30</span>分钟</span><br><span class="line"></span><br><span class="line">        <span class="built_in">public</span> Customer()</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> Program</span><br><span class="line">    &#123;</span><br><span class="line">        static <span class="type">void</span> Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">System</span>.Console.WriteLine(&quot;每天营业多少小时？&quot;);</span><br><span class="line">            <span class="type">int</span> workinghours = <span class="type">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            <span class="keyword">System</span>.Console.WriteLine(&quot;有多少个椅子？&quot;);</span><br><span class="line">            <span class="type">int</span> seats = <span class="type">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            Process(seats, workinghours);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static <span class="type">void</span> Process(<span class="type">int</span> num, <span class="type">int</span> <span class="type">time</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            //<span class="comment">------------准备变量------------------------</span></span><br><span class="line">            Queue q = <span class="built_in">new</span> Queue(); //队列</span><br><span class="line">            Seat[] S = <span class="built_in">new</span> Seat[num]; //所有的椅子</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) //初始化椅子</span><br><span class="line">            &#123;</span><br><span class="line">                S[i] = <span class="built_in">new</span> Seat(<span class="keyword">true</span>);</span><br><span class="line">                S[i].cus = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> somebodycome = <span class="number">1</span>; //第一个顾客来的时间</span><br><span class="line">            //<span class="type">int</span> count = <span class="number">0</span>;//顾客计数器</span><br><span class="line">            List&lt;Customer&gt; cuslist = <span class="built_in">new</span> List&lt;Customer&gt;();</span><br><span class="line">            <span class="type">int</span> st = num; //椅子数</span><br><span class="line">            <span class="type">int</span> Qlen = <span class="number">0</span>; //队列长度</span><br><span class="line">            <span class="type">int</span> Qchangetime = <span class="number">0</span>; //队列长度改变次数</span><br><span class="line">            //<span class="comment">------------准备变量--------------------------</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= <span class="type">time</span> * <span class="number">60</span>; t++) //时间从第一分钟开始流逝，每分钟检查状态</span><br><span class="line">            &#123;</span><br><span class="line">                //<span class="comment">--------检查现在有没有人需要离开--------------</span></span><br><span class="line">                CheckLeave(S, t);</span><br><span class="line">                //<span class="comment">--------检查现在有没有人需要离开--------------</span></span><br><span class="line">                //<span class="comment">-------检查排队的人是否可以找到座位---------</span></span><br><span class="line">                CheckSeat(q, S, <span class="keyword">ref</span> Qlen, <span class="keyword">ref</span> Qchangetime, t);</span><br><span class="line">                //<span class="comment">-------检查排队的人是否可以找到座位---------</span></span><br><span class="line">                //<span class="comment">-------------如果来人了，有座位就坐下，没座位就排队-------------------</span></span><br><span class="line">                <span class="keyword">if</span> (t == somebodycome)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">bool</span> IsSitted = <span class="keyword">false</span>; //当前刚来的顾客是否找到了座位</span><br><span class="line">                    Customer c = <span class="built_in">new</span> Customer();</span><br><span class="line">                    c.cometime = t;</span><br><span class="line">                    cuslist.<span class="keyword">Add</span>(c);</span><br><span class="line">                    <span class="keyword">foreach</span> (Seat s <span class="keyword">in</span> S)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s.IsFree == <span class="keyword">true</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            s.IsFree = <span class="keyword">false</span>;</span><br><span class="line">                            s.cus = c;</span><br><span class="line">                            s.cus.timetogo = t + s.cus.<span class="keyword">cost</span>;</span><br><span class="line">                            IsSitted = <span class="keyword">true</span>;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (IsSitted == <span class="keyword">false</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        q.Enqueue(c);</span><br><span class="line">                        Qlen += q.Count;</span><br><span class="line">                        Qchangetime++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        IsSitted = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    somebodycome += <span class="number">10</span> - <span class="built_in">new</span> Random().Next(<span class="number">5</span>); //下一个顾客来的时间,假设<span class="number">5</span>~<span class="number">10</span>分钟之内会有一个</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //<span class="comment">------如果来人了，有座位就坐下，没座位就排队---------</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //<span class="comment">---------加班----------</span></span><br><span class="line">            <span class="type">bool</span> Inseat = <span class="keyword">true</span>;</span><br><span class="line">            //<span class="type">bool</span> InQ = <span class="keyword">true</span>;</span><br><span class="line">            <span class="type">bool</span> KeepWorking = <span class="keyword">true</span>;</span><br><span class="line">            <span class="type">int</span> curtime = <span class="type">time</span> * <span class="number">60</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (KeepWorking)</span><br><span class="line">            &#123;</span><br><span class="line">                CheckLeave(S, curtime);</span><br><span class="line">                CheckSeat(q, S, <span class="keyword">ref</span> Qlen, <span class="keyword">ref</span> Qchangetime, curtime);</span><br><span class="line">                <span class="keyword">foreach</span> (Seat s <span class="keyword">in</span> S)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s.IsFree == <span class="keyword">false</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Inseat = <span class="keyword">true</span>;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Inseat = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                KeepWorking = Inseat;</span><br><span class="line">                curtime++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //<span class="comment">---------加班----------</span></span><br><span class="line">            //<span class="comment">--------------</span></span><br><span class="line">            <span class="type">int</span> <span class="keyword">no</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (Customer c <span class="keyword">in</span> cuslist)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.<span class="keyword">Write</span>(&quot;第&#123;0&#125;个顾客  &quot;, <span class="keyword">no</span>);</span><br><span class="line">                Console.<span class="keyword">Write</span>(&quot;来的时间：&quot; + c.cometime);</span><br><span class="line">                Console.WriteLine(&quot;  走的时间:&quot; + c.timetogo);</span><br><span class="line">                <span class="keyword">no</span>++;</span><br><span class="line">            &#125; //<span class="comment">------------------</span></span><br><span class="line"></span><br><span class="line">            //<span class="comment">--------打印结果-------------</span></span><br><span class="line">            <span class="type">int</span> totalstaytime = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (Customer c <span class="keyword">in</span> cuslist)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> staytime = c.timetogo - c.cometime;</span><br><span class="line">                totalstaytime += staytime;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> averragestay = totalstaytime / cuslist.Count;</span><br><span class="line">            <span class="keyword">System</span>.Console.WriteLine(&quot;平均逗留时间:&quot; + averragestay);</span><br><span class="line">            <span class="keyword">System</span>.Console.WriteLine(&quot;顾客数量:&quot; + cuslist.Count);</span><br><span class="line">            <span class="keyword">if</span> (Qchangetime != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> averagelen = Qlen / Qchangetime;</span><br><span class="line">                Console.WriteLine(&quot;队列平均长度：&quot; + averagelen);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;椅子充足，不用排队&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;加班时间：&quot; + (curtime - <span class="type">time</span> * <span class="number">60</span>) + &quot;分钟&quot;);</span><br><span class="line">            //<span class="comment">--------打印结果------------</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static <span class="type">void</span> CheckSeat(Queue q, Seat[] S, <span class="keyword">ref</span> <span class="type">int</span> Qlen, <span class="keyword">ref</span> <span class="type">int</span> Qchangetime, <span class="type">int</span> t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.Count != <span class="number">0</span>) //如果有人排队</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (Seat s <span class="keyword">in</span> S)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s.IsFree == <span class="keyword">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        s.IsFree = <span class="keyword">false</span>;</span><br><span class="line">                        s.cus = (Customer) q.Dequeue();</span><br><span class="line">                        Qlen += q.Count;</span><br><span class="line">                        Qchangetime++;</span><br><span class="line">                        s.cus.timetogo = t + s.cus.<span class="keyword">cost</span>; //</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static <span class="type">void</span> CheckLeave(Seat[] S, <span class="type">int</span> t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (Seat s <span class="keyword">in</span> S)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.cus != <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s.cus.timetogo == t)</span><br><span class="line">                    &#123;</span><br><span class="line">                        s.IsFree = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Data Structrue</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构:二叉树的建立和遍历(C#实现)</title>
    <url>/blog/2008/12/12/data-structure-binary-tree/</url>
    <content><![CDATA[<p>遍历只做了先序,递归实现的,中序和后序都类似.代码比较简单,就不写注释,直接贴出来了</p>
<p>代码:</p>
<p>TreeNode:结点类</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Text;</span><br><span class="line"></span><br><span class="line">namespace 二叉树的建立和遍历</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> TreeNode</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">public</span> <span class="type">char</span> data;</span><br><span class="line">        <span class="built_in">public</span> TreeNode left, right;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">public</span> TreeNode(<span class="type">char</span> c, TreeNode l, TreeNode r)</span><br><span class="line">        &#123;</span><br><span class="line">            data = c;</span><br><span class="line">            left = l;</span><br><span class="line">            right = r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">public</span> TreeNode()</span><br><span class="line">        &#123;</span><br><span class="line">            left = right = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Tree:树类 </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Text;</span><br><span class="line"></span><br><span class="line">namespace 二叉树的建立和遍历</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> Tree</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">public</span> TreeNode root;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="built_in">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">public</span> <span class="type">void</span> CreateTree(String description)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">bool</span> left = <span class="keyword">true</span>;</span><br><span class="line">            <span class="type">char</span>[] descriptionarray = description.ToCharArray();</span><br><span class="line">            root = <span class="built_in">new</span> TreeNode();</span><br><span class="line">            root.data = descriptionarray[<span class="number">0</span>];</span><br><span class="line">            TreeNode <span class="keyword">temp</span> = root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= descriptionarray.Length - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (descriptionarray[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    left = <span class="keyword">true</span>;</span><br><span class="line">                    stack.Push(<span class="keyword">temp</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (descriptionarray[i] == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    left = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (descriptionarray[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stack.Pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">temp</span> = <span class="built_in">new</span> TreeNode();</span><br><span class="line">                    <span class="keyword">temp</span>.data = descriptionarray[i];</span><br><span class="line">                    <span class="keyword">if</span> (left == <span class="keyword">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        stack.Peek().left = <span class="keyword">temp</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        stack.Peek().right = <span class="keyword">temp</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">public</span> <span class="type">void</span> PreOrder(TreeNode t, String sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(sign + t.data);</span><br><span class="line">                sign += sign;</span><br><span class="line">                <span class="keyword">if</span> (t.left != <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    PreOrder(t.left, sign);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (t.right != <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    PreOrder(t.right, sign);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Program:调用者 </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 二叉树的建立和遍历</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//TreeNode t=null;</span></span><br><span class="line">            Tree tree = <span class="keyword">new</span> <span class="built_in">Tree</span>();</span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;请输入用字符串表示的二叉树&quot;</span>);</span><br><span class="line">            string input = <span class="built_in">Console</span>.<span class="built_in">ReadLine</span>();</span><br><span class="line">            tree.<span class="built_in">CreateTree</span>(input);</span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;遍历&quot;</span>);</span><br><span class="line">            tree.<span class="built_in">PreOrder</span>(tree.root, <span class="string">&quot;--&quot;</span>);</span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">Read</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Data Structrue</tag>
      </tags>
  </entry>
  <entry>
    <title>迅雷账号升级到24了，全球70000名。Oh~~Yeah~~~~</title>
    <url>/blog/2009/01/14/%E8%BF%85%E9%9B%B7%E8%B4%A6%E5%8F%B7%E5%8D%87%E7%BA%A7%E5%88%B024%E4%BA%86%EF%BC%8C%E5%85%A8%E7%90%8370000%E5%90%8D/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090114/2009-01-14_21-32-08.jpg"></p>
<p>也不知道会不会快一些……</p>
]]></content>
      <tags>
        <tag>杂7杂8</tag>
      </tags>
  </entry>
  <entry>
    <title>SWPU学分绩点计算器女生版</title>
    <url>/blog/2009/02/06/SWPU%E5%AD%A6%E5%88%86%E7%BB%A9%E7%82%B9%E8%AE%A1%E7%AE%97%E5%99%A8%E5%A5%B3%E7%94%9F%E7%89%88/</url>
    <content><![CDATA[<p>所谓女生版就是指的GUI稍微美化了一点点，我承认是标题党….</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090206/jietu02.jpg"></p>
<p>注意：需要有.net Framework 2.0才可以运行</p>
<p>.net Framework 2.0下载地址（如果你的电脑没有请在这儿下载）：<br><a href="http://www.gougou.com/search?search=.net%20Framework%202.0&id=0">http://www.gougou.com/search?search=.net%20Framework%202.0&amp;id=0</a></p>
<p>学分绩点计算器下载地址：<br><a href="http://download.csdn.net/source/993661"> http://download.csdn.net/source/993661</a><br>（要有CSDN账号才可以下载）</p>
<p>没有CSDN账号请向 <a href="mailto:&#x33;&#57;&#x37;&#54;&#52;&#x39;&#x30;&#55;&#x39;&#64;&#81;&#81;&#46;&#x63;&#111;&#x6d;"> 397649079@QQ.com </a> 索取</p>
<p>代码在压缩包里面有。</p>
]]></content>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>西南石油大学--学分绩点计算器（用C#编写，需要有.NET 2.0）</title>
    <url>/blog/2009/01/16/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6--%E5%AD%A6%E5%88%86%E7%BB%A9%E7%82%B9%E8%AE%A1%E7%AE%97%E5%99%A8%EF%BC%88%E7%94%A8CSharp%E7%BC%96%E5%86%99%EF%BC%8C%E9%9C%80%E8%A6%81%E6%9C%89.NET%202.0%EF%BC%89/</url>
    <content><![CDATA[<p>注意：需要有.net Framework 2.0才可以运行</p>
<p>.net Framework 2.0下载地址（如果你的电脑没有请在这儿下载）：<br><a href="http://www.gougou.com/search?search=.net%20Framework%202.0&id=0">http://www.gougou.com/search?search=.net%20Framework%202.0&amp;id=0</a></p>
<p>学分绩点计算器下载地址：<br><a href="http://download.csdn.net/source/973619"> http://download.csdn.net/source/973619</a><br>（要有CSDN账号才可以下载）</p>
<p>运行效果（示例而已）：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090116/jietu03.jpg" alt="效果"></p>
<h2 id="——————————————分割线下面是类关系图、代码———————"><a href="#——————————————分割线下面是类关系图、代码———————" class="headerlink" title="——————————————分割线下面是类关系图、代码———————-"></a>——————————————分割线下面是类关系图、代码———————-</h2><p>这是类关系图：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090116/ClassDiagram1.jpg" alt="类关系图"></p>
<p>下面是代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 西南石油大学_学分绩点计算器</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;西南石油大学--学分绩点计算器&quot;</span>);</span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>();</span><br><span class="line">            Term thisTerm = <span class="keyword">new</span> <span class="built_in">Term</span>();</span><br><span class="line">            <span class="type">int</span> NumOfCourses = GetInput.<span class="built_in">CourseNum</span>(); <span class="comment">//本学期课程数 for(int</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= NumOfCourses; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>();</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;--------------开始录入第&#123;0&#125;门课程--------------&quot;</span>, i);</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;第&#123;0&#125;门课程有几个学分？&quot;</span>, i);</span><br><span class="line">                <span class="type">double</span> credit = GetInput.<span class="built_in">GetCredit</span>();</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;第&#123;0&#125;门课程考了多少分？&quot;</span>, i);</span><br><span class="line">                <span class="type">double</span> score = GetInput.<span class="built_in">GetCredit</span>();</span><br><span class="line">                Course OneCourse = <span class="keyword">new</span> <span class="built_in">Course</span>(credit, score);</span><br><span class="line">                thisTerm.<span class="built_in">AddOneCourse</span>(OneCourse);</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;--------------第&#123;0&#125;门课程录入完毕--------------&quot;</span>, i);</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;最后学分绩点是：&quot;</span> + thisTerm.<span class="built_in">GetFinalJIDIAN</span>());</span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;欢迎访问我的博客：http://blog.csdn.net/cuipengfei1&quot;</span>);</span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">Read</span>();</span><br><span class="line">            System.Diagnostics.<span class="built_in">Process</span>.<span class="built_in">Start</span>(<span class="string">&quot;http://blog.csdn.net/cuipengfei1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">GetInput</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">int</span> <span class="title">CourseNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;本学期一共有几门必修课程？（注意，是必修课程哦）&quot;</span>);</span><br><span class="line">            string num = <span class="built_in">Console</span>.<span class="built_in">ReadLine</span>();</span><br><span class="line">            <span class="type">int</span> NUM;</span><br><span class="line">            <span class="type">int</span>.<span class="built_in">TryParse</span>(num, out NUM);</span><br><span class="line">            <span class="keyword">return</span> NUM;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">double</span></span></span><br><span class="line"><span class="function">            <span class="title">GetCredit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            string credit = <span class="built_in">Console</span>.<span class="built_in">ReadLine</span>();</span><br><span class="line">            <span class="type">double</span> CREDIT;</span><br><span class="line">            <span class="type">double</span>.<span class="built_in">TryParse</span>(credit, out CREDIT);</span><br><span class="line">            <span class="keyword">return</span> CREDIT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Course</span> <span class="comment">//一门课程</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> credit; <span class="comment">//学分 private double score;//分数 public double Credit//学分</span></span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> credit;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            set</span><br><span class="line">            &#123;</span><br><span class="line">                credit = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> Score <span class="comment">//分数</span></span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; <span class="keyword">return</span> score; &#125;</span><br><span class="line"></span><br><span class="line">            set &#123; score = value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(<span class="type">double</span></span></span></span><br><span class="line"><span class="params"><span class="function">            _credit, <span class="type">double</span> _score)</span> <span class="comment">//构造</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            credit = _credit;</span><br><span class="line">            score = _score;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="type">double</span></span></span><br><span class="line"><span class="function">            <span class="title">GetJIDIAN</span><span class="params">()</span> <span class="comment">//本门绩点</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">double</span> jidian;</span><br><span class="line">            jidian = ((score - <span class="number">60</span>) / <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> jidian;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Term</span> <span class="comment">//本学期</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Course&gt; AllCourse = <span class="keyword">new</span> <span class="built_in">List</span>&lt;Course&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">AddOneCourse</span><span class="params">(Course course)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            AllCourse.<span class="built_in">Add</span>(course);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span></span></span><br><span class="line"><span class="function">            <span class="type">double</span> <span class="title">GetFinalJIDIAN</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">double</span> totalCredit = <span class="number">0</span>;</span><br><span class="line">            <span class="type">double</span> totalJIDIAN = <span class="number">0</span>;</span><br><span class="line">            foreach</span><br><span class="line">                (Course oneCourse in AllCourse)</span><br><span class="line">            &#123;</span><br><span class="line">                totalCredit += oneCourse.Credit;</span><br><span class="line">                totalJIDIAN</span><br><span class="line">                    += oneCourse.<span class="built_in">GetJIDIAN</span>() * oneCourse.Credit;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> totalJIDIAN / totalCredit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS：什么时候可以查分啊？</p>
]]></content>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>《计算机图形技术》练习--用GDI+模拟DDA算法</title>
    <url>/blog/2009/03/02/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E6%8A%80%E6%9C%AF%E3%80%8B%E7%BB%83%E4%B9%A0--%E7%94%A8GDI+%E6%A8%A1%E6%8B%9FDDA%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>刘义军老师留的作业</p>
<p>代码简单，一看就懂</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090311/2009-03-11_08-35-10.jpg"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Data;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Drawing;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Text;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace GDI_DDA</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">public</span> partial <span class="keyword">class</span> Form1 : Form</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pointSize = <span class="number">22</span>;</span><br><span class="line">        <span class="type">int</span> width = Screen.PrimaryScreen.WorkingArea.Width;</span><br><span class="line">        <span class="type">int</span> height = Screen.PrimaryScreen.WorkingArea.Height;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">public</span> Form1()</span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span> DrawGrid(Graphics gra)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= Width; i += pointSize)</span><br><span class="line">            &#123;</span><br><span class="line">                gra.DrawLine(Pens.Black, i, <span class="number">0</span>, i, height);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= height; i += pointSize)</span><br><span class="line">            &#123;</span><br><span class="line">                gra.DrawLine(Pens.Black, <span class="number">0</span>, i, Width, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span> MyDrawLine(Graphics gra, <span class="type">float</span> startX, <span class="type">float</span> startY, <span class="type">float</span> endX, <span class="type">float</span> endY)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> dx = endX - startX;</span><br><span class="line">            <span class="type">float</span> dy = endY - startY;</span><br><span class="line">            <span class="type">float</span> delta = dy / dx;</span><br><span class="line">            <span class="type">float</span></span><br><span class="line">                y = startY;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x = (<span class="type">int</span>) startX; x &lt;= endX; x++, y += delta)</span><br><span class="line">            &#123;</span><br><span class="line">                DrawEllipseByCenter(gra, Pens.Red, x * pointSize, y * pointSize, pointSize * <span class="number">0.5</span>f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span> DrawEllipseByCenter(Graphics g, Pen p, <span class="type">float</span> centerX, <span class="type">float</span> centerY, <span class="type">float</span> r)</span><br><span class="line">        &#123;</span><br><span class="line">            g.FillEllipse(Brushes.Red, centerX - r * <span class="number">0.5</span>f, centerY - <span class="number">0.5</span>f, <span class="number">2</span> * r, <span class="number">2</span> * r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private <span class="type">void</span> Form1_Paint(<span class="keyword">object</span> sender, PaintEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            Graphics myGra = e.Graphics;</span><br><span class="line">            DrawGrid(myGra);</span><br><span class="line">            MyDrawLine(myGra, <span class="number">3</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">25</span>);</span><br><span class="line">            myGra.DrawLine(Pens.Red, <span class="number">3</span> * pointSize, <span class="number">5</span> * pointSize, <span class="number">47</span> * pointSize, <span class="number">25</span> * pointSize);</span><br><span class="line">            myGra.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>graphics</tag>
      </tags>
  </entry>
  <entry>
    <title>格物致知 《Effective C#》读书笔记--验证二进制兼容性</title>
    <url>/blog/2009/02/18/%E6%A0%BC%E7%89%A9%E8%87%B4%E7%9F%A5%20%E3%80%8AEffective%20CSharp%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--%E9%AA%8C%E8%AF%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9%E6%80%A7/</url>
    <content><![CDATA[<p>昨天读了《Effective C#》的第一个条款“使用属性代替可访问的数据成员”，讲到要把公有字段修改为私有字段，并用公有属性把它封装起来。这一点不难理解，<br>不过里面提到了一个关于二进制兼容性的问题，很是有趣，今天来验证一下。</p>
<p>验证思路：创建一个类库内有一个public的类，该类内有一个public的字段。另外创建一个WinForm程序去读区该字段并显示。然后修改类库中的字段为属性<br>。再去运行WinForm，就应该会出错了。出错具体原因请参看《Effective C#》讲解。</p>
<p>开始吧！</p>
<p>创建一个ClassLibrary，叫做TheDLL。代码如下：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DataHolder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    public String Data = <span class="string">&quot;Hey! Hey!You!You!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>用它生成一个dll。</p>
<p>然后创建一个WindowsFormsApplication，叫做TheForm，上有一个按钮，点击按钮就去读取dll中的数据，把它显示在按钮上。具体代码如下<br>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">TheForm</span> : <span class="title">Form</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TheForm</span>()</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        TheDLL.DataHolder DH = <span class="keyword">new</span> TheDLL.DataHolder();</span><br><span class="line"></span><br><span class="line">        button1.Text = DH.Data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>运行，点击按钮，效果如下：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090218/2009-02-18_13-07-45.jpg"></p>
<p>然后修改  TheDll的代码为如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataHolder</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">data</span> = <span class="string">&quot;Hey! Hey!You!You!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String Data</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">data</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> &#123; <span class="keyword">data</span> = value; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>重新生成dll，把新生成的dll复制到TheForm的debug文件夹下去覆盖原来的dll文件。然后双击运行TheForm.exe。结果如下：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090218/2009-02-18_13-11-29.jpg"></p>
<p>提示找不到TheDLL.DataHolder.Data。没错!这就是因为访问字段和访问属性的C#代码虽然一样，都是</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">TheDLL.DataHolder DH <span class="operator">=</span> new TheDLL.DataHolder()<span class="comment">;</span></span><br><span class="line">button1.Text <span class="operator">=</span> DH.Data<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>但是生成的MSIL是不一样的，这就造成了二进制不兼容。</p>
<p>注意，不要去IDE中运行TheForm，因为那样会重编译TheForm，就会看不到二进制不兼容造成的结果了。</p>
<p>另外，即使在TheForm中用try -catch来把访问dll的代码包含起来，如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">TheForm</span> : <span class="title">Form</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TheForm</span>()</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            TheDLL.DataHolder DH = <span class="keyword">new</span> TheDLL.DataHolder();</span><br><span class="line"></span><br><span class="line">            button1.Text = DH.Data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (Exception)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还是会发生上图报错的结果。</p>
]]></content>
      <tags>
        <tag>格物致知 《Effective C#》读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>A double blessing has descended upon the house</title>
    <url>/blog/2009/03/10/A%20double%20blessing%20has%20descended%20upon%20the%20house/</url>
    <content><![CDATA[<p>今天公布了CET-SET（口语）的成绩，在去上课的路上用手机查询。得了一个A。</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090310/2009-03-10_13-52-19.jpg"></p>
<p>到教室，没过几分钟收到一封邮包。是O‘reilly寄来的笔记本（是真的笔记本，不是laptop……）</p>
<p>封面是这样的</p>
<p><img data-src="http://image.2knowledge.net/book/100001-110000/100073/cover/normal.png"></p>
<p>O(∩_∩)O哈哈~</p>
<p>双喜临门啊~~~</p>
]]></content>
      <tags>
        <tag>杂7杂8</tag>
      </tags>
  </entry>
  <entry>
    <title>CET口语证书，呕嘢~~~~~~~~~~~~</title>
    <url>/blog/2009/05/15/CET%E5%8F%A3%E8%AF%AD%E8%AF%81%E4%B9%A6%EF%BC%8C%E5%91%95%E5%98%A2/</url>
    <content><![CDATA[<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090515/DSC02321.JPG"></p>
<ul>
<li><a href="javascript:;"> 点赞  1  </a></li>
<li><a href="javascript:;"> 收藏  </a></li>
<li><a href="javascript:;"> 分享 </a></li>
</ul>
]]></content>
      <tags>
        <tag>杂7杂8</tag>
      </tags>
  </entry>
  <entry>
    <title>三种方式统计string中出现次数最多的char（还是LinQ最简便）</title>
    <url>/blog/2009/04/26/%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%BB%9F%E8%AE%A1string%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84char%EF%BC%88%E8%BF%98%E6%98%AFLinQ%E6%9C%80%E7%AE%80%E4%BE%BF%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Text;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> Program</span><br><span class="line">    &#123;</span><br><span class="line">        static <span class="type">void</span> Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            string str = &quot;aaeaabbebbccececddeddd&quot;;</span><br><span class="line"></span><br><span class="line">            List&lt;<span class="type">char</span>&gt; charList = <span class="built_in">new</span> List&lt;<span class="type">char</span>&gt;(str.ToCharArray());</span><br><span class="line">            <span class="type">int</span> len = charList.Count;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">Dictionary</span>&lt;<span class="type">char</span>, <span class="type">int</span>&gt; charD = <span class="built_in">new</span> <span class="keyword">Dictionary</span>&lt;<span class="type">char</span>, <span class="type">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> lastTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (charList.Count != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> count = CountAChar(charList);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (count &gt; lastTime)</span><br><span class="line">                &#123;</span><br><span class="line">                    charD.Clear();</span><br><span class="line">                    charD.<span class="keyword">Add</span>(charList[<span class="number">0</span>], count);</span><br><span class="line">                    lastTime = count;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (count == lastTime)</span><br><span class="line">                &#123;</span><br><span class="line">                    charD.<span class="keyword">Add</span>(charList[<span class="number">0</span>], count);</span><br><span class="line">                    lastTime = count;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                DeleteAChar(count, charList);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="type">char</span>, <span class="type">int</span>&gt; kv <span class="keyword">in</span> charD)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;&#123;1&#125;有&#123;0&#125;个&quot;, kv.<span class="keyword">Value</span>.ToString(), kv.Key.ToString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;----------------------------------------&quot;);</span><br><span class="line">            SecondProgram.SecondWay(str);</span><br><span class="line">            Console.WriteLine(&quot;----------------------------------------&quot;);</span><br><span class="line">            ThirdClass.ThirdWay(str);</span><br><span class="line">            Console.<span class="keyword">Read</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static <span class="type">void</span> DeleteAChar(<span class="type">int</span> num, List&lt;<span class="type">char</span>&gt; cl)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> c = cl[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                cl.Remove(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static <span class="type">int</span> CountAChar(List&lt;<span class="type">char</span>&gt; cl)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="type">char</span> c <span class="keyword">in</span> cl)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == cl[<span class="number">0</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    ret++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//<span class="comment">-----------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">class</span> SecondProgram</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">public</span> static <span class="type">void</span> SecondWay(string str)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> len = str.Length;</span><br><span class="line">            <span class="type">char</span>[] strArray = str.ToCharArray();</span><br><span class="line">            <span class="type">int</span>[] count = <span class="built_in">new</span> <span class="type">int</span>[len];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; len; y++) //将count数组的每个单元初始为<span class="number">0</span></span><br><span class="line">                count[y] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; len; y++) //将当前字符与之后的字符进行比较，相同count数组中对应索引处++</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> yy = y; yy &lt; len; yy++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (strArray[y].Equals(strArray[yy]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        count[y]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ArrayList maxCountArr = <span class="built_in">new</span> ArrayList();</span><br><span class="line">            <span class="type">int</span> maxCount = count[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; len; y++) //获得出现次数的最大值</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (count[y] &gt; maxCount)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxCount = count[y];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; len; y++)</span><br><span class="line">//最大值与count数组中的每个数进行比较，相同则出现次数相同，把索引加入到maxCountArr</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (count[y] == maxCount)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxCountArr.<span class="keyword">Add</span>(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; maxCountArr.Count; y++) //输出</span><br><span class="line">            &#123;</span><br><span class="line">                Console.<span class="keyword">Write</span>(&quot;Str&quot; + (y + <span class="number">1</span>) + &quot;:&quot; + strArray[(<span class="type">int</span>) maxCountArr[y]] + &quot;/n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;<span class="keyword">summary</span>&gt;</span><br><span class="line">    /// 第三种方式</span><br><span class="line">    /// &lt;/<span class="keyword">summary</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> ThirdClass</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;<span class="keyword">summary</span>&gt;</span><br><span class="line">        /// 还是LinQ最简便</span><br><span class="line">        /// &lt;/<span class="keyword">summary</span>&gt;</span><br><span class="line">        /// &lt;param <span class="type">name</span>=&quot;str&quot;&gt;&lt;/param&gt;</span><br><span class="line">        <span class="built_in">public</span> static <span class="type">void</span> ThirdWay(string str)</span><br><span class="line">        &#123;</span><br><span class="line">            var resultGroup = <span class="keyword">from</span> aChar <span class="keyword">in</span> str.ToCharArray()</span><br><span class="line">                <span class="keyword">group</span> aChar <span class="keyword">by</span> aChar;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (var one <span class="keyword">in</span> resultGroup)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (one.Count() &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    max = one.Count();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (var one <span class="keyword">in</span> resultGroup)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (one.Count() == max)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(&quot;&#123;0&#125;字符出现了&#123;1&#125;次&quot;, one.Key, max);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Linq</tag>
      </tags>
  </entry>
  <entry>
    <title>被学校的广播大大地雷了一把</title>
    <url>/blog/2009/03/25/%E8%A2%AB%E5%AD%A6%E6%A0%A1%E7%9A%84%E5%B9%BF%E6%92%AD%E5%A4%A7%E5%A4%A7%E5%9C%B0%E9%9B%B7%E4%BA%86%E4%B8%80%E6%8A%8A/</url>
    <content><![CDATA[<p>刚才在食堂吃完午饭回寝室的路上听广播，大意是：学校组织全校党员、领导、干部，本着实践科学发展观的精神进行了深入的调查研究，仅专题座谈会就召开了192场。终于<br>得出一个重要结论：就业率对于我们学校是很重要的。</p>
<p>TMD……彻底被雷了一把…</p>
]]></content>
      <tags>
        <tag>嗷</tag>
      </tags>
  </entry>
  <entry>
    <title>格物致知 《Effective C#》读书笔记--验证类型转换</title>
    <url>/blog/2009/05/31/%E6%A0%BC%E7%89%A9%E8%87%B4%E7%9F%A5%20%E3%80%8AEffective%20CSharp%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--%E9%AA%8C%E8%AF%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>as  看起来很好用的样子，不会抛出异常，只要根据返回值是否为  null来做不同的处理就可以了。但是它也不是万金油，以下的情况  as  就不适用：</p>
<p>①值类型</p>
<p>比如：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">double  d <span class="operator">=</span> <span class="number">100.0</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">int  valueType <span class="operator">=</span> d  as  int  <span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>这两句代码就直接通不过编译，给出的原因是：  as  运算符必须用于引用类型或可以为  null类型  (“int”  是一种不可以为  null<br>值的类型  )</p>
<p>想一下也合理，  as  在失败时会返回  null，而值类型是不可以为  null的（  INullable  除外）。</p>
<p>由上面的出错信息也可以看出来，  as  只可以作用于引用类型。</p>
<p>但是也并非所有值类型都适用，存在于一条继承链上的自不必说。但是自定义类型转换呢？</p>
<p>②自定义类型转换</p>
<p>假设有两个类定义如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassOne</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> filedOne;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> FiledOne</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; <span class="keyword">return</span> filedOne; &#125;</span><br><span class="line"></span><br><span class="line">        set &#123; filedOne = value; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">ClassTwo</span><span class="params">(ClassOne co)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClassTwo &#123;FiledTwo = co.FiledOne&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassTwo</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> filedtwo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> FiledTwo</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; <span class="keyword">return</span> filedtwo; &#125;</span><br><span class="line"></span><br><span class="line">        set &#123; filedtwo = value; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ClassOne  中定义了向  ClassTwo  的转换。</p>
<p>试用一下：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">ClassOne  co <span class="operator">=</span>  new  ClassOne  &#123; FiledOne<span class="operator">=</span><span class="number">10</span>&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">ClassTwo  ct <span class="operator">=</span> (  ClassTwo  )co<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>这样是没问题的，但是再写下面一句：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ct</span> <span class="operator">=</span> co  as  ClassTwo  <span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>就会报告：  无法通过引用转换、装箱转换、取消装箱转换、包装转换或  Null类型转换将类型  “CastAsIs.ClassOne”  转换为<br>“CastAsIs.ClassTwo”</p>
<p>由此可见  as  对于自定义类型转换不感冒。</p>
<p>实际上，  foreach  内部也是使用的强制类型转换的，看下面：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">ClassOne[] arr =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> ClassOne &#123;FiledOne = <span class="number">1</span>&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> ClassOne &#123;FiledOne = <span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foreach (ClassTwo item <span class="keyword">in</span> arr)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item.FiledTwo.<span class="keyword">To</span><span class="built_in">String</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码编译和运行都没问题（把  arr  中的  ClassOne  强制转换为  ClassTwo  自然没问题），但是如果改写成下面这样：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">foreach (ClassTwo <span class="built_in">item</span> <span class="keyword">in</span> arr <span class="keyword">as</span> IEnumerable)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="built_in">item</span>.FiledTwo.ToString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就会报告一个  InvalidCastException  ，原因就是  IEnumerator.Current  （）返回的是  Object<br>类型，而在  foreach  中试图将  Object  转化为  ClassTwo  就会出错。</p>
]]></content>
      <tags>
        <tag>格物致知 《Effective C#》读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>格物致知--《Effective C#》读书笔记--验证接口引用指向装箱后的值类型时无需拆箱</title>
    <url>/blog/2009/07/29/%E6%A0%BC%E7%89%A9%E8%87%B4%E7%9F%A5--Effective%20C%20Sharp%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--%E9%AA%8C%E8%AF%81%E6%8E%A5%E5%8F%A3%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E8%A3%85%E7%AE%B1%E5%90%8E%E7%9A%84%E5%80%BC%E7%B1%BB%E5%9E%8B%E6%97%B6%E6%97%A0%E9%9C%80%E6%8B%86%E7%AE%B1/</url>
    <content><![CDATA[<p>欲验证的结论：  接口引用指向装箱后的值类型时无需拆箱  。</p>
<p>代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">SomeInterface</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodInInterface</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> OneValueType : SomeInterface</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodInInterface</span>()</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;get called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">TestUnBox</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CastStruct</span>()</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        OneValueType ovt = <span class="keyword">new</span> OneValueType();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">object</span> o = ovt; <span class="comment">//Box</span></span><br><span class="line"></span><br><span class="line">        ((OneValueType) o).MethodInInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CastInterface</span>()</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        OneValueType ovt = <span class="keyword">new</span> OneValueType();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">object</span> o = ovt; <span class="comment">//Box</span></span><br><span class="line"></span><br><span class="line">        ((SomeInterface) o).MethodInInterface();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中  OneValueType  是值类型，它实现了  SomeInterface  。</p>
<p>两个方法  CastStruct  和  CastInterface  分别把装箱之后的值类型转型为  OneValueType  和<br>SomeInterface  。预计的结果是第二个方法无需拆箱，查看  IL  来验证：</p>
<p>这是  CastStruct  （）：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090729/2009-07-29_08-47-04.jpg"></p>
<p>这是  CastInterface  （）：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090729/2009-07-29_08-47-18.jpg"></p>
<p>可见，第二个方法中没有  unbox  指令，结论得证。</p>
<p>2009  年  7  月  29  日</p>
]]></content>
      <tags>
        <tag>格物致知 《Effective C#》读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>格物致知--《Effective C#》读书笔记--验证四种判等方式</title>
    <url>/blog/2009/07/19/%E6%A0%BC%E7%89%A9%E8%87%B4%E7%9F%A5--%E3%80%8AEffective%20CSharp%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--%E9%AA%8C%E8%AF%81%E5%9B%9B%E7%A7%8D%E5%88%A4%E7%AD%89%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>原地址在我的CSDN<br>Blog：<a href="http://blog.csdn.net/cuipengfei1/archive/2009/07/19/4362245.aspx">http://blog.csdn.net/cuipengfei1/archive/2009/07/19/4362245.aspx</a></p>
<p>①  Object  的静态方法  ReferenceEquals  ：</p>
<p>只适用于判断两个引用是否指向同一个实例，不适用于值类型（或者说用于值类型是没意义的，因为永远返回  false  ）。如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">TestEqual  te =  <span class="keyword">new</span>  TestEqual  ();</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span>  b1=  <span class="built_in">object</span>  .ReferenceEquals(te,te);</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span>  b2 =  <span class="built_in">object</span>  .ReferenceEquals(<span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>b1  为  true  ，  b2  为  false  。  b2  为  false  的原因是两个整型值  1  装箱之后是两个不同的<br>Object  实例。</p>
<p>②  Object  中定义的实例级虚方法  Equals  ：</p>
<p>其  默认  行为是判断引用是否相等，引用类型从  Object  中继承了这一行为，如下：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">TestEqual  te1<span class="operator">=</span>  new  TestEqual  ()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">TestEqual  te2 <span class="operator">=</span>  new  TestEqual  ()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">bool  b4<span class="operator">=</span> te1.Equals(te2)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">bool  b5 <span class="operator">=</span> te1.Equals(te1)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Console  .WriteLine(b4)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Console  .WriteLine(b5)  <span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>输出结果很明显第一个假，第二个真。</p>
<p>但是对于值类型来说，由于  ValueType  重写了这个方法，所以其行为不同，可以判断值是否相同，而不是引用。</p>
<p>如下：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">int  num1 <span class="operator">=</span> <span class="number">15</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">int  num2 <span class="operator">=</span> <span class="number">15</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">bool  b3 <span class="operator">=</span> num1.Equals(num2)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Console  .WriteLine(b3)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>虽然  num1  和  num2  是两个变量，但是只要它们的值一样，  b3  结果就为  true  。</p>
<p>③  &#x3D; &#x3D;  运算符：</p>
<p>应用于值类型的时候其行为是判断值是否相等。应用于引用类型的时候判断引用是否相同。</p>
<p>④  Object  中的静态方法  Equals  ：</p>
<p>它接受两个  Object  类型的参数，它会调用第一个参数的实例级  Equals<br>方法，以第二个参数作为该方法的参数来进行判等。所以其行为表现出来和实例级的  Equals<br>方法一样。只是其内部添加了对于两个参加判等的参数是否本身已经是同一个引用的判断，还有两个参数是否为  null的判断。</p>
<p>2009  年  7  月  19  日  22:35:15  于  SWPU 19#625</p>
]]></content>
      <tags>
        <tag>格物致知 《Effective C#》读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>电驴（easyMule）自动关机工具</title>
    <url>/blog/2009/08/21/%E7%94%B5%E9%A9%B4%EF%BC%88easyMule%EF%BC%89%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>由于电驴官方鼓励尽量多的上传，所以不提供下载完关机的功能。于是我自己写了个小工具来实现这个功能。</p>
<p>使用方法：</p>
<p>运行  EasyMulePowerOff.exe</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090821/jietu01.jpg"></p>
<p>会提示您设置电驴的安装路径，设置好之后会检查到有没有未完成的任务：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090821/jietu02.jpg"></p>
<p>显示我有一个未完的任务，看一下电驴中</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090821/jietu03.jpg"></p>
<p>确实只有一个任务</p>
<p>然后可以点击隐藏按钮让程序隐藏，等下完之后，会出现</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090821/jietu04.jpg"></p>
<p>这时可以点击取消按钮取消关机并关闭本程序，如果您在睡觉的话，倒计时  60  秒之后就自动关机了。</p>
<p>下载：<br><a href="http://download.csdn.net/source/1595128"> http://download.csdn.net/source/1595128</a></p>
<p>PS  ：会生成一个easyMulePath.cpf文件，请不要删除。</p>
<p>此程序只适用于  easyMule  并需要  .NET 2.0</p>
]]></content>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>《Head First C#》将停止翻译和更新</title>
    <url>/blog/2009/08/07/%E3%80%8AHead%20First%20CSharp%E3%80%8B%E5%B0%86%E5%81%9C%E6%AD%A2%E7%BF%BB%E8%AF%91%E5%92%8C%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>近日闻悉国内某出版社即将出版《  Head First C#  》的中文版，为避免版权纠纷，本“山寨”系列将停止翻译和更新。</p>
<p>从去年  10  月开始利用课余时间翻译这本书，到现在翻译完了将近  13  章，总计  12  万余字。</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090807/2009-08-07_16-33-29.jpg"></p>
<p>剩余的正文内容已不足百页，无法做到有始有终，颇为遗憾。</p>
<p>感谢  CSDN  和  VeryCD  各位朋友一直以来的关注、支持、鼓励和批评。</p>
<p>2009  年  8  月  7  日</p>
<ul>
<li><a href="javascript:;"> 点赞  2  </a></li>
<li><a href="javascript:;"> 收藏  </a></li>
<li><a href="javascript:;"> 分享 </a></li>
</ul>
]]></content>
      <tags>
        <tag>我翻译的Head First C#（习作）</tag>
      </tags>
  </entry>
  <entry>
    <title>今天又被门卫大爷小小的雷了一下</title>
    <url>/blog/2009/03/26/%E4%BB%8A%E5%A4%A9%E5%8F%88%E8%A2%AB%E9%97%A8%E5%8D%AB%E5%A4%A7%E7%88%B7%E5%B0%8F%E5%B0%8F%E7%9A%84%E9%9B%B7%E4%BA%86%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[<p>今天成都血液中心来采血。我去献了300CC的血，今天才知道自己是O型血~~</p>
<p>手里拿着送我的一把天堂伞和《无偿献血证》回寝室。门口大爷（大概60岁）正在择菜，看到我，说：“你们去献血了？好同学！为社会主义献血！”</p>
<p>O(∩_∩)O 年代的烙印啊</p>
]]></content>
      <tags>
        <tag>625</tag>
      </tags>
  </entry>
  <entry>
    <title>easyMule自动关机工具(可用于1.X和2.0版本)</title>
    <url>/blog/2009/09/01/easyMule%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA%E5%B7%A5%E5%85%B7(%E5%8F%AF%E7%94%A8%E4%BA%8E1.X%E5%92%8C2.0%E7%89%88%E6%9C%AC)/</url>
    <content><![CDATA[<p>前几天发的程序只可以用于easyMule1.X版本，今天改写了一下，可以适用于2.0</p>
<p>使用方法：</p>
<p>运行  EasyMulePowerOff.exe</p>
<p>会提示您设置电驴的安装路径，设置好之后会检查到有没有未完成的任务：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090901/jietu00.jpg"></p>
<p>显示我有一个未完的任务，看一下电驴中</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090901/jietu01.jpg"></p>
<p>确实只有一个任务</p>
<p>然后可以点击隐藏按钮让程序隐藏，等下完之后，会出现</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090901/jietu02.jpg"></p>
<p>这时可以点击取消按钮取消关机并关闭本程序，如果您在睡觉的话，倒计时  60  秒之后就自动关机了。</p>
<p>下载：<a href="http://download.csdn.net/source/1623330">http://download.csdn.net/source/1623330</a></p>
<p>PS  ：此程序只适用于  VeryCD的  easyMule  并需要  .NET 2.0</p>
]]></content>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>Words Via Subtitle的两点改进</title>
    <url>/blog/2009/09/10/Words%20Via%20Subtitle%E7%9A%84%E4%B8%A4%E7%82%B9%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<p>上周写了一个<br><a href="http://blog.csdn.net/cuipengfei1/archive/2009/09/03/4516588.aspx"> 通过英文剧集、电影学单词的小工具</a><br>，这几天又做了一点小的改进。主要是下面这两点：</p>
<ol>
<li>显示单词解释的同时显示其在剧中出现的语境，关键单词红色显示。效果如下：</li>
</ol>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090910/jietu01.jpg"></p>
<ol start="2">
<li>导出文档。可以把列表中的单词，其简明解释和在剧中出现的语境保存到文档中。关键词开头绿色显示，例句中红色显示。效果如下：</li>
</ol>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090910/jietu02.jpg"></p>
<p>为什么要写这个功能呢？因为九月中下旬有很多美剧要回归，包括  TBBT  ，  Lie to me  ，  Heroes  ，  Fringe  。到时候每<br>一集出来之后可以用这个程序迅速的把一集中出现的生词，其音标及解释还有语境总结出来。可以把它发到博客里，或者发到美剧对应的社区或者贴吧里去，会比一般的影迷手工<br>总结的快很多。</p>
<p>做这个功能的时候费了很多力气，倒不是它有多难，而是因为对于  WPS  文档对象模型不够了解。请各位注意：  这个功能只有安装了  WPS  才可以用<br>。（之所以这样是因为我这儿没装  Office……  ）</p>
<p>下载在：<br><a href="http://download.csdn.net/source/1649482"> http://download.csdn.net/source/1649482</a></p>
<p>以上就是  Words  Via  Subtitle  今天更新的内容，基本功能和使用方法和原来一样，需要了解的话请看这儿：<br><a href="http://blog.csdn.net/cuipengfei1/archive/2009/09/03/4516588.aspx">http://blog.csdn.net/cuipengfei1/archive/2009/09/03/4516588.aspx</a></p>
]]></content>
      <tags>
        <tag>Words Via Subtitle</tag>
      </tags>
  </entry>
  <entry>
    <title>Words Via Subtitle改进：视频播放例句、加快生成WPS文档的速度</title>
    <url>/blog/2009/09/17/Words%20Via%20Subtitle%E6%94%B9%E8%BF%9B%EF%BC%9A%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E4%BE%8B%E5%8F%A5%E3%80%81%E5%8A%A0%E5%BF%AB%E7%94%9F%E6%88%90WPS%E6%96%87%E6%A1%A3%E7%9A%84%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<p>Words Via Subtitle  改进：视频播放例句、加快生成  WPS  文档的速度</p>
<p>关于  Words Via Subtitle  的介绍：</p>
<p>1<br><a href="http://blog.csdn.net/cuipengfei1/archive/2009/09/03/4516588.aspx"> http://blog.csdn.net/cuipengfei1/archive/2009/09/03/4516588.aspx</a></p>
<p>2<br><a href="http://blog.csdn.net/cuipengfei1/archive/2009/09/10/4539180.aspx"> http://blog.csdn.net/cuipengfei1/archive/2009/09/10/4539180.aspx</a></p>
<p>最近给这个小程序添加了视频播放例句的功能，使用方法如下：</p>
<p>载入字幕文件并指定了与之对应的视频文件之后，选中某个感觉生疏的单词，然后点击播放例句按钮，该单词所在句子就会以视频的方式开始播放，播完该句子视频暂停。其实这<br>个功能写起来也挺简单的，就是在字幕中找到一个单词所在句子对应的时间信息，然后依照该时间段播放视频。</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090917/jietu00.jpg"></p>
<p>加快生成  WPS  文档的速度：</p>
<p>原 来是在生成文档的时候才去获取单词的网络解释及其语境。又要访问网络又要读文件然后才可以生成文档，速度就会很慢。现在改变了方式，载入字幕之后就用一个<br>线程去把单词的解释从网上获取来，把语境从文件中读取来，这样生成文档这个操作所耗的时间就主要在于在文档中找到关键字并把关键字变色了（这个过程还是耗<br>时不少，不过比原来快多了）。</p>
<p>程序下载地址：<br><a href="http://cuipengfei1.download.csdn.net/"> http://cuipengfei1.download.csdn.net/</a></p>
]]></content>
      <tags>
        <tag>Words Via Subtitle</tag>
      </tags>
  </entry>
  <entry>
    <title>通过英文剧集、电影学单词的小工具</title>
    <url>/blog/2009/09/03/%E9%80%9A%E8%BF%87%E8%8B%B1%E6%96%87%E5%89%A7%E9%9B%86%E3%80%81%E7%94%B5%E5%BD%B1%E5%AD%A6%E5%8D%95%E8%AF%8D%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>我平时很喜欢看美剧和电影。而如果看中文字幕（看英文字幕也是一样）的话，注意力就会集中于阅读文字、理解剧情，练习听力的目的就落空了。而如果不看字幕的话，对话中<br>的很多生词就会随着对句子的大致理解而溜过去了，所以最好的办法就是看之前把对白中会出现的单词预览一次以为预习，看的过程中再熟悉一次，看完之后还可以针对用得到的<br>单词再记一次。为了实现这个目的，我写了一个小程序。</p>
<p>使用方式如下：</p>
<p>运行  WordsViaSubtitle.exe</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090903/jietu01.jpg"></p>
<p>可以通过程序中的搜索框搜索字幕文件（是射手网提供的，赞美射手  O(∩_∩)O哈！！）</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090903/jietu03.jpg"></p>
<p>通过弹出的链接去射手网把字幕下载到本地，然后通过“打开字幕”按钮载入字幕文件，程序会解析其中出现的单词并给出其中文解释和例句（赞美海词在线  O(∩_∩)O  哈！）。效果如下：</p>
<p><img data-src="/images/images/p_blog_csdn_net/cuipengfei1/EntryImages/20090903/jietu04.jpg"></p>
<p>然后可以用“认识当前单词”按钮把某个认识的单词过滤掉，这样认识的单词下次就不会再蹦出来干扰你了。可以用“当前单词加入生词本”按钮把一个单词加入生词本，也可以<br>在使用“认识当前单词”按钮和“单词拼写错误”（字幕中难免会有错）按钮把已知词汇和拼错的词去掉之后再使用“全部单词加入生词本”按钮把列表中余下的单词全部加入生<br>词本。以后可以用“打开生词本”按钮来学习这些生词。“搜索字幕文件”按钮用来打开最初的搜索页面。</p>
<p>最近我自己使用这个程序已经积累了  10000  多的词汇了（当然部分是之前就认识的单词）。</p>
<p>下载：  <a href="http://download.csdn.net/source/1630439"> http://download.csdn.net/source/1630439
</a></p>
<p>下载的文件解压之后会有一个  KnownWords.cpf<br>文本文件，里面的单词是用于过滤已知单词的，可以用任意的文本编辑器把它清空，然后积累您自己的过滤词库。</p>
<p>本程序需要  .NET 2.0</p>
]]></content>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>使用AvalonDock制作WPF多标签浏览器（一）</title>
    <url>/blog/2010/03/15/%E4%BD%BF%E7%94%A8AvalonDock%E5%88%B6%E4%BD%9CWPF%E5%A4%9A%E6%A0%87%E7%AD%BE%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>AvalonDock  是  CodePlex  上的一个开源项目，利用它可以很容易的做出类似于  VS  的  UI  效果。</p>
<p>下图是  AvalonDock  源码中自带的一个  Demo  ：<br><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-15_21-01-24.jpg"></p>
<p>我们可以用这款第三方控件为基础来制作多标签浏览器。</p>
<p>下面是最终效果图：</p>
<p><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-15_21-46-42.jpg"></p>
<p>甚至可以把其中一个标签拖出主窗体成为一个独立的窗口：</p>
<p><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-15_21-49-41.jpg"></p>
<p>是不是很像  VS2010  中新的  TextEditor  啊，呵呵。</p>
<p>但是观察一下常用的浏览器，比如  IE  ：</p>
<p><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-15_21-08-15.jpg"></p>
<p>Chrome  ：</p>
<p><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-15_21-06-04.jpg"></p>
<p>FireFox  ：</p>
<p><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-15_21-06-25.jpg"></p>
<p>它们都有一个添加新标签的按钮，但是  AvalonDock  的  DocumentPane  默认并没有新建一个  DocumentContent的按钮。</p>
<p>DocumentPane  和  DocumentContent  是  AvalonDock  中众多类型中的两个，  DocumentPane  是<br>DocumentContent  的父级容器，  DocumentContent  中则可以置入任何  UI  元素，比如说一个  WebBrowser<br>。</p>
<p>所以我们的第一步就从给  AvalonDock  的  DocumentPane  写一个添加新  DocumentContent  的按钮开始吧。</p>
<p>首先  ReStyle  ，从  AvalonDock  的源码中找到  DocumentPaneStyles.xaml  这个文件，定位到</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;PART_ShowContextMenuButton&quot;</span> <span class="attr">DockPanel.Dock</span>=<span class="string">&quot;Right&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;18&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">Height</span>=<span class="string">&quot;18&quot;</span> <span class="attr">Style</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;StaticResource PaneHeaderCommandStyle&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">mce_Style</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;StaticResource PaneHeaderCommandStyle&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">Command</span>=<span class="string">&quot;ad:DocumentPane.ShowDocumentsListMenuCommand&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ad:AlignedImage</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Image</span> <span class="attr">x:Name</span>=<span class="string">&quot;ShowContextMenuIcon&quot;</span> <span class="attr">Source</span>=<span class="string">&quot;Images/PinMenu.png&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;13&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">               <span class="attr">Height</span>=<span class="string">&quot;13&quot;</span> <span class="attr">Stretch</span>=<span class="string">&quot;Uniform&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ad:AlignedImage</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这段代码</p>
<p>紧接着这段代码添加如下代码：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">DockPanel.Dock</span>=<span class="string">&quot;Right&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;18&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;18&quot;</span> <span class="attr">Style</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;StaticResource</span></span><br><span class="line"><span class="template-variable">PaneHeaderCommandStyle&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">mce_Style</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;StaticResource PaneHeaderCommandStyle&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">Command</span>=<span class="string">&quot;ad:DocumentPane.AddNewCommand&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ad:AlignedImage</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Image</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Source</span>=<span class="string">&quot;Images/add.png&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;13&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;13&quot;</span> <span class="attr">Stretch</span>=<span class="string">&quot;Uniform&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ad:AlignedImage</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>其中的  add.png  是我从网上随便找的一个加号的图片；</p>
<p>其中的  ad:DocumentPane.AddNewCommand  是紧接下来我们要给  DocumentPane  添加的一个  Command  。</p>
<p>找到  DocumentPane.cs  文件并添加代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RoutedCommand AddNewCommand = <span class="keyword">new</span> RoutedCommand();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function">    <span class="title">ExecutedAddNewCommand</span>(<span class="params"><span class="built_in">object</span> sender, ExecutedRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    AddNew();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddNew</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    DocumentContent newContent = <span class="keyword">new</span> DocumentContent();</span><br><span class="line">    newContent.Title = <span class="string">&quot;new content&quot;</span>;</span><br><span class="line">    newContent.IsFloatingAllowed = <span class="literal">true</span>;</span><br><span class="line">    Items.Add(newContent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CanExecuteAddNewCommand</span>(<span class="params"><span class="built_in">object</span> sender,</span></span></span><br><span class="line"><span class="params"><span class="function">    CanExecuteRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    e.CanExecute = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再在其  OnInitialized  方法中添加如下一句：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>  .CommandBindings.Add(  <span class="keyword">new</span>  CommandBinding(AddNewCommand,</span><br><span class="line">ExecutedAddNewCommand, CanExecuteAddNewCommand));</span><br></pre></td></tr></table></figure>

<p>这样我们就给  DocumentPane  添加了一个加号按钮并把它和  AddNewCommand  这个命令联系了起来，点击按钮时我们添加的<br>AddNew  方法就会执行。由于  DocumentPane  是  WPF  中  Selector  的子类，而  Selector  又继承自<br>ItemsControl  ，所以  DocumentPane  会有一个  Items  属性，我们在  AddNew  方法中做的就是给其  Items<br>中塞进一个新的  DocumentContent  。</p>
<p>这时再次运行  AvalonDock  自带的  Demo  ，可以看见右侧有一个小加号按钮，点击按钮则可以新建标签页：</p>
<p><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-15_21-34-27.jpg"></p>
<p>OK  ！第一步搞定了。</p>
<p>但是每一个标签都是空的，下一步要给每个标签中添加一个  WebBrowser  。</p>
<p>是不是修改一下前面添加的  AddNew  方法，在里面  new up  一个  WebBrowser  呢，不太好，这样感觉不是在修改而是在破坏<br>AvalonDock  的源码，毕竟  AvalonDock  是一个控件库，添加一个新标签时，其默认行为就应该是让标签为空。</p>
<p>给每个新添加的空标签中置入一个  WebBrowser  应该是在客户代码中做的事儿。</p>
<p>这部分明天再写吧，洗洗去看  10-4 show  了。（挺好看的视频，讲  VS2010  和  .Net 4 new features  的：<br><a href="http://channel9.msdn.com/shows/10-4/">http://channel9.msdn.com/shows/10-4/  </a></p>
<p>Over and out  ！  Ciao  ！</p>
]]></content>
      <tags>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>使用AvalonDock制作WPF多标签浏览器（二）</title>
    <url>/blog/2010/03/16/%E4%BD%BF%E7%94%A8AvalonDock%E5%88%B6%E4%BD%9CWPF%E5%A4%9A%E6%A0%87%E7%AD%BE%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>闲话少叙，书接上文。</p>
<p>现在我们已经通过  ReStyle  给  DocumentPane  加上了一个加号的按钮，并且可以通过点击该按钮给  DocumentPane  的<br>Items  添加一个  DocumentContent  了。</p>
<p>不过每个新添加进来的  DocumentContent  内部都是空的，而我们需要的是每个新标签中都有一个  WebBrowser<br>，要实现这一点很简单，只要给  DocumentContent  的  Content  （  DocumentContent  是<br>ContentControl  的子类）属性赋值为一个  WebBrowser  的实例就  OK  了。</p>
<p>但是这不应该是  AvalonDock  的默认行为，所以我们要把这部分写到客户端  –  也就是引用  AvalonDock.dll<br>文件或者直接引用  AvalonDock  工程的  Solution  中去。</p>
<p>如何可以在客户端得知有一个新的  DocumentContent  被添加进  DocumentPane  中去了呢？自然是用事件了。</p>
<p>首先来写一个自定义的  EventArgs  吧：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewContentAddedEventArgs</span> : <span class="type">EventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span></span><br><span class="line">        NewContentAddedEventArgs(DocumentContent addedContent)</span><br><span class="line">    &#123;</span><br><span class="line">        AddedContent =</span><br><span class="line">            addedContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DocumentContent AddedContent &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个名为  NewContentAddedEventArgs  的事件参数的构造方法会要求一个  DocumentContent<br>，其实也就是被添加的那个新标签了。</p>
<p>这样订阅其对应事件的客户代码就可以得到一个指向新添加的标签的引用，当然就可以将其  Content  设置为一个新的  WebBrowser  的实例了。</p>
<p>接下来在  DocumentPane  中定义一个使用刚写好的事件参数的事件：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;NewContentAddedEventArgs&gt; NewContentAdded;</span><br></pre></td></tr></table></figure>

<p>接下来，遵照规范写一个  OnNewContentAdded  方法，以免在没人订阅事件的时候试图触发事件而抛异常：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnNewContentAdded</span>(<span class="params">NewContentAddedEventArgs <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">        (NewContentAdded != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        NewContentAdded(<span class="keyword">this</span>, <span class="keyword">args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再然后在我们之前写的  AddNew  方法中调用  OnNewContentAdded  方法就  OK  了，修改后的  AddNew  方法是这样的：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">private void AddNew()</span><br><span class="line">&#123;</span><br><span class="line">    DocumentContent newContent <span class="operator">=</span> new DocumentContent()<span class="comment">;</span></span><br><span class="line">    newContent.Title <span class="operator">=</span> <span class="string">&quot;new content&quot;</span><span class="comment">;</span></span><br><span class="line">    newContent.IsFloatingAllowed <span class="operator">=</span> true<span class="comment">;</span></span><br><span class="line">    Items.Add(newContent)<span class="comment">;</span></span><br><span class="line">    OnNewContentAdded(new</span><br><span class="line">        NewContentAddedEventArgs(newContent))<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就可以开始着手写客户代码了。</p>
<p>首先在  XAML  中添加对  AvalonDock  的引用：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">xmlns:</span>Avalon=<span class="string">&quot;clr-namespace:AvalonDock;assembly=AvalonDock&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后再在主体中添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Avalon:DockingManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Avalon:DocumentPane</span> <span class="attr">Name</span>=<span class="string">&quot;mainPane&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">NewContentAdded</span>=<span class="string">&quot;DocumentPane_NewContentAdded&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Avalon:DocumentContent</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Title</span>=<span class="string">&quot;Default Tab&quot;</span> <span class="attr">GotFocus</span>=<span class="string">&quot;DocumentContent_GotFocus&quot;</span> <span class="attr">IsCloseable</span>=<span class="string">&quot;False&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">IsFloatingAllowed</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WebBrowser</span> <span class="attr">Name</span>=<span class="string">&quot;defaultBrowser&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Source</span>=<span class="string">&quot;http://www.google.cn/webhp?hl=zh-CN&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">WebBrowser</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Avalon:DocumentContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Avalon:DocumentPane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Avalon:DockingManager</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中的  DockingManager  是  AvalonDock  中的“总管”，其详细使用方法请看：<br><a href="http://avalondock.codeplex.com/">http://avalondock.codeplex.com/  </a></p>
<p>上面的代码中可以看到，我们给  DocumentPane  新加的  NewContentAdded  事件已经挂到了一个叫做<br>DocumentPane_NewContentAdded  的方法上。该方法的定义很简单：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DocumentPane_NewContentAdded</span>(<span class="params"><span class="built_in">object</span> sender,</span></span></span><br><span class="line"><span class="params"><span class="function">    NewContentAddedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DocumentContent newContent = e.AddedContent;</span><br><span class="line">    newContent.Title = <span class="string">&quot;New Tab&quot;</span>;</span><br><span class="line">    newContent.GotFocus += DocumentContent_GotFocus;</span><br><span class="line">    newContent.Content = <span class="keyword">new</span> WebBrowser</span><br><span class="line">    &#123;</span><br><span class="line">        Source = <span class="keyword">new</span></span><br><span class="line">            Uri(<span class="string">@&quot;http://www.google.cn&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是把一个打开  Google  首页的  WebBrowser  实例赋值给新添加的标签页的  Content  属性。</p>
<p>里面还有一句：</p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">newContent.GotFocus +</span>=<span class="string"> DocumentContent_GotFocus;</span></span><br></pre></td></tr></table></figure>

<p>其中的  DocumentContent_GotFocus  定义如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DocumentContent_GotFocus</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DocumentContent selectedOne = s <span class="keyword">as</span> DocumentContent;</span><br><span class="line">    <span class="keyword">if</span> (selectedOne != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        WebBrowser browser = selectedOne.Content <span class="keyword">as</span> WebBrowser;</span><br><span class="line">        <span class="keyword">if</span> (browser != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            browser.Source != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            currentBrowser = browser;</span><br><span class="line">            url.Text =</span><br><span class="line">                browser.Source.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是做什么用的呢？</p>
<p>我们用浏览器打开多个标签页的时候程序中就会存在多个  WebBrowser  的实例，这时如果在地址栏中输入一个地址并回车的话，怎么知道到底应该把哪个<br>WebBrowser  重定向到输入的地址呢？</p>
<p>所以程序中应该有一个  WebBrowser  的引用，假设叫做  currentBrowser  吧，它始终指向当前选中标签中的  WebBrowser<br>实例。</p>
<p>上面的代码做的就是这个工作，当一个标签页得到焦点的时候，就让  currentBrowser  指向该标签页中的  WebBrowser<br>实例，并把一个叫做  url  的  TextBox  （也就是地址栏了）的  Text  属性设置为当前  Browser  打开的地址  。</p>
<p>当然，这个叫做  url  的地址栏的  KeyDown  事件的处理方法中应该把  currentBrowser<br>重定向到输入的网址，这段代码很简单，就不贴了。</p>
<p>现在运行一下，似乎  OK  了，真的完事儿了吗？</p>
<p>呵呵，没有。</p>
<p>试一下打开两个标签，把其中的第二个拖拽到主区域的右侧去，从而将主区域一分为二：</p>
<p><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-16_20-50-08.jpg"></p>
<p>在右侧新分化出来的区域中点击加号小按钮新建另一个标签，切换到新标签。</p>
<p>啊哦  ~~~~~</p>
<p><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-16_20-51-40.jpg"></p>
<p>新标签是空的，不是明明已经在每个新标签被添加时给其中加上一个  WebBrowser  了吗？咋没有捏？这究竟是哪儿来的  Bug  呢？</p>
<p>再注意观察一下，这个新标签的标题是  new content  而不是  New Tab  ，呵呵，是不是已经猜到了呢？</p>
<p>其实这是和  AvalonDock  中的另一个类  –  DocumentFloatingWindow  有关的问题。</p>
<p>怎么解决这个问题明天再说吧。</p>
<p>Over and out  ！</p>
]]></content>
      <tags>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>用AvalonDock制作WPF多标签浏览器（三）</title>
    <url>/blog/2010/03/17/%E7%94%A8AvalonDock%E5%88%B6%E4%BD%9CWPF%E5%A4%9A%E6%A0%87%E7%AD%BE%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p> 昨天遇到了一个  Bug  ，如果在浏览器中打开多个标签，并把其中一个标签拖拽到主窗口的一侧来划分出独立的一个区域，然后在新区域中通过点击加号键添加的新标签内不会被添加上  WebBrowser  。  </p>
<p> 说得好绕嘴啊，截张图吧：  </p>
<p> <img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-17_21-21-44.jpg"></p>
<p> 而且没有加上  WebBrowser  的标签的标题是  new content  （我们在  AvalonDock  中给新标签的默认标题）而不是  New Tab  （客户代码中重新赋的值）。  </p>
<p> OK  ，问题明了了，是不是新添加的标签的  Got_Focus  没能够挂到客户代码中的方法上去呢？  </p>
<p> 的确是这样，当我们把一个标签（  DocumentContent  ）拖拽到一侧从而划分出一个新区域的时候，  AvalonDock  会创建一个新的  DocumentPane  来代表这个新区域。  </p>
<p> 我们浏览器中默认的  DocumentPane  是在  XAML  中声明的，声明时其  NewContentAdded</p>
<p> 事件就挂到了事件响应方法DocumentPane_NewContentAdded上。  </p>
<p> 而这个新区域中的  DocumentPane  是在  AvalonDock  内部的  DocumentFloatingWindow类中创建的，其事件自然没有挂上来。  </p>
<p> 知道了这些，解决方案自然就有了。  </p>
<p> 在DocumentFloatingWindow中添加如下事件：  </p>
<p> public static event EventHandler<NewDocumentPaneAddedByMouseEventArgs> NewDocumentPaneAddedByMouse;</p>
<p> 其中用到的事件参数定义如下：  </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewDocumentPaneAddedByMouseEventArgs</span> : <span class="type">EventArgs</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> NewDocumentPaneAddedByMouseEventArgs(DocumentPane addedPane) &#123; AddedPane = addedPane; &#125;</span><br><span class="line">   <span class="keyword">public</span> DocumentPane AddedPane &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p> 依然尊规范在DocumentFloatingWindow中定义如下方法来触发事件：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnNewDocumentPaneAddedByMouse</span>(<span class="params">NewDocumentPaneAddedByMouseEventArgs <span class="keyword">args</span></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (NewDocumentPaneAddedByMouse != <span class="literal">null</span>) &#123;</span><br><span class="line">       NewDocumentPaneAddedByMouse(<span class="keyword">this</span>, <span class="keyword">args</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 并在DocumentFloatingWindow中的ClonePane方法（鼠标拖拽时创建新  DocumentPane  的工作就是在这个方法中做的）中调用该方法来触发事件，修改后的  ClonePane方法是这样的：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Pane <span class="title">ClonePane</span>()</span> &#123;</span><br><span class="line"> DocumentPane paneToAnchor = <span class="keyword">new</span> DocumentPane();</span><br><span class="line"> OnNewDocumentPaneAddedByMouse(<span class="keyword">new</span> NewDocumentPaneAddedByMouseEventArgs(paneToAnchor));</span><br><span class="line"> ResizingPanel.SetEffectiveSize(paneToAnchor, <span class="keyword">new</span> Size(Width, Height));</span><br><span class="line"> <span class="keyword">while</span> (HostedPane.Items.Count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  paneToAnchor.Items.Add(HostedPane.RemoveContent(<span class="number">0</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> paneToAnchor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 我们只关心其中的OnNewDocumentPaneAddedByMouse(new NewDocumentPaneAddedByMouseEventArgs(paneToAnchor));  这一句就OK了。  </p>
<p> 好了，现在每当因鼠标拖拽而创建出一个新的  DocumentPane  时，都有一个事件会被触发，而且其传递的事件参数中还含有对新添加的  DocumentPane  实例的引用。这样订阅事件的地方（比如说我们的客户代码中）就可以通过该引用来把新添加的  DocumentPane  的  NewContentAdded事件挂到某个方法上了（当然就是我们的DocumentPane_NewContentAdded方法了）。  </p>
<p> 接下来修改客户代码吧：  </p>
<p> 在浏览器窗口的构造方法中添加下面一句：  </p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">DocumentFloatingWindow.NewDocumentPaneAddedByMouse += <span class="function"><span class="params">(object sender, NewDocumentPaneAddedByMouseEventArgs e)</span> =&gt;</span> &#123;</span><br><span class="line"> e.AddedPane.NewContentAdded += DocumentPane_NewContentAdded;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p> 用了  lambda  表达式，有点长，不过的确还只是一句啊。  </p>
<p> 这样每个通过鼠标拖拽出来的  DocumentPane  就和我们在  XAML  中声明的  DocumentPane  没什么两样了，它们的  NewContentAdded 事件都挂到了DocumentPane_NewContentAdded方法上，这个方法做什么的来着？它做的就是给每一个新标签中置入一个新的  WebBrowser  。</p>
<p> 好了，现在再运行一下，之前的问题不见了。  </p>
<p> 另外，如果你在使用  Win7  的话，把某个新标签拖拽出窗口，右击，选择  Floating  </p>
<p> <img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-17_21-58-17.jpg"></p>
<p> 然后就可以把这个拖拽出来的标签  Dock  到屏幕的一侧了  </p>
<p> <img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/2010-03-17_21-59-16.jpg"></p>
<p> 那个玻璃化的框框好漂亮啊，呵呵。  </p>
<p> 好了，到现在为止我们的多标签浏览器基本就运转起来了。如果您发现其中隐含的  Bug  或者不妥之处请不吝赐教哈！  </p>
<p> 另外，  AvalonDock  有两套  Theme  ，我们之前的  Restyle  只修改了  DocumentPaneStyles.xaml  ，要在  Win7  下看到想要的效果还要对  aero.normalcolor.xaml  做同样的修改。</p>
<p> 好了，  Over and out  ！  </p>
<p>代码下载： <a href="http://download.csdn.net/source/2137819"> http://download.csdn.net/source/2137819</a></p>
]]></content>
      <tags>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>MEF编程指南（前两节）</title>
    <url>/blog/2010/05/22/MEF%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97%EF%BC%88%E5%89%8D%E4%B8%A4%E8%8A%82%EF%BC%89/</url>
    <content><![CDATA[<p>MEF编程指南（前两节）</p>
<p>在应用程序中使用MEF</p>
<p>在应用程序中使用MEF需要创建一个CompositionContainer的实例，向其中添加可组合的部件，将宿主应用包含进去然后组合。</p>
<p>以下是使用MEF需要用到的步骤：</p>
<p>1、  创建一个宿主类。在接下来的示例中，我们将会使用一个控制台应用，所以宿主也就是Program类了。</p>
<p>2、  引用System.ComponentModel.Composition程序集</p>
<p>3、  添加如下using语句：using System.ComponentModel.Composition;</p>
<p>4、  添加一个Compose（）方法，它创建容器的实例并做组合的工作</p>
<p>5、  添加一个Run（）方法，它会调用Compose（）  方法</p>
<p>6、  在Main（）方法中实例化宿主类</p>
<p>注意：在ASP.NET和WPF中无需这一步，因为宿主类是由运行时初始化的。</p>
<p>下面的代码演示了代码的样式。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.Composition;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel.Composition.Hosting;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span> &#123;</span><br><span class="line">  Program p = <span class="keyword">new</span> Program();</span><br><span class="line">  p.Run();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span> &#123;</span><br><span class="line">  Compose();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">private</span></span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">Compose</span>()</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> container = <span class="keyword">new</span> CompositionContainer();</span><br><span class="line">  container.ComposeParts(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、  定义一个或多个宿主可以导入（import）的导出（exports）。下面的代码中我们将会创建一个叫做IMessageSender的接口。我么还会定义<br>一个可组合组件–EmailSender类，它通过使用[System.ComponentModel.Composition.Export]特性来导出了一个IMessageSender。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">IMessageSender</span> &#123;</span><br><span class="line"> <span class="built_in">void</span> Send(<span class="built_in">string</span> message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Export(typeof(IMessageSender))]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">EmailSender: <span class="symbol">IMessageSender</span></span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">void</span> Send(<span class="built_in">string</span> message) &#123;</span><br><span class="line">  Console.WriteLine(message);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8、  给宿主类添加属性，每个属性都被[  System.ComponentModel.Composition.Import]修饰。如下就是给Program类添加的一个IMessegeSender类型的导入。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Import</span>]</span><br><span class="line"><span class="keyword">public</span> IMessageSender MessageSender &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>9、  向容器中添加可组合部件。在MEF中有多种方式可以向容器中添加可组合部件。其中一种就是直接添加可组合部件的实例，还有一种更常用的方式是通过使用目录（catalog），我们稍后将会讲解这一点。</p>
<p>向容器中直接添加组件</p>
<p>在Compose（）方法中通过使用ComposeParts（）方法来手动添加可组合组件。下面的例子中，一个EmailSender的实例和需要导入它的Program类的实例被添加进了容器中去了。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> Compose() &#123;</span><br><span class="line"> <span class="built_in">var</span> <span class="built_in">container</span> = <span class="keyword">new</span> CompositionContainer();</span><br><span class="line"> <span class="built_in">container</span>.ComposeParts(<span class="keyword">this</span>, <span class="keyword">new</span> EmailSender());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用AssemblyCatalog来向容器中添加可组合组件</p>
<p>通过使用catalog，容器可以自动创建组件的实例而不需要我们显式的去添加它们。在Compose（）方法中创建一个catalog。然后把它传入到容器的构造方<br>法中去。</p>
<p>下面的例子中，我们通过把当前程序集传入其构造方法中去来创建了一个AssemblyCatalog。我们没有手动添加EmailSender的实例，它将会被自动发<br>现。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> Compose() &#123;</span><br><span class="line"> <span class="built_in">var</span> catalog = <span class="keyword">new</span> AssemblyCatalog(System.Reflection.Assembly.GetExecutingAssembly());</span><br><span class="line"> <span class="built_in">var</span> <span class="built_in">container</span> = <span class="keyword">new</span> CompositionContainer(catalog);</span><br><span class="line"> <span class="built_in">container</span>.ComposeParts(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成上面各个步骤之后，现在代码应该是如下的样式。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.Composition;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel.Composition.Hosting;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"> [<span class="meta">Import</span>]</span><br><span class="line"> <span class="keyword">public</span> IMessageSender MessageSender &#123;</span><br><span class="line">  <span class="keyword">get</span>;</span><br><span class="line">  <span class="keyword">set</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span> &#123;</span><br><span class="line">  Program p = <span class="keyword">new</span> Program();</span><br><span class="line">  p.Run();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span> &#123;</span><br><span class="line">  Compose();</span><br><span class="line">  MessageSender.Send(<span class="string">&quot;Message Sent&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Compose</span>()</span> &#123;</span><br><span class="line">  AssemblyCatalog catalog = <span class="keyword">new</span> AssemblyCatalog(Assembly.GetExecutingAssembly());</span><br><span class="line">  <span class="keyword">var</span> container = <span class="keyword">new</span> CompositionContainer(catalog);</span><br><span class="line">  container.ComposeParts(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMessageSender</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Export(typeof(IMessageSender))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmailSender</span>: <span class="title">IMessageSender</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message</span>)</span> &#123;</span><br><span class="line">  Console.WriteLine(message);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码编译并运行时，应用程序和它需要的导入将会被组合起来。Send（）方法将会被调用，从而在控制台输出“Message Sent”。</p>
<p>定义可组合部件和契约</p>
<p>可组合部件</p>
<p>可组合部件可以导出其他部件需要的服务，也可以导入其他部件提供的服务。在MEF中可组合部件需要使用<br>System.ComponentModel.Composition.Import和<br>System.ComponentModel.Composition.Export来定义其导入和导出。一个可组合部件应该至少包含一个导出。可组合部件可能会<br>是被显式的添加进容器中去，也可能是通过使用catalog被创建的。MEF发布时带有的默认catalog可以通过Export特性来识别可组合部件。</p>
<p>契约</p>
<p>可组合部件并非是直接依赖于彼此，它们都依赖于一个契约，也就是一个标示字符串。每个导出都会有一个契约，而导入需要声明它需要哪个契约。容器通过使用契约信息来匹配<br>导入和导出。如果没有指明契约，MEF将会默认使用类型的全限定名作为契约。如果导出中传入了一个类型，MEF也将会使用全限定名。</p>
<p>下面的代码中出现的所有导出契约都是等价的。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">namespace MEFSample &#123;</span><br><span class="line"> [Export] public <span class="class"><span class="keyword">class</span> <span class="title">Exporter</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;</span><br><span class="line"> [Export(typeof(Exporter))] public <span class="class"><span class="keyword">class</span> <span class="title">Exporter1</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;</span><br><span class="line"> [Export(<span class="string">&quot;MEFSample.Exporter&quot;</span>)] public <span class="class"><span class="keyword">class</span> <span class="title">Exporter2</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口&#x2F;抽象契约</p>
<p>通常一个可组合部件导出的都是接口或者抽象类型，而不是具体类型。比如如下的代码中，有两个类都导出了IMessageSender。Notifier类导入一组IM<br>essageSender，并调用其中每一项的Send（）方法。现在新的信息发送器可以很容易的被添加到系统中去。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[Export(typeof(IMessageSender))]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">EmailSender: <span class="symbol">IMessageSender</span></span> &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Export(typeof(IMessageSender))]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">TCPSender: <span class="symbol">IMessageSender</span></span> &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Notifier</span> &#123;</span><br><span class="line"><span class="string"> [ImportMany]</span></span><br><span class="line"> <span class="keyword">public</span> IEnumerable &lt; IMessageSender &gt; Senders &#123;</span><br><span class="line">  <span class="keyword">get</span>;</span><br><span class="line">  <span class="keyword">set</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">void</span> Notify(<span class="built_in">string</span> message) &#123;</span><br><span class="line">  foreach(IMessageSender sender <span class="keyword">in</span> Senders) sender.Send(message);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET 4.0 FAQ 第一部分—DLR</title>
    <url>/blog/2010/05/22/NET40FAQ%20%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86DLR/</url>
    <content><![CDATA[<p>.NET 4.0 FAQ 第一部分—DLR</p>
<p>简介</p>
<p>本篇文章中我们将讨论.NET FrameWork 4.0提供了哪些新特性。然后再探讨DLR特性  中的动态对象和Expando对象。我们也将会创建一个Exp<br>ando对象来看我们可以从中获得哪些益处。很多的开发人员误以为动态对象是用来替代反射和object类型的，我们也将会纠正这种错误的概念。</p>
<p>.NET 4.0中有哪些重要的新特性？</p>
<p>与其去浏览.NET 4.0冗长的新特性列表，我们还是专注于我们认为最重要的三项新特性上吧。</p>
<p>•  WF和WCF 4.0：这是.NET</p>
<p>4.0中的一个重大改变。WCF中引入了简化的配置、发现和路由服务。WF的核心编程模型也得到了改变，变得更加简易和健壮。最重大事件的就是WCF和WF的整合。</p>
<p>•  动态语言运行时：DLR给.NET 4.0的CLR赋予了动态编程的能力。我们将会在文章接下来的部分探讨这一点。</p>
<p>•  并行扩展：这有助于多核系统中的并行计算。.NET 4.0的LinQ中添加了PLinQ来支持并行执行。.NET 4.0引入了TPL（Task<br>parallel library），其中暴露了像并行的“For”和“ForEach”等并行构造，它们可以调用普通方法或者委托。</p>
<p>接下来我们将详细讲述以上提到新特性。</p>
<p>DLR在.NET 4.0中扮演何种角色呢？</p>
<p>DLR（Dynamic language runtime）是一组服务，它给CLR赋予了动态编程的能力。DLR使得像LISP、JavaScript、PHP、Ruby一样的动态语言可以运行在.NET<br>FrameWork上。</p>
<p><img data-src="http://www.codeproject.com/KB/dotnet/DOTNETre4pt0/1.JPG"></p>
<p>编程语言分为动态类型语言和静态类型语言。在静态类型语言中，你需要在编译时或者说是设计时指明对象的类型。而动态类型语言可以在运行时识别对象的类型。DLR使得C<br>LR能够作为动态语言代码运行的宿主环境。</p>
<p><img data-src="http://www.codeproject.com/KB/dotnet/DOTNETre4pt0/2.JPG"></p>
<p>有了DLR，Ruby、Python、JavaScript等动态语言就可以无缝的运行在CLR之上了。DLR还有助于为你最喜欢的动态语言来构建最佳体验。这样，你<br>的与动态语言交互的代码就会变得更加简洁。</p>
<p><img data-src="http://www.codeproject.com/KB/dotnet/DOTNETre4pt0/3.JPG"></p>
<p>DLR并不仅限于动态语言。你也可以通过使用COM Interop Binder来以一种更加简洁的方式去调用MS Office组件。</p>
<p>DLR的一大优势就是它为动态语言提供了一个子系统。</p>
<p>可以讲讲DLR子系统的细节吗？</p>
<p>DLR有三个基本子系统：</p>
<p>•  表达式树：我们可以用它来以AST（抽象语法树）的方式表达语义。DLR会动态生成使用AST的代码，这些代码可以在CLR之上执行。JavaScript和R<br>uby等动态语言可以运行在CLR之上很大程度上得是益于表达式树的助力。</p>
<p>•  调用栈缓存：当你调用动态对象的方法时，DLR会把那些方法调用的信息都缓存起来。在后续的调用中，DLR就会使用这些缓存起来的信息来完成快速调度。</p>
<p>•  动态对象互操作性（DOI）：DOI系统中包含一组用来创建动态对象的类。开发人员可以使用这些类来创建可以在动态语言或者静态语言中使用的动态对象。</p>
<p>接下来我们会对上述的新特性做详细讲解。</p>
<p><img data-src="http://www.codeproject.com/KB/dotnet/DOTNETre4pt0/4.JPG"></p>
<p>我们该如何使用动态语言的对象，又该如何向动态语言暴露一个类呢？</p>
<p>要使用一个DLR支持的语言创建的对象，我们可以使用dynamic关键字。而要向动态语言暴露一个类，我们可以使用Expando类。</p>
<p>所以如果你想要使用一个诸如由Python、Ruby或者JavaScript等动态语言创建的对象的话，你就可以使用dynamic的引用来指向该对象。如果你想要<br>让你的类可以被动态语言使用，你的类就需要继承自Expando类。我们稍后就会看到这两种例子。</p>
<p><img data-src="http://www.codeproject.com/KB/dotnet/DOTNETre4pt0/41.JPG"></p>
<p>（上图中文字：Dynamic对象有助于使用动态语言创建的对象。Expando对象有助于向动态语言暴露一个类。）</p>
<p>有什么Dynamic对象的例子吗？</p>
<p>我们已经讲过Dynamic对象有助于去访问由受DLR支持的动态语言创建的对象。dynamic关键字是DOI子系统的一部分。</p>
<p>如果你把一个对象赋值给一个dynamic类型的变量的话（dynamic x &#x3D; new<br>SomeClass（）），所有对x的方法的调用，对x的属性的访问，以及对x的运算符操作都会被延迟到运行时去，而且编译器在编译时不会对x做任何的类型检查。</p>
<p>考虑下面的代码片段，我们在其中试着去调用excel的方法。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// <span class="keyword">Get</span> the running <span class="keyword">object</span> <span class="keyword">of</span> the excel application</span><br><span class="line"><span class="keyword">object</span> objApp = <span class="keyword">System</span>.Runtime.InteropServices.Marshal.GetActiveObject(&quot;Excel.Application&quot;);</span><br><span class="line">// Invoke the member dynamically</span><br><span class="line"><span class="keyword">object</span> x = objApp.GetType().InvokeMember(&quot;Name&quot;, <span class="keyword">System</span>.Reflection.BindingFlags.GetProperty, <span class="keyword">null</span>, objApp, <span class="keyword">null</span>);</span><br><span class="line">// Finally <span class="keyword">get</span> the <span class="keyword">value</span> <span class="keyword">by</span> <span class="keyword">type</span> casting</span><br><span class="line">MessageBox.<span class="keyword">Show</span>(x.ToString());</span><br></pre></td></tr></table></figure>

<p>使用dynamic关键字来完成相同功能的代码。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// <span class="keyword">Get</span> the <span class="keyword">object</span> <span class="keyword">using</span> dynamic objApp1 =</span><br><span class="line"><span class="keyword">System</span>.Runtime.InteropServices.Marshal.GetActiveObject(&quot;Excel.Application&quot;);</span><br><span class="line">// <span class="keyword">Call</span> the MessageBox.<span class="keyword">Show</span>(objApp1.Name);</span><br></pre></td></tr></table></figure>

<p>你可以很清楚地发现访问属性的语法的简化。InvokeMember这个方法含义模糊而且容易出错。使用dynamic关键字，我们可以看到代码得到了简化。</p>
<p><img data-src="http://www.codeproject.com/KB/dotnet/DOTNETre4pt0/5.JPG"></p>
<p>如果你试着在Visual Studio中查看x的属性，你将会得到提示说此表达式的值只有在运行时才可以被断定。</p>
<p><img data-src="http://www.codeproject.com/KB/dotnet/DOTNETre4pt0/6.JPG"></p>
<p>Dynamic、Object和反射这三者之间有何关系？</p>
<p>很多的开发人员认为引入Dynamic的目的就是要替换掉反射或者Object这种类型。其实dynamic的主要目的是在静态类型的语言中去无缝的访问动态语言创建<br>的对象。也正是由于这一点，它的部分目的与反射和object类型重合了。</p>
<p>由于dynamic可以简化代码并具有缓存的优势，它最终会替换掉反射和object类型。但是引入dynamic的初衷绝对不是要去代替反射和object类型，只<br>是它们的目的重合了而已。</p>
<p>Dynamic</p>
<p>Object &#x2F;  反射</p>
<p>Dynamic对象是DLR引擎提供的一个小特性，我们可以通过使用它来访问动态语言创建的对象。而DLR不仅使得动态语言创建的对象可以被访问，它还使得你的类可以<br>被暴露给动态语言。</p>
<p>反射和object类型只是用来引用未知类型。反射和object类型无法帮你把你的类暴露给其他语言。它们只是用来访问那些直到运行时才得知具体类型的对象的。</p>
<p>语法相当简单。</p>
<p>语法有点难。</p>
<p>因为有了方法访问的缓存，性能得以提升。</p>
<p>目前还没有对访问方法的缓存。</p>
<p>dynamic关键字有什么优缺点？</p>
<p>差的程序员即使使用最好的语言也会写出很差的代码，而好的程序员即使使用最差的编程语言也可以健步如飞。Dynamic关键字是一个减少复杂性的好工具，但是如果使用<br>不当的话，它就是个诅咒。</p>
<p>Dynamic关键字的优势有：</p>
<p>•  帮你与动态语言相交互。</p>
<p>•  消除混乱的反射代码并可以简化代码复杂度。</p>
<p>•  有方法访问的缓存，可以提升性能。</p>
<p>缺点：</p>
<p>•  当与强类型的类一起使用的时候可能会损害性能。</p>
<p>Expando对象是什么呢？</p>
<p>Expando对象是为交互性的另一端服务的，比如说它使得你的自定义类型可以在动态语言中被访问。所以你可以创建一个Expando类的实例并把它传递给像Ruby<br>、JavaScript、Python之类的动态语言。Expando对象有助于在运行时添加属性。它是动态属性包的一种高效实现。要想使用Expando对象，我们<br>首先要引入System.Dynamic命名空间。然后创建一个ExpandoObject的对象并把它赋值给一个用dynamic声明的引用。</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">dynamic obj <span class="operator">=</span> new ExpandoObject()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>要创建动态属性，我们只需要写出属性名并给它赋值。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">obj.Customername</span> = <span class="string">&quot;Some Customer Name&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>最后我们显示该值。</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MessageBox</span>.<span class="literal">Show</span>(obj.Customername)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>我们可以实现自己的Expando对象吗？</p>
<p>Expando对象在内部只是向一个集合中添加属性。所以你可以创建自己的Expando对象。</p>
<p>我们首先需要继承DynamicObject类。</p>
<figure class="highlight golo"><table><tr><td class="code"><pre><span class="line">public class clsMyExpando : <span class="keyword">DynamicObject</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如前所述，我们需要定义一个集合来存储属性。所以第二步我们就要创建一个字典对象来维护集合中的属性。</p>
<figure class="highlight golo"><table><tr><td class="code"><pre><span class="line">public class clsMyExpando : <span class="keyword">DynamicObject</span></span><br><span class="line">&#123;</span><br><span class="line">    Dictionary items= new Dictionary();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们现在可以使用TryGetMember和SetGetMember来定义我们的属性访问器。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">clsMyExpando</span>: <span class="title">DynamicObject</span> &#123;</span><br><span class="line"> Dictionary items = <span class="keyword">new</span> Dictionary();</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">TryGetMember</span>(<span class="params">GetMemberBinder binder, <span class="keyword">out</span> <span class="built_in">object</span> result</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> items.TryGetValue(binder.Name, <span class="keyword">out</span> result);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">TrySetMember</span>(<span class="params">SetMemberBinder binder, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">  items[binder.Name] = <span class="keyword">value</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们可以创建我们自己的Expando类的对象并把它赋值给dynamic类的引用。下面的代码片断中我们给一个叫做Name的动态属性赋了值。</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">dynamic obj <span class="operator">=</span> new clsMyExpando()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">obj.Name <span class="operator">=</span> <span class="string">&quot;Dynamic Property&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>使用自定义Expando对象有什么益处呢？</p>
<p>使用Expando对象可以提升性能。如果你的类有静态属性也有动态属性的话，你可以像如下代码一样的在自定义Expando类中创建静态属性。当该对象的静态属性被<br>访问的时候，它不会去调用字典的成员方法，这样也就增进了性能。DLR引擎会首先试着去访问属性名而不是去调用TryGetMember和SetGetMember。</p>
<p>如果你不需要动态属性也不需要和动态语言交互的话，就要避免使用自定义Expando类型。而如果你需要使用动态属性的话，一定要确保你是继承了DynamicObj<br>ect类的。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">clsMyExpando</span>: <span class="title">DynamicObject</span> &#123;</span><br><span class="line"> Dictionary items = <span class="keyword">new</span> Dictionary();</span><br><span class="line"> <span class="keyword">private</span> <span class="built_in">string</span> _Name;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> Name &#123;</span><br><span class="line">  <span class="keyword">get</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> _Name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> &#123;</span><br><span class="line">   _Name = <span class="keyword">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">TryGetMember</span>(<span class="params">GetMemberBinder binder, <span class="keyword">out</span> <span class="built_in">object</span> result</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> items.TryGetValue(binder.Name, <span class="keyword">out</span> result);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">TrySetMember</span>(<span class="params">SetMemberBinder binder, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">  items[binder.Name] = <span class="keyword">value</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IDynamicMetaObjectProvider和DynamicMetaObject是什么呢？</p>
<p>动态对象实现IDynamicMetaObjectProvider并返回DynamicMetaObject。这两个类型都是实现动态语言之间交互性的核心部分。</p>
]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>在.NET 4中调用GDAL库时遇到的问题及解决方法</title>
    <url>/blog/2010/07/31/%E5%9C%A8.NET%204%E4%B8%AD%E8%B0%83%E7%94%A8GDAL%E5%BA%93%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近需要在  .NET 4  的环境中调用  GDAL  库。  GDAL  本身是一套非托管类库，不过还好提供了托管的  Wrapper  。</p>
<p>这些托管的程序集被包含在了  FWTools  的安装包中，  FWTools  中带的版本依赖于  gdal_fw.dll，  gdal_fw.dll<br>是  GDAL  核心类库的修改版，而它依赖的其他非托管程序集太多了，加起来有  18M  左右。所以还是自己下载代码编译的好。</p>
<p><a href="http://www.cnblogs.com/nudtchengguo/archive/2008/09/01/1281622.html"> 这篇文章  </a><br>介绍了  1.4  版本的编译方法，该方法同样适用于现在的  1.7  版本。</p>
<p>编译好之后引用、调用、  Debug  都没问题，一切正常，但是如果用  Release  编译并在  VS  之外运行的话则会报出<br>AccessViolationException  ，异常信息提示说访问了受保护的内存。我的第一反应就是托管的  Wrapper  中用  P&#x2F;Invoke<br>调用了非托管程序集，而非托管程序集导致了这个问题。但是这个猜测并不能解释为什么只有在  .NET 4+Release+IDE<br>外运行的情况下才会出错的现象。</p>
<p>猜来猜去，找来找去找到了问题的所在：</p>
<p>GDAL  的托管  Wrapper  中有一个叫做  SWIGStringHelper<br>的类型，该类型的静态构造方法中执行了一些比较重要的初始化操作。另外一个叫做  OsrPINVOKE  的类中声明了一个  SWIGStringHelper<br>类型的私有静态字段，并在声明时就初始化了该字段，而且  OsrPINVOKE  中没有显式声明的静态构造。</p>
<p>把代码简化一下的话，大概是这样的：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OsrPINVOKE</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">static</span> SWIGStringHelper helper = <span class="keyword">new</span> <span class="built_in">SWIGStringHelper</span>();</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">DoSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;static method of OsrPINVOKE&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SWIGStringHelper</span> &#123;</span><br><span class="line"> <span class="function"><span class="type">static</span> <span class="title">SWIGStringHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//这里做了一些重要的初始化</span></span><br><span class="line">  <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;SWIGStringHelper static constructor &quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果有代码调用  DoSomething  ，我对这段代码执行顺序的估计是这样的：</p>
<p>OsrPINVOKE  的静态构造方法（里面初始化  helper  这个静态字段）；</p>
<p>SWIGStringHelper  的静态构造方法（输出字符串）；</p>
<p>SWIGStringHelper  的实例构造方法（里面啥也没有做）；</p>
<p>DoSomething  方法（输出字符串）。</p>
<p>所以应该是先输出  SWIGStringHelper static constructor  而后输出  static method of OsrPINVOKE  。</p>
<p>试着这样调用一下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span> &#123;</span><br><span class="line">    OsrPINVOKE.DoSomething();</span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>却发现如果用的  target framework  是  .net 4  ，用  release  编译并且在  VS  外运行的话，就会只输出<br>static method of OsrPINVOKE  ，感觉好像  SWIGStringHelper  的静态构造方法没有执行。而如果用的是  .net<br>2.0  、  3.5  ，或者是用  Debug  编译或是在  VS  里面运行的话都不会有问题。</p>
<p>难道是静态字段的初始化在  .NET 4  中变成  Lazy  的了？</p>
<p>事实证明真的是这样。所以要解决这个问题的话只要在  OsrPINVOKE  里面显示声明一个静态构造方法，把  new  SWIGStringHelper<br>();  这一句放到里执行就  OK  了。</p>
<p>如果您在  .NET 4  中调用  GDAL  时遇到了类似的问题，不妨试一下。</p>
<p>参考：</p>
<p><a href="http://social.microsoft.com/Forums/zh-CN/visualcshartzhchs/thread/2106ea8e-4889-45bf-82fd-55ab4b3e9aad"> http://social.microsoft.com/Forums/zh-CN/visualcshartzhchs/thread/2106ea8e-4889-45bf-82fd-55ab4b3e9aad</a></p>
<p><a href="http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/d3fb3454-b982-4357-bb6b-63f7eceee69b/#96f5cc6b-a31b-4ae2-b2f4-40a99e7581af"> http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/d3fb3454-b982-4357-bb6b-63f7eceee69b/#96f5cc6b-a31b-4ae2-b2f4-40a99e7581af </a></p>
<p>感谢：</p>
<p><a href="http://social.microsoft.com/Profile/zh-CN/?user=%E9%9F%A6%E6%81%A9%E5%8D%91%E9%84%99+v-zhewg&referrer=http://social.microsoft.com/Forums/zh-CN/visualcshartzhchs/thread/2106ea8e-4889-45bf-82fd-55ab4b3e9aad&rh=3+S0IPNMyaoqybEPxS/O8oGxE1rnXkgnV5TzDbFD8l0=&sp=forums"> 韦恩卑鄙  </a></p>
<p><a href="http://social.msdn.microsoft.com/Profile/en-US/?user=Nishant+Sivakumar&referrer=http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/d3fb3454-b982-4357-bb6b-63f7eceee69b/&rh=l2VXXiNmFo8zXPcoAvMKagv3hepQktGxdS+LbcJWXvw=&sp=forums"> Nishant Sivakumar </a></p>
]]></content>
      <tags>
        <tag>疑难</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF中ItemContainerStyle不适用的一种情况</title>
    <url>/blog/2010/09/13/WPF%E4%B8%ADItemContainerStyle%E4%B8%8D%E9%80%82%E7%94%A8%E7%9A%84%E4%B8%80%E7%A7%8D%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<p>WPF中的ItemsControl定义了  ItemContainerStyle  这一属性，顾名思义，该属性用来给<br>ItemsControl中包含的每一个Item的容器定义样式  。</p>
<p>比如在ListBox中这个容器就是ListBoxItem，在TabControl中这个容器就是TabItem。</p>
<p>下面是  ItemContainerStyle  的一种简单应用：</p>
<p>XAML：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Window</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">Name</span>=<span class="string">&quot;itemsControl&quot;</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Binding&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ListBox.ItemContainerStyle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;ListBoxItem&quot;</span>&gt;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;IsSelected&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;</span></span></span></span><span class="template-variable">&#123;Binding IsSelected, Mode=OneTime&#125;</span><span class="language-xml">&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ListBox.ItemContainerStyle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ListBox.ItemTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Binding Text&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ListBox.ItemTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ListBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在这段  XAML中  定义了一个ListBox，在其ItemTemplate中有一个TextBlock绑定到数据实体的Text属性上。在其<br>ItemContainerStyle  中将其每个<br>Item的IsSelected属性绑定到数据实体的IsSelected上。其数据实体的生成在下面的代码中：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">ComboBoxTest</span>: <span class="title">Window</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ComboBoxTest</span>()</span> &#123;</span><br><span class="line">  InitializeComponent();</span><br><span class="line">  itemsControl.DataContext = GetData();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="built_in">object</span> <span class="title">GetData</span>()</span> &#123;</span><br><span class="line">  Collection &lt; <span class="built_in">object</span> &gt; data = <span class="keyword">new</span> Collection &lt; <span class="built_in">object</span> &gt; ();</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">   data.Add(<span class="keyword">new</span> &#123;</span><br><span class="line">    Text = i.ToString(), IsSelected = i == <span class="number">5</span></span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了简单，没有单独定义实体类而是用了匿名对象。一共生成十个匿名实体，其中第五个的IsSelected设置为true，把这十个实体放入一个Collection<br>中赋值给控件的DataContext，这样XAML中对ItemsSource的绑定就会起效。当然，直接把这个Collection赋值给ItemsSource<br>也可以。</p>
<p>运行一下，结果和预期的一样，第五项被选中了。</p>
<p><img data-src="/images/attachment/201009/13/858_12843928840kEB.jpg"></p>
<p>试试把XAML中的ListBox换成TabControl，更换之后的XAML如下：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">......</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">TabControl</span> <span class="attr">Name</span>=<span class="string">&quot;itemsControl&quot;</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Binding&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">TabControl.ItemContainerStyle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;TabItem&quot;</span>&gt;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;IsSelected&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;</span></span></span></span><span class="template-variable">&#123;Binding IsSelected, Mode=OneTime&#125;</span><span class="language-xml">&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">TabControl.ItemContainerStyle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">TabControl.ItemTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Binding Text&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">TabControl.ItemTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">TabControl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>仅仅是把ListBox换成了TabControl，把ListBoxItem换成了TabItem而已，C#代码没有改。试着运行一下，结果还是和预期的一样，第五<br>项会被选中。</p>
<p><img data-src="/images/attachment/201009/13/858_12843928849j3S.jpg"></p>
<p>ListBox和TabControl都是间接继承自ItemsControl而直接继承自Selector的，那是不是所有Selector的子类都会有如上的行为<br>呢？</p>
<p>实际上不是，把Selector的另一个子类ComboBox拿出来试试。</p>
<p>仍然是只改XAML，不改C#代码，改完之后的XAML如下：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">......</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ComboBox</span> <span class="attr">Name</span>=<span class="string">&quot;itemsControl&quot;</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Binding&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ComboBox.ItemContainerStyle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;ComboBoxItem&quot;</span>&gt;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;IsSelected&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;</span></span></span></span><span class="template-variable">&#123;Binding IsSelected, Mode=OneTime&#125;</span><span class="language-xml">&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ComboBox.ItemContainerStyle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ComboBox.ItemTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Binding Text&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ComboBox.ItemTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ComboBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>运行之后的效果如下：</p>
<p><img data-src="/images/attachment/201009/13/858_1284392885MblZ.jpg"></p>
<p>可见启动后没有任何选中项。而只有当用鼠标将ComboBox展开时第五项才会被选中。对这种现象，我的猜测是因为  ItemContainerStyle<br>只有在所有  Item加载之后才会生效，而ComboBox默认情况下并不会把其Items展示出来，所以直到用鼠标将ComboBox展开时才会有选中效果。</p>
<p>对这种情况有一个不太完美的解决方案，把C#代码中的GetData方法修改如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">object</span> <span class="title">GetData</span>()</span> &#123;</span><br><span class="line"> Collection &lt; <span class="built_in">object</span> &gt; data = <span class="keyword">new</span> Collection &lt; <span class="built_in">object</span> &gt; ();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  data.Add(<span class="keyword">new</span> &#123;</span><br><span class="line">   Text = i.ToString()</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> &#123;</span><br><span class="line">  Data = data, SelectedData = data[<span class="number">4</span>]</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中再次应用了匿名对象，把整个实体集合放入新的匿名对象中的Data属性，并把集合的第五项赋值给新的匿名对象的SelectedData属性。</p>
<p>然后修改XAML，把ComboBox的ItemsSource绑定到匿名对象的Data属性，把SelectedValue绑定到匿名对象的SelectedDat<br>a属性。修改后的XAML如下：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">......</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ComboBox</span> <span class="attr">Name</span>=<span class="string">&quot;itemsControl&quot;</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Binding Data&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">SelectedValue</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Binding SelectedData, Mode=OneTime&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ComboBox.ItemTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Binding Text&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ComboBox.ItemTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ComboBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>再运行，启动效果如下：</p>
<p><img data-src="/images/attachment/201009/13/858_1284393201CUCr.jpg"></p>
]]></content>
      <tags>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>当Generic.xaml遇上BitmapImage：发现一个疑似WPF Bug而又不似Bug的问题</title>
    <url>/blog/2010/09/30/%E5%BD%93Generic.xaml%E9%81%87%E4%B8%8ABitmapImage%EF%BC%9A%E5%8F%91%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%96%91%E4%BC%BCWPF%20Bug%E8%80%8C%E5%8F%88%E4%B8%8D%E4%BC%BCBug%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>发现这个有点像  Bug  又不太像  Bug  的东西的过程是这样的：</p>
<p>我继承自  ContentControl  写了一个  MyContentControl  ，在其中定义了一个叫做  IconProperty<br>的依赖属性及其对应的  CLR  属性并且在其静态构造中调用了  DefaultStyleKeyProperty.OverrideMetadata<br>方法，代码很少，看起来是这个样子的：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyContentControl</span>: <span class="title">ContentControl</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="title">MyContentControl</span>()</span> &#123;</span><br><span class="line">  DefaultStyleKeyProperty.OverrideMetadata(<span class="keyword">typeof</span>(MyContentControl), <span class="keyword">new</span> FrameworkPropertyMetadata(<span class="keyword">typeof</span>(MyContentControl)));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> ImageSource Icon &#123;</span><br><span class="line">  <span class="keyword">get</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> (ImageSource) GetValue(IconProperty);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> &#123;</span><br><span class="line">   SetValue(IconProperty, <span class="keyword">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty IconProperty = DependencyProperty.Register(<span class="string">&quot;Icon&quot;</span>, <span class="keyword">typeof</span>(ImageSource), <span class="keyword">typeof</span>(MyContentControl));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的  Icon  属性声明类型为  ImageSource  ，目的简单明了，当然就是给这个控件加个图标了。</p>
<p>然后再给这个自定义控件定义一个放在  Generic.xaml  里的  Template  ，一样很简单，只是用一个  StackPanel  把它的<br>Icon  和  Content  包起来，代码是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:MyContentControl&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Style.Setters</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:MyContentControl&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Image</span> <span class="attr">Source</span>=<span class="string">&quot;&#123;TemplateBinding Icon&#125;&quot;</span> <span class="attr">Stretch</span>=<span class="string">&quot;Fill&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;TemplateBinding Content&#125;&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Style.Setters</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后定义一个窗体，其中有一个  Canvas  和一个  Button  ，点击  Button  时把  Canvas  清空然后再向其中加  500<br>个位置随机的自定义控件，这部分代码是这样的：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">canvas</span>.Children.Clear();</span><br><span class="line">Random random = new Random();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line"> MyContentControl <span class="keyword">marker</span> = new MyContentControl &#123;</span><br><span class="line">  Content = i, Icon = bitmap</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">marker</span>.SetValue(Canvas.LeftProperty, (double) random.Next(<span class="number">0</span>, (<span class="keyword">int</span>) <span class="keyword">canvas</span>.ActualWidth));</span><br><span class="line"></span><br><span class="line"> <span class="keyword">marker</span>.SetValue(Canvas.TopProperty, (double) random.Next(<span class="number">0</span>, (<span class="keyword">int</span>) <span class="keyword">canvas</span>.ActualHeight));</span><br><span class="line"> <span class="keyword">canvas</span>.Children.Add(<span class="keyword">marker</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的  bitmap  是窗体的一个私有字段，它关联了一张小箭头式的  png  图片（这个  bitmap 是窗体的私有字段或者是方法中的局部变量会对结果有影响，这点稍后说）。</p>
<p>再然后运行程序玩一下吧，点一下  Button  之后是这样的：</p>
<p><img data-src="/images/attachment/201009/29/858_1285780636v3Ov.jpg"></p>
<p>看起来蛮正常的。</p>
<p>但是试着多点几次  Button  之后发现不对劲了，怎么几乎每一次都比上一次慢呢？</p>
<p>于是就又在加入  500  个控件的地方监视了一下时间，代码是这样的：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">Stopwatch watch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">watch.Start();</span><br><span class="line"></span><br><span class="line">this.Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"> this.Title = watch.ElapsedMilliseconds.ToString();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">count</span> &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">  ClearAndAddMarkers();</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">count</span> = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">count</span>++;</span><br><span class="line">&#125;), DispatcherPriority.Loaded);</span><br></pre></td></tr></table></figure>

<p>计时器在  canvas  的  Children  填充之后开始，在  Dispatcher  的  Loaded  时停止，这样确保记录下来的时间是用来<br>Render  的时间而不是填充集合的时间。把这个清空、填充、计时的过程连续跑十次，把记录下来的时间写到窗体的  Title  上。</p>
<p>在运行一下，点  Button  ，观察一下  Window  的  Title  ，先是  400  多毫秒，然后  600  多，  800  多<br>……  最后一次用了  1300  多。当然，如果您机子配置太好的话得把加入自定义控件的数量调大一点。</p>
<p>好奇怪啊好奇怪，我开始认定是代码写的有问题（确实也是有一点，不过不是关键），但是找来找去找不到。于是试着把  Generic.xaml<br>改了下名字，不让它自动应用，然后在窗体里面引用这个改了名的资源字典。结果，怪事发生了，每次的时间稳定在了  400  毫秒左右。</p>
<p>这样看起来好像是  WPF  对  Generic.xaml  这种方式的处理有问题了，可以疑似为是个  Bug  。那为什么标题又说不似  Bug  呢？</p>
<p>这就涉及到前面说的  bitmap  了，如果去掉这个私有字段而是在填充  canvas  的  Children  的时候每次  new  一个新的<br>BitmapImage  来赋值给每一个自定义控件的  Icon  的话，也可以把每次的时间维持在  400  毫秒左右，所以又说它不太像个  Bug  。</p>
<p>如果有哪位遇到了类似的问题不妨试一下不要用  Generic.xaml  ，改用自己命名的普通资源字典来试一下；又或者是不要让窗体  hold  住<br>bitmap  这个资源不放手，每次  new  一个  BitmapImage  试一下。</p>
<p>但是无论如何，同一个  Template  定义在  Generic.xaml<br>中自动应用和定义在普通资源字典中手动引用这两种方式会导致程序的性能不同终究是个奇怪的问题，希望能有高手给出更好的解决方案和解释。</p>
<p>PS  ：我试过了在  .NET 3.5  和  .NET 4  下分别用  Debug  和  Release  编译，也试过了在  VS  中运行和脱离<br>VS  独立运行，都是有问题的。</p>
<p>另外，还试过了打微软发布的  KB981107  这个补丁，一样没有用。</p>
<p><a href="http://files.cnblogs.com/cuipengfei/WpfApplication1.zip"> 下载代码 </a></p>
]]></content>
      <tags>
        <tag>疑难</tag>
      </tags>
  </entry>
  <entry>
    <title>百度游戏 七彩鱼 自动喂鱼器</title>
    <url>/blog/2010/10/04/%E7%99%BE%E5%BA%A6%E6%B8%B8%E6%88%8F%20%E4%B8%83%E5%BD%A9%E9%B1%BC%20%E8%87%AA%E5%8A%A8%E5%96%82%E9%B1%BC%E5%99%A8/</url>
    <content><![CDATA[<p>前几天有朋友推荐我玩百度的网页游戏“七彩鱼”，玩儿了几天感觉还行，就是老得盯着喂鱼太麻烦。十一闲着没啥事儿干，于是就自己写了个喂鱼器。</p>
<p>具体使用方法写起来有点麻烦，我录了一段视频传到了56上，地址在下面：</p>
<p><a href="http://www.56.com/u84/v_NTUyNzE0NjU.html"> http://www.56.com/u84/v_NTUyNzE0NjU.html</a></p>
<p>喂鱼器程序的下载地址：</p>
<p><a href="http://download.csdn.net/source/2732931"> http://download.csdn.net/source/2732931</a></p>
<p>如果您用的是Vista或者Win7，本程序可以直接运行。但是如果是XP用户而且从没安装过.Net Framework的话那需要装一下.Net<br>Framework(2.0或以上版本)。</p>
<p>PS：我写这个程序主要是自娱自乐，捎带着娱乐一下同好。如果七彩鱼的开发者或者百度的工作人员觉得这个程序对您有损害的话，请在本博客留言。</p>
]]></content>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>送给所有需要学英语的朋友—Words Via Subtitle</title>
    <url>/blog/2010/10/06/%E9%80%81%E7%BB%99%E6%89%80%E6%9C%89%E9%9C%80%E8%A6%81%E5%AD%A6%E8%8B%B1%E8%AF%AD%E7%9A%84%E6%9C%8B%E5%8F%8B%E2%80%94Words%20Via%20Subtitle/</url>
    <content><![CDATA[<p>从名字就可以看出来，Words Via Subtitle是用来通过字幕学单词的辅助工具。它通过解析美剧或者电影的字幕文件把其中的生词取出，用网络上提供的开放<br>API或者本地词库解释生词。另外，程序还可以提供单词读音（机器发音），可以播放一个单词在剧中出现的语境，可以把所有生词串起来像幻灯片一样连续播放，也就是说显<br>示一个单词及其解释，然后用机器发音读该单词，然后播放该单词在剧中出现的句子，然后切换到下一个生词再重复这一过程。</p>
<p>这个程序去年就写过一个雏形，最近断断续续的重写了。这次主要的改进是将字幕的分析和单词的解释从主程序中抽出来做成插件，也就是说主程序部署到一台机器之后如果想要<br>增加对一种字幕格式的支持就只需要写一个插件拷到部署的机器上去就ok了，无需把整个程序重新编译、重新部署。同样，如果想要增加一种单词解释器也可以通过添加一个插<br>件完成，比如说现在只有一个很小的本地词库和一个网络释义，之后有人想给这个程序增加一个Google词典的解释器就可以写一个插件来完成。这次重写用了WPF、ME<br>F，以及Ribbon Controls等最近接触的新东西，不过在这儿暂时不介绍程序是怎么写，也不说字幕解析插件和解释提供器插件如何编写，先简单介绍一下各功能<br>的使用吧。对代码感兴趣的朋友可以去CodePlex上去搜索WVS（Words Via Subtitle的简写），我把这个程序作为一个开源项目上传到那儿了<br>，用的MS-PL协议，完全开源哈。</p>
<p>下面就开始说一下大概怎么用这个程序吧。</p>
<p>运行程序，用左上角的Open按钮（<br><img data-src="/images/attachment/201010/24/0_1287907696T90H.gif" alt="2010-10-24_15-15-25">](&#x2F;images&#x2F;attachment&#x2F;201010&#x2F;24&#x2F;0_12879076954nrG.gif)<br>）打开一个字幕文件（现在可以支持srt和ass格式的，当然以后可以通过插件来添加对更多种类的字幕的支持）。</p>
<p><img data-src="/images/attachment/201010/24/0_1287907704bdDE.gif" alt="2010-10-24_15-12-10"> ](&#x2F;images&#x2F;attachment&#x2F;201010&#x2F;24&#x2F;0_1287907700gCeG.gif)</p>
<p>上图中右下角可选的文件格式会随着插件的增多而增多。</p>
<p>加载字幕文件之后程序会把字幕中出现的生词列到一个列表中（如何判断一个单词是不是生词呢？程序需要通过一个已知单词列表来比对，这个列表需要使用者自己慢慢的“养”<br>。第一次运行程序会把字幕中出现的所有单词，无论难易、常见还是生僻统统的列出来，这时需要使用者自己把认识的单词标记一下，这样这个单词在下次打开别的字幕文件时就<br>不会再蹦出来烦您了），程序看起来是这样的：</p>
<p><img data-src="/images/attachment/201010/24/0_1287907713GtId.gif" alt="2010-10-24_15-01-29">(&#x2F;images&#x2F;attachment&#x2F;201010&#x2F;24&#x2F;0_1287907709mQwJ.gif)</p>
<p>在左侧的列表里切换单词，右侧区域的解释就会跟着切换。右侧区域的解释可以在多个解释提供器间切换（可切换的解释提供器的数量取决于插件的数量），现在有两个选择：D<br>ict.cn的解释和一个很小的本地词库，上图中用的是Dict.cn，切换到本地词库是这样的：</p>
<p><img data-src="/images/attachment/201010/24/0_12879077190vv0.gif" alt="2010-10-24_15-05-11"> ](&#x2F;images&#x2F;attachment&#x2F;201010&#x2F;24&#x2F;0_128790771673Eq.gif)</p>
<p>标有Choose Language的Ribbon Group（<br><img data-src="/images/attachment/201010/24/0_12879077217ns1.gif" alt="2010-10-24_15-08-55">(&#x2F;images&#x2F;attachment&#x2F;201010&#x2F;24&#x2F;0_1287907720Hs1z.gif)<br>）中的按钮用于切换翻译提供器，其数量会随着插件的增多而增多。</p>
<p>顺着Ribbon菜单向右走，标为Operations的Ribbon Group里有两个按钮（<br><img data-src="/images/attachment/201010/24/0_1287907722PB1b.gif" alt="2010-10-24_15-21-50">(&#x2F;images&#x2F;attachment&#x2F;201010&#x2F;24&#x2F;0_1287907721nkeH.gif)<br> ），Known用于把一个单词<br>标记为已知的，这样该单词就会被记录到已知单词列表中，像前文中说的那样，被“养”起来了。Misspelled用于把字幕中拼错的单词从列表中踢出去，这样在使用S<br>lide Show功能（这个稍后介绍）的时候就不会受到错误单词的干扰了。</p>
<p>菜单中再向右是标为Video的Ribbon Group<br><img data-src="/images/attachment/201010/24/0_1287907723rx99.gif" alt="2010-10-24_15-24-16">(&#x2F;images&#x2F;attachment&#x2F;201010&#x2F;24&#x2F;0_12879077225gx7.gif)<br>），第一个按钮用于选择和当前字幕对应的视频，第二个用于播放当前在列表中选中的单词在剧中出现的语境。播放时界面看起来是这样的：</p>
<p><a href="/images/attachment/201010/24/0_1287907727EHMF.gif"><br><img data-src="/images/attachment/201010/24/0_1287907732bkhG.gif" alt="2010-10-24_15-27-43"> </a></p>
<p>能够支持的视频格式取决于部署机器上装过的解码器，应该是Windows Media Player能播放什么这儿就能播放什么。播放完之后自动切换回单词解释界面。</p>
<p>继续向右走，是用于发音的两个按钮（<br><img data-src="/images/attachment/201010/24/0_12879077336SN1.gif" alt="2010-10-24_15-31-56"></p>
<p>），很明显左侧的用于读出当前单词，右侧的列表用于选择发音风格（其中选项的多少取决于部署机安装过语音引擎，Win7默认会有两个，其他系统没试过）。</p>
<p>最右侧的就是这次重写后我自己最喜欢的功能了，Slide Show（<br><img data-src="/images/attachment/201010/24/0_1287907734druS.gif" alt="2010-10-24_15-36-42"><br> ）。它用于把列表中所有的生词<br>串联成幻灯片一样播放。点击该按钮之后，程序会切换到全屏，显示一个单词及其解释，读出该单词的读音，播放该单词对应的语境，然后切换到下一个生词再重复上述过程。这<br>一步就不截图了，我把一些播放Slides Show的过程录下来放到了VeryCD上了 <a href="http://www.verycd.com/topics/2859418/">http://www.verycd.com/topics/2859418/ </a>。</p>
<p>程序现有的功能就是这些了，如果您有好主意、建议请留言哈。</p>
<p>对程序代码有兴趣的朋友可以去CodePlex看看： <a href="http://wvs.codeplex.com/"> http://wvs.codeplex.com/</a> ，如果您发现代码中有什么不妥的地方还请不吝赐教哈。</p>
<p>想要用这个程序的朋友可以去这几个地址看看：</p>
<p>1 <a href="http://blog.csdn.net/cuipengfei1/archive/2009/09/03/4516588.aspx"> http://blog.csdn.net/cuipengfei1/archive/2009/09/03/4516588.aspx</a></p>
<p>2 <a href="http://blog.csdn.net/cuipengfei1/archive/2009/09/10/4539180.aspx"> http://blog.csdn.net/cuipengfei1/archive/2009/09/10/4539180.aspx</a></p>
<p>3 <a href="http://blog.csdn.net/cuipengfei1/archive/2009/09/17/4564389.aspx"> http://blog.csdn.net/cuipengfei1/archive/2009/09/17/4564389.aspx</a></p>
<p>上面的三个链接地址是我去年写的那个雏形，功能大致和本文介绍的新版一致，但是只需要.NET 2.0就可以运行，新版的是一个发烧友式的开源项目，target<br>framework是.NET 4的。</p>
<p>程序使用介绍就到这里，字幕解析插件和翻译提供器插件的编写下次再写。</p>
<p>祝您背单词顺利！</p>
]]></content>
      <tags>
        <tag>Words Via Subtitle</tag>
      </tags>
  </entry>
  <entry>
    <title>C#中的语言特性都是从何而来？</title>
    <url>/blog/2011/03/06/CSharp%E4%B8%AD%E7%9A%84%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E9%83%BD%E6%98%AF%E4%BB%8E%E4%BD%95%E8%80%8C%E6%9D%A5%EF%BC%9F/</url>
    <content><![CDATA[<p>前几天推荐一个同事用“可选参数”，推荐完了我还画蛇添足的说这是.Net 4中的新特性。但是事后才发现这个新特性是C# 4.0的语言特性，与.Net<br>4无关。其实也不只这一次，我平时也经常把语言、框架、运行时，有时甚至还有开发工具混为一谈。于是今天就总结一下C#中我感兴趣的几个语言特性是从何而来的。</p>
<p>** 1.可选参数  **</p>
<p>可选参数是C# 4.0中的新特性，其作用在于在调用者不提供参数值时给参数一个默认值，用起来是这样的：</p>
<pre><code>static void Main(string[] args)


&#123;


    TestMethod();


    TestMethod(10);


 


    Console.ReadLine();


&#125;


 


public static void TestMethod(int parameter = 5)


&#123;


    Console.WriteLine(parameter);


&#125;
</code></pre>
<p>以上的代码在第一次调用TestMethod时输出5，第二次输出10，也就是在没有给TestMethod提供参数值时，会自动以5作为参数值。</p>
<p>该特性的实现依赖于OptionalAttribute和DefaultParameterValueAttribute这两个attribute，也就是说Test<br>Method这个方法完全可以声明为这样：</p>
<pre><code>public static void TestMethod([Optional, DefaultParameterValue(5)] int parameter)
&#123;
    Console.WriteLine(parameter);
&#125;
</code></pre>
<p>而跑起来的结果是一样的。</p>
<p>OptionalAttribute和DefaultParameterValueAttribute这两个attribute分别是在.Net 1.1和.Net<br>2.0中引入的，也就是说N年前大家就可以写拥有“可选参数”的方法了，只是用起来没有现在这么爽。</p>
<p>只要您安装了.Net Framework 4.0（也就是说有了其中附带的新版的C#编译器），您就可以编写如上的代码而同时把target<br>framework指定为.Net Framework 2.0到.Net Framework 4之间的任何版本。</p>
<p>小总结：我在这个问题上犯的错误就在于将语言和框架混为一谈了。C#语言的第四版和.Net Framework的第四版一起发布，于是我就理所当然的认为C#<br>4.0中的新特性和.Net Framework 4有关系了。其实，只要微软的人愿意，他们完全可以在.Net Framework 2.0发布之后和.Net<br>Framework 4.0发布之前的任意时间发布一款CTP的编译器来实现这一语言性特性，正如他们前不久发布的Asyn CTP一样。</p>
<p>** 2.var关键字  **</p>
<p>var关键字是在C# 3.0中引入的，其作用在于在声明局部变量时无需指定具体类型，用起来是这样的：</p>
<pre><code>var str = &quot;hello&quot;;
Console.WriteLine(str);
</code></pre>
<p>其结果和把var替换为string完全一样。</p>
<p>这个语言特性看似鸡肋，实际上它的好处在于接收LinQ语句的返回值，比如说Enumerable.GroupBy的某几个重载的返回值是IEnumerable&lt;I<br>Grouping&lt;TKey, TElement&gt;&gt;，如果每次用到group by的时候都需要写这么长的一串代码的话，那玩儿LinQ的快感想必是要降低不少呀。</p>
<p>这个语言特性的实现要比可选参数简单一些，无需框架的支持，完全是语言规范和编译器的“合谋”。编译器在编译时根据赋值语句推断出真实的类型，编译出的IL中完全没有<br>var的身影。</p>
<p>** 3.泛型  **</p>
<p>泛型是C# 2.0中新增的特性，也是.Net 2.0中的新特性。没有错，这次终于可以说它是.Net的新特性了，但是也只是.Net而不是.Net<br>Framework。</p>
<p>在C#语言层面实现泛型需要CLR的支持，可以说它是.Net世界中的一等公民，IL甚至为它修改了语法。</p>
<p>比如说如下的类型声明：</p>
<pre><code>public class TestClass&lt;T&gt;
</code></pre>
<p>在编译为IL之后是这样的：</p>
<pre><code>.class public auto ansi beforefieldinit TestClass&lt;T&gt;
    extends [mscorlib]System.Object
</code></pre>
<p>可见IL中新增了尖括号的用法。</p>
<p>以上三个语言特性都比较典型。var关键字纯粹是语言层面的小甜头，只要有了能够理解var的编译器，使用哪个版本的CLR或者.Net<br>Framework完全无所谓。</p>
<p>可选参数需要编译器能理解参数名后面的赋值语句，同时也需要.Net Framework中提供的attribute的支持。</p>
<p>泛型同时需要CLR和编译器的支持。</p>
<p>如果列一张表的话，就是下面这样的：</p>
<p>语言特性</p>
<p>实现该特性需要的支持</p>
<p>var关键字</p>
<p>CLR（ <img data-src="http://vzochat.com/zh/images/icons/red_cross_45.gif" alt="red_cross_45.gif"><br>） 框架（ <img data-src="http://vzochat.com/zh/images/icons/red_cross_45.gif" alt="red_cross_45.gif"><br>） 编译器（ <img data-src="http://www.articulate.com/images/studio_check.gif" alt="studio_check.gif"><br>）</p>
<p>可选参数</p>
<p>CLR（<br><img data-src="http://vzochat.com/zh/images/icons/red_cross_45.gif" alt="red_cross_45.gif"></p>
<p>） 框架（<br><img data-src="http://www.articulate.com/images/studio_check.gif" alt="studio_check.gif"><br> ）<br>编译器（<br><img data-src="http://www.articulate.com/images/studio_check.gif" alt="studio_check.gif"><br> ）</p>
<p>泛型</p>
<p>CLR（<br><img data-src="http://www.articulate.com/images/studio_check.gif" alt="studio_check.gif"><br> ）<br>框架（<br><img data-src="http://vzochat.com/zh/images/icons/red_cross_45.gif" alt="red_cross_45.gif"><br> ）<br>编译器（<br><img data-src="http://www.articulate.com/images/studio_check.gif" alt="studio_check.gif"><br> ）</p>
<p>上表中每一项的编译器都打上了钩儿。很显然，每一项语法层面的特性都需要编译器的支持，要不然语言规范就只是一纸空文了。在这里还是把它列出来，仅求全面。</p>
<p>写完之后自己看一遍，觉得很是有考据癖的老学究味道。微软总是把开发工具、框架类库、运行时和编译器的新版本一起发布，所以我们总是被弄得很被动，总是搞不清这几者之<br>间区别。其实有时候把这些东西区分开来去观察，更有利于解释一些困惑。</p>
<p>当然，最后的表格中列出的东西还是太少了，希望各位补充啊。</p>
<p>PS：请问CSDN的工作人员一个问题，为什么用Live Writer发布的文章一开始排版，格式都是正确的，只要编辑时勾上推荐到首页的选项格式就全乱了呢</p>
<p>？</p>
]]></content>
      <tags>
        <tag>《你必须知道的.NET》</tag>
      </tags>
  </entry>
  <entry>
    <title>“可选参数”趣事探轶</title>
    <url>/blog/2011/04/13/%E2%80%9C%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%E2%80%9D%E8%B6%A3%E4%BA%8B%E6%8E%A2%E8%BD%B6/</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/cuipengfei1/archive/2011/03/06/6227119.aspx"> 上一篇博文 </a><br>中提到了“可选参数”这个C# 4.0中新增的语言特性，但是写过之后还是不满足，心里还是有一些疑问没有得到解释。于是又做了一些探索，过程中竟然发现这么一个小小<br>的语言特性背后隐藏着的有趣问题还真不少。这次就把探索过程中的发现和疑问记录下来。</p>
<h1 id="“可选参数”的实现"><a href="#“可选参数”的实现" class="headerlink" title="“可选参数”的实现"></a>“可选参数”的实现</h1><p>Cnblogs上有一篇 <a href="http://www.cnblogs.com/artech/archive/2011/01/12/optionalparameter.html"> 蒋金楠的文章</a><br>中提到一句：“缺省参数最终体现为两个特殊的自定义特性OptionalAttribute和DefaultParameterValueAttribute<br>”。为了验证这个说法的正确性，我自己做了一些试验。</p>
<p>要研究语言特性的实现原理最好的方法莫过于反编译出IL代码来一探究竟了。所以，那就顺着这条线索走吧。</p>
<p>首先用C#代码写一个很简单的测试方法：</p>
<pre><code>public void TestMethod(string str = &quot;A&quot;)
&#123;
&#125;
</code></pre>
<p><a href="http://blog.csdn.net/cuipengfei1/archive/2011/03/06/6227119.aspx"> 上一篇博文 </a><br>中提到过这种写法跟直接使用OptionalAttribute和DefaultValueAttribute这两个attribute的效果是一样的。</p>
<pre><code>public void TestMethodWithAttributes([Optional, DefaultParameterValue(&quot;A&quot;)]string str)
&#123;
&#125;
</code></pre>
<p>这两段代码编译出来的IL除了名字之外别无二致，下面就以第一个方法为例，它的IL是这样的：</p>
<pre><code>.method public hidebysig instance void  TestMethod([opt] string str) cil managed
&#123;
  .param [1] = &quot;A&quot;
  // Code size       2 (0x2)
  .maxstack  8
  IL_0000:  nop
  IL_0001:  ret
&#125; // end of method Program::TestMethod
</code></pre>
<p>同时其生成的Metadata是这样的：</p>
<pre><code>MethodName: TestMethod (06000003)
Flags     : [Public] [HideBySig] [ReuseSlot]  (00000086)
RVA       : 0x0000205b
ImplFlags : [IL] [Managed]  (00000000)
CallCnvntn: [DEFAULT]
hasThis 
ReturnType: Void
1 Arguments
Argument #1:  String
1 Parameters
(1) ParamToken : (08000002) Name : str flags: [Optional] [HasDefault]  (00001010) Default: (String) 
</code></pre>
<p>说老实话,上面这两段“天书”我并没有完全读懂，但是还是发现有一些异常，觉得有些东西不太对头，为什么这么说呢？因为一般的attribute编译之后的结果通常不<br>是这样的。比如下面这个例子：</p>
<p>先自定义一个只能应用到参数上的attribute：</p>
<pre><code>[AttributeUsage(AttributeTargets.Parameter, Inherited = false, AllowMultiple = true)]
sealed class MyAttribute : Attribute
&#123;
&#125;
</code></pre>
<p>然后定义一个被该attribute修饰的方法：</p>
<pre><code>public void TestAttribute([My]string str)
&#123;
&#125;
</code></pre>
<p>这个方法编译之后的IL如下：</p>
<pre><code>.method public hidebysig instance void  TestAttribute(string str) cil managed
&#123;
  .param [1]
  .custom instance void HowDidTheyImplementOptionalParameters.MyAttribute::.ctor() = ( 01 00 00 00 ) 
  // Code size       2 (0x2)
  .maxstack  8
  IL_0000:  nop
  IL_0001:  ret
&#125; // end of method Program::TestAttribute
</code></pre>
<p>可以看到上面代码中标红的部分是TestMethod的IL中没有的。而且，它的Metadata和TestMethod的也是不同的：</p>
<pre><code>MethodName: TestAttribute (06000005)
Flags     : [Public] [HideBySig] [ReuseSlot]  (00000086)
RVA       : 0x00002061
ImplFlags : [IL] [Managed]  (00000000)
CallCnvntn: [DEFAULT]
hasThis 
ReturnType: Void
1 Arguments
    Argument #1:  String
1 Parameters
    (1) ParamToken : (08000004) Name : str flags: [none] (00000000)
    CustomAttribute #1 (0c000010)
    -------------------------------------------------------
        CustomAttribute Type: 06000001
        CustomAttributeName: HowDidTheyImplementOptionalParameters.MyAttribute :: instance void .ctor()
                Length: 4
                Value : 01 00 00 00                                      &gt;                &lt;
                ctor args: ()
</code></pre>
<p>这个方法的Metadata的最后多了一段CustomAttribute的描述，其flags也为空，不像TestMethod的flags后面跟有[Option<br>al] [HasDefault]这样的标志。</p>
<p>因为我没有读过 <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm"> ECMA 335 </a> 的文档，所以下面只是做一个不太谨慎的推测：Op<br>tionalAttribute和DefaultParameterValueAttribute这两个attribute和其他的attribute不同，他们有自<br>己对应的专有的flags。调用TestMethod的代码在被编译时，编译器会去读取存储于元数据中的默认值，并把读取到的值嵌入到IL中去。</p>
<p>由于在TestMethod的C#代码中、编译出的IL代码中，及其元数据中都不见OptionalAttribute和DefaultParameterValue<br>Attribute<br>的踪迹，所以我认为“缺省参数最终体现为两个特殊的自定义特性OptionalAttribute和DefaultParameterValueAttribute<br>”这种说法是有待商榷的。</p>
<h1 id="背后的陷阱"><a href="#背后的陷阱" class="headerlink" title="背后的陷阱"></a>背后的陷阱</h1><p>“可选参数”看起来方便又好用，但是使用它是不是真的是多快好省的绝佳选择呢？实际上不是的，它的背后隐藏着至少两个陷阱（我只发现了两个）。</p>
<h1 id="第一个陷阱：版本更迭的问题"><a href="#第一个陷阱：版本更迭的问题" class="headerlink" title="第一个陷阱：版本更迭的问题"></a>第一个陷阱：版本更迭的问题</h1><p>就以上面提到的TestMethod为例，写一个方法来调用它：</p>
<pre><code>public void Caller()
&#123;
    TestMethod();
&#125;
</code></pre>
<p>这里在调用时没有传入参数，也就是说相当于传入了默认的参数“A”。Caller编译出来的IL是这样的：</p>
<pre><code>.method public hidebysig instance void  Caller() cil managed
&#123;
  // Code size       14 (0xe)
  .maxstack  8
  IL_0000:  nop
  IL_0001:  ldarg.0
  IL_0002:  ldstr      &quot;A&quot;
  IL_0007:  call     instance void HowDidTheyImplementOptionalParameters.Program::TestMethod(string)
  IL_000c:  nop
  IL_000d:  ret
&#125; // end of method Program::Caller
</code></pre>
<p>请注意标红的两行，Caller的IL中实际是把“A”这个值写死了的。也就是说如果有一个包含“可选参数”的非强命名程序集在版本升级时修改了参数的默认值，其他引<br>用它的程序集如果没有重新编译就无法获得到新的默认参数值，在运行时仍然会传入老版本中定义的值。</p>
<h1 id="第二个陷阱：跨语言调用"><a href="#第二个陷阱：跨语言调用" class="headerlink" title="第二个陷阱：跨语言调用"></a>第二个陷阱：跨语言调用</h1><p>并不是所有的语言都被强制要求支持“可选参数”这一特性。对于不支持这一特性的语言来说，完全可以忽略掉元数据中包含的默认值而强制要求这一语言的用户去显式的提供参<br>数值。而这样就会导致代码的运行时行为不一致。</p>
<p>C#4.0之前都所有版本都是不支持“可选参数”的。也就是说如果在VS2010中用C#4.0的语法和.NET Framework<br>2.0的框架编一个含有“可选参数”的程序集，然后在VS2008中的项目中引用这个程序集的话，则只能显式的提供参数值。</p>
<p>针对以上两点，我觉得在使用“可选参数”时应该遵循以下的原则：在public API（包括公开类型的公开成员和公开类型的受保护成员）中尽量不要用“可选参数”，<br>而是使用方法重载，以避免API行为不一致。在程序集内部的私有API中，尽情享用吧。</p>
<h1 id="关于CLS-Compliant"><a href="#关于CLS-Compliant" class="headerlink" title="关于CLS-Compliant"></a>关于CLS-Compliant</h1><p><a href="http://1codechs.codeplex.com/"> 微软一站式示例代码库 </a> 的文档中提到说“可选参数”不是CLS-<br>Compliant的。我觉得这种说法是错误的。最简单的验证方式就是加上CLSCompliantAttribute来试试看。</p>
<p>在含有TestMethod（这里要保证TestMethod是公开类型中的公开方法，因为CLSCompliant只针对public<br>API）的项目的AssemblyInfo.cs中加上这么一行：</p>
<pre><code>[assembly: CLSCompliant(true)]
</code></pre>
<p>然后编译，编译器没有给出任何警告。而如果是在public<br>API中使用了unit这一“臭名昭著”的类型的话，编译器会毫不犹豫的给出一个警告。比如这样的一个方法：</p>
<pre><code>public void TestCLSCompliant(uint parameter)
&#123;
&#125;
</code></pre>
<p>在编译时就会得到一个警告：Argument type ‘uint’ is not CLS-compliant。</p>
<p>而且 <a href="http://msdn.microsoft.com/en-us/library/ms182135.aspx"> MSDN的文档 </a><br>中也提到了虽然“可选参数”没有被收录到CLS的规范中，但是CLS是可以“容忍”它的存在的。</p>
<h1 id="Reflector中可能的Bug"><a href="#Reflector中可能的Bug" class="headerlink" title="Reflector中可能的Bug"></a>Reflector中可能的Bug</h1><p>以上所有反编译都是用IL Dasm来做的，而如果用最新版的Reflector（就是只能试用14天的那个版本）来查看反编译出的C#(把版本设为任何非None的<br>值)代码的话，会发现它会把TestMethod解释为使用了OptionalAttribute和DefaultParameterValueAttribute。<br>我怀疑这是因为无论是使用“可选参数”还是直接使用OptionalAttribute和DefaultParameterValueAttribute，编译出的结<br>果都是一样的，Reflector无从判断源代码中使用的是哪一种，索性就假定为是第二种了。</p>
<h1 id="存疑"><a href="#存疑" class="headerlink" title="存疑"></a>存疑</h1><p>虽然OptionalAttribute没有出现在TestMethod的C#代码中，在编译出来的IL和元数据中也不见踪影，但是它还是出现在了编译出的程序集的T<br>ypeRefs中，而DefaultValueAttribute却没有出现。这是为什么呢？</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>MSDN上的：</p>
<p><a href="http://social.msdn.microsoft.com/Forums/en-US/csharplanguage/thread/d1be12e0-6325-427a-8e25-02fbd8396b1b/#18b08278-28a9-43dc-b3d4-e4694ca0260d"> http://social.msdn.microsoft.com/Forums/en-US/csharplanguage/thread/d1be12e0-6325-427a-8e25-02fbd8396b1b/#18b08278-28a9-43dc-b3d4-e4694ca0260d </a></p>
<p><a href="http://social.msdn.microsoft.com/Forums/en-US/csharplanguage/thread/31731806-dd83-4483-89b4-30001af14ab7/#352d019c-950c-42de-88f6-b0fecdf34351"> http://social.msdn.microsoft.com/Forums/en-US/csharplanguage/thread/31731806-dd83-4483-89b4-30001af14ab7/#352d019c-950c-42de-88f6-b0fecdf34351 </a></p>
<p><a href="http://social.msdn.microsoft.com/Forums/en-US/csharplanguage/thread/86f6d205-21b8-45e3-b5ec-3e9d5c1f9feb/"> http://social.msdn.microsoft.com/Forums/en-US/csharplanguage/thread/86f6d205-21b8-45e3-b5ec-3e9d5c1f9feb/</a></p>
<p>StackOverflow上的：</p>
<p><a href="http://stackoverflow.com/questions/5456989/is-the-new-feature-of-c-4-0-optional-parameters-cls-compliant"> http://stackoverflow.com/questions/5456989/is-the-new-feature-of-c-4-0-optional-parameters-cls-compliant</a></p>
<p><a href="http://stackoverflow.com/questions/5497514/what-does-opt-mean-in-msil"> http://stackoverflow.com/questions/5497514/what-does-opt-mean-in-msil</a></p>
<p><a href="http://stackoverflow.com/questions/5522438/why-does-a-custom-attribute-appear-both-in-il-and-metadata"> http://stackoverflow.com/questions/5522438/why-does-a-custom-attribute-appear-both-in-il-and-metadata </a></p>
<p>请问CSDN的工作人员一个问题，为什么用Live Writer发布的文章一开始排版，格式都是正确的，只要在CSDN的Web<br>Editor里面编辑一次就全乱了呢？</p>
]]></content>
      <tags>
        <tag>《你必须知道的.NET》</tag>
      </tags>
  </entry>
  <entry>
    <title>[翻译]List为什么实现了那么多接口？</title>
    <url>/blog/2011/04/18/%5B%E7%BF%BB%E8%AF%91%5DList%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AE%9E%E7%8E%B0%E4%BA%86%E9%82%A3%E4%B9%88%E5%A4%9A%E6%8E%A5%E5%8F%A3%EF%BC%9F/</url>
    <content><![CDATA[<p>[翻译]List<T>为什么实现了那么多接口？</p>
<p>原文地址： <a href="http://blogs.msdn.com/b/ericlippert/archive/2011/04/04/so-many-interfaces.aspx"> http://blogs.msdn.com/b/ericlippert/archive/2011/04/04/so-many-interfaces.aspx </a></p>
<p>原作者： <a href="http://blogs.msdn.com/EricLippert/ProfileUrlRedirect.ashx"> Eric Lippert</a></p>
<p>Eric Lippert是微软员工，C#编译器的主要开发人员之一。</p>
<p>今天，我在 <a href="http://stackoverflow.com/questions/4817369/"> StackOverflow </a><br>上回答了一个问题。按照以往的习惯，我把它以对话体的形式整理成一篇博客。</p>
<p>MSDN的文档中说List<T>是这样声明的：</p>
<pre><code>public class List : IList&lt;T&gt;, ICollection&lt;T&gt;, IEnumerable&lt;T&gt;, IList, ICollection, IEnumerable
</code></pre>
<p>那么List真的实现了这么多接口吗？</p>
<p>是的。</p>
<p>为什么会有这么多接口呢？</p>
<p>比如说IList<T>派生自IEnumerable<T>，那么派生程度较高的接口的实现者就必须要实现派生程度较低的接口。接口继承就是这样的；如果你要满足派生<br>程度较高的类型的契约的话，你就必须要满足派生程度较低的类型。</p>
<p>那么就是说一个class或者一个struct必须要实现其传递闭包上所有接口定义的所有方法吗？</p>
<p>非常正确。</p>
<p>一个实现了派生程度较高的接口的class或者struct必须要在其基类型列表中声明它实现了那些派生程度较低的接口吗？</p>
<p>不是。</p>
<p>那会被禁止声明吗？</p>
<p>不会。</p>
<p>那么就是说派生程度较低的接口是否被声明在基类列表中是可选的了？</p>
<p>是的。</p>
<p>总是这样的吗？</p>
<p>基本上总是这样的：</p>
<pre><code>interface I1 &#123;&#125;
interface I2 : I1 &#123;&#125;
interface I3 : I2 &#123;&#125;
</code></pre>
<p>I3是否显式指明它实现了I1是可选的。</p>
<pre><code>class B : I3 &#123;&#125;
</code></pre>
<p>I3的实现者必须实现I2和I1，但不一定要显式指明。是否指明是可选的。</p>
<pre><code>class D : B &#123;&#125;
</code></pre>
<p>派生类可以指明它实现了其基类的接口，但是并不是一定要这么做。</p>
<p>下面有一个例子：</p>
<pre><code>class C&lt;T&gt; where T : I3
&#123;
  public virtual void M&lt;U&gt;() where U : I3 &#123;&#125;
&#125;
</code></pre>
<p>T和U所对应的类型参数必须要实现I2和I1，但是T的U的泛型类型约束中却不一定要显式指明出来。</p>
<p>分布类中是否重新声明它所实现的接口也是可选的：</p>
<pre><code>partial class E : I3 &#123;&#125;
partial class E &#123;&#125;
</code></pre>
<p>类型E的第二部分可以声明它实现了I3，I2或I1，但并不是一定要这么做。</p>
<p>好吧，我懂了；这是可选的。那怎么会有人想去声明一个并不是一定要声明的接口呢？</p>
<p>可能是因为他们认为这么做会让代码更易读更具有自说明性吧。</p>
<p>有可能某个开发者会写出如下的代码：</p>
<pre><code>interface I1 &#123;&#125;
interface I2 &#123;&#125;
interface I3 : I1, I2 &#123;&#125;
</code></pre>
<p>然后他突然发觉I2应该继承自I1。 ** 干嘛非得要求开发者在把I2修改为继承自I1之后再回头去在I3的声明中删除掉对I1的继承呢？ **<br>我找不到任何理由去强制开发人员删除掉冗余的声明信息。</p>
<p>除了易读性和易懂性之外，在基类列表中显式声明一个接口和虽不声明但实现这个接口会有什么 **技术上 **的区别吗？</p>
<p>通常没有，但是有一种情况下会有一点细微的差别。假设有个类型D，它的基类B实现了某些接口。D通过B也就自动实现了那些接口。如果你在D的基类列表中显式声明了这些<br>接口的话，那么C#编译器将会做一次 **接口重新实现 **。其细节有些隐晦；如果你对此有兴趣的话那我建议你去仔细阅读C#<br>4语言规范的13.4.6。基本上来说，编译器会“重新开始”并找出哪个方法实现了哪个接口。</p>
<p>List<T>的源代码中真的显式声明了那么多接口吗？</p>
<p>不是的。真正的源代码是这样的：</p>
<pre><code>public class List&lt;T&gt; : IList&lt;T&gt;, System.Collections.IList
</code></pre>
<p>为什么虽然源代码没有显式声明所有接口，但是MSDN还是把所有的接口都列出来了呢？</p>
<p>因为MSDN是文档，它应该提供尽可能多的信息。在一页文档中给出完整的信息总比让你去翻阅十页文档才能找到一个类型实现的全部接口好一些。</p>
<p>为什么有些工具，比如说Reflector或者对象浏览器会把所有接口都显示出来呢？</p>
<p>这些工具不知道源代码是什么样子的。它们只能从元数据入手。因为显式声明全部接口只是可选的，所以这些工具根本就无从得知源代码到底有没有显式声明所有接口。反正怎么<br>显示都有可能是错的，那这些工具还不如就把信息罗列的全面一些。这些工具给你显示了有可能比实际情况更多的信息，而不是向你 _<br>隐藏一些你有可能会需要的信息是因为它们想要帮助你。</p>
<p>我发现IEnumerable<T>继承自IEnumerable，但是IList<T>并没有继承自IList，这是怎么回事呢？</p>
<p>这和IEnumerable<T>是协变的而IList<T>不是协变的是一个原因。通过装箱，我们可以把一个整数序列当做一个object的序列来对待。但是一个可<br>读可写的整数列表却不可以被当做一个可读可写的object的列表来对待，因为你有可能给可读可写的object列表中加入一个String。一个实现IEnumer<br>able<T>的类型可以很容易的满足IEnumerable，只要加一个装箱的helper方法就行了。但是实现IList<T>的类型却不一定能够满足IList<br>，所以IList没有继承自IList。</p>
<p>那为什么List<T>又去实现了IList呢？</p>
<p>这个有点奇怪，因为除了T为object时之外，其他情况下List<T>都不满足的IList的要求。这有可能是因为想要给升级老的C# 1.0代码的人行个方便吧<br>，好让他们更容易的用到泛型。那些想要升级代码的人可能已经确保了只向列表中加入正确类型的对象。而且多数情况下，当你把一个IList当做参数传递出去的时候，被调<br>用的方法也只是会去按索引访问列表，而不是去向列表中加入一些任意类型的对象。</p>
]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>美国生活第一个月见闻，有图有真相（1）</title>
    <url>/blog/2011/05/31/%E7%BE%8E%E5%9B%BD%E7%94%9F%E6%B4%BB%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%9C%88%E8%A7%81%E9%97%BB%EF%BC%8C%E6%9C%89%E5%9B%BE%E6%9C%89%E7%9C%9F%E7%9B%B8%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<p>这是从成都起飞时候在飞机上照的，灰蒙蒙的，什么都看不清楚。</p>
<p><a href="/images/attachment/201105/31/0_1306817683HZFg.gif"> <img data-src="/images/attachment/201105/31/0_1306817695R7ZX.gif" alt="WP_000006"></a></p>
<p>飞行中途没怎么开手机，所以也没怎么拍照，下面是到了公司之后的照片。</p>
<p>这是公司进门之后墙上挂的的东西</p>
<p><a href="/images/attachment/201105/31/0_13068177239B7n.gif"> <img data-src="/images/attachment/201105/31/0_13068177347jaj.gif" alt="WP_000008"></a></p>
<p>MS合作ISV的牌子，2010-2011，是金的</p>
<p><a href="/images/attachment/201105/31/0_13068177680Apc.gif"> <img data-src="/images/attachment/201105/31/0_1306817780cC5L.gif" alt="WP_000012"></a></p>
<p>后面这个变成银的了，为啥呢？因为微软涨价了。。。。。。</p>
<p><a href="/images/attachment/201105/31/0_13068177956q6H.gif"> <img data-src="/images/attachment/201105/31/0_1306817811gSWO.gif" alt="WP_000013"></a></p>
<p>产品包装盒，不知道是不是真的有人买光盘而不是下载的</p>
<p><a href="/images/attachment/201105/31/0_1306817840O602.gif"> <img data-src="/images/attachment/201105/31/0_1306817851LMlF.gif" alt="WP_000009"></a></p>
<p>休息室的墙上贴了一堆妇女儿童保护条例之类的东西</p>
<p><a href="/images/attachment/201105/31/0_1306817873BKWe.gif"> <img data-src="/images/attachment/201105/31/0_1306817895Bkyb.gif" alt="WP_000014"></a></p>
<p>周末去看车展，这个是啥车？不认识，不过看起来挺高端的</p>
<p><a href="/images/attachment/201105/31/0_13068179568Ik5.gif"> <img data-src="/images/attachment/201105/31/0_1306817980hkSi.gif" alt="WP_000015"></a></p>
<p>下面牛逼了，一队辆兰博基尼排成一排，我只拍了其中两个</p>
<p><a href="/images/attachment/201105/31/0_1306818065y7BB.gif"> <img data-src="/images/attachment/201105/31/0_130681809364M5.gif" alt="WP_000017"></a></p>
<p><a href="/images/attachment/201105/31/0_1306818158QjNB.gif"> <img data-src="/images/attachment/201105/31/0_1306818185ci86.gif" alt="WP_000018"></a></p>
<p>还有一些其他各种各样的车，都不认识，叫不上名字来</p>
<p><a href="/images/attachment/201105/31/0_130681822799wr.gif"> <img data-src="/images/attachment/201105/31/0_1306818254GZ99.gif" alt="WP_000019"></a></p>
<p><a href="/images/attachment/201105/31/0_13068183071lN5.gif"><img data-src="/images/attachment/201105/31/0_1306818327OkcJ.gif" alt="WP_000020"></a></p>
<p><a href="/images/attachment/201105/31/0_1306818409Y94S.gif"><img data-src="/images/attachment/201105/31/0_13068184872nKa.gif" alt="WP_000021"></a></p>
<p><a href="/images/attachment/201105/31/0_1306818605JCTc.gif"><img data-src="/images/attachment/201105/31/0_130681872686lf.gif" alt="WP_000016"></a></p>
<p>这儿的自然环境不错，其实不止是不错，是很好</p>
<p><a href="/images/attachment/201105/31/0_13068188408SJK.gif"> <img data-src="/images/attachment/201105/31/0_13068188912e1B.gif" alt="WP_000025"></a></p>
<p>小区里面的草坪上，树林里有野兔子和松鼠，都不咋怕人</p>
<p><a href="/images/attachment/201105/31/0_1306819119r8n5.gif"> <img data-src="/images/attachment/201105/31/0_1306819161QJQW.gif" alt="WP_000023"></a></p>
<p><a href="/images/attachment/201105/31/0_1306819276TYrl.gif"> <img data-src="/images/attachment/201105/31/0_1306819319TBHT.gif" alt="WP_000024"></a></p>
<p>小区里的一个桥洞底下竟然有这个，惊讶一把</p>
<p><a href="/images/attachment/201105/31/0_1306819358jbb8.gif"> <img data-src="/images/attachment/201105/31/0_1306819371x9SV.gif" alt="WP_000026"></a></p>
<p>公司楼下人造湖里的水怪，很有特色</p>
<p><a href="/images/attachment/201105/31/0_1306819420JpXZ.gif"> <img data-src="/images/attachment/201105/31/0_1306819439YlsL.gif" alt="WP_000027"></a></p>
<p>住所后院儿，游泳池</p>
<p><a href="/images/attachment/201105/31/0_1306819516SzHh.gif"> <img data-src="/images/attachment/201105/31/0_1306819537Wc0d.gif" alt="WP_000028"></a></p>
<p>这是某个体育用品超市里面卖枪的专柜</p>
<p><a href="/images/attachment/201105/31/0_1306819604Usod.gif"> <img data-src="/images/attachment/201105/31/0_130681963812mS.gif" alt="WP_000029"></a></p>
<p>就是这么摆着卖，跟白菜似的</p>
<p><a href="/images/attachment/201105/31/0_1306819698N77h.gif"> <img data-src="/images/attachment/201105/31/0_1306819727MCJ4.gif" alt="WP_000030"></a></p>
<p>这是另外一家超市，好像是叫frys，里面卖的true blood的全集，没买</p>
<p><a href="/images/attachment/201105/31/0_1306819778801n.gif"> <img data-src="/images/attachment/201105/31/0_1306819800whQh.gif" alt="WP_000034"></a></p>
<p>今天先贴这些，睡觉了，现在这儿是夜里快十二点了</p>
]]></content>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>美国生活第二个月照片（1）：飙摩托，二造红河谷；乘火车，初访沃斯堡</title>
    <url>/blog/2011/06/22/%E7%BE%8E%E5%9B%BD%E7%94%9F%E6%B4%BB%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%9C%88%E7%85%A7%E7%89%87%EF%BC%881%EF%BC%89%EF%BC%9A%E9%A3%99%E6%91%A9%E6%89%98%EF%BC%8C%E4%BA%8C%E9%80%A0%E7%BA%A2%E6%B2%B3%E8%B0%B7%EF%BC%9B%E4%B9%98%E7%81%AB%E8%BD%A6%EF%BC%8C%E5%88%9D%E8%AE%BF%E6%B2%83%E6%96%AF%E5%A0%A1/</url>
    <content><![CDATA[<h3 id="再访红河谷"><a href="#再访红河谷" class="headerlink" title="再访红河谷"></a>再访红河谷</h3><p>紧接着上次去红河谷骑越野车的一周之后，再次造访此地，体验肾上腺素的急剧分泌。</p>
<p>这是刚进门的地方，很多人都是开着汽车，挂着拖车，载着摩托车来的</p>
<p><img data-src="https://lh5.googleusercontent.com/-i0jExbWVD_Y/TgFeQ5fg4JI/AAAAAAAAAHU/ls891h25bF4/s640/WP_000064.jpg"></p>
<p>骑过了一大片坑坑洼洼的泥水地，前面就是红河，德克萨斯州和俄克拉荷马州的交界之处。</p>
<p>前面转弯后完全是豁然开朗的景象。一半流水一半沙，满目葱绿满目花。（其实是没有花儿的，只是为了凑个韵脚）</p>
<p><img data-src="https://lh4.googleusercontent.com/-bMAJmviODkI/TgFehiUc2UI/AAAAAAAAAHY/f2yOgD9Xrkk/s640/WP_000065.jpg"></p>
<p>中途搁浅之后暂停休息</p>
<p><img data-src="https://lh5.googleusercontent.com/-112CJpaewi4/TgFe7UIKIjI/AAAAAAAAAHc/6gkSHekv0NY/s640/WP_000066.jpg"></p>
<p>把车弄出来之后满鞋的泥水</p>
<p><img data-src="https://lh4.googleusercontent.com/-ThLAOSZDtpo/TgFfYXWhVnI/AAAAAAAAAHg/YS9oA6VIAlY/s640/WP_000067.jpg"></p>
<h3 id="初乘列车"><a href="#初乘列车" class="headerlink" title="初乘列车"></a>初乘列车</h3><p>坐了一次美国的观光火车，完全不给力，要是碰见中国的春运他们肯定应付不了。两个多小时的车程，中途停车检修一个多小时。</p>
<p>这是火车站所在地，葡萄藤镇</p>
<p><img data-src="https://lh6.googleusercontent.com/-lupN5GkMDjo/TgFgElruDOI/AAAAAAAAAHs/EzpXP7dz6mo/s640/WP_000069%252520%2525282%252529.jpg"></p>
<p>站在一个不知是做什么用的台子上留个影</p>
<p><img data-src="https://lh5.googleusercontent.com/-MWQKr2Y9Sb4/TgFdYR9ainI/AAAAAAAAAG0/dD7wenY1FjM/s640/IMG_6836.JPG"></p>
<p>站台</p>
<p><img data-src="https://lh4.googleusercontent.com/-JQTRssMI2Yk/TgFgXHiKchI/AAAAAAAAAH0/zBmPQ_3FCJc/s800/WP_000070.jpg"></p>
<p>火车到了</p>
<p><img data-src="https://lh3.googleusercontent.com/-XSoSBDG-SmY/TgFggc9UFeI/AAAAAAAAAH4/6m62QyFxSL8/s640/WP_000071.jpg"></p>
<p>下了火车就是一个观光点，下面的照片都是在那儿拍的。</p>
<p>做的像靴子一样的花盆</p>
<p><img data-src="https://lh6.googleusercontent.com/-lz5LWWE1nk0/TgFhGKGwT2I/AAAAAAAAAIE/Ag-HhWqG5Ik/s640/WP_000074%252520%2525282%252529.jpg"></p>
<p>路遇一对莫西干兄弟</p>
<p><img data-src="https://lh5.googleusercontent.com/-6f7M3C7ypuI/TgFhikuRMdI/AAAAAAAAAIM/NMicygtXZqQ/s640/WP_000077%252520%2525282%252529.jpg"></p>
<p>天儿太热了，莫西干小爷决定要洗洗胳肢窝</p>
<p><img data-src="https://lh4.googleusercontent.com/-bSBZ1-pQXm4/TgFh36FTaMI/AAAAAAAAAIQ/MCbCDyFeWes/s640/WP_000078%252520%2525282%252529.jpg"></p>
<p>这应该就是“大洋马”吧？够粗壮</p>
<p><img data-src="https://lh5.googleusercontent.com/-BtehHI55Gqg/TgFiFW7GsyI/AAAAAAAAAIU/mfVPewrs0bI/s640/WP_000079%252520%2525282%252529.jpg"></p>
<p>还有长角大洋牛</p>
<p><img data-src="https://lh5.googleusercontent.com/-P2DBMX0ziOE/TgFiZf96KAI/AAAAAAAAAIY/wl5y8Wwwkas/s640/WP_000080%252520%2525282%252529.jpg"></p>
<p>牛仔也疯狂之出函谷关</p>
<p><img data-src="https://lh3.googleusercontent.com/-NF6EkXoe_XM/TgFivdfwIyI/AAAAAAAAAIc/XGroPT2CbPQ/s640/WP_000081%252520%2525282%252529.jpg"></p>
<p>路边停着的摩托车一个比一个擦得亮</p>
<p><img data-src="https://lh3.googleusercontent.com/-6ctZ73QOJx4/TgFcYnATUcI/AAAAAAAAAGY/OhcQPuHco-o/s640/WP_000083.jpg"></p>
<p>餐馆里墙上挂着的野牛头标本</p>
<p><img data-src="https://lh5.googleusercontent.com/-sIAS15w0G1Q/TgFbbijtEMI/AAAAAAAAAGE/ovhyVBMh20U/s640/WP_000084.jpg"></p>
<p>我点了个猪排吃。这是一挂牛头卖猪肉的美国馆儿。</p>
<p>餐馆里的油画</p>
<p><img data-src="https://lh5.googleusercontent.com/--SKCI2hdSHE/TgFa-r-pIBI/AAAAAAAAAF4/rEsgdaVn2fA/s640/WP_000085.jpg"></p>
<ul>
<li><a href="javascript:;"> 点赞  2  </a></li>
<li><a href="javascript:;"> 收藏  </a></li>
<li><a href="javascript:;"> 分享 </a></li>
</ul>
]]></content>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>美国生活第一个月见闻，有图有真相（2）</title>
    <url>/blog/2011/06/01/%E7%BE%8E%E5%9B%BD%E7%94%9F%E6%B4%BB%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%9C%88%E8%A7%81%E9%97%BB%EF%BC%8C%E6%9C%89%E5%9B%BE%E6%9C%89%E7%9C%9F%E7%9B%B8%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<p>书接上回，这是公司楼下湖里的一条鳄鱼，到了中午鳄鱼头上还趴着一只晒暖儿的老龟</p>
<p><a href="/images/attachment/201106/1/0_1306938488KhRn.gif"> <img data-src="/images/attachment/201106/1/0_1306938490lIaP.gif" alt="WP_000035"></a></p>
<p>鳄鱼只是雕塑，从侧面比较容易看出来</p>
<p><a href="/images/attachment/201106/1/0_1306938493bAg5.gif"> <img data-src="/images/attachment/201106/1/0_1306938495Bcxz.gif" alt="WP_000036"></a></p>
<p><a href="/images/attachment/201106/1/0_1306938497qKz5.gif"> <img data-src="/images/attachment/201106/1/0_1306938500eReT.gif" alt="WP_000037"></a></p>
<p>中午去吃饭的时候经常走的一条小路，旁边有初生的小兔子</p>
<p><a href="/images/attachment/201106/1/0_1306938504liMg.gif"> <img data-src="/images/attachment/201106/1/0_1306938506T0Rt.gif" alt="WP_000039"></a></p>
<p>另外还有一些其他的鸟类，见人不跑</p>
<p><a href="/images/attachment/201106/1/0_1306938509DdMn.gif"> <img data-src="/images/attachment/201106/1/0_1306938511b04B.gif" alt="WP_000041"></a></p>
<p>这是某天下雨之后的云</p>
<p><a href="/images/attachment/201106/1/0_13069385141BMS.gif"> <img data-src="/images/attachment/201106/1/0_1306938515EoEw.gif" alt="WP_000044"></a></p>
<p>从另外一个角度看起来似乎没有那么红了</p>
<p><a href="/images/attachment/201106/1/0_13069385181gDz.gif"> <img data-src="/images/attachment/201106/1/0_1306938519G5I5.gif" alt="WP_000045"></a></p>
<p>市政大厅（city hall是这么翻译吧？）门口的雕塑</p>
<p><a href="/images/attachment/201106/1/0_1306938522css7.gif"> <img data-src="/images/attachment/201106/1/0_1306938524eJI4.gif" alt="WP_000047"></a></p>
<p>另外一个雕塑，讲的是这个地方刚通铁路的时候当地群众喜气洋洋的场景</p>
<p><a href="/images/attachment/201106/1/0_130693852705VT.gif"> <img data-src="/images/attachment/201106/1/0_1306938530d0Wm.gif" alt="WP_000048"></a></p>
<p>看了一场球赛，当地的达拉斯对阵新英格兰</p>
<p><a href="/images/attachment/201106/1/0_1306938534vpkX.gif"> <img data-src="/images/attachment/201106/1/0_1306938536lNkJ.gif" alt="WP_000049"></a></p>
<p>我不懂足球，但是我觉得两个队水平都不咋样</p>
<p><a href="/images/attachment/201106/1/0_1306938539SR78.gif"> <img data-src="/images/attachment/201106/1/0_1306938541q7tt.gif" alt="WP_000050"></a></p>
<p>当地的一个滑冰场</p>
<p><a href="/images/attachment/201106/1/0_1306938544dYYD.gif"> <img data-src="/images/attachment/201106/1/0_1306938546L0cL.gif" alt="WP_000051"></a></p>
<p>小学生在训练</p>
<p><a href="/images/attachment/201106/1/0_1306938549UPM0.gif"> <img data-src="/images/attachment/201106/1/0_130693855193lZ.gif" alt="WP_000052"></a></p>
<p>滑冰场旁边的一个体育用品商店，摆着卖的子弹</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106012224036111.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106012224063306.jpg" alt="WP_000053"> </a></p>
<p>同样也是摆在柜台上的枪支</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106012224107860.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106012224131990.jpg" alt="WP_000054"> </a></p>
<p>买了一本书</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106012224164135.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106012224195998.jpg" alt="WP_000058"> </a></p>
<p>是Tina Fey的Bossypants</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106012224228176.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106012224254814.jpg" alt="WP_000060"> </a></p>
<p>摘掉外皮之后的硬壳</p>
<p><a href="http://blog.csdn.net/cuipengfei1/"> <img data-src="/images/attachment/201106/1/0_1306938581pPR6.gif" alt="WP_000061"></a></p>
<p>今天暂且贴这些，照片没有了，再整理一下，明天应该会有去骑越野摩托的照片</p>
]]></content>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>WP7 Tip: 禁用Pivot控件的切换手势</title>
    <url>/blog/2011/07/06/WP7%20Tip-%E7%A6%81%E7%94%A8Pivot%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%88%87%E6%8D%A2%E6%89%8B%E5%8A%BF/</url>
    <content><![CDATA[<p>原文地址： <a href="http://www.imaginativeuniversal.com/blog/post/2010/12/09/WP7-Tip-disabling-the-Pivot-Control-swipe-gesture.aspx"> http://www.imaginativeuniversal.com/blog/post/2010/12/09/WP7-Tip-disabling-the-Pivot-Control-swipe-gesture.aspx</a></p>
<p>原文作者： <a href="http://www.imaginativeuniversal.com/blog/page/about.aspx"> James Ashley</a></p>
<p>在WP7社区中一个经常被问到的问题就是：在Pivot中放置了可以接受滑动手势的控件（比如说一个Slider）时，如何禁用Pivot控件本身内置的“用手指滑动<br>来切换视图”的功能呢？</p>
<p>对此问题，微软标准的答案是：你不应该这么做。这是“不好的做法”（Bad Practice），会造成用户体验的混淆。这种说法的前提是假设用户不会自己根据上下文<br>去思考，而总是预期“滑动”这一手势会在任何页面中都有一样的作用。这种答案听起来还不错，而且对于Pivot中内置Slider这种例子来说也很合理。况且，我们还<br>是可以把Slider纵向的放置在Pivot内的，那这个答案就显得更有道理了。</p>
<p>话又说回来，在WP7的TextBox中，我们可以用“按住并滑动”这一手势来操作光标在文本框内的位置。那么在Pivot控件中放置TextBox算不算是造成了不<br>好的用户体验呢？算不算是“不好的做法”（Bad<br>Practice）呢？我是不是应该想办法把TextBox也纵向放置呢？还有，ToggleSwitch控件（此控件来自于Silverlight for<br>Windows Phone Toolkit ）又该怎么办呢？</p>
<p>滑动这一手势对于手机来说是很常用的。很多针对WP7的新控件都会用到它。如果所有这些即将面世的新控件都不能放置在Pivot控件中的话，那就太可惜了。</p>
<p>本文接下来讲解如何在Pivot中放置一个横向放置的Slider，并让它正常运行。</p>
<p>简单来说，做成这件事的关键就是使用Pivot的IsHitTestVisible属性来禁用它的滑动手势。然后还要使用Touch类型的FrameReported<br>事件来决定何时去重新启用Pivot的滑动手势。</p>
<p>创建一个新工程，在页面中加入一个含有两个PivotItem的Pivot控件，并在其中一个PivotItem中加入一个Slider。</p>
<p>现在运行的话，你会发现用手指拨动Slider时，Slider中的Thumb可以被拖动，但是同时Pivot也会移动，甚至会切换到另一个视图去。</p>
<p>要解决这个问题，我们需要处理Slider的ManipulationStarted事件，在其中把Pivot的IsHitTestVisible这一属性设置为fa<br>lse，这样可以确保当手指在Slider上滑动时Pivot是被禁用掉的。</p>
<p>当滑动手势结束之后，我们需要重新启用Pivot。这件事不能在MouseLeftButtonUp事件的Handler里面做，因为当一个容器的IsHitTest<br>Visible被设为false时，它所包含的所有其他控件都无法触发MouseLeftButtonUp这一事件。我们可以把它放在ManipulationCom<br>pleted事件的Handler里面做，但是那样做却会导致一些不一致的行为。</p>
<p>排除上面两种方案之后，我们可以使用比较底层的Touch API，当“抬起”这个手势发生在Slider上的时候，把Pivot的IsHitTestVisible<br>属性设回为true。这个事件的Handler可以在页面的构造函数中挂上：</p>
<pre><code>Touch.FrameReported += (s, e) =&gt;


&#123;


    if (e.GetPrimaryTouchPoint(slider1).Action == TouchAction.Up)


    &#123;


        pivot1.IsHitTestVisible = true;


    &#125;


&#125;;
</code></pre>
<p>下面是相关的XAML代码：</p>
<pre><code>&lt;!--ContentPanel - place additional content here--&gt;


&lt;Grid x:Name=&quot;ContentPanel&quot; Grid.Row=&quot;1&quot; Margin=&quot;12,0,12,0&quot;&gt;


    &lt;controls:Pivot  HorizontalAlignment=&quot;Stretch&quot; Margin=&quot;6,6,0,0&quot;


                        Name=&quot;pivot1&quot; Title=&quot;pivot&quot;


                        VerticalAlignment=&quot;Top&quot; Height=&quot;595&quot;&gt;


        &lt;controls:PivotItem Header=&quot;item1&quot;&gt;


            &lt;Grid&gt;


                &lt;Slider  Height=&quot;107&quot; HorizontalAlignment=&quot;Left&quot;


                            Margin=&quot;-4,109,0,0&quot; Name=&quot;slider1&quot;


                            VerticalAlignment=&quot;Top&quot; Width=&quot;460&quot;


                            SmallChange=&quot;1&quot;


                            Maximum=&quot;100&quot;


                            Value=&quot;30&quot;


            ManipulationStarted=&quot;slider1_ManipulationStarted&quot; /&gt;


            &lt;/Grid&gt;


        &lt;/controls:PivotItem&gt;


        &lt;controls:PivotItem Header=&quot;item2&quot;&gt;


            &lt;Grid /&gt;


        &lt;/controls:PivotItem&gt;


    &lt;/controls:Pivot&gt;


&lt;/Grid&gt;
</code></pre>
<p>下面是所需的后台代码：</p>
<pre><code>public MainPage()


&#123;


    InitializeComponent();


    Touch.FrameReported += (s, e) =&gt;


    &#123;


        if (e.GetPrimaryTouchPoint(slider1).Action == TouchAction.Up)


        &#123;


            pivot1.IsHitTestVisible = true;


        &#125;


    &#125;;


&#125;


 


private void slider1_ManipulationStarted(object sender


    , ManipulationStartedEventArgs e)


&#123;


    pivot1.IsHitTestVisible = false;


&#125;
</code></pre>
<ul>
<li><a href="javascript:;"> 点赞  10  </a></li>
<li><a href="javascript:;"> 收藏  </a></li>
<li><a href="javascript:;"> 分享 </a></li>
</ul>
]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>美国生活第二个月照片（2）</title>
    <url>/blog/2011/06/25/%E7%BE%8E%E5%9B%BD%E7%94%9F%E6%B4%BB%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%9C%88%E7%85%A7%E7%89%87%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<p>恰好赶上这个月的十一号GearBox要在Duke Nukem北美发售之前搞一个Community<br>Day，就在达拉斯。作为一个八流的FPS爱好者一定要去凑凑热闹。</p>
<p>去往达拉斯的路上，透过车窗随便拍了一张</p>
<p><img data-src="https://lh4.googleusercontent.com/-1VqeO_d57ds/TgFrm3e_nQI/AAAAAAAAAIw/q6ww0RkiFTE/s640/WP_000088.jpg"></p>
<p>到达现场，室内很暗。摆了一些GearBox出品的其他游戏的海报。</p>
<p><img data-src="https://lh5.googleusercontent.com/-rWscQ7NkXew/TgFr8wc84_I/AAAAAAAAAI0/x0CitdBwSNY/s640/WP_000089.jpg"></p>
<p>这次来点干货，丢大爷的玉照</p>
<p><img data-src="https://lh3.googleusercontent.com/-OFg0khfQX2k/TgFsZB7phyI/AAAAAAAAAI4/y8QeE_tF74o/s640/WP_000090.jpg"></p>
<p>我才知道Borderland也是GearBox出的，进门之后有一个人偶</p>
<p><img data-src="https://lh6.googleusercontent.com/-Vs123ZTVUzs/TgFtnWJr7FI/AAAAAAAAAJQ/uctqlPREv3M/s640/WP_000095.jpg"></p>
<p>应该是一个侏儒在里面</p>
<p><img data-src="https://lh3.googleusercontent.com/-JhpJxeToe0k/TgFuKyUOhTI/AAAAAAAAAJU/SSBpk8VuC_I/s512/WP_000096.jpg"></p>
<p>会场里面人头攒动</p>
<p><img data-src="https://lh5.googleusercontent.com/-LH10KNJGfaA/TgFdeiJBWAI/AAAAAAAAAG4/d2Gvpgl_IBI/s640/IMG_6885.JPG"></p>
<p>虽说是以Duke Nukem为主角，但是最先介绍了一个未发布的新游戏，过程中禁止照相和摄像，只拍到一张</p>
<p><img data-src="https://lh5.googleusercontent.com/-ULSzTrvNexo/TgFdi0zYd4I/AAAAAAAAAG8/iJRM2LJPNX0/s640/IMG_6888.JPG"></p>
<p>这个哥们一直在会场里转悠，大热天的，不容易，再给你个镜头</p>
<p><img data-src="https://lh6.googleusercontent.com/-ORTWS_E9sPo/TgFvL0olKsI/AAAAAAAAAJg/VaxkaAf0HGc/s512/WP_000099.jpg"></p>
<p>下面这张是游戏体验室里面进门之后的一个牌子。内容YD，不解释</p>
<p><img data-src="https://lh4.googleusercontent.com/-7s7oj2COlLU/TgFvsrmcR9I/AAAAAAAAAJw/U7rTb0unLVc/s512/WP_000103%252520%2525282%252529.jpg"></p>
<p>下面这个是个终极神器</p>
<p><img data-src="https://lh5.googleusercontent.com/-VDAYajsTDrI/TgFdoJU31TI/AAAAAAAAAHA/cMPCqrfTtcE/s640/IMG_6892.JPG"></p>
<p>上面正中间是机箱，两边是两个显示器。下面一排是两个水冷的散热器。还要带上3D眼镜玩。</p>
<p>这是这台PC的背面</p>
<p><img data-src="https://lh3.googleusercontent.com/-0RQDIdftxs0/TgFwY1Nar3I/AAAAAAAAAJ4/xLZOc87f3n8/s640/WP_000105%252520%2525282%252529.jpg"></p>
<p>现场还有Cosplay的，这个Duke长的太端正了</p>
<p><img data-src="https://lh5.googleusercontent.com/-WlDYGy3LbDE/TgFxjAg_-PI/AAAAAAAAAKI/KL1_2NUjRbc/s512/WP_000109.jpg"></p>
<p>这个女的是谁不知道，但是大腿露得多，拍之</p>
<p><img data-src="https://lh3.googleusercontent.com/-iysJNt71w3E/TgFx5GuFzhI/AAAAAAAAAKM/JDdqvGcdeMY/s512/WP_000110.jpg"></p>
<p>坐在Duke的椅子上留个影。拍之前想一定要装个慈主明君的样子，结果往那个位子上一坐还是有点暴虐的意思</p>
<p><img data-src="https://lh3.googleusercontent.com/-LmOaAlI84uA/TgFdvgeHt1I/AAAAAAAAAHE/F0QVCfh-p4I/s512/IMG_6894.JPG"></p>
<p>下面这张稍微好一点</p>
<p><img data-src="https://lh6.googleusercontent.com/-z2QF6fh8ovs/TgFd3BpMsGI/AAAAAAAAAHI/ajo3-TejjSg/s640/IMG_6895.JPG"></p>
<p>因为就在达拉斯，所以出会场后顺便去了肯尼迪当年遇刺的地方。</p>
<p>开始没看懂这是个什么建筑，后来听说是按照坟设计的</p>
<p><img data-src="https://lh5.googleusercontent.com/--0PWoy5i-qw/TgF0LLLjYyI/AAAAAAAAAKU/8cFAfRBmqXg/s640/WP_000113.jpg"></p>
<p>进去一看果不其然。地上还有一块碑。谁知道肯尼迪的全名竟然这么长</p>
<p><img data-src="https://lh3.googleusercontent.com/-ah3oQ0hbKpQ/TgFd820W6eI/AAAAAAAAAHM/OR8nOATiwqk/s640/IMG_6902.JPG"></p>
<p>射杀肯尼迪的子弹据说就是从这栋楼射出来的</p>
<p><img data-src="https://lh3.googleusercontent.com/-wfEJKfu8NV4/TgF5nosb83I/AAAAAAAAAK0/-rIm3N2piRY/s512/WP_000119.jpg"></p>
<p>肯尼迪的车开到路面上的白叉叉的时候，第一枪响了，没打中肯尼迪，打中了旁边无辜的酱油哥</p>
<p><img data-src="https://lh6.googleusercontent.com/-botleBrYVWg/TgF2kP1E0uI/AAAAAAAAAKg/fsLw_4vAtCA/s640/WP_000116.jpg"></p>
<p>然后车子继续开，到了这个白叉叉所示位置时，第二枪射出，肯尼迪身亡</p>
<p><img data-src="https://lh4.googleusercontent.com/-cHcxN_e9of4/TgF3n_UDklI/AAAAAAAAAKk/7p4UVsa7G9A/s640/WP_000117%252520%2525282%252529.jpg"></p>
<p>这是肯尼迪遇刺的那条街的全貌&#x2F;2</p>
<p><img data-src="https://lh4.googleusercontent.com/-9ZvZktdUn_8/TgF4siNESmI/AAAAAAAAAKs/M9gQTlEYX_o/s640/WP_000118.jpg"></p>
<p>回来的路上发现达拉斯城里有一个区域是可以汽车和马车共享机动车道的</p>
<p><img data-src="https://lh5.googleusercontent.com/-xWKWSOa9-Mk/TgF6iJX3qOI/AAAAAAAAAK4/vZeIF2TjGBc/s640/WP_000120.jpg"></p>
<p>回去在这家吃的饭，好吃，分量足</p>
<p><img data-src="https://lh6.googleusercontent.com/--0tqzGOdXV0/TgF69CC4EHI/AAAAAAAAAK8/CQrIYJlojsM/s640/WP_000121.jpg"></p>
<p>印象很深刻。做个义务广告。这家叫Prairie House，下面一行小字： Frontier Cooking &amp; Catering。</p>
]]></content>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>美国生活第一个月见闻，有图有真相（3）</title>
    <url>/blog/2011/06/02/%E7%BE%8E%E5%9B%BD%E7%94%9F%E6%B4%BB%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%9C%88%E8%A7%81%E9%97%BB%EF%BC%8C%E6%9C%89%E5%9B%BE%E6%9C%89%E7%9C%9F%E7%9B%B8%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<p>我只带了手机，下面的照片是同事用相机照的。</p>
<p>这是邻居家的前门</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022200183621.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022200273776.jpg" alt="IMG_6773"> </a></p>
<p>这是我们住的后院</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022200396077.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/20110602220044499.jpg" alt="IMG_6802"> </a></p>
<p>这是小区里的某户大房子，车库都带三开门儿的</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022200559376.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022201025062.jpg" alt="IMG_6774"> </a></p>
<p>人工喷泉后面这家真爽</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022201095415.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022201138922.jpg" alt="IMG_6776"> </a></p>
<p>这是小区里面的路，路旁很绿</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022201227932.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022201285909.jpg" alt="IMG_6778"> </a></p>
<p>接下来这家才是真的夸张，我一开始都觉得这不是住人用的</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022201476960.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022201526398.jpg" alt="IMG_6783"> </a></p>
<p>这个是我所在地的市政厅的大门口</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022202105912.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022202173233.jpg" alt="IMG_6786"> </a></p>
<p>下面是装好了车准备去骑越野摩托了</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022202242964.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022202318367.jpg" alt="IMG_6807"> </a></p>
<p>下面这张，请忽视右侧打酱油的楼主，左边是装在车上的摩托车和四轮车</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022202363694.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022202397509.jpg" alt="IMG_6808"> </a></p>
<p>去往河谷的路很长，两边基本都是这么绿</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022202509418.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022202579530.jpg" alt="IMG_6819"> </a></p>
<p>路旁还有一些风力发电机</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022203026178.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022203044278.jpg" alt="IMG_6814"> </a></p>
<p>终于到了地方了，装备整齐，上车准备开起走</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022203125404.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022203189510.jpg" alt="snapshot20110602115922"> </a></p>
<p>先来个稳步前进</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022203234522.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022203302650.jpg" alt="snapshot20110602115828"> </a></p>
<p>再来个龟速过坡</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022203374432.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022203414035.jpg" alt="snapshot20110602115114"> </a></p>
<p>用力扭转方向盘</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022203442211.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022203493733.jpg" alt="snapshot20110602115030"> </a></p>
<p>屁股后面一溜烟</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022203521942.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022203577302.jpg" alt="snapshot20110602115248"> </a></p>
<p>同志们好，同志们辛苦了</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022204018509.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022204053935.jpg" alt="snapshot20110602115413"> </a></p>
<p>勇过泥水沟</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022204121747.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022204176235.jpg" alt="snapshot20110602115709"> </a></p>
<p>再次勇过泥水沟</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/20110602220422233.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022204275212.jpg" alt="snapshot20110602115807"> </a></p>
<p>最后整的满鞋满裤腿都是泥，翻身下车</p>
<p><a href="http://images.cnblogs.com.com/cnblogs_com/cuipengfei/201106/201106022204361713.jpg"><img data-src="http://images.cnblogs.com/cnblogs_com/cuipengfei/201106/201106022204412679.jpg" alt="IMG_6828"> </a></p>
]]></content>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 2 - Where</title>
    <url>/blog/2011/08/21/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects2%20-%20Where/</url>
    <content><![CDATA[<p>本文翻译自  <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet  </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/09/03/reimplementing-linq-to-objects-part-2-quot-where-quot.aspx">http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;09&#x2F;03&#x2F;reimplementing-linq-to-objects-part-2-quot-where-quot.aspx</a></p>
<p>提示：本篇文章较长。虽然我选择了一个比较简单的操作符来在本文中实现，不过我们还是会遇到一些特例以及一些与  LINQ<br>相关的原则。因为我还在试着找出表现本文内容的最佳方式，所以本文的排版方式暂时是实验性的。</p>
<p>我们将要实现“  Where  ”子句（也可以说是方法或操作符）。  Where  在总体上来说比较容易理解，但是涉及到延迟执行和流式处理的部分会有些麻烦。<br>Where  方法是泛型的，不过只有一个类型参数（在我看来这很重要，因为我觉得一个方法的泛型参数越多就越令人难以理解）。哦，对了，我们将在本文开始涉及查询表<br>达式，这算是本文的一点额外猛料。  </p>
<h1 id="Where-是什么？"><a href="#Where-是什么？" class="headerlink" title="Where  是什么？"></a>Where  是什么？</h1><p>Where  有两个重载：  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">static</span> IEnumerable &lt; TSource &gt; <span class="built_in">Where</span>(<span class="keyword">this</span> IEnumerable &lt; TSource &gt; source, Func &lt; TSource, <span class="type">bool</span> &gt; predicate)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">static</span> IEnumerable &lt; TSource &gt; <span class="built_in">Where</span>(<span class="keyword">this</span> IEnumerable &lt; TSource &gt; source, Func &lt; TSource, <span class="type">int</span>, <span class="type">bool</span> &gt; predicate)</span><br></pre></td></tr></table></figure>

<p>在开始讲述  Where  方法到底做什么之前，我先指出几点  LINQ  操作符的常识，这些常识适用于几乎所有的  LINQ  操作符：  </p>
<ul>
<li><p>LINQ  操作符都是  <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx"> 扩展方法  </a> -  扩展方法要定义在顶层的，非嵌套的静态类型中而且其第一个参数要带有“  this”修饰符。简单来说，扩展方法可以被其第一个参数的实例调用，就好像它是该参数类型的实例方法一样。</p>
</li>
<li><p>LINQ  操作符是  <a href="http://msdn.microsoft.com/en-us/library/twcad0zb.aspx"> 泛型方法  </a> -  我们要讲的  Where  操作符只有一个叫做  TSource的类型参数，该类型参数指明了要处理的序列的类型。比如说，如果要处理一个  string  的序列，  TSource  就是  string  。</p>
</li>
<li><p>LINQ  操作符接受  Func&lt;…&gt; 这一族的泛型委托作为参数，通常以  <a href="http://msdn.microsoft.com/en-us/library/bb397687.aspx"> lamdba  表达式</a>的方式提供，不过委托的其他表现形式也都可以作为其参数。</p>
</li>
<li><p>LINQ  操作符处理序列。序列以  <a href="http://msdn.microsoft.com/en-us/library/9eekhta0.aspx"> IEnumerable<T> </a> 的形式出现，  IEnumerable<T> 中含有一个类型为  <a href="http://msdn.microsoft.com/en-us/library/78dfe2yb.aspx"> IEnumerator<T></a> 的迭代器。</p>
</li>
</ul>
<p>我希望本文的读者对以上提及的概念有所了解，所以我就不再深入解释了。如果您对上述内容不够熟悉的话，请在继续读下去之前先去做些功课，否则接下来的内容将让您很难理<br>解。</p>
<p>Where  的目的是去过滤一个序列。它接受一个输入序列及一个 谓词 _<br>作为参数，返回一个结果序列。输出序列和输入序列的元素类型相同（也就是说如果输入是一个  string  的序列，输出也会是个  string<br>的序列），输出序列中只会包含输入序列中符合谓词条件的元素。（输入序列中的元素会依次被谓词检验。只有谓词返回  true<br>时，一个元素才会被包含在输出序列中。）</p>
<p>下面是关于  Where  的几个重要的细节：  </p>
<ul>
<li><p>Where  不会对输入序列做任何修改：它和  <a href="http://msdn.microsoft.com/en-us/library/wdka673a.aspx"> List<T>.RemoveAll </a> 之类的方法不一样。</p>
</li>
<li><p>Where  是延迟执行的  -  在你开始读取输出序列中的元素之前，  Where  不会去输入序列中取元素。</p>
</li>
<li><p>不过也有一点不是延迟执行的，它会立即检查参数是否为  null 。</p>
</li>
<li><p>它以流式处理结果：它每次只处理一个结果元素，它把结果元素  yield  返回而且不会保留其引用。这意味着你可以把  Where应用在一个无限长的序列上（比如说一个随机数的序列）。</p>
</li>
<li><p>你每在输出序列上迭代一次，  Where  方法就会在输入序列上迭代一次。</p>
</li>
<li><p>如果输出序列的迭代器被  Dispose  掉的话，对应的输入序列的迭代器也会被  Dispose  掉。（  C#   中的  foreach语句会用  try&#x2F;finally  来保障迭代器总是会被  Dispose  调，无论循环是因何种原因结束的。）</p>
</li>
</ul>
<p>以上几点之中的有些对其它的操作符也适用。</p>
<p>Where  的一个重载形式会接受一个  Func&lt;TSource, int, bool&gt; 作为参数，此重载让谓词中不仅可以访问元素值，还可以访问元素的<br>index  。  Index  总是从  0  开始并且每次递增  1  ，无论之前谓词的结果如何。  </p>
<h1 id="我们要测试些什么？"><a href="#我们要测试些什么？" class="headerlink" title="我们要测试些什么？"></a>我们要测试些什么？</h1><p>理想情况下，我们要测试上述所有的东西。但是不幸的是，流式处理和序列被迭代多少次的细节测试起来很是麻烦。考虑到我们还要实现那么多的东西，我们以后再去测试那些。</p>
<p>我们来看看一些测试。首先，看一个“正向”测试  -  有一个整数数组，我们用一个  lambda  表达式来使得输出结果中仅包含小于  4<br>的元素。（“过滤”这个词无处不在，这真是很不幸。“过滤掉”这个说法比“包含”要好理解得多，但是实际上谓词就是以“正向”的方式来处理的。）  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SimpleFiltering</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">int</span>[] source = &#123;</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">4</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">8</span>,</span><br><span class="line">  <span class="number">1</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> result = source.Where(x =&gt; x &lt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"> result.AssertSequenceEqual(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然  NUnit  中已经有了  CollectionAssert  ，我还是在用  MoreLINQ  中的  TestExtension。有三个原因让我觉得  MoreLINQ  的扩展方法更好用：</p>
<ul>
<li><p>扩展方法有助于减轻代码的混乱程度。</p>
</li>
<li><p>可以使用变长数组来表示期望的输出，这样更易于表达测试的意图。</p>
</li>
<li><p>断言失败的提示信息更清楚。</p>
</li>
</ul>
<p>AssertSequenceEqual 所做的事情看名字就可以猜出来，它检查输出序列（通常就是你调用  AssertSequenceEqual<br>方法时所使用的那个变量）和期望的序列（通常就是作为参数传入的变长数组）是否匹配。</p>
<p>目前为止进行的还不错。现在来看看参数校验吧：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NullSourceThrowsNullArgumentException</span>()</span> &#123;</span><br><span class="line"> IEnumerable &lt; <span class="built_in">int</span> &gt; source = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"> Assert.Throws &lt; ArgumentNullException &gt; (() =&gt; source.Where(x =&gt; x &gt; <span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NullPredicateThrowsNullArgumentException</span>()</span> &#123;</span><br><span class="line"> <span class="built_in">int</span>[] source = &#123;</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">7</span>,</span><br><span class="line">  <span class="number">9</span>,</span><br><span class="line">  <span class="number">10</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> Func &lt; <span class="built_in">int</span>, <span class="built_in">bool</span> &gt; predicate = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"> Assert.Throws &lt; ArgumentNullException &gt; (() =&gt; source.Where(predicate));</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>我就不再费劲去检查  ArgumentNullException<br>里面的参数名字了，但是我要测试参数是不是立即被校验的，这一点很重要的。我没有迭代输出结果，所以如果参数校验是延迟执行的，这两个测试将不能通过。</p>
<p>最后还有一个有趣的测试也是与延迟执行有关的。我们将用一个叫做  ThrowingEnumerable  的  helper<br>类来做这个测试，这个类是一个序列，你一旦迭代它，它就会抛出一个  InvalidOperationException  。这个测试是想要测试两点：  </p>
<ul>
<li><p>仅仅调用  Where  不会开始迭代输入序列。</p>
</li>
<li><p>调用  GetEnumerator()  来获取迭代器，然后再调用迭代器的  MoveNext()  的话，就开始迭代了，这就会导致一个异常被抛出。</p>
</li>
</ul>
<p>对其它的操作符我们也需要做类似的测试，所以我在  ThrowingEnumerable  里写了一个  helper  方法：  </p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">internal <span class="keyword">static</span> <span class="type">void</span> <span class="type">AssertDeferred</span> &lt; T &gt; (<span class="type">Func</span> &lt; <span class="type">IEnumerable</span> &lt; <span class="type">int</span> &gt; , <span class="type">IEnumerable</span> &lt; T &gt;&gt; deferredFunction) &#123;</span><br><span class="line"> <span class="type">ThrowingEnumerable</span> source = new <span class="type">ThrowingEnumerable</span>();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> <span class="built_in">result</span> = deferredFunction(source);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">using</span>(<span class="keyword">var</span> <span class="keyword">iterator</span> = <span class="built_in">result</span>.<span class="type">GetEnumerator</span>()) &#123;</span><br><span class="line">  <span class="type">Assert</span>.<span class="type">Throws</span> &lt; <span class="type">InvalidOperationException</span> &gt; (() =&gt; <span class="keyword">iterator</span>.<span class="type">MoveNext</span>());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>现在我们就可以测试  Where  是不是延迟执行的了：  </p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">[Test]</span><br><span class="line">public  <span class="keyword">void</span>  ExecutionIsDeferred()</span><br><span class="line">&#123;</span><br><span class="line">    ThrowingEnumerable.AssertDeferred(<span class="function"><span class="params">src</span> =&gt;</span> src.Where(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">0</span>  ));</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>以上所示的都是对  Where  的简单重载的测试，也就是那个谓词只能访问元素值而不能访问元素  index  的重载。能够访问  index<br>的那个重载的测试与上述测试非常类似。  </p>
<h1 id="来动手实现吧！"><a href="#来动手实现吧！" class="headerlink" title="来动手实现吧！"></a>来动手实现吧！</h1><p>原版的  LINQ to Objects  能够通过所有这些测试，现在来实现我们自己的代码吧。我们将会用到  <a href="http://msdn.microsoft.com/en-us/library/dscyy5s0.aspx"> 迭代器代码块</a> ，它在  C#  2  中被引入来简化<br>IEnumerable<T> 的实现。如果你想了解更多的背景知识的话，我有  <a href="http://csharpindepth.com/Articles/Chapter11/StreamingAndIterators.aspx"> 几篇</a> <a href="http://csharpindepth.com/Articles/Chapter6/IteratorBlockImplementation.aspx"> 文章</a><br>你可以去读一下  …  或者读  C#  in Depth  （第一或第二版都可以）的第六章也可以。迭代器代码块让我们可以很简单的实现延迟执行  …<br>不过它也是一把双刃剑，我们马上就会体会到了。</p>
<p>Where  的核心部分是这样的：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Naive implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">Where</span> &lt; TSource &gt; (<span class="params"><span class="keyword">this</span> IEnumerable &lt; TSource &gt; source, Func &lt; TSource, <span class="built_in">bool</span> &gt; predicate</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> source) &#123;</span><br><span class="line">  <span class="keyword">if</span> (predicate(item)) &#123;</span><br><span class="line">   <span class="keyword">yield</span></span><br><span class="line">   <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>很简单，是吧？用迭代器代码块写出来的代码就和用自然语言描述起来差不多：迭代输入序列中的每一个元素，如果谓词在一个元素上返回  true<br>的话，这个元素就可以被  yield  （也就是包含）到输出序列中去。</p>
<p>诸位请看，有一些单元测试已经可以通过了。现在我们只需要参数校验了。参数校验很简单的，对吧？我们来试试看：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Naive validation - broken!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">Where</span> &lt; TSource &gt; (<span class="params"><span class="keyword">this</span> IEnumerable &lt; TSource &gt; source, Func &lt; TSource, <span class="built_in">bool</span> &gt; predicate</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (predicate == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;predicate&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> source) &#123;</span><br><span class="line">  <span class="keyword">if</span> (predicate(item)) &#123;</span><br><span class="line">   <span class="keyword">yield</span></span><br><span class="line">   <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>呃。测试亮起了红灯，通不过，在“  throw  ”的那一句上设断点也没用  …  断点根本就执行不到。怎么回事儿？</p>
<p>我之前已经给出过很明显的提示了。导致问题的就是延迟执行。在返回值被迭代之前， 我们的代码不会被执行。我们的代码故意的 没有 _<br>去迭代返回值，所以参数校验也不会被执行。</p>
<p>我们遇到了一个  C#   设计上的缺陷。  C#   中的迭代器代码块不能很好的对“立即执行”（通常用来做参数校验）和“延迟执行”作出分离。我们必须得把我们上<br>述的实现分为两个方法：第一个方法做参数校验，第二个方法含有迭代器代码块，用来实现延迟执行，第一个方法会调用第二个方法：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">Where</span> &lt; TSource &gt; (<span class="params"><span class="keyword">this</span> IEnumerable &lt; TSource &gt; source, Func &lt; TSource, <span class="built_in">bool</span> &gt; predicate</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (predicate == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;predicate&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> WhereImpl(source, predicate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">WhereImpl</span> &lt; TSource &gt; (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; source,</span></span></span><br><span class="line"><span class="params"><span class="function"> Func &lt; TSource, <span class="built_in">bool</span> &gt; predicate</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> source) &#123;</span><br><span class="line">  <span class="keyword">if</span> (predicate(item)) &#123;</span><br><span class="line">   <span class="keyword">yield</span></span><br><span class="line">   <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的代码很丑陋，但是能用：所有的针对于  Where  的简单重载（不含有  index  ）的测试都可以通过了。有了现在的基础，要实现  Where<br>的含有  index  的重载也就很简单了：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">Where</span> &lt; TSource &gt; (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; source,</span></span></span><br><span class="line"><span class="params"><span class="function"> Func &lt; T, <span class="built_in">int</span>, <span class="built_in">bool</span> &gt; predicate</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (predicate == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;predicate&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> WhereImpl(source, predicate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">WhereImpl</span> &lt; TSource &gt; (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; source,</span></span></span><br><span class="line"><span class="params"><span class="function"> Func &lt; TSource, <span class="built_in">int</span>, <span class="built_in">bool</span> &gt; predicate</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> source) &#123;</span><br><span class="line">  <span class="keyword">if</span> (predicate(item, index)) &#123;</span><br><span class="line">   <span class="keyword">yield</span></span><br><span class="line">   <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  index++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>现在所有单元测试都通过了，我们的实现完成了。不过等一下  …  我们还没有无所不用其极的使用  Where  呢。  </p>
<h1 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h1><p>到目前为止，我们都是在直接的调用  Where  方法（尽管是以扩展方法的形式出现的），不过  LINQ  可是还给我们提供了查询表达式的。下面是“<br>SimpleFiltering  ”那个测试的重写版本，其中用到了查询表达式：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QueryExpressionSimpleFiltering</span>()</span> &#123;</span><br><span class="line"> <span class="built_in">int</span>[] source = &#123;</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">4</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">8</span>,</span><br><span class="line">  <span class="number">1</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> result = <span class="keyword">from</span> x <span class="keyword">in</span> source</span><br><span class="line"></span><br><span class="line"> <span class="keyword">where</span> x &lt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">select</span> x;</span><br><span class="line"></span><br><span class="line"> result.AssertSequenceEqual(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（本博文中出现的方法名和下载到的代码中的不同，因为方法名中含有博客服务器的敏感词。呃。）</p>
<p>以上代码会和我们先前的测试产出 完全相同的  IL 代码。编译器会把这种查询表达式的形式转译成调用方法的形式，并把用  lambda<br>表达式写出来的条件判断（  x &lt; 4  ）转换成一个委托。你可能会感到有点惊讶，因为我们还没有实现  Select  方法呢  …<br>不过我们现在用到的  select<br>投影操作实际上是不做任何事情的；我们并没有做任何真正的投影变换。这种情况下，只要查询表达式中含有任意其他的查询（上述代码中，这个查询就是  Where<br>）在内，编译器就会把“  select  ”从句忽略掉，这样的话我们没有实现  select  也就无关紧要了。如果你把“  select x  ”改写成“<br>select x * 2  ”的话，将无法通过编译，因为我们的  LINQ  实现中只有  Where  。</p>
<p>查询表达式是基于上述这种模式的，这一强大的特性使得它极具灵活性。举例来说，  LINQ to Rx<br>就是基于这一点才能做到仅需实现对其应用场景有意义的操作符的。与此类似，  C#   编译器在处理查询表达式的时候并不需要知晓任何与<br>IEnumerable<T> 有关的东西，也正是如此，像  IObservable<T> 这样的完全与  IEnumerable<T><br>无关的接口也可以得以应用。  </p>
<h1 id="我们学到了什么？"><a href="#我们学到了什么？" class="headerlink" title="我们学到了什么？"></a>我们学到了什么？</h1><p>本文中有不少不太好理解的东西，其中与我们的实现和  LINQ  核心原则有关的是：  </p>
<ul>
<li><p>LINQ to Objects  是基于扩展方法，委托还有  IEnumetable<T> 的。</p>
</li>
<li><p>条件允许的话，  LINQ  操作符会尽量利用延迟执行和流式处理。</p>
</li>
<li><p>LINQ  操作符不会改变输入序列，而是会返回一个包含符合条件的元素的新序列。</p>
</li>
<li><p>查询表达式基于编译器对一些模式的解释；你要用到的查询表达式和哪些模式相关，你就只需要实现那些模式就可以了，无需多劳。</p>
</li>
<li><p>迭代器代码块很适合用来实现延迟执行  …</p>
</li>
<li><p>…  但是它也使得需要立即执行的参数校验变得很难搞。</p>
</li>
</ul>
<h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="http://yoda.arachsys.com/blogfiles/csharp/l2o/Linq-To-Objects-2.zip"> Linq-To-Objects-2.zip  </a></p>
<p>很多人要求给本项目建一个源码管理服务器，这件事正在进行中；大概下一篇博文之前就可以完成。</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 3 - Select</title>
    <url>/blog/2011/08/22/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects3%20-%20Select/</url>
    <content><![CDATA[<p>本文翻译自  <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet  </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/23/reimplementing-linq-to-objects-part-3-quot-select-quot-and-a-rename.aspx">http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;23&#x2F;reimplementing-linq-to-objects-part-3-quot-select-quot-and-a-rename.aspx</a></p>
<p>距离上次写完本系列博文的  <a href="http://msmvps.com/blogs/jon_skeet/archive/2010/09/03/reimplementing-linq-to-objects-part-1-introduction.aspx"> 第一篇  </a> 和  <a href="http://msmvps.com/blogs/jon_skeet/archive/2010/09/03/reimplementing-linq-to-objects-part-2-quot-where-quot.aspx"> 第二篇</a> 已经有一段日子了，希望接下来的进度会快一些。</p>
<p>现在我给本项目在  <a href="http://edulinq.googlecode.com/"> Google Code  上建立了源码管理  </a><br>，现在就无需每篇博文包含一个  zip  文件了。创建项目时，我给它取了个显而易见的名字，叫做  Edulinq  。我修改了代码中的命名空间，而且现在<br><a href="http://msmvps.com/blogs/jon_skeet/archive/tags/Edulinq/default.aspx"> 这一系列博文的  tag</a> 也修改为了<br>Edulinq  了。好了，闲话少叙  …  我们来开始重新实现  LINQ  吧，这次要实现  Select  操作符。  </p>
<h1 id="Select-操作符是什么？"><a href="#Select-操作符是什么？" class="headerlink" title="Select  操作符是什么？"></a>Select  操作符是什么？</h1><p>和  Where  类似，  <a href="http://msdn.microsoft.com/en-us/library/bb357126.aspx"> Select  也有两个重载  </a> ：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable &lt; TResult &gt; Select &lt; TSource, TResult &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>, Func &lt; TSource, TResult &gt; selector)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable &lt; TResult &gt; Select &lt; TSource, TResult &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>, Func &lt; TSource, <span class="keyword">int</span>, TResult &gt; selector)</span><br></pre></td></tr></table></figure>

<p>其第二个重载让投影操作可以访问到序列元素的  index  。</p>
<p>先说简单的东西：  Select  方法把一个序列 投影成为另一个序列：“  selector<br>”这个作为参数的委托会被依次应用到输入序列中的每一个元素上，并每次  yield  返回一个输出元素。  Select  的行为和  Where<br>很类似（实在是太类似了，以至于下面一段文字都是从上一篇文章中复制过来的，只是稍加修改）：  </p>
<ul>
<li><p>Select  不会对输入序列做任何修改。</p>
</li>
<li><p>Select  是延迟执行的  -  在你开始读取输出序列中的元素之前，  Select  不会去输入序列中取元素。</p>
</li>
<li><p>不过也有一点不是延迟执行的，它会立即检查参数是否为  null 。</p>
</li>
<li><p>它以流式处理结果：它每次只处理一个结果元素。</p>
</li>
<li><p>你每在输出序列上迭代一次，  Select  方法就会在输入序列上迭代一次，这二者是严格对应的。</p>
</li>
<li><p>每次  yield  返回结果值的时候，“  selector  ”这个委托就会被调用一次。</p>
</li>
<li><p>如果输出序列的迭代器被  Dispose  掉的话，对应的输入序列的迭代器也会被  Dispose  掉。</p>
</li>
</ul>
<h1 id="我们要测试什么？"><a href="#我们要测试什么？" class="headerlink" title="我们要测试什么？"></a>我们要测试什么？</h1><p>对  Select  的测试和对  Where  的测试也是很类似的，之前我们是针对  Where  的过滤功能来做测试，现在我们是针对  Select<br>的投影功能来做测试。</p>
<p>有几个测试比较有趣。首先，你会发现  Select  方法是泛型的，而且有两个泛型参数，分别是  TSource  和  TResult<br>。虽然这两个参数的含义不言自明，不过还是得写一个单元测试来测一下  TSource  和  TResult  分别为不同类型的情况，比如说把  int<br>转换成  string  的情况。  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SimpleProjectionToDifferentType</span>()</span> &#123;</span><br><span class="line"> <span class="built_in">int</span>[] source = &#123;</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">5</span>,</span><br><span class="line">  <span class="number">2</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> result = source.Select(x =&gt; x.ToString());</span><br><span class="line"></span><br><span class="line"> result.AssertSequenceEqual(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>然后我们看另一个测试，这个测试给我们展示了使用  LINQ  有可能会遇到的奇怪的副作用。其实我们本可以在  Where<br>的单元测试中做这个例子的，不过针对  Select  做起来更清晰一些：  </p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[Test]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> SideEffectsInProjection() &#123;</span><br><span class="line"> <span class="keyword">int</span>[] <span class="keyword">source</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// Actual values won&#x27;t be relevant _</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> var query = <span class="keyword">source</span>.Select(x =&gt; <span class="keyword">count</span>++);</span><br><span class="line"></span><br><span class="line"> query.AssertSequenceEqual(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"> query.AssertSequenceEqual(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">count</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"> query.AssertSequenceEqual(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>请注意我们只调用了  Select  一次，但是对  Select  方法返回值的多次迭代结果都不同，这是因为“  count<br>”这个变量的值被保留住了并在每一次的投影过程中都会被修改。希望您不要写出这种代码。</p>
<p>再然后，我们可以写一些同时包含“  select  ”和“  where  ”的查询表达式：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WhereAndSelect</span>()</span> &#123;</span><br><span class="line"> <span class="built_in">int</span>[] source = &#123;</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">4</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">8</span>,</span><br><span class="line">  <span class="number">1</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> result = <span class="keyword">from</span> x <span class="keyword">in</span> source</span><br><span class="line"></span><br><span class="line"> <span class="keyword">where</span> x &lt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">select</span> x * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"> result.AssertSequenceEqual(<span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你用过  LINQ to Objects  的话，那么上面这些东西对你来说应该是很熟悉很亲切的，没有什么令人惊讶的。  </p>
<h1 id="来动手实现吧！"><a href="#来动手实现吧！" class="headerlink" title="来动手实现吧！"></a>来动手实现吧！</h1><p>我们实现  Select  的方式和实现  Where  的方式差不多。我只是把  Where<br>的实现的代码复制过来，稍加修改，这二者真的就是如此的相似。详细说来就是：  </p>
<ul>
<li><p>我们利用迭代器代码块来轻松实现序列的返回。</p>
</li>
<li><p>要用到迭代器代码块就意味着必须要把参数校验的代码和核心实现代码分离开。（我写完上一篇博文之后了解到  VB11<br>中将会有匿名迭代器，匿名迭代器可以解决这个问题。哎。羡慕  VB  用户的感觉怪怪的，但是我会学着接受现实的。）</p>
</li>
<li><p>我们在迭代器代码块中使用  foreach  ，这样就可以保证在输出序列的迭代器被  Dispose<br>时或者输入序列的元素被迭代完时，输入序列的迭代器可以被妥当的  Dispose  掉。</p>
</li>
</ul>
<p>由于  Select  的实现和  Where  的实现实在是太类似了，下面我直接给出代码。  Select  方法的重载（含有  index<br>的那一个）的实现代码就不展示了，因为它和下面的代码差别实在太小了。  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TResult &gt; <span class="title">Select</span> &lt; TSource, TResult &gt; (<span class="params"><span class="keyword">this</span> IEnumerable &lt; TSource &gt; source, Func &lt; TSource, TResult &gt; selector</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (selector == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;selector&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> SelectImpl(source, selector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TResult &gt; <span class="title">SelectImpl</span> &lt; TSource, TResult &gt; (<span class="params"><span class="keyword">this</span> IEnumerable &lt; TSource &gt; source, Func &lt; TSource, TResult &gt; selector</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> source) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">yield</span></span></span><br><span class="line"><span class="function">  <span class="keyword">return</span> <span class="title">selector</span>(<span class="params">item</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很简单，对吧？真正用来实现功能的代码还没有参数校验的代码长呢。  </p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>虽然说我不想让我的读者感到无聊（你们中的有些人 可能会感到惊讶），但是我还是得承认本篇文章颇有些无趣。我重复的强调“和  Where<br>很类似”，强调了那么多次，搞得都有点乏味了，不过这样才足以说明实现  Select  并没有你可能想象的那么复杂。</p>
<p>下次（我希望就在几天之内）我会写点不一样的东西。我还不确定下次要写哪个方法，待选的方法还有很多  …</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 4 - Range</title>
    <url>/blog/2011/08/22/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects4%20-%20Range/</url>
    <content><![CDATA[<p>本文翻译自  <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet  </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/24/reimplementing-linq-to-objects-part-4-range.aspx">http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;24&#x2F;reimplementing-linq-to-objects-part-4-range.aspx</a></p>
<p>本篇博文较短，接下来的几篇估计也会比较短。我觉得只有 很相似的几个  LINQ  操作符才适合放到同一篇博文里面，比如  Count  和<br>LongCount  就比较适合放在一起讲。不过我也要采纳读者的意见，如果你喜欢“肥胖”一点的博文的话，请留言说明。</p>
<p>本文将要讲解  Range  操作符。  </p>
<h1 id="Range-操作符是什么？"><a href="#Range-操作符是什么？" class="headerlink" title="Range  操作符是什么？"></a>Range  操作符是什么？</h1><p><a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.range.aspx"> Range  </a> 只有一种方法签名：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  IEnumerable&lt; <span class="built_in">int</span>  &gt; Range(<span class="built_in">int</span>  start, <span class="built_in">int</span>  <span class="keyword">count</span>)</span><br></pre></td></tr></table></figure>

<p>和  LINQ  中的其他操作符不同，  Range  不是扩展方法，它就是一个普通的静态方法。  Range  返回一个可枚举的对象，该对象会<br>yield  返回“  count  ”个整数，返回的整数序列从“  start  ”开始，逐次加一。举例来说，<br>Enumerable.Range(6,3)  会返回  6  ，  7  ，  8  。</p>
<p>由于  Range  不会接受输入序列，所以也就无所谓对输入的流式处理和缓冲了。不过它有以下几点行为：  </p>
<ul>
<li><p>参数的校验需要立即执行；参数  count  不可以为负数，也不可以让输出值中包含超出  Int32  范围的值。</p>
</li>
<li><p>输出值是被延迟输出的。  Range  的执行效率应该比创建并返回一个“  count  ”长度的数组来得更高。</p>
</li>
</ul>
<h1 id="我们要如何测试呢？"><a href="#我们要如何测试呢？" class="headerlink" title="我们要如何测试呢？"></a>我们要如何测试呢？</h1><p>要测试普通的静态方法就给我们带来了一个新的挑战，因为我们要在原版的  LINQ  实现和  Edulinq<br>的实现之间做切换。这是由我所使用的命名空间所带来的缺陷，单元测试写在  Edulinq.Tests  这个命名空间内，我们的实现写在  Edulinq<br>这个命名空间中。在编译器寻找一个类型的时候，父级命名空间会比其他的通过  using  引入的命名空间拥有更高的优先级，即使是使用  using<br>来显式引入一个类型的别名时也是如此。</p>
<p>我选择的解决方式是用一个  using  指令来引入一个叫做  RangeClass  的别名。  using  指令要么指向<br>System.Linq.Enumerable  要么指向  Edulinq.Enumerable  。测试代码中用到  Range  时都是这样写：<br>RangeClass.Range  。为此我创建了两个项目配置，其中一个定义了叫做  NORMAL_LINQ<br>的预处理符号，另一个则没有定义任何预处理符号，这样就可以在两种  LINQ  实现之间做切换了。  RangeTest.cs  中会包含如下的代码：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="meta">#if NORMAL_LINQ</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  Range<span class="keyword">Class</span> =  <span class="keyword">System</span>  .Linq.Enumerable;</span><br><span class="line"></span><br><span class="line"><span class="meta">#else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  Range<span class="keyword">Class</span> = Edulinq.Enumerable;</span><br><span class="line"></span><br><span class="line"><span class="meta">#endif  </span></span><br></pre></td></tr></table></figure>

<p>当然了，也有别的办法可以替代以上的方式：  </p>
<ul>
<li><p>可以把单元测试代码换到另外一个命名空间中去。</p>
</li>
<li><p>也可以让项目的引用项依赖于不同的项目配置，用于测试原版  LINQ  的项目配置不包含对  Edulinq  的引用，而用于测试  Edulinq<br>的项目配置则不引用  System.Core  。这样就可以在  NORMAL_LINQ  的预处理符号下直接使用  using System.Linq<br>，并直接使用  Enumerable.Range  。测试默认的  LINQ  实现时亦是如此。</p>
</li>
</ul>
<p>我喜欢上面提到的第二种方式，但是那需要手动修改测试工程的工程文件，因为  Visual Studio<br>没有提供任何根据不同条件引用不同引用项的功能。我以后或许会用到这个方法，欢迎提供建议。  </p>
<h1 id="我们要测试什么呢？"><a href="#我们要测试什么呢？" class="headerlink" title="我们要测试什么呢？"></a>我们要测试什么呢？</h1><p>Range  需要的测试并不多，我只有八个方面需要测试，而且都不怎么很特别：  </p>
<ul>
<li><p>一个简单有效的  Range  操作应该可以通过  AssertSequenceEqual 的测试。</p>
</li>
<li><p>起始值应该可以是负数。</p>
</li>
<li><p>Range(Int32.MinValue, 0)  会返回一个空序列。</p>
</li>
<li><p>Range(Int32.MaxValue, 1)  会返回仅包含  Int32.MaxValue  的序列。</p>
</li>
<li><p>count  不可以为负数。</p>
</li>
<li><p>count  可以为  0  。</p>
</li>
<li><p>start+count-1  不可以超过  Int32.MaxValue  （所以  Range(Int32.MaxValue, 2)<br>应该是一个无效操作）。</p>
</li>
<li><p>start+count-1  可以等于  Int32.MaxValue  （所以  Range(Int32.MaxValue, 1)<br>应该是一个有效操作）。</p>
</li>
</ul>
<p>最后两项要分别被几组不同的数据测试，这几组数据是：大的  start  值和小的  count  值，小的  start  值和大的  count<br>值，还有一组是  start  和  count  都相当大。</p>
<p>请注意我没有做针对于惰性求值的测试，我确实可以测一下返回值是否实现了任何其他的集合接口，不过那会显得有点奇怪。不过我们有一些测试中用到的  count<br>值非常大，给这么大的集合分配内存几乎肯定要失败。  </p>
<h1 id="开始实现吧！"><a href="#开始实现吧！" class="headerlink" title="开始实现吧！"></a>开始实现吧！</h1><p>你肯定早就猜到了，我们将会用分隔开的两个方法来实现  Range  。一个  public  的方法用来立即执行参数校验，还有一个  private<br>的方法用来做核心部分的工作，其中包含迭代器代码块。</p>
<p>由于一开始就确定了参数不会超过  Int32  的上下限，我们在实现的主体部分就可以随意一点了。  </p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable &lt; <span class="built_in">int</span> &gt; Range(<span class="built_in">int</span> start, <span class="built_in">int</span> <span class="keyword">count</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">count</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert everything to long to avoid overflows. There are other ways of checking _</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for overflow, but this way make the code correct in the most obvious way._</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ((<span class="built_in">long</span>) start + (<span class="built_in">long</span>) <span class="keyword">count</span> - <span class="number">1</span> L &gt; <span class="built_in">int</span>.MaxValue) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> RangeImpl(start, <span class="keyword">count</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable &lt; <span class="built_in">int</span> &gt; RangeImpl(<span class="built_in">int</span> start, <span class="built_in">int</span> <span class="keyword">count</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">count</span>; i++) &#123;</span><br><span class="line">  yield</span><br><span class="line">  <span class="keyword">return</span> start + i;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>有几点需要说明：  </p>
<ul>
<li><p>第二段参数校验的代码检查的是“  start  ”和“  count  ”这二者的合法性，而不是仅仅检查“  count  ”。如果能给<br>ArgumentOutOfRangeException  （或者是  ArgumentException<br>）传入多个参数名就好了，这样就能在异常信息中指出多个参数不合法。话虽这么说，  .NET Framework  的实现也是只会指出“  count<br>”不合法。</p>
</li>
<li><p>第二段参数校验的代码还可以有很多其他的写法，把所有的操作数都转换成  long<br>并不是我们仅有的选择。不过我觉得我选择的这个方法是最简单的，而且也是正确的。采取这种方式，我无须考虑多种情况并保证每一种都是正确的。使用  Int64<br>可以确保不会有溢出，也无需去考虑  checked  或  unchecked  。</p>
</li>
<li><p>Private  方法中的循环也有其他的实现方式，不过我认为我用的这个是最简单的。一种很容易想到的替代方案就是用两个变量，一个是已经返回过的值的个数，<br>另一个是下一个要返回的值，每次循环都把这两个值各自加一。还有一种比较复杂的替代方案是只使用一个循环变量，但是那样的话你就不能写“  value &lt;<br>start + count  ”了，因为最后一个返回值有可能是  Int32.MaxValue  ，你也不能写“  value &lt;&#x3D; start +<br>count - 1  ”了，因为传入的参数有可能是  Int32.MaxValue  和  0<br>。我不想在代码中处理这么多种临界情况，所以我选择了一个简单正确的方式。如果你真的非常非常注重  Range  的效率的话，你应该去调查一下其他的可行方案。</p>
</li>
</ul>
<p>写本文之前，我没有给  Range(Int32.MaxValue, 1)  和  Range(Int32.MinValue, 0)<br>写出好的单元测试。不过写了上面的那段关于替代性方案的话之后，我找到了合适的测试用例。寻找替代方案可以帮助我想到更多的测试用例，这事儿多有趣。  </p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>实现  Range  有助于测试其他的操作符，比如说  Count  。现在既然我已经实现了一个非扩展方法的  LINQ  操作符了，那无妨把另外两个（<br>Empty  和  Repeat  ）也实现了。其实我已经实现了“  Empty  ”了，希望今天就能把它整理成文。  Repeat<br>也不需要多久就能完工，然后我们就可以开始着手于  Count  和  LongCount  了。</p>
<p>本文中的代码很好的诠释了这种情况：有时，写“傻”一点的代码会比写短一点，快一点的代码更好，因为它更易于读懂。无疑，以后博文中我还会写更多的“傻”代码的。</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 1 - 引言</title>
    <url>/blog/2011/08/19/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects1%20-%20%E5%BC%95%E8%A8%80/</url>
    <content><![CDATA[<p>本文翻译自 <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet </a><br>的系列博文“Edulinq”。</p>
<p>本篇原文地址： <a href="http://msmvps.com/blogs/jon_skeet/archive/2010/09/03/reimplementing-linq-to-objects-part-1-introduction.aspx"> http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;09&#x2F;03&#x2F;reimplementing-linq-to-objects-part-1-introduction.aspx</a></p>
<p>大约一年半之前，我在 <a href="http://developerdeveloperdeveloper.com/"> DDD </a><br>的活动日上做了一次演讲。我当时试图去重新实现LINQ to<br>Objects，在一小时内能实现多少算多少。根据会后的反馈信息来看，我当时做得太快了…而且我还是远远没有实现完整。不过无论如何我还是觉得重新实现LINQ<br>to Objects是一个很有趣的练习，所以我觉得我应该用且行且博、不徐不疾方式来再做一遍。</p>
<p>这一系列的博文都会标上 <a href="http://msmvps.com/blogs/jon_skeet/archive/tags/Edulinq/default.aspx"> “Edulinq”的标签</a><br>，你可以用这种方式过滤出这一系列博文。</p>
<h1 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h1><p>我的计划是要完整的重新实现LINQ to Objects，用每篇博客来解释一个方法（或者是一组方法）。我将会尽力把代码写的达到生产质量，但是我不会写任何XML文档注释 -<br>既然我已经在写博客来解释了，那我就不想在代码中再重复一次了。我将在适当的情况下做一些优化，但愿会 <a href="http://msmvps.com/blogs/jon_skeet/archive/2010/02/10/optimisations-in-linq-to-objects.aspx"> 比LINQ to Objects本身的实现做得更好</a> 。</p>
<p>我将采取一种相当简单的方式：我将为每一个LINQ方法写一些单元测试（这些单元测试中的大部分不会出现在接下来的博文中），确保.NET的LINQ实现可以通过这些<br>单元测试。然后我会注释掉对System.Linq的引用并引入JonSkeet.Linq。这时单元测试会无法通过，我将会实现测试所针对的方法，最终让单元测试可<br>以绿灯通过。这和通常的TDD做法不太一样，但还是蛮好用的。</p>
<p>我将为每个LINQ操作符写一篇博文，其中将包含几乎所有的成品代码，不过测试代码的话我只会把有趣的部分贴出来。遇到重要的模式的时候我会把它重点标示出来，这也正<br>是本次练习的一半意义之所在。</p>
<p>在每篇博文的最后，我会附上一个下载最新代码的链接。为以后的读者考虑，我会给这些下载文件分别编号，而不是不断更新同一个文件，不过我敢说以后肯定会有对这些下载文<br>件做修改的。</p>
<p>我们的目标不是要做出一个类似于 <a href="http://linqbridge.googlecode.com/"> LINQBridge </a><br>的项目来：我将使用.NET 3.5（主要是因为这样我可以直接使用扩展方法，而无需创建自定义Attribute），而且我肯定也不会去担心安装包之类的事儿。这系<br>列博文纯粹是教育性质的：如果你逐一读完这一系列，只要运气不是太差，你会对LINQ有更深的总体的了解，尤其是对LINQ to<br>Objects有更深刻的、细致的认识。比如说，像延迟执行一类的事，人们总是有很多误解：但是如果你看过代码的话，就能够很好的理清头绪了。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我将使用 <a href="http://nunit.org/"> NUnit </a><br>来写单元测试（仅仅是因为我本人对它更熟悉）。很明显，我们将会很频繁的需要测试两个序列是否等价。我们将通过使用 <a href="http://code.google.com/p/morelinq/source/browse/trunk/MoreLinq.Test/TestExtensions.cs">MoreLINQ中的TestExtensions类型 </a><br>来做到这一点（我把这个类型复制到了项目中了）。我将用来写作这一系列博文的上网本上只安装了C# Express<br>2010，所以我将使用NUnit的外部GUI程序。我把项目的启动项设置为了NUnit的GUI程序…在C#<br>Express中无法直接做此设置，但是修改项目文件也是很简单的：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;StartAction&gt;</span><span class="attribute">Program</span>&lt;/StartAction&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;StartProgram&gt;</span><span class="attribute">C</span>:\ProgramFiles\NUnit-<span class="number">2.5.7.102</span>13\bin\net-<span class="number">2</span>.<span class="number">0</span>\nunit-x86.exe&lt;/StartProgram&gt;</span><br></pre></td></tr></table></figure>
<p>这种方法虽然有点不太正当，但是完全可用。然后把”additional command line<br>parameters”设置为JonSkeet.Linq.Tests.dll - 当前目录默认就是bin&#x2F;debug，这样就算做好准备了。很明显，如果你安装了<br>ReSharper或之类的工具，并且自己运行这些单元测试的话，你将发现测试结果会被集成到Visual Studio中。</p>
<p>尽管我想要写出合理的工业级质量的代码来，但是我觉得自己在真的生产环境中都未必会写那么多的单元测试。虽是如此，我还是完全有理由相信测试代码量将会超过成品代码量<br>。因为边边角角的需要测试的情况实在太多了…而且有时重载也不少。不过请记住，我们此举的目的在于研究LINQ中有趣的特性。</p>
<h1 id="代码分布"><a href="#代码分布" class="headerlink" title="代码分布"></a>代码分布</h1><p>就像原版的LINQ to Object一样，我将会创建一个叫做Enumerable的静态类型…但是我会用到分部类，每个方法（包括其多个重载）占用一个代码<br>文件。举例来说：Where方法将会在Where.cs中来实现，而它的测试代码将会写在WhereTest.cs中。</p>
<p>第一次代码下载代码在这儿下载： <a href="http://pobox.com/~skeet/blogfiles/csharp/l2o/Linq-To-Objects-1.zip"> Linq-To-Objects-1.zip</a><br>。其中暂时还没有任何的成品代码，只有四个Where方法的单元测试，主要目的在于检查NUnit可以正常工作。下一步…实现Where方法。</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 5 - Empty</title>
    <url>/blog/2011/08/23/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects5%20-%20Empty/</url>
    <content><![CDATA[<p>本文翻译自  <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet  </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/24/reimplementing-linq-to-objects-part-5-empty.aspx">http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;24&#x2F;reimplementing-linq-to-objects-part-5-empty.aspx</a>这一篇继续讲非扩展方法。这次我们要讲的是  Empty  ，它有可能是最简单的  LINQ  操作符了。</p>
<h1 id="Empty-是什么？"><a href="#Empty-是什么？" class="headerlink" title="Empty  是什么？"></a>Empty  是什么？</h1><p><a href="http://msdn.microsoft.com/en-us/library/bb341042.aspx"> Empty  </a><br>是一个泛型的，静态的方法，它只有一个签名形式，不接受任何参数：  </p>
<p>public  static  IEnumerable<TResult> Empty<TResult>()  </p>
<p>它返回一个特定类型的空序列。这就是它的唯一作用。</p>
<p>它的行为只有一点比较有趣：文档上说  Empty  会对空序列做缓存。换句话说，对于同一个类型参数来讲，它每次都会返回同一个空序列。  </p>
<h1 id="我们要测试什么？"><a href="#我们要测试什么？" class="headerlink" title="我们要测试什么？"></a>我们要测试什么？</h1><p>能够测试的东西也就只有两点：</p>
<ul>
<li><p>返回序列为空。</p>
</li>
<li><p>对每个类型参数来说，返回值会被缓存起来。</p>
</li>
</ul>
<p>和测试  Range  的时候的方法一样，我们用一个叫做  EmptyClass  的别名来引用包含  Empty  的类型。下面是测试代码：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EmptyContainsNoElements</span>()</span> &#123;</span><br><span class="line"> <span class="keyword">using</span>(<span class="keyword">var</span> empty = EmptyClass.Empty &lt; <span class="built_in">int</span> &gt; ().GetEnumerator()) &#123;</span><br><span class="line">  Assert.IsFalse(empty.MoveNext());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EmptyIsASingletonPerElementType</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line"> Assert.AreSame(EmptyClass.Empty &lt; <span class="built_in">int</span> &gt; (), EmptyClass.Empty &lt; <span class="built_in">int</span> &gt; ());</span><br><span class="line"></span><br><span class="line"> Assert.AreSame(EmptyClass.Empty &lt; <span class="built_in">long</span> &gt; (), EmptyClass.Empty &lt; <span class="built_in">long</span> &gt; ());</span><br><span class="line"></span><br><span class="line"> Assert.AreSame(EmptyClass.Empty &lt; <span class="built_in">string</span> &gt; (), EmptyClass.Empty &lt; <span class="built_in">string</span> &gt; ());</span><br><span class="line"></span><br><span class="line"> Assert.AreSame(EmptyClass.Empty &lt; <span class="built_in">object</span> &gt; (), EmptyClass.Empty &lt; <span class="built_in">object</span> &gt; ());</span><br><span class="line"></span><br><span class="line"> Assert.AreNotSame(EmptyClass.Empty &lt; <span class="built_in">long</span> &gt; (), EmptyClass.Empty &lt; <span class="built_in">int</span> &gt; ());</span><br><span class="line"></span><br><span class="line"> Assert.AreNotSame(EmptyClass.Empty &lt; <span class="built_in">string</span> &gt; (), EmptyClass.Empty &lt; <span class="built_in">object</span> &gt; ());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，以上代码并不能证明缓存不是每个线程一份。不过，这些测试也够了。  </p>
<h1 id="来动手实现吧！"><a href="#来动手实现吧！" class="headerlink" title="来动手实现吧！"></a>来动手实现吧！</h1><p>现在看来，  Empty  的实现要比它的描述更有趣。如果不是要做缓存，我们可以这样实现  Empty  ：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Doesn&#x27;t cache the empty sequence _</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TResult &gt; <span class="title">Empty</span> &lt; TResult &gt; ()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">yield</span></span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>不过我们需要遵守关于缓存的文档。要实现缓存其实也不难。有一个很方便的事实可以为我们所用，  **空数组是不可变的 **。数组的长度是固定的，通常无法使一<br>个数组是只读的。数组中的任何一个元素都是可以改变的。不过一个空数组是不包含任何元素的，所以也就没有什么可被改变的。这样，我们就可以反复的重用同一个数组了。</p>
<p>现在你可能会猜我会用  Dictionary&lt;Type, Array&gt;<br>来实现，不过我们可以利用一个小手段。在一个泛型类型中，可以用一个静态变量来实现针对类型参数的缓存，因为每一个传入了类型参数的泛型类型的静态变量都是不同的。</p>
<p>很不幸，  Empty  是一个非泛型类型中的方法。所以我们需要创建另一个泛型类型来包含缓存。这很容易做到，而且  CLR<br>还帮我们做到了线程安全的类型初始化。所以，我们最后的实现会是这样的：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TResult &gt; <span class="title">Empty</span> &lt; TResult &gt; ()</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> EmptyHolder &lt; TResult &gt; .Array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">EmptyHolder</span> &lt; <span class="title">T</span> &gt; &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">readonly</span> T[] Array = <span class="keyword">new</span> T[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上的实现遵守了所有的关于缓存的文档，而且代码行数也很少。不过这个实现方式需要你很好的了解  .NET  中泛型的工作方式。这种做法和我们上一篇采取的策略相<br>反，我们选择了一种比较难懂的方式，而没有选择使用字典的易懂的方式。不过我很满意这种方案，因为一旦你了解了泛型类型和静态变量的工作方式，这段代码就很简单了。  </p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>Empty  的实现就是这样的。下一个操作符  Repeat  有可能会更简单，虽然它也要分成两个方法来实现。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>因为以上讲解的方法有点难懂，所以下面再提供另一种实现：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TResult &gt; <span class="title">Empty</span> &lt; TResult &gt; ()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> EmptyEnumerable &lt; TResult &gt; .Instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">if</span> AVOID_RETURNING_ARRAYS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title">EmptyEnumerable</span> &lt; <span class="title">T</span> &gt;: <span class="title">IEnumerable</span> &lt; <span class="title">T</span> &gt; , <span class="title">IEnumerator</span> &lt; <span class="title">T</span> &gt;</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> IEnumerable &lt; T &gt; Instance = <span class="keyword">new</span> EmptyEnumerable &lt; T &gt; ();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Prevent construction elsewhere _</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">EmptyEnumerable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> IEnumerator &lt; T &gt; GetEnumerator()</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  IEnumerator IEnumerable.GetEnumerator()</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> T Current</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">get</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">object</span> IEnumerator.Current</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">get</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// No-op _</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// There&#x27;s never a next entry _</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// No-op _</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">EmptyEnumerable</span> &lt; <span class="title">T</span> &gt;</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">readonly</span> T[] Instance = <span class="keyword">new</span> T[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>这下大家都满足了吧：）</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 6 - Repeat</title>
    <url>/blog/2011/08/24/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects6%20-%20Repeat/</url>
    <content><![CDATA[<p>本文翻译自  <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet  </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/24/reimplementing-linq-to-objects-part-6-repeat.aspx">http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;24&#x2F;reimplementing-linq-to-objects-part-6-repeat.aspx</a>本文的主题是个无关紧要的方法，  Repeat  。关于  Repeat  ，值得讨论的内容比  Empty<br>还要少。写这篇博文只是为了保证这个系列的完整性。</p>
<p>Repeat  是什么？  Repeat  是一个静态的泛型方法，不是扩展方法，它只有一个签名形式：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="title">IEnumerable</span>&lt;<span class="title">TResult</span>&gt; <span class="title">Repeat</span>&lt;<span class="title">TResult</span>&gt;(<span class="params">TResult element,<span class="built_in">int</span>  count</span>)</span></span><br></pre></td></tr></table></figure>
<p>它返回一个序列，该序列中反复的包含“  count  ”个指定的元素，。  Repeat  只需要一个参数校验：检验“  count  ”不是负数。</p>
<p>我们要测试什么呢？ 需要测试的东西真的不多。我只想到了四个场景：</p>
<ul>
<li><p>一个简单的测试，把一个字符串重复三次</p>
</li>
<li><p>一个空序列（把一个元素重复  0  次）</p>
</li>
<li><p>一个多次包含  null的序列（仅仅是为了证明“  element  ”可以为  null）</p>
</li>
<li><p>用负数作为“  count  ”来证明参数校验会被执行，而且是立即执行的</p>
</li>
</ul>
<p>以上这几点恐怕都不怎么令人兴起。</p>
<h1 id="来动手实现吧！"><a href="#来动手实现吧！" class="headerlink" title="来动手实现吧！"></a>来动手实现吧！</h1><p>在实现的时候我们唯一有可能做错的事就是把参数校验的代码和迭代器代码块写到一起。不过我们已经多次的做过“分割实现”了，所以我们肯定不会犯这个错误的。下面的代码<br>就是乏善可陈的  Repeat  方法的全部了：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable &lt; TResult &gt; Repeat &lt; TResult &gt; (TResult element, <span class="built_in">int</span> <span class="keyword">count</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">count</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> RepeatImpl(element, <span class="keyword">count</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable &lt; TResult &gt; RepeatImpl &lt; TResult &gt; (TResult element,</span><br><span class="line"> <span class="built_in">int</span> <span class="keyword">count</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">count</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">  yield</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是今天的全部内容了。其中值得指出的部分就是  …  没有什么值得指出的。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>其实没有什么结论可写。下一次我们讲  Count  和  LongCount  ，那里面倒是有些有趣的东西可以细说。</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析延迟执行--实现，优点，陷阱以及题外话</title>
    <url>/blog/2011/08/31/%E6%B5%85%E6%9E%90%E5%BB%B6%E8%BF%9F%E6%89%A7%E8%A1%8C--%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%BC%98%E7%82%B9%EF%BC%8C%E9%99%B7%E9%98%B1%E4%BB%A5%E5%8F%8A%E9%A2%98%E5%A4%96%E8%AF%9D/</url>
    <content><![CDATA[<p>上周五在公司内部做了一个小型的sharing，讨论了一些与延迟执行有关的东西。现在把ppt和代码分享出来。如有谬误，请不吝指教 :)</p>
<p>代码在这儿： <a href="http://codeformyblog.codeplex.com/SourceControl/changeset/view/62764#1095173">http://codeformyblog.codeplex.com/SourceControl/changeset/view/62764#1095173 </a></p>
<p>ppt在这儿：</p>
<p><a href="http://www.slideshare.net/cuipengfei/deferred-execution-9002119"> Deferred execution </a> View more <a href="http://www.slideshare.net/"> presentations </a> from <a href="http://www.slideshare.net/cuipengfei"> cuipengfei</a></p>
]]></content>
      <tags>
        <tag>延迟执行</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 7 - Count和LongCount</title>
    <url>/blog/2011/09/05/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects7%20-%20Count%E5%92%8CLongCount/</url>
    <content><![CDATA[<p>本文翻译自  <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet  </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/26/reimplementing-linq-to-objects-part-7-count-and-longcount.aspx">http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;26&#x2F;reimplementing-linq-to-objects-part-7-count-and-longcount.aspx</a></p>
<p>今天的文章要介绍两个  LINQ  操作符，因为它们实在是太类似了，所以放到一起来讲。  Count  和  LongCount<br>的实现非常相像，不同的只是方法名，返回值类型和几个变量。</p>
<p>Count  和  LongCount  是什么呢？  <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.count.aspx">  Count  </a> 和  <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.longcount.aspx"> LongCount</a><br>各自有两个重载：一个重载接受谓词，另一个不接受。下面是这四个方法的签名：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">Count</span> &lt; TSource &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">Count</span> &lt; TSource &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>, Func &lt; TSource, bool &gt; predicate)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> LongCount &lt; TSource &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> LongCount &lt; TSource &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>, Func &lt; TSource, bool &gt; predicate)</span><br></pre></td></tr></table></figure>

<p>可以看到，  Count  和  LongCount  的方法签名的差别仅在于返回值类型，一个是  int  （  Int32  ），一个是  long（  Int64  ）。</p>
<p>不接受谓词的重载返回输入序列中元素的个数；而接受谓词的重载则返回能够通过谓词验证的元素的个数。</p>
<p>这些方法有一些有趣的行为：  </p>
<ul>
<li><p>这四个方法都是扩展  IEnumerable<T> 的方法，你有可能会认为对于不接受谓词的那个重载来说，扩展  IEnumerable<br>会来得更好，因为没有什么会限制元素的类型。</p>
</li>
<li><p>Count  的不接受谓词的那个重载对于  ICollection<T> 和  ICollection  （  .NET4<br>中的接口）做了优化，因为这两个接口都定义有  Count  这个属性，这个属性的实现应该比遍历整个集合要快。  LongCount<br>则没有做优化，稍后的一节中我将会谈到这点。</p>
</li>
<li><p>接受谓词的重载中没有做任何优化，因为不迭代每一个元素就无法知道到底有多少个元素可以通过谓词的检验。</p>
</li>
<li><p>这四个方法都是立即执行的，都不涉及延迟执行。（仔细想想就明白了，这些方法仅仅返回一个  int  或  long  值，确实没什么可延迟执行的）。</p>
</li>
<li><p>所有的参数都只做非  null的校验。</p>
</li>
<li><p>当输入集合的元素个数超出了  int  或  long  的上限值时，应该抛出  OverflowException  。</p>
</li>
</ul>
<h1 id="我们要测试什么呢？"><a href="#我们要测试什么呢？" class="headerlink" title="我们要测试什么呢？"></a>我们要测试什么呢？</h1><p>我们需要对方法的优化做测试，这件事做起来比说起来难，因为我们需要测试以下四种情况：</p>
<ul>
<li><p>输入序列同时实现了  ICollection<T> 和  ICollection  （这个简单，直接用  List<T> ）</p>
</li>
<li><p>输入序列实现了  ICollection<T> 但没有实现  ICollection  （还算简单，可以用  HashSet<T> ）</p>
</li>
<li><p>输入序列实现了  ICollection  但没有实现  ICollection<T> ，我还要要求这个类型实现了  IEnumerable<T><br>（这样才能用到我们的扩展方法）。</p>
</li>
<li><p>输入序列既不实现  ICollection  也不实现  ICollection<T> （简单，用我们已经实现了的  Range  来生成）</p>
</li>
</ul>
<p>其中第三点比较麻烦。虽然有很多类型是实现了  ICollection  但没有实现  ICollection<T> 的（比如  ArrayList<br>），但是它们通常也不实现  IEnumerable<T> ，而我们的扩展方法是针对于  IEnumerable<T> 的。所以我只得自己写了一个叫做<br>SemiGenericCollection  的类。</p>
<p>上述的四种输入序列的类型都找到了，我们现在需要考虑到底怎么测试了。你可能会说我们可以通过检查输入序列是否被迭代过来测试方法是不是真的被优化了。但是要做这个测<br>试就需要写一个有  Count  值但是其  GetEnumerator  方法会抛异常的集合类型。这个测试确实可行，但是我并没有做它。</p>
<p>对于接受谓词的重载来说，我们无需考虑那几个不同的集合接口，因为我们反正都不会优化这两个方法。</p>
<p>参数值为  null的几个测试都比较简单，但是有另一个测试比较重要：溢出。我给  Count<br>创建了一个检验溢出行为的单元测试。很不幸，我们现在还不能在  Edulinq  的环境里运行它，因为我们还没有实现  Concat<br>。不过我还是把它写在这里：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Test</span>]</span><br><span class="line">[<span class="meta">Ignore(<span class="string">&quot;Takes an enormous amount of time!&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Overflow</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> largeSequence = Enumerable.Range(<span class="number">0</span>, <span class="built_in">int</span>.MaxValue).Concat(Enumerable.Range(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"> Assert.Throws &lt; OverflowException &gt; (() =&gt; largeSequence.Count());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果  Count  的实现在应该抛出异常的时候把返回值溢出到了  Int.MinValue  的话，这个测试可以发现到它。</p>
<p>你可以看到，即使在实现了  Concat  并反注释了这段代码之后，这个测试也是被忽略掉了的，因为它需要遍历  20<br>亿个元素，对于几个简单快速的单元测试来说，这可不妙。其实  20  亿还不算太坏，因为  LongCount  的溢出测试需要遍历  2  的  63  次<br>方个元素呢。要生成那么长的序列并不难，难的是遍历它，那要花很长的时间。对于接受谓词的重载来说，我们也需要做溢出测试，直到写这篇文章之前我都忘记了要写这个测试<br>，而写测试的时候还发现了一个方法实现中的  bug :)</p>
<h1 id="来动手实现吧！"><a href="#来动手实现吧！" class="headerlink" title="来动手实现吧！"></a>来动手实现吧！</h1><p>我们来看看接受谓词的那个重载的实现吧，它其实挺简单的：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">Count</span> &lt; TSource &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>, Func &lt; TSource, bool &gt; predicate) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">source</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (predicate == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;predicate&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// No way of optimizing this _</span></span><br><span class="line"></span><br><span class="line"> checked &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  foreach(TSource item in <span class="keyword">source</span>) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (predicate(item)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">count</span>++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，在这里我们不需要返回一个序列，所以就没有用到迭代器代码块，因而也就无需把实现拆分到两个方法中去。</p>
<p>参数校验之后的方法主体部分相当简单，只有一点需要注意：整个的迭代过程都在“  checked  ”代码块中。这样，如果  count<br>值溢出的话，就会抛出异常，而不会令  count  值成为负数。也有其他的方式可以实现这点：  </p>
<ul>
<li><p>可以只把给  count  加一的代码放在  checked  代码块中。</p>
</li>
<li><p>可以在每次给  count  加一之前检查  count&#x3D;&#x3D;int.MaxValue  ，如果确实相等，则抛出异常</p>
</li>
<li><p>可以给整个程序集都应用  checked</p>
</li>
</ul>
<p>我觉得把这段代码显式的放在  checked  代码块中是很有益的，因为这样可以很明显的凸显出对溢出的检查是方法正确性的需求这一事实。你可能更倾向于只把<br>count++  这一句代码放在  checked  代码块中，不过我个人觉得现在的做法更容易引起读代码的人对  checked<br>的注意，当然这只是我的主观偏好。还有，显式的  checked  代码块有可能会快一些，这一点我不确定，我还没有测试过。</p>
<p>除了与谓词有关的部分，上面的代码会全部出现在  Count  的优化过的实现中，我们就不再讲解了，直接写出代码：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">Count</span> &lt; TSource &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">source</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Optimization for ICollection&lt;T&gt; _</span></span><br><span class="line"></span><br><span class="line"> ICollection &lt; TSource &gt; genericCollection = <span class="keyword">source</span> as ICollection &lt; TSource &gt; ;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (genericCollection != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> genericCollection.<span class="keyword">Count</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optimization for ICollection _</span></span><br><span class="line"></span><br><span class="line"> ICollection nonGenericCollection = <span class="keyword">source</span> as ICollection;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (nonGenericCollection != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nonGenericCollection.<span class="keyword">Count</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do it the slow way - and make sure we overflow appropriately _</span></span><br><span class="line"></span><br><span class="line"> checked &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  using(var iterator = <span class="keyword">source</span>.GetEnumerator()) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (iterator.MoveNext())</span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">count</span>++;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个实现里面唯一的“新”代码就是关于优化的那段。优化代码中的两段基本是一样的，它们检查不同的集合接口类型，哪个检查通过就返回哪个的  Count<br>属性。我不知道  .NET Framework  的实现中是先检查  ICollection  还是先检查  ICollection<T><br>，我可以写一个同时实现了这两个接口，但是在两个  Count<br>属性中返回不同的值的类型来测试一下，但是那么做有点太过了。对于良好实现的集合来说，这点性能差异算不了什么，我们先检查“最有可能”的接口，也就是泛型的<br>ICollection<T> 。</p>
<p>优化还是不优化？ LongCount  的实现和  Count  的实现几乎完全一样，只是  LongCount  中使用  long  而不是  int  。</p>
<p>我对  ICollection  和  ICollection<T> 做了优化，但是我不认为  .NET  是如此实现的。（只要创建一个很大的  byte<br>数组，并比较一下  Count  和  LongCount  应用到这个数组上的耗时差距就可以了。）</p>
<p>关于  <a href="http://msdn.microsoft.com/en-us/library/system.array.getlonglength.aspx"> Array.GetLongCount  </a> 的使用存在一些争议，但是我觉得既然现在的  CLR<br>并不支持长度超过  Int32.MaxValue  的数组，那么这个问题现在就没什么好争议的，只有留待以后证明。除此之外，我不知道  .NET<br>的实现为什么没有优化。对一个实现了  ICollection  或  ICollection<T> 接口的类型来说，如果该集合中包含了超过<br>Int32.MaxValue  个元素的话，它的  Count  属性应该返回什么值呢？这一点并不明确。</p>
<p>欢迎提出各种建议。不过我还是要指出  LongCount  方法可能会更多的应用在  Queryable  中而不是  Enumerable<br>中，获取一个数据库表的长度的场景会比较多见，而获取一个内存中的集合的长度的场景则不那么常见。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>这是我们第一次接触返回数值而不是返回一个序列的  LINQ  操作符，很自然，这样的操作符更容易理解。这些方法很简单的执行，做一些优化，然后返回结果值。这些<br>方法虽然简单，但是还是有一些东西很值得思考，比如说优化的问题，可惜优化的问题并没有一个确定的答案。</p>
<p>下一次我想我会去实现  Concat  ，主要是因为实现了  Concat  就可以把对  Count  进行溢出测试的代码反注释了。  Concat<br>是一个会返回一个序列的操作符，不过它很简单。</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 8 - Concat</title>
    <url>/blog/2011/09/14/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects8%20-%20Concat/</url>
    <content><![CDATA[<p>本文翻译自  <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet  </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/27/reimplementing-linq-to-objects-part-8-concat.aspx">http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;27&#x2F;reimplementing-linq-to-objects-part-8-concat.aspx</a></p>
<p>上文讲的  Count  和  LongCount  返回的是数值类型，本文我们讲的  Concat  返回的是一个序列。  </p>
<h1 id="Concat-是什么？-Concat"><a href="#Concat-是什么？-Concat" class="headerlink" title="Concat  是什么？    Concat  "></a>Concat  是什么？  <a href="http://msdn.microsoft.com/en-us/library/bb302894.aspx">  Concat  </a></h1><p>只有一种签名形式，这让它使用起来很简单：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="type">IEnumerable</span>&lt;<span class="type">TSource</span>&gt; <span class="type">Concat</span>&lt;<span class="type">TSource</span>&gt;(this  <span class="type">IEnumerable</span>&lt;<span class="type">TSource</span>&gt; first, <span class="type">IEnumerable</span>&lt;<span class="type">TSource</span>&gt; second)</span><br></pre></td></tr></table></figure>
<p>Concat  的返回值依次包含了两个序列中的元素，也就是说把两个序列串联起来了。</p>
<p>我有时会觉得  .NET  没有提供  Prepend&#x2F;Append  这样的方法是个遗憾，这两个方法应该可以和  Concat<br>做类似的事情，只不过它们把一个序列和一个单个的元素串联起来。如果要做一个填充着国家名和一个“  None<br>”值的下拉列表的话，这两个方法是很有用的。当然，向  Concat<br>中传入一个单元素的数组也可以达到同样的目的，但是我个人认为用特定的方法名做特定的事会让代码的可读性更高。  <a href="http://code.google.com/p/morelinq/"> MoreLINQ</a> 中的  <a href="http://code.google.com/p/morelinq/source/browse/trunk/MoreLinq/Concat.cs?r=171"> Concat  方法  </a> 可以做这件事，不过  Edulinq<br>的目的只是要实现  LINQ to Objects  中已有的方法。</p>
<p>和往常一样，我们列出  Concat  的行为：</p>
<ul>
<li><p>参数校验需要立即执行：两个参数都不允许为  null</p>
</li>
<li><p>返回值是延迟执行的：当  Concat  被调用时，两个参数不会立即被迭代</p>
</li>
<li><p>输入序列只有在需要的时候才会被迭代：如果你停止迭代输出序列时第一个输入序列还没有被耗尽的话，那么第二个序列根本就不会被迭代</p>
</li>
</ul>
<p>这几点描述基本就涵盖了  Concat  的所有行为。</p>
<p>我们需要测试什么呢？ Concat  的串联行为很容易被测试，只需要一个用例就够了。我们或许也可以测试输入空序列会如何，但是那种测试基本没有不通过的可能。</p>
<p>参数校验的测试方式和往常一样：调用方法时传入非法的参数，然后不去迭代方法的返回值。</p>
<p>最后，还有一个单元测试用来测试两个输入序列被迭代的时机。这个测试中用到了我们在测试  Where  时用过的  ThrowingEnumerable  ：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FirstSequenceIsntAccessedBeforeFirstUse</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line"> IEnumerable &lt; <span class="built_in">int</span> &gt; first = <span class="keyword">new</span> ThrowingEnumerable();</span><br><span class="line"></span><br><span class="line"> IEnumerable &lt; <span class="built_in">int</span> &gt; second = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123;</span><br><span class="line">  <span class="number">5</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// No exception yet... _</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> query = first.Concat(second);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Still no exception... _</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">using</span>(<span class="keyword">var</span> iterator = query.GetEnumerator()) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Now it will go bang _</span></span><br><span class="line"></span><br><span class="line">  Assert.Throws &lt; InvalidOperationException &gt; (() =&gt; iterator.MoveNext());</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SecondSequenceIsntAccessedBeforeFirstUse</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line"> IEnumerable &lt; <span class="built_in">int</span> &gt; first = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123;</span><br><span class="line">  <span class="number">5</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> IEnumerable &lt; <span class="built_in">int</span> &gt; second = <span class="keyword">new</span> ThrowingEnumerable();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// No exception yet... _</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> query = first.Concat(second);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Still no exception... _</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">using</span>(<span class="keyword">var</span> iterator = query.GetEnumerator()) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First element is fine... _</span></span><br><span class="line"></span><br><span class="line">  Assert.IsTrue(iterator.MoveNext());</span><br><span class="line"></span><br><span class="line">  Assert.AreEqual(<span class="number">5</span>, iterator.Current);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Now it will go bang, as we move into the second sequence _</span></span><br><span class="line"></span><br><span class="line">  Assert.Throws &lt; InvalidOperationException &gt; (() =&gt; iterator.MoveNext());</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们写测试来检查迭代器是否被  Dispose  掉了。但是我们可以预测到输入序列的迭代器应该会被合理的  Dispose<br>掉。实际上，第一个序列的迭代器会在第二个序列开始被迭代之前就被  Dispose  掉。</p>
<p>开始动手实现吧！ Concat  的实现虽然比较简单，但是我写完之后还是觉得  F#  更值得拥有  …  实现分为参数校验和迭代器代码块两部分，每一部分都不复杂：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">Concat</span> &lt; TSource &gt; (<span class="params"><span class="keyword">this</span> IEnumerable &lt; TSource &gt; first, IEnumerable &lt; TSource &gt; second</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (first == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;first&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (second == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;second&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> ConcatImpl(first, second);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">ConcatImpl</span> &lt; TSource &gt; (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function"> IEnumerable &lt; TSource &gt; first,</span></span></span><br><span class="line"><span class="params"><span class="function"> IEnumerable &lt; TSource &gt; second</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> first) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> second) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不能利用迭代器代码块的话，这个实现会变得很麻烦。虽然不会特别难，但是我们需要记住当前正在迭代的是哪个序列。</p>
<p>如果是在用  F#  的话，我们可以使用  yield!  表达式来把它实现的更简单，  yield!<br>表达式作用于一整个序列而不是单个的元素。必需得承认在这种场景下使用  yield!<br>并不会带来什么性能上的提升（如果是在递归的场景下就很可能会有性能提升），但是能够用一个语句来  yield  返回整个序列确实是一种更优雅的风格。（<br>Spec#  中也有一个类似的结构叫做嵌套迭代器，用  <a href="http://research.microsoft.com/en-us/projects/specsharp/iterators.pdf"> yield foreach  </a> 来表示。）我对  F#  和  Spec#<br>了解的都不够深入，所以就不做更深入的比较了。不过我们在以后实现  Edulinq  的过程中还会遇到好几次“  yield<br>返回一个序列中的每个元素”的模式。请记住，我们不能把  yield  返回的代码抽取到一个单独的方法中去，因为“  yield  ”表达式需要  C#<br>编译器的特殊处理。</p>
<p>#结论</p>
<p>虽然我用的实现方式还是蛮简单的，但是我还是吐槽一下：） 如果  C#  里面也有嵌套迭代器那多好啊，虽然说没有它也没有令我太苦恼。</p>
<p>Concat  是一个很有用的操作符，不过它也不过是  SelectMany  的一个特例罢了。  Concat  只能把两个序列连接成一个序列，而<br>SelectMany  则可以把很多个序列连接成一个序列，而且  SelectMany  在有时还更有普遍性。下次我们会实现  SelectMany<br>，而且会展示一些基于  SelectMany  来实现其他操作符的例子。（等实现  Aggregate  的时候，我们会再次见到操作符只返回一个值的例子。）</p>
<p>附录：避免不必要的保持引用 有一条留言建议说要在遍历完第一个序列后把它设为  null。这样，在遍历完第一个序列后，它就可以被垃圾回收了。如果采取这个建议，那么实现起来会是这样的：</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line"><span class="variable">private</span> <span class="keyword">static</span> <span class="title class_">IEnumerable</span> <span class="operator">&lt;</span> <span class="title class_">TSource</span> <span class="operator">&gt;</span> <span class="title class_">ConcatImpl</span> <span class="operator">&lt;</span> <span class="title class_">TSource</span> <span class="title function_">&gt;</span> (</span><br><span class="line"> <span class="title class_">IEnumerable</span> <span class="operator">&lt;</span> <span class="title class_">TSource</span> <span class="operator">&gt;</span> <span class="variable">first</span>,</span><br><span class="line"> <span class="title class_">IEnumerable</span> <span class="operator">&lt;</span> <span class="title class_">TSource</span> <span class="operator">&gt;</span> <span class="variable">second</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">foreach</span>(<span class="params">TSource</span> <span class="params">item</span> <span class="params">in</span> <span class="params">first</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable">yield</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">item</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Avoid hanging onto a reference we don&#x27;t really need _</span></span><br><span class="line"></span><br><span class="line"> <span class="variable">first</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">foreach</span>(<span class="params">TSource</span> <span class="params">item</span> <span class="params">in</span> <span class="params">second</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable">yield</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">item</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在普通情况下，把一个不再使用的局部变量设为  null这种做法是没用的。因为当  CLR<br>在执行优化过的代码，并且没有挂上调试器时，垃圾收集器只关心在方法内部可能还会被访问的变量。</p>
<p>但是在我们这个特例中，这么做还是有用的。因为第一个参数并不是一个简单的局部变量，在  C#  编译器生成的隐藏类型中，它是一个实例字段，而  CLR<br>无法判断实例字段是否会被再次使用。</p>
<p>或许我们可以在调用  GetEnumerator  之前清空掉我们对“  first  ”这个参数的唯一引用。我们可以写一个这样的方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">ReturnAndSetToNull</span> &lt; T &gt; (<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>) <span class="keyword">where</span> T: <span class="keyword">class</span></span> &#123;</span><br><span class="line"> T tmp = <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">value</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后这样调用它：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">foreach (TSource <span class="built_in">item</span> <span class="keyword">in</span> ReturnAndSetToNull(<span class="keyword">ref</span> <span class="keyword">first</span>))</span><br></pre></td></tr></table></figure>

<p>我认为这样做绝对是有点过了，因为迭代器有可能还会持有对集合的引用。不过在遍历之后把“  first  ”这个参数设为  null在我看来是说得通的。</p>
<p>需要提醒你一下，我觉得  .NET  的  LINQ to Objects  的实现里面是不会这样做的。（以后我可能会用一个有  finalizer<br>的集合类来测试一下。）</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 9 - SelectMany</title>
    <url>/blog/2011/12/15/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects9%20-%20SelectMany/</url>
    <content><![CDATA[<p>本文翻译自 <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/27/reimplementing-linq-to-objects-part-9-selectmany.aspx"> http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;27&#x2F;reimplementing-linq-to-objects-part-9-selectmany.aspx</a></p>
<p>我们接下来要实现的这个操作符是LINQ  中最重要的操作符。大多数（或者是全部？）其他的返回一个序列的操作符都可以通过调用  SelectMany<br>来实现，这是后话按下不表。现在我们首先来实现它吧。</p>
<p>SelectMany  是什么？</p>
<p>SelectMany  有四个重载，看起来一个比一个吓人：</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">public static IEnumerable <span class="variable">&lt; TResult &gt;</span> SelectM<span class="literal">any</span> <span class="variable">&lt; TSource, TResult &gt;</span> (</span><br><span class="line"> this IEnumerable <span class="variable">&lt; TSource &gt;</span> source,</span><br><span class="line"> Func <span class="variable">&lt; TSource, IEnumerable &lt; TResult &gt;</span>&gt; selector)</span><br><span class="line"></span><br><span class="line">public static IEnumerable <span class="variable">&lt; TResult &gt;</span> SelectM<span class="literal">any</span> <span class="variable">&lt; TSource, TResult &gt;</span> (</span><br><span class="line"> this IEnumerable <span class="variable">&lt; TSource &gt;</span> source,</span><br><span class="line"> Func <span class="variable">&lt; TSource, int, IEnumerable &lt; TResult &gt;</span>&gt; selector)</span><br><span class="line"></span><br><span class="line">public static IEnumerable <span class="variable">&lt; TResult &gt;</span> SelectM<span class="literal">any</span> <span class="variable">&lt; TSource, TCollection, TResult &gt;</span> (</span><br><span class="line"> this IEnumerable <span class="variable">&lt; TSource &gt;</span> source,</span><br><span class="line"> Func <span class="variable">&lt; TSource, IEnumerable &lt; TCollection &gt;</span>&gt; collectionSelector,</span><br><span class="line"> Func <span class="variable">&lt; TSource, TCollection, TResult &gt;</span> resultSelector)</span><br><span class="line"></span><br><span class="line">public static IEnumerable <span class="variable">&lt; TResult &gt;</span> SelectM<span class="literal">any</span> <span class="variable">&lt; TSource, TCollection, TResult &gt;</span> (</span><br><span class="line"> this IEnumerable <span class="variable">&lt; TSource &gt;</span> source,</span><br><span class="line"> Func <span class="variable">&lt; TSource, int, IEnumerable &lt; TCollection &gt;</span>&gt; collectionSelector,</span><br><span class="line"> Func <span class="variable">&lt; TSource, TCollection, TResult &gt;</span> resultSelector)</span><br></pre></td></tr></table></figure>

<p>其实还不算太坏，这些重载只是同一个操作的不同形式而已。</p>
<p>无论是哪个重载，都需要一个输入序列。然后用一个委托来处理输入序列中的每个元素以生成一个子序列，这个委托可能会接受一个代表元素  index  的参数。</p>
<p>再然后，我们或者把每个子序列中的元素直接返回，或者再用另一个委托来做处理，这个委托接受输入序列中的元素并接受其对应的子序列中的元素。</p>
<p>以我的经验来说，使用  index  两个重载不太常用，而另外两个重载（上面列出的第一个和第三个）则比较常用。还有，当  C#  编译器处理一个含有多个<br>from  子句的查询表达式的时候，它会把出第一个  from  之外的其他  from  子句转译为上面的第三个重载。</p>
<p>为了把上面的说法放入实例中理解，我们假设有这样一个查询表达式：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">var query = <span class="keyword">from</span> <span class="keyword">file</span> <span class="keyword">in</span> Directory.GetFiles(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> line <span class="keyword">in</span> <span class="keyword">File</span>.ReadLines(<span class="keyword">file</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> Path.Get<span class="meta">FileName</span>(<span class="keyword">file</span>) + <span class="string">&quot;: &quot;</span> + line;</span><br></pre></td></tr></table></figure>

<p>上面的查询表达式会被转译为下面的“正常”调用：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">query</span> = Directory.GetFiles(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">.SelectMany(<span class="keyword">file</span> =&gt; <span class="keyword">File</span>.ReadLines(<span class="keyword">file</span>),</span><br><span class="line">(<span class="keyword">file</span>, <span class="keyword">line</span>) =&gt; Path.GetFileName(<span class="keyword">file</span>) + <span class="string">&quot;: &quot;</span> + <span class="keyword">line</span>);</span><br></pre></td></tr></table></figure>

<p>这个例子中，编译器会把表达式中的  select  子句转译为投影操作；如果表达式后面还跟有  where  子句或其他子句，编译器会把  file  和<br>line  包装在一个匿名类型中传递给投影操作。这是查询表达式转译中最令人难理解的一点，因为这涉及到了透明标识符（  transparent<br>identifiers  ）。就现在来说，我们只分析上面给出的简单例子。</p>
<p>上例中的  SelectMany  接受三个参数：</p>
<p>+ 输入序列，也就是一个字符串序列（  Directory.GetFiles  所返回的文件名）</p>
<p>+ 一个初始投影操作，它把一个文件名转化为该文件中包含的一行行的字符串</p>
<p>+ 一个结束投影操作，它把一个文件名和一行文件内容转化为一个由冒号分隔的字符串</p>
<p>表达式的最后结果会是一个字符串的序列，其中包含所有  log  文件的每一行，每一行会以文件名作为前缀。如果把结果打印出来，大概会是这样的：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">test1.<span class="built_in">log</span>: foo</span><br><span class="line"></span><br><span class="line">test1.<span class="built_in">log</span>: bar</span><br><span class="line"></span><br><span class="line">test1.<span class="built_in">log</span>: baz</span><br><span class="line"></span><br><span class="line">test2.<span class="built_in">log</span>: Second <span class="built_in">log</span> <span class="built_in">file</span></span><br><span class="line"></span><br><span class="line">test2.<span class="built_in">log</span>: Another <span class="built_in">line</span> <span class="built_in">from</span> <span class="keyword">the</span> <span class="keyword">second</span> <span class="built_in">log</span> <span class="built_in">file</span></span><br></pre></td></tr></table></figure>

<p>要理解  SelectMany  可能会费点脑子，我当时理解它就费了点力，不过理解它是很重要的。</p>
<p>在讲测试之前，还有几点关于  SelectMany  的行为细节需要说明：</p>
<p>+ 参数校验是立即执行的，每个参数都不能是  null</p>
<p>+ 整个过程都是流式处理的。每次只会从输入序列中读取一个元素，然后生成一个子序列。然后每次只会返回子序列中的一个元素，返回子序列中的全部元素之后再去读取输入<br>序列中的下一个元素，用它来生成下一个子序列，如此循环往复。</p>
<p>+ 每个迭代器在使用完之后都会被关闭，正如你会预期的一样。</p>
<p>我们要测试什么呢？</p>
<p>我有一点变懒了，我不想再写参数为  null的测试了。我给  SelectMany<br>的每一个重载都写了一个测试。我发现我无法把这些测试写得很清晰，不过还是拿出一个例子来，下面的代码是针对  SelectMany  的最复杂的重载的测试：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">[Test]</span><br><span class="line">public <span class="keyword">void</span> FlattenWithProjectionAndIndex() &#123;</span><br><span class="line"></span><br><span class="line"> int[] numbers = &#123;</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">5</span>,</span><br><span class="line">  <span class="number">20</span>,</span><br><span class="line">  <span class="number">15</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> var query = numbers.SelectMany(<span class="function"><span class="params">(x, index)</span> =&gt;</span> (x +</span><br><span class="line">   index).ToString().ToCharArray(),</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="params">(x, c)</span> =&gt;</span> x + <span class="string">&quot;: &quot;</span> + c);</span><br><span class="line"></span><br><span class="line"> <span class="regexp">//</span> <span class="number">3</span> =&gt; <span class="string">&quot;3: 3&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="regexp">//</span> <span class="number">5</span> =&gt; <span class="string">&quot;5: 6&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="regexp">//</span> <span class="number">20</span> =&gt; <span class="string">&quot;20: 2&quot;</span>, <span class="string">&quot;20: 2&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="regexp">//</span> <span class="number">15</span> =&gt; <span class="string">&quot;15: 1&quot;</span>, <span class="string">&quot;15: 8&quot;</span></span><br><span class="line"></span><br><span class="line"> query.AssertSequenceEqual(<span class="string">&quot;3: 3&quot;</span>, <span class="string">&quot;5: 6&quot;</span>, <span class="string">&quot;20: 2&quot;</span>, <span class="string">&quot;20: 2&quot;</span>, <span class="string">&quot;15: 1&quot;</span>, <span class="string">&quot;15: 8&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给这个测试做一点解释：</p>
<p>+ 每一个数字都和它的序号相加  (3+0, 5+1, 20+2, 15+3)</p>
<p>+ 相加的结果转成字符串，然后转成字符数组。（我们原本不需要调用  ToCharArray  的，因为  String  本身就实现了<br>IEnumerable<char> ，不过现在这样写比较清晰。）</p>
<p>+ 然后把子序列中的每一个字符和原元素以“原元素：子序列字符”的形式组合在一起</p>
<p>注释部分是每一个输入元素对应的输出结果，测试最后一句代码给出了完整的输出序列。</p>
<p>是不是一团乱麻？希望你看了上面逐步分解的解释很清楚一点。好了，现在想办法让测试可以通过吧。</p>
<p>开始动手实现吧！</p>
<p>我们可以通过实现一个最复杂的重载并让其他的重载都调用它来实现  SelectMany  ，或者也可以写一个没有参数校验的“  Impl<br>”方法，然后让四个重载都调用它。比如说，最简单重载可以这样实现：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">IEnumerable</span> &lt; <span class="title class_">TResult</span> &gt; <span class="title class_">SelectMany</span> &lt; <span class="title class_">TSource</span>, <span class="title class_">TResult</span> &gt; (</span><br><span class="line"> <span class="variable language_">this</span> <span class="title class_">IEnumerable</span> &lt; <span class="title class_">TSource</span> &gt; source,</span><br><span class="line"> <span class="title class_">Func</span> &lt; <span class="title class_">TSource</span>, <span class="title class_">IEnumerable</span> &lt; <span class="title class_">TResult</span> &gt;&gt; selector) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArgumentNullException</span>(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (selector == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArgumentNullException</span>(<span class="string">&quot;selector&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="title class_">SelectManyImpl</span>(source,</span><br><span class="line">  <span class="function">(<span class="params">value, index</span>) =&gt;</span> <span class="title function_">selector</span>(value),</span><br><span class="line">  <span class="function">(<span class="params">originalElement, subsequenceElement</span>) =&gt;</span> subsequenceElement);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过我还是选择为每一重载写一个签名相同的“  SelectManyImpl ”方法。我觉得这样做可以让以后单步调试时更简单一些  …<br>而且这样让我们可以注意到不同重载之间的区别，代码是这样的：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Simplest overload</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TResult &gt; <span class="title">SelectManyImpl</span> &lt; TSource, TResult &gt; (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function"> IEnumerable &lt; TSource &gt; source,</span></span></span><br><span class="line"><span class="params"><span class="function"> Func &lt; TSource, IEnumerable &lt; TResult &gt;&gt; selector</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> source) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span>(<span class="function">TResult result <span class="keyword">in</span> <span class="title">selector</span>(<span class="params">item</span>))</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">yield</span></span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Most complicated overload:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// - Original projection takes index as well as value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// - There&#x27;s a second projection for each original/subsequence element pair</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TResult &gt; <span class="title">SelectManyImpl</span> &lt; TSource, TCollection, TResult &gt; (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function"> IEnumerable &lt; TSource &gt; source,</span></span></span><br><span class="line"><span class="params"><span class="function"> Func &lt; TSource, <span class="built_in">int</span>, IEnumerable &lt; TCollection &gt;&gt; collectionSelector,</span></span></span><br><span class="line"><span class="params"><span class="function"> Func &lt; TSource, TCollection, TResult &gt; resultSelector</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> source) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span>(<span class="function">TCollection collectionItem <span class="keyword">in</span> <span class="title">collectionSelector</span>(<span class="params">item, index++</span>))</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">yield</span></span></span><br><span class="line"><span class="function">   <span class="keyword">return</span> <span class="title">resultSelector</span>(<span class="params">item, collectionItem</span>)</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两个方法之间的相似性很是明显  …  不过我还是觉得保留着第一种形式很有用，如果我搞不清楚  SelectMany<br>的作用的话，通过第一种最简单的重载就可以很容易的弄懂。以此为基础再去理解余下的重载，跳跃性就不会那么大了。第一个重载在一定程度上起到了一个理解<br>SelectMany  的概念的垫脚石的作用。</p>
<p>有两点需要指出：</p>
<p>如果  C#  中可以使用“  yield foreach selector(item)<br>”这种表达式的话，上面的第一个方法就可以实现的稍简单一点。如果要在第二个方法中使用这种做法的话就会难一些，而且可能还要涉及到对  Select<br>的调用，这样的话就有点得不偿失了。</p>
<p>在第二个方法中，我没有显式的使用“  checked  ”代码块，虽然说“  index  ”是有可能溢出的。我没有看过  BCL<br>的实现是什么样的，但是我认为他们不会写“  checked  ”的。考虑到前后一致性，我或许应该在每一个处理  index  的方法中都是用“<br>checked  ”代码块，或者给整个程序集开启“  checked  ”。</p>
<p>通过调用  SelectMany  来实现其他操作符</p>
<p>之前我提到过很多的  LINQ  操作符都可以通过调用  SelectMany  来实现。下面的代码就是这一观点的实例，我们通过调用  SelectMany<br>实现了  Select  ，  Where  和  Concat  ：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable &lt; TResult &gt; Select &lt; TSource, TResult &gt; (</span><br><span class="line"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>,</span><br><span class="line"> Func &lt; TSource, TResult &gt; selector) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">source</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (selector == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;selector&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">source</span>.SelectMany(x =&gt; Enumerable.Repeat(selector(x), <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable &lt; TSource &gt; Where &lt; TSource &gt; (</span><br><span class="line"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>,</span><br><span class="line"> Func &lt; TSource, bool &gt; predicate) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">source</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (predicate == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;predicate&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">source</span>.SelectMany(x =&gt; Enumerable.Repeat(x, predicate(x) ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable &lt; TSource &gt; Concat &lt; TSource &gt; (</span><br><span class="line"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; first,</span><br><span class="line"> IEnumerable &lt; TSource &gt; second) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;first&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (second == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;second&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> [] &#123;</span><br><span class="line">  first,</span><br><span class="line">  second</span><br><span class="line"> &#125;.SelectMany(x =&gt; x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Select  和  SelectMany  使用  Enumerable.Repeat<br>来很方便的创建含有一个元素或不包含任何元素的序列。你也可以通过创建一个数组来代替使用  Repeat  的这种做法。  Concat<br>直接使用了一个数组：如果你理解了  SelectMany  的作用就是把多个序列组合为一个序列这一点的话，  Concat<br>这样实现看起来就很自然了。我估计  Empty  和  Repeat  可以通过递归来实现，尽管这样的话性能会很差。</p>
<p>现在，上面的代码是放在条件编译块里面的。如果大家希望我多写一些借助于  SelectMany<br>来实现的操作符的话，我可能会考虑把它单独分离一个项目出来。不过我感觉以上的代码已经足以显示  SelectMany  的灵活性了，再利用<br>SelectMany  来实现更多的其他操作符也未必能更加充分的说明这一点。</p>
<p>在理论的意义上，  SelectMany  也很重要，因为它为  LINQ  提供了  monadic  的特性。我不想在这一话题上说的更多，你可以读一读<br><a href="http://blogs.msdn.com/b/wesdyer/archive/2008/01/11/the-marvels-of-monads.aspx"> Wes Dyer  的博客  </a> ，或者直接搜索“  bind monad SelectMany  ”就可以找到很多比我更聪明的人写的文章。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>SelectMany  是  LINQ  中的基础之一，初看上去它很是令人生畏。但是一旦你理解了  SelectMany<br>的作用就是把多个序列组合起来这一点之后，它就很容易搞懂了。</p>
<p>下一次我们讨论  All和  Any  ，这两个操作符很适合放在一起来讲解。</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 10 - Any和All</title>
    <url>/blog/2012/02/15/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects10%20-%20Any%E5%92%8CAll/</url>
    <content><![CDATA[<p>本文翻译自 <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/28/reimplementing-linq-to-objects-part-10-any-and-all.aspx"> http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;28&#x2F;reimplementing-linq-to-objects-part-10-any-and-all.aspx</a></p>
<p>今天我们介绍两个操作符：Any  和  All。</p>
<p>Any  和  All做什么？</p>
<p>Any  有两个重载，而  All只有一个：</p>
<pre><code>public static bool Any&lt;TSource&gt;( 

    this IEnumerable&lt;TSource&gt; source) 

 

public static bool Any&lt;TSource&gt;( 

    this IEnumerable&lt;TSource&gt; source, 

    Func&lt;TSource, bool&gt; predicate) 

 

public static bool All&lt;TSource&gt;( 

    this IEnumerable&lt;TSource&gt; source, 

    Func&lt;TSource, bool&gt; predicate)
</code></pre>
<p><a href="http://www.cnblogs.com/cuipengfei/archive/2012/02/15/2352444.html"> 复制代码 </a></p>
<p>这两个方法所做的事情完全可以顾名思义：</p>
<p>+ 不接受谓词的  Any  用于判断输入序列中是否存在任何元素</p>
<p>+ 接受谓词的  Any  用于判断输入序列中是否存在能够通过谓词检验的元素</p>
<p>+ All用于判断输入序列中的元素是否全部都能通过谓词的检验</p>
<p>这两个操作符都是立即执行的，它们在得出最终结果之前不会返回。</p>
<p>很重要的一点，  All必须要迭代整个输入序列才能返回  true  ，但是它只要遇到一个不能通过谓词检验的元素就会返回  false  ；而  Any<br>只要找到一个可以通过谓词检验的元素就会返回  true  ，但是必须要迭代整个输入序列才能返回  false  。这就引出了一个很简单的  LINQ<br>性能小窍门，下面这种用法几乎在所有情况下都是不可取的：</p>
<pre><code>// Don&#39;t use this 

if (query.Count() != 0)
</code></pre>
<p><a href="http://www.cnblogs.com/cuipengfei/archive/2012/02/15/2352444.html"> 复制代码 </a></p>
<p>上面的用法会迭代整个输入序列，如果你只想知道序列中是否含有元素的话，这样来做：</p>
<pre><code>// Use this instead 

if (query.Any())
</code></pre>
<p><a href="http://www.cnblogs.com/cuipengfei/archive/2012/02/15/2352444.html"> 复制代码 </a></p>
<p>如果这是一个较大的  LINQ to SQ+ 查询中的一部分，那么这两种做法的区别可能不大，但是对于  LINQ to Objects  来说，区别很大。</p>
<p>我们需要测试什么？</p>
<p>我今晚感觉不错，我甚至把参数校验都做了  …  虽然说参数校验在这个立即执行的特例下并不困难。</p>
<p>除此之外，我还测试了以下一些场景：</p>
<p>+ Any  作用于空序列应该返回  false  ，而  All则应该返回  true  。（因为无论谓词是什么样的，没有任何一个元素会通不过检验。）</p>
<p>+ 一个序列，只要它含有元素，不接受谓词的  Any  就应该返回  true  。</p>
<p>+ 如果所有元素都不能通过谓词，那么  Any  和  All都应该返回  false  。</p>
<p>+ 如果部分元素能够通过谓词，  Any  将会返回  true  而  All会返回  false  。</p>
<p>+ 如果所有元素都能够通过谓词，那么  All会返回  true  。</p>
<p>以上测试都很简洁明了，我就不给出代码了。还有最后一个测试很有趣：我们要证明  Any  会在找到第一个符合条件的元素之后立即返回，证明的手段是通过把<br>Any  作用在一个被完整迭代时会抛出异常的查询结果上。最简单的方式就是创建一个包含有  0  的整数序列，然后对其做  Select  操作，<br>Select  中会把每一个元素除以某个常数。以下的测试用例中，序列中会导致异常的元素之前存在一个能够通过谓词的元素：</p>
<pre><code>[Test] 

public void SequenceIsNotEvaluatedAfterFirstMatch() 

&#123; 

    int[] src = &#123; 10, 2, 0, 3 &#125;; 

    var query = src.Select(x =&gt; 10 / x); 

    // This will finish at the second element (x = 2, so 10/x = 5) 

    // It won&#39;t evaluate 10/0, which would throw an exception 

    Assert.IsTrue(query.Any(y =&gt; y &gt; 2)); 

&#125;
</code></pre>
<p><a href="http://www.cnblogs.com/cuipengfei/archive/2012/02/15/2352444.html"> 复制代码 </a></p>
<p>对于  All，也有一个类似的测试用例，其中会导致异常的元素前面存在一个不能通过谓词检验的元素。</p>
<p>现在所有测试都有了，下面开始有趣的部分了：</p>
<h1 id="来动手实现吧！"><a href="#来动手实现吧！" class="headerlink" title="来动手实现吧！"></a>来动手实现吧！</h1><p>有一点需要提醒，我们可以基于接受谓词的  Any  或者基于  All来实现另外两个方法。比如说，如果已经实现了  All的话，那么  Any<br>就可以这样实现：</p>
<pre><code>public static bool Any&lt;TSource&gt;( 

    this IEnumerable&lt;TSource&gt; source) 

&#123; 

    return source.Any(x =&gt; true); 

&#125; 

 

public static bool Any&lt;TSource&gt;( 

    this IEnumerable&lt;TSource&gt; source, 

    Func&lt;TSource, bool&gt; predicate) 

&#123; 

    if (predicate == null) 

    &#123; 

        throw new ArgumentNullException(&quot;predicate&quot;); 

    &#125; 

    return !source.All(x =&gt; !predicate(x)); 

&#125;
</code></pre>
<p><a href="http://www.cnblogs.com/cuipengfei/archive/2012/02/15/2352444.html"> 复制代码 </a></p>
<p>基于接受谓词的的  Any  来实现不接受谓词的  Any  是最简单的，我们使用了一个对任何元素都会返回  true<br>的谓词，这就意味着只要输出序列中含有元素就会返回  true  ，这正是我们想要的行为。</p>
<p>上面调用  All时的两次否操作会让你费点脑筋，不过这其实就是  <a href="http://zh.wikipedia.org/wiki/%E5%BE%B7%E6%91%A9%E6%A0%B9%E5%AE%9A%E5%BE%8B"> 德摩根定律</a><br>在  LINQ  中的表现形式：我们对谓词做否操作，来检验是否所有的元素都不能通过谓词，得到结果后，再次做否操作并返回。由于否操作的原因，这种实现方式仍然会<br>在合适的情况下提前返回。</p>
<p>虽然以上的方式可行，但是我更喜欢给每个方法一个单独的实现，这样做简单明了：</p>
<pre><code>public static bool Any&lt;TSource&gt;( 

    this IEnumerable&lt;TSource&gt; source) 

&#123; 

    if (source == null) 

    &#123; 

        throw new ArgumentNullException(&quot;source&quot;); 

    &#125; 

             

    using (IEnumerator&lt;TSource&gt; iterator = source.GetEnumerator()) 

    &#123; 

        return iterator.MoveNext(); 

    &#125; 

&#125; 

 

public static bool Any&lt;TSource&gt;( 

    this IEnumerable&lt;TSource&gt; source, 

    Func&lt;TSource, bool&gt; predicate) 

&#123; 

    if (source == null) 

    &#123; 

        throw new ArgumentNullException(&quot;source&quot;); 

    &#125; 

    if (predicate == null) 

    &#123; 

        throw new ArgumentNullException(&quot;predicate&quot;); 

    &#125; 

 

    foreach (TSource item in source) 

    &#123; 

        if (predicate(item)) 

        &#123; 

            return true; 

        &#125; 

    &#125; 

    return false; 

&#125; 

 

 

public static bool All&lt;TSource&gt;( 

    this IEnumerable&lt;TSource&gt; source, 

    Func&lt;TSource, bool&gt; predicate) 

&#123; 

    if (source == null) 

    &#123; 

        throw new ArgumentNullException(&quot;source&quot;); 

    &#125; 

    if (predicate == null) 

    &#123; 

        throw new ArgumentNullException(&quot;predicate&quot;); 

    &#125; 

 

    foreach (TSource item in source) 

    &#123; 

        if (!predicate(item)) 

        &#123; 

            return false; 

        &#125; 

    &#125; 

    return true; 

&#125;
</code></pre>
<p><a href="http://www.cnblogs.com/cuipengfei/archive/2012/02/15/2352444.html"> 复制代码 </a></p>
<p>这样的实现方式很明显的凸显了“提前返回”这一特性。而且，这样做也可以使得堆栈跟踪记录更易读。对于一个下游开发者来说，如果调试  Any<br>时在堆栈跟踪记录中看到了调用  All的记录会显得很奇怪；调用  All时看到了  Any  也会很奇怪。</p>
<p>有一点很有趣，不接受谓词的  Any  中我们没用到  foreach  。而是用了迭代器第一次调用  MoveNext<br>方法时的返回值来表示序列中是否存在元素。读这个方法可以很明显的（至少对我来说很明显）看出我们根本不关心第一个元素的值是什么，因为我们根本就没有去访问它。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>尽量使用  Any  而不是  Count  的建议或许是这篇文章中最重要的一点，余下的部分都比较简单，不过能基于一个操作符来实现另一个操作符总是很有趣的。</p>
<p>下一篇讲什么呢？或许是  Single  、  SingleOrDefault  、  First  、  FirstOrDefault  、  Last<br>或者  LastOrDefault  。也或许我会把它们都放到一篇文章中来阐释它们的相似同时也强调它们之间的差别。</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 11 - First，Last，Single以及它们带有OrDefault的重载</title>
    <url>/blog/2012/04/09/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects11%20-%20First%EF%BC%8CLast%EF%BC%8CSingle%E4%BB%A5%E5%8F%8A%E5%AE%83%E4%BB%AC%E5%B8%A6%E6%9C%89OrDefault%E7%9A%84%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<p>本文翻译自 <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/29/reimplementing-linq-to-objects-part-11-first-single-last-and-the-ordefault-versions.aspx"> http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;29&#x2F;reimplementing-linq-to-objects-part-11-first-single-last-and-the-ordefault-versions.aspx</a></p>
<p>今天我实现了六个操作符，每个操作符都有两个重载。我一开始以为这些操作符的实现会很相似，但是最后发现每个都稍微有些不同…</p>
<p>今天实现了哪些操作符？</p>
<p>以下三个集合的排列  {First, Last, Single}, {  带有  &#x2F;  不带有  OrDefault }, {  带有  &#x2F;  不带有谓词<br>}  ，其结果是十二个不同的方法签名：</p>
<pre><code>public static TSource First&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)

public static TSource First&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)

public static TSource FirstOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)

public static TSource FirstOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)

public static TSource Last&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)

public static TSource Last&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)

public static TSource LastOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)

public static TSource LastOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)

public static TSource Single&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)

public static TSource Single&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)

public static TSource SingleOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)

public static TSource SingleOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)
</code></pre>
<p>这些操作符有以下的共同点：</p>
<p>+ 它们都是接受一个泛型参数的扩展方法</p>
<p>+ 它们都是立即执行的</p>
<p>+ 他们都会检查参数是否为  null</p>
<p>+ 这些操作符的接受谓词的重载和以下形式等价：source.Where(谓词).该操作符()。换句话说，这些接受谓词的重载就是在执行操作符之前过滤一下</p>
<p>了解了上面这几点之后，对于每个操作符就只需考虑三种可能性：在谓词执行之后（如果有谓词的话），如果源序列是空的怎么处理？源序列只包含一个元素怎么处理？如果源序<br>列包含多个元素如何处理？我们可以用一个简单的表来描述上述问题的结果：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>如果源序列是空的</th>
<th>源序列只包含一个元素</th>
<th>源序列包含多个元素</th>
</tr>
</thead>
<tbody><tr>
<td>First</td>
<td>抛异常</td>
<td>返回该元素</td>
<td>返回第一个元素</td>
</tr>
<tr>
<td>FirstOrDefault</td>
<td>返回default(TSource)</td>
<td>返回该元素</td>
<td>返回第一个元素</td>
</tr>
<tr>
<td>Last</td>
<td>抛异常</td>
<td>返回该元素</td>
<td>返回最后一个元素</td>
</tr>
<tr>
<td>LastOrDefault</td>
<td>返回default(TSource)</td>
<td>返回该元素</td>
<td>返回最后一个元素</td>
</tr>
<tr>
<td>Single</td>
<td>抛异常</td>
<td>返回该元素</td>
<td>抛异常</td>
</tr>
<tr>
<td>SingleOrDefault</td>
<td>返回default(TSource)</td>
<td>返回该元素</td>
<td>抛异常</td>
</tr>
</tbody></table>
<p>很明显，如果输入序列只有一个元素的话，这几个操作符的执行结果是非常一致的:) 类似的，如果输入的序列是空的的话，那么没有“  OrDefault<br>”的操作符会抛异常（  InvalidOperationException  ），而带有“  OrDefault<br>”的操作符则会返回元素类型的默认值（引用类型的默认值为  null，  int  的默认值为  0  ，等等）。</p>
<p>如果（可能是被过滤过的）输入序列含有多个元素的话，那这些操作符的执行结果的差异是很大的，First和  Last  的结果是顾名思义的，而  Single<br>抛出异常。值得注意的是，  SingleOrDefault<br>也会抛出异常，因为它要做的事又不是像这样：如果输入序列只有一个元素的话，返回该元素，否则的话返回默认值。如果你需要能够处理多元素序列的操作符的话，用<br>First  或  Last  。如果你需要处理可能为空的序列的话，使用  FirstOrDefault  或  LastOrDefault<br>。请注意，如果使用带有“  OrDefault  ”的操作符的话，那么一个空的序列和一个仅包含默认值的序列的执行结果会是完全一样的。我们稍后会提到<br>DefaultIfEmpty。</p>
<p>现在我们知道这些操作符做什么了，我们来开始测试吧。</p>
<h1 id="我们要测试什么？"><a href="#我们要测试什么？" class="headerlink" title="我们要测试什么？"></a>我们要测试什么？</h1><p>今天早晨，我发了一条推文说我在开始实现之前就写了  72  个测试用例。实际上，我最终写了  80  个，为什么写了  80<br>我们稍后会说。对每一个操作符，我测试了  12  个用例：</p>
<p>+ 源序列是否为  null的测试（没有谓词的重载）</p>
<p>+ 源序列是否为  null的测试（有谓词的重载）</p>
<p>+ 谓词是否为  null的测试</p>
<p>+ 源序列不包含元素的测试（没有谓词的重载）</p>
<p>+ 源序列不包含元素的测试（有谓词的重载）</p>
<p>+ 源序列只包含一个元素的测试（没有谓词的重载）</p>
<p>+ 源序列只包含一个元素，且该元素符合谓词的测试</p>
<p>+ 源序列只包含一个元素，且该元素不符合谓词的测试</p>
<p>+ 源序列包含多个元素的测试（没有谓词的重载）</p>
<p>+ 源序列包含多个元素且只有一个元素符合谓词的测试</p>
<p>+ 源序列包含多个元素且多个元素符合谓词的测试</p>
<p>实现这些测试用例时，我做了很多复制粘贴，每个操作符的测试用例用的都是同一组数据，只是预期的结果值不同。</p>
<p>另外，First和  FirstOrDefault  分别有两个额外的测试，  Last和LastOrDefault也分别有两个：</p>
<p>+ First和FirstOrDefault：当没有谓词的时候，这两个方法应该在遇到第一个元素时就立刻返回，不应该继续遍历序列的剩余部分</p>
<p>+ First  和  FirstOrDefault  ：当有谓词的时候，应该在找到第一个符合谓词的元素时就立刻返回</p>
<p>+ Last和  LastOrDefault  ：当源序列实现了  IList<T>且没有谓词时，这两个方法使用源序列的  Count属性和索引器去访问最后一个元素，这是一个特殊优化</p>
<p>+ Last和LastOrDefault：当源序列实现了  IList  <T>且有谓词的时候，则没有上述的优化。这种情况下，这两个方法要彻底遍历整个源序列</p>
<p>上面提到的后两个测试用到了一个叫做  NonEnumerableList  的新集合类型，这个类型的所有方法实现都依赖于一个  List  <T>，除了<br>GetEnumerator  方法（泛型的和非泛型的）之外，这两个方法仅仅是抛出<br>NotSupportedException异常。这一点对于测试上述的优化很有帮助，有关优化的问题我们说到的时候再谈。</p>
<h1 id="来动手实现吧！"><a href="#来动手实现吧！" class="headerlink" title="来动手实现吧！"></a>来动手实现吧！</h1><p>这几个操作符的实现比我预期的要有趣，所以我下面要把十二个方法实现都列出来。这些方法可不是复制粘贴一下了事的，参数验证的部分除外。</p>
<p>如果我们基于  Where  和没有谓词的重载来实现有谓词的重载，并且基于  DefaultIfEmpty  和名字中不含  Default<br>的重载来实现名字中含有  Default  的重载的话，那么我们就只需要实现三个没有谓词和名字里没有  Default<br>的方法。但是，就像我之前说过的那样，单独的实现每个操作符会有一些好处。</p>
<p>为了避免看起来冗余，我把每个方法中的参数检验的部分省略掉了。不过在真实的代码中是含有参数检验的。我们从  First  开始吧：</p>
<pre><code>public static TSource First&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)
&#123;
    // Argument validation elided
    using (IEnumerator&lt;TSource&gt; iterator = source.GetEnumerator())
    &#123;
        if (iterator.MoveNext())
        &#123;
            return iterator.Current;
        &#125;
        throw new InvalidOperationException(&quot;Sequence was empty&quot;);
    &#125;
&#125;

public static TSource First&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)
&#123;
    // Argument validation elided
    foreach (TSource item in source)
    &#123;
        if (predicate(item))
        &#123;
            return item;
        &#125;
    &#125;
    throw new InvalidOperationException(&quot;No items matched the predicate&quot;);
&#125;
</code></pre>
<p>这两个实现看起来差异很大，这是我有意为之的。对于没有谓词的重载，我也可以用  foreach  来实现的，就从  foreach<br>的循环体中无条件的返回就可以了。然而，我想要强调我们在  First<br>中不需要循环遍历。我们只需要移向第一个元素，然后返回就可以了，如果无法移向第一个元素则抛出异常。没有任何迹象显示我们会再次调用  MoveNext<br>。而对于有谓词的重载，我们必须一直循环遍历直到找到一个符合谓词的元素，我们只在遍历完所有元素而找不到符合谓词的元素时才抛出异常。</p>
<p>下面我们来看看当序列为空时如何返回默认值：</p>
<pre><code>public static TSource FirstOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)
&#123;
    // Argument validation elided
    using (IEnumerator&lt;TSource&gt; iterator = source.GetEnumerator())
    &#123;
        return iterator.MoveNext() ? iterator.Current : default(TSource);
    &#125;
&#125;

public static TSource FirstOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)
&#123;
    // Argument validation elided
    foreach (TSource item in source)
    &#123;
        if (predicate(item))
        &#123;
            return item;
        &#125;
    &#125;
    return default(TSource);
&#125;
</code></pre>
<p>这个有谓词的  FirstOrDefault  看起来和有谓词的  First  非常相似，但是没有谓词的  FirstOrDefault  和没有谓词的<br>First  却有点细微的差别：我们在这里没有用  if  语句而是用了三元运算符（虽然说用  if<br>也是完全可以的）。不管能否移向第一个元素，我们都需要返回值。如果三元运算符允许第二个或第三个操作对象为  throw<br>语句就好了，但是即使不能的话也不是什么大问题。</p>
<p>接下来我们来实现  Single  ，它在某些方面与  First  的相似性比  Last  与  First  的相似性更大：</p>
<pre><code>public static TSource Single&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)
&#123;
    // Argument validation elided
    using (IEnumerator&lt;TSource&gt; iterator = source.GetEnumerator())
    &#123;
        if (!iterator.MoveNext())
        &#123;
            throw new InvalidOperationException(&quot;Sequence was empty&quot;);
        &#125;
        TSource ret = iterator.Current;
        if (iterator.MoveNext())
        &#123;
            throw new InvalidOperationException(&quot;Sequence contained multiple elements&quot;);
        &#125;
        return ret;
    &#125;
&#125;

public static TSource Single&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)
&#123;
    // Argument validation elided
    TSource ret = default(TSource);
    bool foundAny = false;
    foreach (TSource item in source)
    &#123;
        if (predicate(item))
        &#123;
            if (foundAny)
            &#123;
                throw new InvalidOperationException(&quot;Sequence contained multiple matching elements&quot;);
            &#125;
            foundAny = true;
            ret = item;
        &#125;
    &#125;
    if (!foundAny)
    &#123;
        throw new InvalidOperationException(&quot;No items matched the predicate&quot;);
    &#125;
    return ret;
&#125;
</code></pre>
<p>这个比  First  复杂多了。没有谓词的重载的开头和  First  的开头一样，不同的是如果能够成功的移向第一个元素的话，我们需要记住第一个元素的值（<br>因为我们可能需要返回该值）然后试着移向第二个元素。如果可以移向第二个元素，就要抛出异常，如果不能移向第二个元素，那就可以返回刚才记录下的值。</p>
<p>有谓词的重载更麻烦。我们依然需要记住第一个找到的符合谓词的值，不过因为这次我们在循环，我们还需要记住是否已经找到过一个符合谓词的值了。如果能够找到第二个符合<br>谓词的值，就必须抛异常。如果一个符合谓词的值都找不到，也要抛异常。请注意，尽管我们给  ret  赋了一个  default<br>(TSource)的初值，但是我们的  return  语句执行时  ret  肯定不会是初值的状态。然而，  C#<br>的明确赋值的语法无法理解这一点，所以我们需要给  ret  一个“傀儡”式的初值，而  default  (T)是唯一可以用的值。有另外一种不用<br>foreach  的实现方法：遍历序列直到找到第一个符合谓词的元素，此时声明一个局部变量并且把找到的元素赋值给该变量，然后再开始另一个循环，以确保不能再找到<br>其他符合谓词的值了。我个人觉得这种方式太复杂了，所以我选择了用  foreach  的方式。</p>
<p>下面实现  SingleOrDefault  的两个重载，这两个重载之间的差别就不是那么大了：</p>
<pre><code>public static TSource SingleOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)
&#123;
    // Argument validation elided
    using (IEnumerator&lt;TSource&gt; iterator = source.GetEnumerator())
    &#123;
        if (!iterator.MoveNext())
        &#123;
            return default(TSource);
        &#125;
        TSource ret = iterator.Current;
        if (iterator.MoveNext())
        &#123;
            throw new InvalidOperationException(&quot;Sequence contained multiple elements&quot;);
        &#125;
        return ret;
    &#125;
&#125;

public static TSource SingleOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)
&#123;
    // Argument validation elided
    TSource ret = default(TSource);
    bool foundAny = false;
    foreach (TSource item in source)
    &#123;
        if (predicate(item))
        &#123;
            if (foundAny)
            &#123;
                throw new InvalidOperationException(&quot;Sequence contained multiple matching elements&quot;);
            &#125;
            foundAny = true;
            ret = item;
        &#125;
    &#125;
    return ret;
&#125;
</code></pre>
<p>这次我们只是把没有谓词的重载里的  throw  语句替换成了  return  语句，并且在有谓词的重载中移除了没有找到符合谓词的元素的判断。我们在这里给<br>ret  赋以初值是有好处的，因为如果后面的代码不会给  ret  赋以其他值，那么  ret  已经有了正确的返回值了。</p>
<p>下一个是  Last  ：</p>
<pre><code>public static TSource Last&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)
&#123;
    // Argument validation elided
    IList&lt;TSource&gt; list = source as IList&lt;TSource&gt;;
    if (list != null)
    &#123;
        if (list.Count == 0)
        &#123;
            throw new InvalidOperationException(&quot;Sequence was empty&quot;);
        &#125;
        return list[list.Count - 1];
    &#125;

    using (IEnumerator&lt;TSource&gt; iterator = source.GetEnumerator())
    &#123;
        if (!iterator.MoveNext())
        &#123;
            throw new InvalidOperationException(&quot;Sequence was empty&quot;);
        &#125;
        TSource last = iterator.Current;
        while (iterator.MoveNext())
        &#123;
            last = iterator.Current;
        &#125;
        return last;
    &#125;
&#125;

public static TSource Last&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)
&#123;
    // Argument validation elided
    bool foundAny = false;
    TSource last = default(TSource);
    foreach (TSource item in source)
    &#123;
        if (predicate(item))
        &#123;
            foundAny = true;
            last = item;
        &#125;
    &#125;
    if (!foundAny)
    &#123;
        throw new InvalidOperationException(&quot;No items matched the predicate&quot;);
    &#125;
    return last;
&#125;
</code></pre>
<p>我们从没有谓词的方法开头的优化谈起吧。如果输入序列是个列表的话，我们可以获取列表的元素数量，然后根据元素数量的不同，或者是抛出异常或者是返回索引最大的元素。<br>如果还要再优化一点的话，我可以把  Count  值存到一个局部变量里，但是我假设获取  IList<T>的  Count<br>的代价是很低的。如果有哪位对这一点持反对意见，我很愿意做出修改：）请注意，我还假设了另一个情况，实现<br>IList<T>的类型含有的元素不会超过Int32.MaxValue，否则的话，这个优化就会失败。</p>
<p>如果不做优化的话，我们可以遍历整个序列，每次迭代都用最新访问到的元素来更新一个局部变量的值。我在这里没有用  foreach  ，但是并没有什么特别的原因<br>–  我们其实也可以用  foreach  ，每次的迭代都把一个叫做  foundAny  的变量设为  true  ，然后在最后测试<br>foundAny  的值。实际上，上面所描述的就正是有谓词的方法所采用的方式。不许得承认，采用这个方式在一定程度上是不得已而为之  –  我们不能调用<br>MoveNext  然后把获取到的值存起来，因为这个值有可能不符合谓词的约束。</p>
<p>Last  的有谓词的重载没有优化，这是  LINQ to Objects  （官方实现）的做法，但是我不知道这么做的原因。我们可以利用索引器来从后向前反向<br>遍历。有一个可能的解释是：谓词在处理某些值时有可能会抛出异常，如果我们在处理实现了<br>IList<T>的序列的时候直接跳到序列尾部的话，就会造成可观察的差别。我很想知道这是不是真的原因  –<br>如果哪位能够提供内部信息的话，我会更新这篇博文。</p>
<p>现在，我们就只有一个操作符需要实现了  –LastOrDefault  ：</p>
<pre><code>public static TSource LastOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)
&#123;
    // Argument validation elided
    IList&lt;TSource&gt; list = source as IList&lt;TSource&gt;;
    if (list != null)
    &#123;
        return list.Count == 0 ? default(TSource) : list[list.Count - 1];
    &#125;

    TSource last = default(TSource);
    foreach (TSource item in source)
    &#123;
        last = item;
    &#125;
    return last;
&#125;

public static TSource LastOrDefault&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    Func&lt;TSource, bool&gt; predicate)
&#123;
    // Argument validation elided
    TSource last = default(TSource);
    foreach (TSource item in source)
    &#123;
        if (predicate(item))
        &#123;
            last = item;
        &#125;
    &#125;
    return last;
&#125;
</code></pre>
<p>除了优化的部分，有谓词的和没有谓词的方法看起来很相似…比其他操作符的两个重载之间的差异要小。两个重载中，我们都是先定义一个返回值，并赋值为<br>default  (TSource)，然后遍历整个序列，并更新返回值，如果有谓词的话，就仅当元素符合谓词时才更新返回值。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>我今早起床时没料到这篇博文会写的这么长，不过我希望上述的各个实现之间的差异和”Last&#x2F;LastOrDefault”没有优化的怪事能够值得这么多的辛苦。</p>
<p>虽然前面提到了  DefaultIfEmpty  ，但是我准备下次再实现它。虽然说如果今晚抓紧的话，还是可以做完的  …</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>我发现在  LINQ to Objects  （官方实现）中，  Single  和  SingleOrDefault<br>没有谓词的重载在遇到第二个元素时马上就会抛出异常。但是有谓词的重载即使遇到了第二个元素，还是会继续遍历。这看起来很是荒唐，没有连贯性。我发了一个  <a href="https://connect.microsoft.com/VisualStudio/feedback/details/639955">Connect issue</a><br>，我们看看会有怎样的答复。</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/blog/2013/03/04/ce-shi/</url>
    <content><![CDATA[<p>测试发布文章</p>
<p>测试修改</p>
<p>再次修改</p>
<p>好久没用了，还能更新吗？test</p>
<p>is it fixed 10?</p>
]]></content>
  </entry>
  <entry>
    <title>自己动手重新实现LINQ to Objects 12 - DefaultIfEmpty</title>
    <url>/blog/2012/04/10/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0LINQ%20to%20Objects12%20-%20DefaultIfEmpty/</url>
    <content><![CDATA[<p>本文翻译自  <a href="http://stackoverflow.com/users/22656/jon-skeet"> Jon Skeet  </a> 的系列博文”Edulinq”。</p>
<p>本篇原文地址：</p>
<p><a href="http://msmvps.com/blogs/jon_skeet/archive/2010/12/29/reimplementing-linq-to-objects-part-12-defaultifempty.aspx"> http://msmvps.com/blogs/jon_skeet&#x2F;archive&#x2F;2010&#x2F;12&#x2F;29&#x2F;reimplementing-linq-to-objects-part-12-defaultifempty.aspx</a></p>
<p>上次实现  First  &#x2F;  Last的时候写了大量的代码，相比起来，今天要讲的  DefaultIfEmpty  就轻松多了。</p>
<h1 id="DefaultIfEmpty是什么？"><a href="#DefaultIfEmpty是什么？" class="headerlink" title="DefaultIfEmpty是什么？"></a>DefaultIfEmpty是什么？</h1><p>这个操作符虽然简单，但是还是有  <a href="http://msdn.microsoft.com/en-us/library/bb360530.aspx"> 两个重载  </a> ：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable &lt; TSource &gt; DefaultIfEmpty &lt; TSource &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable &lt; TSource &gt; DefaultIfEmpty &lt; TSource &gt; (<span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>, TSource defaultValue)</span><br></pre></td></tr></table></figure>

<p>这个操作符的行为很容易描述：</p>
<ul>
<li><p>如果输入序列是空序列的话，那么返回序列中仅包含一个默认值。这个默认值在第一个重载中是  default  (T)  ，在第二个重载中是第二个参数的值。</p>
</li>
<li><p>如果输入序列不是空序列的话，那么输出序列和输入序列相同。</p>
</li>
<li><p>输入序列不能为  null，这个参数检验是立即执行的。</p>
</li>
<li><p>输出序列是延迟执行的  –  除非读取输出序列，否则输入序列不会被读取。</p>
</li>
<li><p>输入序列是流式处理的；所有被读取的值都是立即  yield  返回的；没有缓存。</p>
</li>
</ul>
<p>非常简单。</p>
<h1 id="我们需要测试些什么？"><a href="#我们需要测试些什么？" class="headerlink" title="我们需要测试些什么？"></a>我们需要测试些什么？</h1><p>虽然天有点晚了，但是我还是决定要对参数检验进行测试  –<br>这件事其实不可小视，我第一次试着把参数检验的代码和真正迭代的代码分开到两个方法的尝试就失败了！由此可见，疏忽是多么容易出现的事啊。</p>
<p>除了参数检验外，我只找到四个值得测试的地方：</p>
<ul>
<li><p>不接受默认值参数的重载，输入序列为空序列的情况</p>
</li>
<li><p>接受默认值参数的重载，输入序列为空序列的情况</p>
</li>
<li><p>不接受默认值参数的重载，输入序列不为空序列的情况</p>
</li>
<li><p>接受默认值参数的重载，输入序列不为空序列的情况</p>
</li>
</ul>
<p>这些就是所有的测试用例。我没有测试流式处理，惰性求值，等等。</p>
<h1 id="来动手实现吧！"><a href="#来动手实现吧！" class="headerlink" title="来动手实现吧！"></a>来动手实现吧！</h1><p>虽然我不愿意依赖于一个操作符来实现另一个操作符，但是这里这两个操作符之间的关系实在是太明显了，所以我决定就破例一次。我甚至给参数检验实施了  DRY<br>的原则，但是实现还是只有这么简短：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">DefaultIfEmpty</span> &lt; TSource &gt; (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; source</span>)</span> &#123;</span><br><span class="line"> <span class="comment">// This will perform an appropriate test for source being null first.</span></span><br><span class="line"> <span class="keyword">return</span> source.DefaultIfEmpty(</span><br><span class="line">  <span class="literal">default</span> (TSource));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">DefaultIfEmpty</span> &lt; TSource &gt; (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; source,</span></span></span><br><span class="line"><span class="params"><span class="function"> TSource defaultValue</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;source&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> DefaultIfEmptyImpl(source, defaultValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; TSource &gt; <span class="title">DefaultIfEmptyImpl</span> &lt; TSource &gt; (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function"> IEnumerable &lt; TSource &gt; source,</span></span></span><br><span class="line"><span class="params"><span class="function"> TSource defaultValue</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">bool</span> foundAny = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">foreach</span>(TSource item <span class="keyword">in</span> source) &#123;</span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">  foundAny = <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (!foundAny) &#123;</span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  <span class="keyword">return</span> defaultValue;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在有人应该会发现一个  bug  …</p>
<p>除了在较简单的重载中使用  default  (TSource)<br>来调用较复杂的重载外，唯一有点意思的就是最下面的那个方法了。这个方法让我感觉有些不爽，因为它会在每次迭代时都重新给  foundAny  赋值为  true<br>…  但是，如果不这么做的话，那实现起来也很难看：</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">private <span class="keyword">static</span> <span class="type">IEnumerable</span> &lt; <span class="type">TSource</span> &gt; <span class="type">DefaultIfEmptyImpl</span> &lt; <span class="type">TSource</span> &gt; (</span><br><span class="line"> <span class="type">IEnumerable</span> &lt; <span class="type">TSource</span> &gt; source,</span><br><span class="line"> <span class="type">TSource</span> defaultValue) &#123;</span><br><span class="line"> <span class="keyword">using</span>(<span class="type">IEnumerator</span> &lt; <span class="type">TSource</span> &gt; <span class="keyword">iterator</span> = source.<span class="type">GetEnumerator</span>()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">iterator</span>.<span class="type">MoveNext</span>()) &#123;</span><br><span class="line">   <span class="keyword">yield</span></span><br><span class="line">   <span class="keyword">return</span> defaultValue;</span><br><span class="line">   <span class="keyword">yield</span></span><br><span class="line">   <span class="keyword">break</span>; // <span class="type">Like</span> a <span class="string">&quot;return&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">iterator</span>.<span class="type">Current</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">iterator</span>.<span class="type">MoveNext</span>()) &#123;</span><br><span class="line">   <span class="keyword">yield</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">iterator</span>.<span class="type">Current</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种实现或许会稍微高效一点，但是看起来很笨拙。我们可以把  yield break  后面的代码放到  else  里面，这样就可以去掉  yield<br>break  这一句了，但是这种方法我也不是很喜欢。我们可以用  do  &#x2F;while  循环来替换掉  while  循环，那样可以避免“  yield<br>return iterator  .Current  ”的重复出现。但是我也不是很喜欢  do&#x2F;while  循环。我很少用  do&#x2F;while<br>，以至于我读  do&#x2F;while  的代码时要稍微费点力。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>除了最后一部分缺少优雅性而让人有点不爽之外，其他地方都没什么有趣的。不过，我们现在可以通过  DefaultIfEmpty  来实现<br>FirstOrDefault&#x2F;LastOrDefault  和  SingleOrDefault  了。比如说，下面是  FirstOrDefault的实现：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TSource FirstOrDefault &lt; TSource &gt; (</span><br><span class="line"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">source</span>.DefaultIfEmpty().First();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TSource FirstOrDefault &lt; TSource &gt; (</span><br><span class="line"> <span class="keyword">this</span> IEnumerable &lt; TSource &gt; <span class="keyword">source</span>,</span><br><span class="line"> Func &lt; TSource, bool &gt; predicate) &#123;</span><br><span class="line"> <span class="comment">// Can&#x27;t just use source.DefaultIfEmpty().First(predicate)</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">source</span>.Where(predicate).DefaultIfEmpty().First();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意有谓词的重载中的注释，对  DefaultIfEmpty  的调用需要放在谓词的执行之后  …  不然的话，如果我们传入一个空序列和一个不能让<br>default  (TSource)  通过的谓词，那就会触发一个异常，而得不到默认值了。  LastOrDefault  和<br>SingleOrDefault  也可以通过类似的方式来实现。</p>
<p>我现在不确定下次要实现哪个操作符。我明早看看会不会有哪个特殊的方法让我获得灵感。</p>
]]></content>
      <tags>
        <tag>LinQ</tag>
      </tags>
  </entry>
  <entry>
    <title>用豆瓣读书Chrome插件，简单购买电子书</title>
    <url>/blog/2013/04/01/doubanebookprice/</url>
    <content><![CDATA[<h2 id="为什么要做这款插件？"><a href="#为什么要做这款插件？" class="headerlink" title="为什么要做这款插件？"></a>为什么要做这款插件？</h2><p>在豆瓣上查看一本书的时候，页面的右侧会显示哪些网站可以购买该书以及各自的价格。<br>比如这本《乡关何处》，页面右侧显示了亚马逊，京东，当当等网站的购买链接。</p>
<p><img data-src="http://farm9.staticflickr.com/8264/8609485540_026e013035_b.jpg" alt="乡关何处"></p>
<p>但是豆瓣只会提供纸质书的购买链接，不提供电子书的。除非该书豆瓣自己有售。<br>所以我写了个Chrome的插件来解决这个问题。</p>
<h2 id="这款插件怎么用？"><a href="#这款插件怎么用？" class="headerlink" title="这款插件怎么用？"></a>这款插件怎么用？</h2><p>这款插件会在每个图书页面上添加正版电子书的购买链接及其价格。您只需点击链接去购买就好了。</p>
<p>在Chrome中加载这个插件之后，再访问豆瓣的《乡关何处》的页面，右侧会多出三个链接：</p>
<p><img data-src="http://farm9.staticflickr.com/8532/8609505800_fbd41bdc60_b.jpg" alt="乡关何处"></p>
<p>淘宝，多看和亚马逊中文站都卖这本书的电子版。<br>看，纸质书要卖19.2，豆瓣电子书要卖11，多看只要6块钱，噢耶！节省纸张又省钱。</p>
<p>很多英文原版书在国内卖得很贵，所以这款插件也支持一些国外网站。<br>比如这本《The Pragmatic Programmer》：</p>
<p><img data-src="http://farm9.staticflickr.com/8247/8608418739_e4fe0b1ebb_b.jpg" alt="The Pragmatic Programmer"></p>
<p>原版纸质书亚马逊要卖351，澜瑞外文要卖487，吃人啊！亚马逊英文站的纸质版的售价折合成人民币也要180多，再加运费……</p>
<p>而电子版则要便宜很多，看截图上的红圈，最便宜的折合人民币只要130左右，嗯，还是有点贵，不过如果想读原版的话，这个kindle版是最好的选择了。</p>
<p>这款插件现在支持以下的电子书销售商：</p>
<ul>
<li>多看</li>
<li>唐茶</li>
<li>亚马逊kindle中文站</li>
<li>淘宝</li>
<li>京东</li>
<li>亚马逊kindle美国站</li>
<li>kobo</li>
<li>nook</li>
</ul>
<h2 id="如何实现的？"><a href="#如何实现的？" class="headerlink" title="如何实现的？"></a>如何实现的？</h2><p>是用JavaScript写的。</p>
<p>基本实现思路是这样的：</p>
<ul>
<li>获取当前图书的ISBN号码</li>
<li>根据ISBN去上面罗列的几家网站上搜索是否有这本书</li>
<li>如果有的话，显示在右侧</li>
</ul>
<p>例外情况：</p>
<ul>
<li>有些网站不支持ISBN搜索，对于这些网站直接用书名和作者名搜索的，所以结果有时不太准。</li>
<li>有时一本书的纸质版的ISBN和电子版的ISBN不同，所以实现中用到了google books的API来获取电子版的ISBN，然后再搜索。</li>
</ul>
<p>主要技术：<br>knockoutjs和jQuery。</p>
<h2 id="插件下载和源码"><a href="#插件下载和源码" class="headerlink" title="插件下载和源码"></a>插件下载和源码</h2><p>插件下载地址：<a href="https://chrome.google.com/webstore/detail/ebook-price-for-douban/ppbnlfplpcjhdphaejdfhbojmjifdjgd?hl=zh-CN">chrome store</a></p>
<p>源码：<a href="https://github.com/cuipengfei/JavaScript-Practice-Code/tree/master/EBookPriceForDouBan">github</a></p>
<h2 id="Disclaimer"><a href="#Disclaimer" class="headerlink" title="Disclaimer"></a>Disclaimer</h2><p>插件的实现中违反了豆瓣API的协议（豆瓣不允许其API的使用者利用豆瓣的数据产生其他网站的购买信息）。如果您对这点很敏感，请慎用。</p>
]]></content>
      <tags>
        <tag>豆瓣</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>如何一步一步推导出Y Combinator</title>
    <url>/blog/2013/04/09/make-y/</url>
    <content><![CDATA[<h2 id="本文讲什么？"><a href="#本文讲什么？" class="headerlink" title="本文讲什么？"></a>本文讲什么？</h2><p>本文用Scheme（Racket）代码为例，一步一步的推出Y Combinator的实现。</p>
<h2 id="本文不讲什么？"><a href="#本文不讲什么？" class="headerlink" title="本文不讲什么？"></a>本文不讲什么？</h2><p>Y Combinator是什么，干什么用的，它为什么能够work，它的数学含义以及实际应用场景，这些话题由于篇幅所限（咳咳，楼主的无知）不在本文论述范围之内。</p>
<p>如果有兴趣，请参考维基： <a href="http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator">http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator</a></p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>感谢Jojo同学的<br><a href="https://github.com/zhewuzhou/js-y-combinator/blob/master/y-combinator.js">这段JavaScript代码</a>的启发，我写了<a href="https://github.com/cuipengfei/lambda-calculus-impl/blob/master/racket/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%8E%A8%E5%87%BAY.rkt">对应的Scheme实现</a>。然后才有了本文。</p>
<h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><p>我们知道Y Combinator可以帮匿名函数实现递归。那就从一个广为人知的递归函数-阶乘开始吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define (fac1 n)</span><br><span class="line">  (if (&lt; n 2) 1</span><br><span class="line">      (* n (fac1 (- n 1)))))</span><br></pre></td></tr></table></figure>

<p>如果n小于2，则返回1，否则开始递归，简单明了。如果像这样调用它一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(fac1 5)</span><br></pre></td></tr></table></figure>

<p>会返回120，结果无误。</p>
<p>上面是阶乘的递归实现，它有一个名字叫做fac1，但是如果用匿名函数实现阶乘呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lambda (f) </span><br><span class="line">  (lambda (n) </span><br><span class="line">    (if (&lt; n 2) 1</span><br><span class="line">        (* n (f (- n 1))))))</span><br></pre></td></tr></table></figure>

<p>这个匿名函数“梦想着”其调用者会把该函数自己的实现作为参数传递进去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(((lambda (f) </span><br><span class="line">    (lambda (n) </span><br><span class="line">      (if (&lt; n 2) 1</span><br><span class="line">          (* n (f (- n 1)))))) </span><br><span class="line">  (lambda (f) </span><br><span class="line">    (lambda (n) </span><br><span class="line">      (if (&lt; n 2) 1</span><br><span class="line">          (* n (f (- n 1))))))) 1)</span><br></pre></td></tr></table></figure>

<p>我们把匿名函数重复写一遍，就可以计算1或者是0的阶乘，但是要计算3的阶乘呢？那就得这么写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(((lambda (f) </span><br><span class="line">    (lambda (n) </span><br><span class="line">      (if (&lt; n 2) 1</span><br><span class="line">          (* n (f (- n 1)))))) </span><br><span class="line">  ((lambda (f) </span><br><span class="line">     (lambda (n) </span><br><span class="line">       (if (&lt; n 2) 1</span><br><span class="line">           (* n (f (- n 1)))))) </span><br><span class="line">   ((lambda (f) </span><br><span class="line">      (lambda (n) </span><br><span class="line">        (if (&lt; n 2) 1</span><br><span class="line">            (* n (f (- n 1)))))) </span><br><span class="line">    (lambda (f) </span><br><span class="line">      (lambda (n) </span><br><span class="line">        (if (&lt; n 2) 1</span><br><span class="line">            (* n (f (- n 1))))))))) 3)</span><br></pre></td></tr></table></figure>

<p>想要计算一个大于2的n的阶乘，就得把这个匿名函数重复写n+1次。这么多的重复代码，这么多的括号。。。</p>
<p>所以我们需要一个神奇的函数，Y，它可以接受一个匿名的伪递归函数作为参数，产出一个真递归的函数。<br>这个神奇的Y作用在上面的匿名函数上之后产出的结果就可以用来计算任何n的阶乘。下面的代码会输出120（如果Y已经实现了的话）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">((Y (lambda (f) </span><br><span class="line">       (lambda (n) </span><br><span class="line">         (if (&lt; n 2) 1</span><br><span class="line">             (* n (f (- n 1))))))) 5)</span><br></pre></td></tr></table></figure>

<p>下面就开始一步步的构造这个神奇的Y吧。</p>
<p>为了便于推导，暂时给这个匿名函数一个名字，叫做fake_fac。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define fake_fac </span><br><span class="line">  (lambda (f) </span><br><span class="line">    (lambda (n) </span><br><span class="line">      (if (&lt; n 2) 1</span><br><span class="line">          (* n (f (- n 1)))))))</span><br></pre></td></tr></table></figure>

<p>有了这个名字之后，再要计算3的阶乘就容易了一些。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">((fake_fac (fake_fac (fake_fac fake_fac))) 3)</span><br></pre></td></tr></table></figure>

<p>观察上面的代码，我们把fake_fac传递给它自己，得到一个返回值，把这个返回的值再次传递给fake_fac，再得到一个新的返回值，又把新的返回值传递给fake_fac，得到最终的返回值，最后把3传递给这个返回值。</p>
<p>可以看到，我们在不停的把fake_rec传给它自己，所以定义一个helper吧：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define (callself f) (f f))</span><br></pre></td></tr></table></figure>

<p>这个helper一会儿会派上用场。</p>
<p>现在看看fake_fac中的f是什么呢？对于((fake_fac (fake_fac (fake_fac fake_fac))) 3)这行代码中的最右侧的fake_fac来说，f没有用，因为这个fake_fac自己都没有被调到，它只是起个占位符的作用，实际上这行代码((fake_fac (fake_fac (fake_fac 1))) 3)和上面的那行是等价的。</p>
<p>对于右侧第二个fake_fac来说，f就是fake_fac。对于左侧第二个fake_fac来说，f是(fake_fac fake_fac)的返回值。</p>
<p>对于左侧第一个fake_fac来说，f是(fake_fac (fake_fac fake_fac))的返回值。</p>
<p>由此可见，f是fake_fac对自己反复调用的返回值。而且从fake_fac的定义可见，我们总是给f传递一个数字n，这样的话，我们再写一个helper：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lambda (n) ((f f) n))</span><br></pre></td></tr></table></figure>

<p>再把这个helper传递给fake_fac。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(fake_fac (lambda (n) ((f f) n)))</span><br></pre></td></tr></table></figure>

<p>但是上面这两段代码是有问题的，因为f的值无法确定。</p>
<p>有句话说的好：<br>if you don’t know exactly what you want to put somewhere in a piece of code, just abstract it out and make it a parameter of a function.<br>所以我们就把f抽成参数吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define (callselfWithN f)</span><br><span class="line">  (fake_fac (lambda (n) ((f f) n))))</span><br></pre></td></tr></table></figure>

<p>我们希望这个helper可以帮fake_fac无限次的调用自己。</p>
<p>现在，我们该怎么调用callselfWithN呢？不能把fake_fac传给它，因为那样的话(f f)就只是fake_fac对自己的调用，它只能计算0或者1的阶乘。所以要把callselfWithN这个我们希望可以帮fake_fac实现无限次自调用的函数传给callselfWithN它自己。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">((callselfWithN callselfWithN) 5)</span><br></pre></td></tr></table></figure>

<p>这行代码可以返回120，结果正确了！</p>
<p>记得前面定义的第一个helper吗？现在用的上了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">((callself callselfWithN) 5)</span><br></pre></td></tr></table></figure>

<p>现在把callselfWithN带入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">((callself  (lambda (f)</span><br><span class="line">  (fake_fac (lambda (n) ((f f) n))))) 5)</span><br></pre></td></tr></table></figure>

<p>可以看出，这段代码和fake_fac是紧耦合的，把它抽到参数上去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define (Y3 fake_recur)</span><br><span class="line">  (callself  (lambda (f)</span><br><span class="line">               (fake_recur (lambda (n) ((f f) n))))))</span><br></pre></td></tr></table></figure>

<p>然后再把callself也带入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define Y (lambda (fake_recur) </span><br><span class="line">            ((lambda (f) (f f)) </span><br><span class="line">             (lambda (f) </span><br><span class="line">               (fake_recur </span><br><span class="line">                (lambda (n) ((f f) n)))))))</span><br></pre></td></tr></table></figure>

<p>现在Y不依赖于任何其他函数了，测试一下Y，把前面的计算阶乘的匿名函数传给它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">((Y (lambda (f) </span><br><span class="line">      (lambda (n) </span><br><span class="line">        (if (&lt; n 2) 1</span><br><span class="line">            (* n (f (- n 1))))))) 5)</span><br></pre></td></tr></table></figure>

<p>能够返回120，正确！Y Combinator构造完成！</p>
]]></content>
      <tags>
        <tag>Y</tag>
        <tag>FP</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala中的语言特性是如何实现的(1)</title>
    <url>/blog/2013/05/05/how-are-scala-language-features-implemented/</url>
    <content><![CDATA[<p>Scala可以编译为Java bytecode和CIL，从而在JVM和CLI之上运行。Scala有很多在Java和C#的世界中显得陌生的语言特性，本文将分析这些语言特性是如何实现的。</p>
<h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>Scala中可以像这样创建object：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HowIsObjectImplementedInScala</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printSomething</span></span>() &#123;</span><br><span class="line">    println(<span class="string">&quot;printSomething&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在代码的其他地方调用printSomething，一个object究竟是什么东西呢？<br>我们将这段Scala编译为Java bytecode，然后反编译为Java，会发现编译器为HowIsObjectImplementedInScala这个object生成了两个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HowIsObjectImplementedInScala</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printSomething</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    HowIsObjectImplementedInScala..MODULE$.printSomething();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HowIsObjectImplementedInScala$</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  MODULE$;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">new</span> ();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSomething</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    Predef..MODULE$.println(<span class="string">&quot;printSomething&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> HowIsObjectImplementedInScala$()</span><br><span class="line">  &#123;</span><br><span class="line">    MODULE$ = <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个类只包含一个静态方法，其实现依赖于第二个叫做HowIsObjectImplementedInScala$的类。</p>
<p>HowIsObjectImplementedInScala$是一个单例，其静态块实例化自己并把this赋值给MODULE$这个public static的成员，从而可以被外界访问。</p>
<p>同样，我们可以把这段代码编译为CIL，然后反编译为C#:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">HowIsObjectImplementedInScala</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSomething</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    HowIsObjectImplementedInScala$.MODULE$.printSomething();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">HowIsObjectImplementedInScala</span>$ : <span class="title">ScalaObject</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> HowIsObjectImplementedInScala$ MODULE$;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">printSomething</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    Predef$.MODULE$.println(<span class="string">&quot;printSomething&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> HowIsObjectImplementedInScala$()</span><br><span class="line">  &#123;</span><br><span class="line">    HowIsObjectImplementedInScala$.MODULE$ = <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> HowIsObjectImplementedInScala$()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">new</span> HowIsObjectImplementedInScala$();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和Java代码大同小异，除了静态构造和某几个关键字外，基本一样。一个object就是一个Scala编译器帮我们实现的singleton。</p>
<h2 id="var和val"><a href="#var和val" class="headerlink" title="var和val"></a>var和val</h2><p>var：可变。val：不可变。关于这两个关键字何时该使用哪一个，这里不做讨论，我们只是观察这二者在编译后是如何被表示的。</p>
<p>这段Scala代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HowAreVarAndValImplementedInScala</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v1 = <span class="number">123</span></span><br><span class="line">  <span class="keyword">val</span> v2 = <span class="number">456</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">method1</span></span>() = &#123;</span><br><span class="line">    <span class="keyword">var</span> v3 = <span class="number">123</span></span><br><span class="line">    <span class="keyword">val</span> v4 = <span class="number">456</span></span><br><span class="line">    println(v3 + v4)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义了两个字段一个var，一个val，方法中定义了两个局部变量，一个var，一个val。</p>
<p>编译为Java bytecode并反编译之后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HowAreVarAndValImplementedInScala</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">v1</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.v1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> v1_$eq(<span class="type">int</span> x$<span class="number">1</span>) &#123; <span class="built_in">this</span>.v1 = x$<span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">v2</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.v2; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">v3</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">v4</span> <span class="operator">=</span> <span class="number">456</span>;</span><br><span class="line">    Predef..MODULE$.println(BoxesRunTime.boxToInteger(v3 + v4));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明为字段的v1和v2，一个是普通字段，另一个则被标记为final。编译器为v1生成了getter和setter，为v2则只有getter，因为v2作为immutable的字段是不可以被重新赋值的。</p>
<p>有趣的是方法中的局部变量都是普通的变量，没有被final修饰。</p>
<p>再来看这段Scala编译为CIL再反编译为C#之后的样子：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HowAreVarAndValImplementedInScala</span> : <span class="title">ScalaObject</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> v1;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> v2;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">v1</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.v1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> v1_$eq(<span class="built_in">int</span> x$<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.v1 = x$<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">v2</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.v2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">method1</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">int</span> v3 = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">int</span> v4 = <span class="number">456</span>;</span><br><span class="line">    Predef$.MODULE$.println(v3 + v4);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HowAreVarAndValImplementedInScala</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.v1 = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">this</span>.v2 = <span class="number">456</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一个明显的问题，v2没有标为readonly（C#世界中用于声明变量不可以重新赋值的关键字），这是compiler的bug吗？</p>
<p>除此之外，和Java代码一致。但是有趣的是代码中的所有public方法（包括上一段演示object的代码）都被标为了override，原因不明。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本来以为研究这么简单的两个语言特性不会有啥收获，仅仅是反编译一下，看看compiler都做了啥，满足下好奇心罢了。</p>
<p>结果还是有意外收获，我在反编译后的代码中发现了三个有趣的问题：</p>
<ul>
<li>在Scala中被声明为val的v4为什么在反编译的Java中不是final的呢？</li>
<li>在Scala中被声明为val的v2为什么在反编译的C#中不是readonly的呢？</li>
<li>为什么反编译出来的C#代码中的实例级公开方法都是标有override的呢？</li>
</ul>
<p>为什么呢？为什么呢？为什么呢？答案下期揭晓。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala中的语言特性是如何实现的(2)</title>
    <url>/blog/2013/05/11/scala-language-features-2/</url>
    <content><![CDATA[<p><a href="http://cuipengfei.me/blog/2013/05/05/how-are-scala-language-features-implemented/">上篇博文</a>的末尾留了三个问题，现在自问自答一下。</p>
<h3 id="在Scala中被声明为val的v4为什么在反编译的Java中不是final的呢？"><a href="#在Scala中被声明为val的v4为什么在反编译的Java中不是final的呢？" class="headerlink" title="在Scala中被声明为val的v4为什么在反编译的Java中不是final的呢？"></a>在Scala中被声明为val的v4为什么在反编译的Java中不是final的呢？</h3><p>在方法中声明局部变量时，如果用Scala的val关键字（或者是Java中的final）来修饰变量，则代表着此变量在赋过初始值之后不可以再被重新赋值。这个val或者final只是给编译器用的，编译器如果发现你给此变量重新赋值会抛出错误。</p>
<p>而bytecode不具备表达一个局部变量是immutable的能力，也就是说对于JVM来说，不存在不可变的局部变量这个概念。所以v4在反编译之后，就和普通的局部变量无异了。</p>
<h3 id="在Scala中被声明为val的v2为什么在反编译的C-中不是readonly的呢？"><a href="#在Scala中被声明为val的v2为什么在反编译的C-中不是readonly的呢？" class="headerlink" title="在Scala中被声明为val的v2为什么在反编译的C#中不是readonly的呢？"></a>在Scala中被声明为val的v2为什么在反编译的C#中不是readonly的呢？</h3><p>这是个挺tricky的问题，我试着解释一下。Scala .NET是基于IKVM实现的，IKVM可以把Java bytecode翻译为CIL。<br>所以Scala编译为CIL的过程实际是这样的：</p>
<p>Scala —–Scala编译器—–&gt; bytecode —–IKVM—–&gt; CIL</p>
<p>Scala编译器编译出的bytecode实际是用final修饰了v2的，但是bytecode中的final和CIL中的initonly（对应C#的readonly）是不一样的。</p>
<p>Java中，final实例变量定义的时候，可以先声明，而不给初值，然后我们可以在任何一个方法中给它赋初值。这提供了更大的灵活性，一个Java类中的final成员可以依对象而不同，却保持其immutable的特征。</p>
<p>而CIL的initonly则要严格一点，CLI标准（ECMA-334）这样描述：</p>
<blockquote>
<p>initonly marks fields which are constant after they are initialized. These fields shall only be mutated inside a constructor. If the field is a static field, then it shall be mutated only inside the type initializer of the type in which it was declared. If it is an instance field, then it shall be mutated only in one of the instance constructors of the type in which it was defined. It shall not be mutated in any other method or in any other constructor, including constructors of derived classes.</p>
</blockquote>
<p>可见，一个initonly的成员，不是随便在哪儿都可以赋初值的。由于这点不同IKVM就没有直接把final翻译成initonly。如果想让v2在C#代码中变成readonly的，可以给IKVM加上strictfinalfieldsemantics这个参数。</p>
<h3 id="为什么反编译出来的C-代码中的实例级公开方法都是标有override的呢？"><a href="#为什么反编译出来的C-代码中的实例级公开方法都是标有override的呢？" class="headerlink" title="为什么反编译出来的C#代码中的实例级公开方法都是标有override的呢？"></a>为什么反编译出来的C#代码中的实例级公开方法都是标有override的呢？</h3><p>这个问题还没搞明白。</p>
<p>但是有个有趣的现象，如果用Scala .NET来编译Scala源码，编译出的实例级方法都是标有override的；而如果先把Scala代码编译为.class然后再用IKVM把.class文件转换为CIL的话，方法则是标有virtual的。我猜这可能和Java中的方法默认是可以被overirde的有关。</p>
<p>下面开始正文，前面填坑用了不少篇幅，所以这次只分析一个语言特性：Scala中的constructor。</p>
<p>##Constructor</p>
<p>Scala中可以在声明class的同时声明一个constructor，比如这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScalaConstructorExample</span>(<span class="params">val x: <span class="type">Double</span>, y: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  println(x + y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造函数接收两个参数x和y，然后把x和y拼在一起打印出来。反编译为Java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScalaConstructorExample</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">x</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ScalaConstructorExample</span><span class="params">(<span class="type">double</span> x, String y)</span></span><br><span class="line">  &#123;</span><br><span class="line">    Predef..MODULE$.println(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(x).append(y).toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现编译器给标为val的x生成了一个getter，很方便的语法糖。而直接写在类内的打印语句则被放到了构造函数内。下面是反编译为C#的代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScalaConstructorExample</span> : <span class="title">ScalaObject</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">double</span> x = x;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">x</span>()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ScalaConstructorExample</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">string</span> y</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		Predef$.MODULE$.println(<span class="keyword">new</span> StringBuilder().Append(x).Append(y).ToString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和Java代码基本无异。比较一下，Scala用3行代码表达的含义，Java和C#要用14行才行。</p>
<p>现在加一个重载的构造函数：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScalaConstructorExample</span>(<span class="params">val x: <span class="type">Double</span>, y: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  println(x + y)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(x: <span class="type">Double</span>) = &#123;</span><br><span class="line">  	<span class="keyword">this</span>(x, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个构造函数给了y一个默认值“hello”。反编译为Java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScalaConstructorExample</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">x</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ScalaConstructorExample</span><span class="params">(<span class="type">double</span> x, String y)</span></span><br><span class="line">  &#123;</span><br><span class="line">  	Predef..MODULE$.println(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(x).append(y).toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ScalaConstructorExample</span><span class="params">(<span class="type">double</span> x)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">this</span>(x, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的C#代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScalaConstructorExample</span> : <span class="title">ScalaObject</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">double</span> x = x;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">x</span>()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ScalaConstructorExample</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">string</span> y</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		Predef$.MODULE$.println(<span class="keyword">new</span> StringBuilder().Append(x).Append(y).ToString());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ScalaConstructorExample</span>(<span class="params"><span class="built_in">double</span> x</span>) : <span class="title">this</span>(<span class="params">x, <span class="string">&quot;hello&quot;</span></span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造函数重载这个特性就显得平淡无奇了，不过还是比较一下行数。定义两个构造函数，打印出构造函数的参数，声明一个getter，这三件事Scala只用7行代码就完成了，Java和C#都需要将近20行。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么必须是final的呢？</title>
    <url>/blog/2013/06/22/why-does-it-have-to-be-final/</url>
    <content><![CDATA[<h2 id="一个谜团"><a href="#一个谜团" class="headerlink" title="一个谜团"></a>一个谜团</h2><p>如果你用过类似guava这种“伪函数式编程”风格的library的话，那下面这种风格的代码对你来说应该不陌生：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryUsingGuava</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedLength</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    Iterables.filter(Lists.newArrayList(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;1234&quot;</span>), <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">apply</span><span class="params">(String str)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> str.length() == expectedLength;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码对一个字符串的list进行过滤，从中找出长度为4的字符串。看起来很是平常，没什么特别的。</p>
<p>但是，声明expectedLength时用的那个final看起来有点扎眼，把它去掉试试：</p>
<blockquote>
<p>error: local variable expectedLength is accessed from within inner class; needs to be declared final</p>
</blockquote>
<p>结果Java编译器给出了如上的错误，看起来匿名内部类只能够访问final的局部变量。但是，<strong>为什么呢？其他的语言也有类似的规定吗？</strong></p>
<p>在开始用其他语言做实验之前我们先把问题简化一下，不要再带着guava了，我们去除掉噪音，把问题归结为：</p>
<p><strong>为什么Java中的匿名内部类只可以访问final的局部变量呢？其他语言中的匿名函数也有类似的限制吗？</strong></p>
<h2 id="Scala中有类似的规定吗？"><a href="#Scala中有类似的规定吗？" class="headerlink" title="Scala中有类似的规定吗？"></a>Scala中有类似的规定吗？</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tryAccessingLocalVariable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">123</span></span><br><span class="line">  println(number)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> lambda = () =&gt; &#123;</span><br><span class="line">    number = <span class="number">456</span></span><br><span class="line">    println(number)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lambda.apply()</span><br><span class="line">  println(number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的Scala代码是合法的，number变量是声明为var的，不是val（类似于Java中的final）。而且在匿名函数中可以修改number的值。</p>
<p>看来<strong>Scala中没有类似的规定</strong>。</p>
<h2 id="C-中有类似的规定吗？"><a href="#C-中有类似的规定吗？" class="headerlink" title="C#中有类似的规定吗？"></a>C#中有类似的规定吗？</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tryUsingLambda</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">int</span> number = <span class="number">123</span>;</span><br><span class="line">	Console.WriteLine (number);</span><br><span class="line"></span><br><span class="line">	Action action = () =&gt; &#123;</span><br><span class="line">		number = <span class="number">456</span>;</span><br><span class="line">		Console.WriteLine (number);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	action ();</span><br><span class="line">	Console.WriteLine (number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段C#代码也是合法的，number这个局部变量在lambda表达式内外都可以访问和赋值。</p>
<p>看来<strong>C#中也没有类似的规定</strong>。</p>
<h2 id="分析谜团"><a href="#分析谜团" class="headerlink" title="分析谜团"></a>分析谜团</h2><p>三门语言中只有Java有这种限制，那我们分析一下吧。先来看一下Java中的匿名内部类是如何实现的：</p>
<p>先定义一个接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后创建这个接口的匿名子类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryUsingAnonymousClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useMyInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterface</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        myInterface.doSomething();</span><br><span class="line"></span><br><span class="line">        System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个匿名子类会被编译成一个单独的类，反编译的结果是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TryUsingAnonymousClass$1</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TryUsingAnonymousClass <span class="built_in">this</span>$<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer paramInteger;</span><br><span class="line"></span><br><span class="line">    TryUsingAnonymousClass$<span class="number">1</span>(TryUsingAnonymousClass <span class="built_in">this</span>$<span class="number">0</span>, Integer paramInteger) &#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="built_in">this</span>$<span class="number">0</span> = <span class="built_in">this</span>$<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.paramInteger = paramInteger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.paramInteger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到名为number的局部变量是作为构造方法的参数传入匿名内部类的（以上代码经过了手动修改，真实的反编译结果中有一些不可读的命名）。</p>
<p>如果Java允许匿名内部类访问非final的局部变量的话，那我们就可以在TryUsingAnonymousClass$1中修改paramInteger，但是这不会对number的值有影响，因为它们是不同的reference。</p>
<p>这就会造成数据不同步的问题。</p>
<p>所以，<strong>谜团解开了：Java为了避免数据不同步的问题，做出了匿名内部类只可以访问final的局部变量的限制。</strong></p>
<p>但是，新的谜团又出现了：</p>
<h2 id="Scala和C-为什么没有类似的限制呢？它们是如何处理数据同步问题的呢？"><a href="#Scala和C-为什么没有类似的限制呢？它们是如何处理数据同步问题的呢？" class="headerlink" title="Scala和C#为什么没有类似的限制呢？它们是如何处理数据同步问题的呢？"></a>Scala和C#为什么没有类似的限制呢？它们是如何处理数据同步问题的呢？</h2><p>上面出现过的那段Scala代码中的lambda表达式会编译成这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TryUsingAnonymousClassInScala$$anonfun$1</span> <span class="keyword">extends</span> <span class="title class_">AbstractFunction0</span>.mcV.sp</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IntRef number$<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">()</span> &#123;</span><br><span class="line">        apply$mcV$sp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> apply$mcV$sp() &#123;</span><br><span class="line">        <span class="built_in">this</span>.number$<span class="number">2.</span>elem = <span class="number">456</span>;</span><br><span class="line">        Predef..MODULE$.println(BoxesRunTime.boxToInteger(<span class="built_in">this</span>.number$<span class="number">2.</span>elem));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TryUsingAnonymousClassInScala$$anonfun$<span class="number">1</span>(TryUsingAnonymousClassInScala $outer, IntRef number$<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.number$<span class="number">2</span> = number$<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到number也是通过构造方法的参数传入的，但是与Java的不同是这里的number不是直接传入的，是被IntRef包装了一层然后才传入的。对number的值修改也是通过包装类进行的：this.number$2.elem &#x3D; 456;</p>
<p>这样就保证了lambda表达式内外访问到的是同一个对象。</p>
<p>再来看看C#的处理方式，反编译一下，发现C#编译器生成了如下的一个类：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> &lt;<span class="title">tryUsingLambda</span>&gt;<span class="title">c__AnonStorey0</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">internal</span> <span class="built_in">int</span> number;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">internal</span> <span class="keyword">void</span> &lt;&gt;m__0 ()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.number = <span class="number">456</span>;</span><br><span class="line">		Console.WriteLine (<span class="keyword">this</span>.number);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把number包装在这个类内，这样就保证了lambda表达式内外使用的都是同一个number，即便重新赋值也可以保证内外部的数据是同步的。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Scala和C#的编译器通过把局部变量包装在另一个对象中，来实现lambda表达式内外的数据同步。</p>
<p>而Java的编译器由于未知的原因（怀疑是为了图省事儿？）没有做包装局部变量这件事儿，于是就只好强制用户把局部变量声明为final才能在匿名内部类中使用来避免数据不同步的问题。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala中的语言特性是如何实现的(3) -- trait</title>
    <url>/blog/2013/10/13/scala-trait/</url>
    <content><![CDATA[<p>我在Coursera上跟了一门叫做<a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a>的课程，是由Scala的作者Martin Odersky讲授的。其中第三周的作业中使用到了Scala的trait这个语言特性。</p>
<p>我以前熟知的语言都没有类似的特性（Ruby的mixin和Scala的trait很像，但是Ruby我不熟），所以这周的博客就分析一下这个语言特性是如何实现的。</p>
<h3 id="trait"><a href="#trait" class="headerlink" title="trait"></a>trait</h3><p>在讲trait的实现机制之前，先看一个使用trait的例子。<br>假设我们有以下几个类：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Plant</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">photosynthesis</span> </span>= println(<span class="string">&quot;Oh, the sunlight!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rose</span> <span class="keyword">extends</span> <span class="title">Plant</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">smell</span> </span>= println(<span class="string">&quot;Good!&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">makePeopleHappy</span> </span>= println(<span class="string">&quot;People like me&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ruderal</span> <span class="keyword">extends</span> <span class="title">Plant</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">grow</span> </span>= println(<span class="string">&quot;I take up all the space!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">move</span> </span>= println(<span class="string">&quot;I can move!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bark</span> </span>= println(<span class="string">&quot;Woof!&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">makePeopleHappy</span> </span>= println(<span class="string">&quot;People like me&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bite</span> </span>= println(<span class="string">&quot;I am poisonous!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>植物家族有玫瑰和杂草。</p>
<p>动物家族有狗和毒蛇。</p>
<p>仔细观察可以发现，玫瑰和狗有一个共同的行为，它们都可以取悦人类，这个行为是用完全一样的代码实现的。</p>
<p>如何把Rose和Dog中的重复代码消除掉呢？有一种潜在的解决方案：<br>把makePeopleHappy提取到一个类中去，让植物和动物都继承自它。</p>
<p>这么做虽然消除了重复代码但有两个明显的缺点：</p>
<ol>
<li>植物和动物继承自同一个类，不太合理</li>
<li>杂草和毒蛇也具有了取悦于人的能力，也不太合理</li>
</ol>
<p>这时我们就可以使用trait，它没有上面提到的两个缺点。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">PeoplePleaser</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">makePeopleHappy</span> </span>= println(<span class="string">&quot;People like me&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rose</span> <span class="keyword">extends</span> <span class="title">Plant</span> <span class="keyword">with</span> <span class="title">PeoplePleaser</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">smell</span> </span>= println(<span class="string">&quot;Good!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">with</span> <span class="title">PeoplePleaser</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bark</span> </span>= println(<span class="string">&quot;Woof!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义一个trait，把makePeopleHappy置于其中，让Rose和Dog都with这个trait。然后就可以写这样的代码来调用它们了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">Rose</span>().makePeopleHappy</span><br><span class="line"><span class="keyword">new</span> <span class="type">Dog</span>().makePeopleHappy</span><br></pre></td></tr></table></figure>

<p>这样我们就解决了重复代码的问题，而且没有触及已存在的继承关系。</p>
<p>现在看看trait的实现机制吧，我们开始反编译！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">interface</span> <span class="title class_">PeoplePleaser</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makePeopleHappy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PeoplePleaser$class</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makePeopleHappy</span><span class="params">(PeoplePleaser $<span class="built_in">this</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    Predef..MODULE$.println(<span class="string">&quot;People like me&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $init$(PeoplePleaser $<span class="built_in">this</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rose</span> <span class="keyword">extends</span> <span class="title class_">Plant</span></span><br><span class="line">  <span class="keyword">implements</span> <span class="title class_">PeoplePleaser</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makePeopleHappy</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    PeoplePleaser$class.makePeopleHappy(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smell</span><span class="params">()</span> &#123; Predef..MODULE$.println(<span class="string">&quot;Good!&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Rose</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    PeoplePleaser.class.$init$(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span></span><br><span class="line">  <span class="keyword">implements</span> <span class="title class_">PeoplePleaser</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makePeopleHappy</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    PeoplePleaser$class.makePeopleHappy(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123; Predef..MODULE$.println(<span class="string">&quot;Woof!&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    PeoplePleaser.class.$init$(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>真相大白了，PeoplePleaser被编译成了一个接口加一个抽象类。Rose和Dog实现这个接口，并通过调用抽象类中的静态方法来实现了makePeopleHappy。</p>
<p>很有趣的一点是Rose和Dog在调用静态方法时都把this传了进去，为什么呢？我们把原来的代码改成这样来看：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">PeoplePleaser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> moreMessage = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">makePeopleHappy</span> </span>= println(<span class="string">&quot;People like me. &quot;</span> + moreMessage)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rose</span> <span class="keyword">extends</span> <span class="title">Plant</span> <span class="keyword">with</span> <span class="title">PeoplePleaser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> moreMessage = <span class="string">&quot;Because I smell nice.&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">smell</span> </span>= println(<span class="string">&quot;Good!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">with</span> <span class="title">PeoplePleaser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> moreMessage = <span class="string">&quot;Because I fetch balls.&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bark</span> </span>= println(<span class="string">&quot;Woof!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们给makePeopleHappy加上一段额外的信息。<br>现在再次反编译。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">interface</span> <span class="title class_">PeoplePleaser</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> objsets$PeoplePleaser$_setter_$moreMessage_$eq(String paramString);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">moreMessage</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makePeopleHappy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PeoplePleaser$class</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makePeopleHappy</span><span class="params">(PeoplePleaser $<span class="built_in">this</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    Predef..MODULE$.println(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">    .append(<span class="string">&quot;People like me. &quot;</span>)</span><br><span class="line">    .append($<span class="built_in">this</span>.moreMessage()).toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $init$(PeoplePleaser $<span class="built_in">this</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    $<span class="built_in">this</span>.objsets$PeoplePleaser$_setter_$moreMessage_$eq(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rose</span> <span class="keyword">extends</span> <span class="title class_">Plant</span></span><br><span class="line">  <span class="keyword">implements</span> <span class="title class_">PeoplePleaser</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String moreMessage;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> objsets$PeoplePleaser$_setter_$moreMessage_$eq(String x$<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makePeopleHappy</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    PeoplePleaser$class.makePeopleHappy(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">moreMessage</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.moreMessage; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smell</span><span class="params">()</span> &#123;</span><br><span class="line">    Predef..MODULE$.println(<span class="string">&quot;Good!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Rose</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    PeoplePleaser.class.$init$(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.moreMessage = <span class="string">&quot;Because I smell nice.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span></span><br><span class="line">  <span class="keyword">implements</span> <span class="title class_">PeoplePleaser</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String moreMessage;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> objsets$PeoplePleaser$_setter_$moreMessage_$eq(String x$<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makePeopleHappy</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    PeoplePleaser$class.makePeopleHappy(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">moreMessage</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.moreMessage; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">    Predef..MODULE$.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    PeoplePleaser.class.$init$(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.moreMessage = <span class="string">&quot;Because I fetch balls.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在就清楚了，抽象类中的静态方法可能会依赖于各个实例不同的状态，所以需要把this传递进去。<br>这样我们才能够给makePeopleHappy加上一段额外的信息。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>去掉Scala的糖衣(4) -- type aliase</title>
    <url>/blog/2013/12/23/desugar-scala-4/</url>
    <content><![CDATA[<p>Scala中有一个type关键字，用来给类型或者是操作起别名，用起来很是方便。</p>
<p>比如这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">People</span> </span>= <span class="type">List</span>[<span class="type">Person</span>]</span><br></pre></td></tr></table></figure>

<p>这样就是给List[Person]（方括号是Scala的类型参数的写法）声明了一个别名，叫做People。</p>
<p>接下来就可以这样使用它：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teenagers</span></span>(people: <span class="type">People</span>): <span class="type">People</span> = &#123;</span><br><span class="line">  people.filter(person =&gt; person.age &lt; <span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个代码编译之后没有什么神奇的，仅仅是把所有出现People这个字眼的地方都用List of Person替代了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">teenagers</span><span class="params">(List&lt;Person&gt; people)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (List)people.filter(<span class="keyword">new</span> <span class="title class_">AbstractFunction1</span>() &#123; <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">apply</span><span class="params">(Person person)</span> &#123; <span class="keyword">return</span> person.age() &lt; <span class="number">20</span>; &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种给类型一个别名的特性只是一个小糖豆，不太甜，真正有趣的是给一类操作命名（联想C#中定义delegate）。</p>
<p>比如这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">PersonPredicate</span> </span>= <span class="type">Person</span> =&gt; <span class="type">Boolean</span></span><br></pre></td></tr></table></figure>

<p>接受一个Person，返回一个Boolean，我们把这一类用来判断一个人是否符合某个条件的操作统称为PersonPredicate。</p>
<p>然后我们可以定义以下predicate：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> teenagerPred: <span class="type">PersonPredicate</span> = person =&gt; person.age &lt; <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>然后前面写过的teenagers方法就可以这样重新定义：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teenagers</span></span>(people: <span class="type">People</span>): <span class="type">People</span> = &#123;</span><br><span class="line">  people.filter(teenagerPred)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照这个思路下去，我们就可以开始composite functions了。比如说，我们跟人收税，就可以这么做：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Tax</span> </span>= <span class="type">Person</span> =&gt; <span class="type">Double</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> incomeTax: <span class="type">Tax</span> = person =&gt; person.income * <span class="number">5</span> / <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> kejuanzaTax: <span class="type">Tax</span> = person =&gt; person.income * <span class="number">20</span> / <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">giveMeYourMoney</span></span>(p: <span class="type">Person</span>) = &#123;</span><br><span class="line">  calculateTax(p, <span class="type">List</span>(incomeTax, kejuanzaTax))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculateTax</span></span>(person: <span class="type">Person</span>, taxes: <span class="type">List</span>[<span class="type">Tax</span>]): <span class="type">Double</span> = &#123;</span><br><span class="line">  taxes.foldLeft(<span class="number">0</span>d) &#123;</span><br><span class="line">    (acc, curTax) =&gt; acc + curTax(person)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从一个人那里拿到钱，这种操作，我们称之为Tax。然后定义个税和苛捐杂税，或者也可以有任意多的税种。</p>
<p>然后就可以把任意的几个税种放在一个List里面，和calculateTax去composite了。</p>
<p>当然，没有type这个关键字，我们也可以composite functions。只不过就得写成这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> teenagerPred: (<span class="type">Person</span>) =&gt; <span class="type">Boolean</span> = person =&gt; person.age &lt; <span class="number">20</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">incomeTax</span></span>: (<span class="type">Person</span>) =&gt; <span class="type">Double</span> = person =&gt; person.income * <span class="number">5</span> / <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>看着稍微有点眼花。</p>
<p>这种用type关键字给一种操作命名的代码反编译之后是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Function1&lt;Person, Object&gt; <span class="title function_">teenagerPred</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractFunction1</span>() &#123; <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">apply</span><span class="params">(Person person)</span> &#123; <span class="keyword">return</span> person.age() &lt; <span class="number">20</span>; &#125;  &#125; ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Function1&lt;Person, Object&gt; <span class="title function_">incomeTax</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractFunction1</span>() &#123; <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(Person person)</span> &#123; <span class="keyword">return</span> person.income() * <span class="number">5</span> / <span class="number">100</span>; &#125;  &#125; ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Function1&lt;Person, Object&gt; <span class="title function_">kejuanzaTax</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractFunction1</span>() &#123; <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(Person person)</span> &#123; <span class="keyword">return</span> person.income() * <span class="number">20</span> / <span class="number">100</span>; &#125; &#125; ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到所有这种接受一个参数，返回一个值的操作都是Function1&lt;Person, Object&gt;。</p>
<p>推测一下，接受两个参数，返回一个值的是不是该叫做Function2呢？</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TwoToOne</span> </span>= (<span class="type">String</span>, <span class="type">Int</span>) =&gt; <span class="type">Double</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoToOneImpl</span></span>: <span class="type">TwoToOne</span> = (str, i) =&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>反编译之后，果不其然：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Function2&lt;String, Object, Object&gt; <span class="title function_">twoToOneImpl</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hello</span>..anonfun.twoToOneImpl<span class="number">.1</span>(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那不接收参数，只有返回值的呢？</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">NoInJustOut</span> </span>= () =&gt; <span class="type">String</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noInJustOutImpl</span></span>: <span class="type">NoInJustOut</span> = () =&gt; <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>反编译之后，其实是变成了Function0 of String:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Function0&lt;String&gt; <span class="title function_">noInJustOutImpl</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hello</span>..anonfun.noInJustOutImpl<span class="number">.1</span>(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里，我们可以总结一下type alia这个糖衣：</p>
<p>一个类型的type alias，类似于这样的：type t &#x3D; x。编译器将在所有使用到t的地方把t替换为x。</p>
<p>对于一种操作的type alias，编译器将会根据参数列表和返回值类型的不同将其替换为对应的Function0,Function1,Function2 …… 一直到Function22。</p>
<p>如果我们真的定义一个超过二十二个参数的操作会如何呢？</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">twentyThree</span> </span>= (</span><br><span class="line">    <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>,</span><br><span class="line">    <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>,</span><br><span class="line">    <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>,</span><br><span class="line">    <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>,</span><br><span class="line">    <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>,</span><br><span class="line">    <span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span></span><br><span class="line">  ) =&gt; <span class="type">String</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Scala编译器会直接告诉我们：<br>type Function23 is not a member of package scala</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>剥开Scala的糖衣(5) -- lazy</title>
    <url>/blog/2013/12/24/desugar-scala-5/</url>
    <content><![CDATA[<p>Scala中的lazy关键字是实现延迟加载的好帮手。</p>
<p>在Java中想要做到延迟加载，常规的做法是大抵是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        str = getStrFromWebService();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以这种方式来保证web service不会被无谓的重复请求。</p>
<p>C#中则可以使用Lazy of T来实现类似的事:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Lazy&lt;String&gt; str = <span class="keyword">new</span> Lazy&lt;<span class="built_in">string</span>&gt; (() =&gt; GetStrFromWebService ());</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String Str</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">get</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> str.Value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lazy of T保证传入其中的Func只执行一次。</p>
<p>（其实，Java也可以使用Guava中的memoize来实现类似的事情）</p>
<p>要么自己写代码，要么通过库来实现。</p>
<p>而Scala则在语言级别给出了解决方案：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> str = getStrFromWebService()</span><br></pre></td></tr></table></figure>

<p>仅此一行。</p>
<p>只要用lazy关键字修饰一下str，延迟执行的事就搞定了。</p>
<p>其实Scala编译器做的事情和我们手动做的区别不大：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String str;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> bitmap$<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String str$lzycompute()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  	<span class="keyword">if</span> (!<span class="built_in">this</span>.bitmap$<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.str = getStrFromWebService();</span><br><span class="line">    <span class="built_in">this</span>.bitmap$<span class="number">0</span> = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">return</span> <span class="built_in">this</span>.str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">str</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.bitmap$<span class="number">0</span> ? <span class="built_in">this</span>.str : str$lzycompute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你看编译器多热心，还加了锁哦。</p>
<p>小小总结一下：</p>
<p>对于这样一个表达式：<br>lazy val t:T &#x3D; expr<br>无论expr是什么东西，字面量也好，方法调用也好。Scala的编译器都会把这个expr包在一个方法中，并且生成一个flag来决定只在t第一次被访问时才调用该方法。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>剥掉Scala的糖衣(7) -- apply method</title>
    <url>/blog/2013/12/29/desugar-scala-7/</url>
    <content><![CDATA[<p>apply method是一个很简单的语言特性。如果一个class或者是object有一个主要的方法，那么与其每次显式的调用这个主要的方法，还不如隐式调用。举个例子：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kettle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">boil</span></span>(water: <span class="type">Water</span>) = &#123;</span><br><span class="line">    water.isWarm = <span class="literal">true</span></span><br><span class="line">    water</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个水壶的主要作用就是烧开水，于是我们每次都要调用boil方法来烧开水:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> kettle: <span class="type">Kettle</span> = <span class="keyword">new</span> <span class="type">Kettle</span>()</span><br><span class="line">kettle.boil(<span class="keyword">new</span> <span class="type">Water</span>())</span><br></pre></td></tr></table></figure>

<p>如果要把它改写成apply method的方式，只需要给boil改个名字就好了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kettle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(water: <span class="type">Water</span>) = &#123;</span><br><span class="line">    water.isWarm = <span class="literal">true</span></span><br><span class="line">    water</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后需要烧开水时，就只需把水倒进壶里就好了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> kettle: <span class="type">Kettle</span> = <span class="keyword">new</span> <span class="type">Kettle</span>()</span><br><span class="line">kettle(<span class="keyword">new</span> <span class="type">Water</span>())</span><br></pre></td></tr></table></figure>

<p>这个语言特性的实现很简单，不用说也可以猜到，无非就是把kettle(water)编译成kettle.apply(water)。反编译一下，Kettle class的定义毫无出奇之处：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Kettle</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> Water <span class="title function_">apply</span><span class="params">(Water water)</span></span><br><span class="line">  &#123;</span><br><span class="line">    water.isWarm_$eq(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> water;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>烧水的代码被编译成了这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Kettle</span> <span class="variable">kettle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kettle</span>();</span><br><span class="line">kettle.apply(<span class="keyword">new</span> <span class="title class_">Water</span>());</span><br></pre></td></tr></table></figure>

<p>我们刚开始说过apply method也可以用在object里。下面举个例子，我们把Kettle烧水的能力移到它的companion object里面去：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Kettle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(water: <span class="type">Water</span>) = &#123;</span><br><span class="line">    water.isWarm = <span class="literal">true</span></span><br><span class="line">    water</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后烧水的时候就可以这样调用：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Kettle</span>(<span class="keyword">new</span> <span class="type">Water</span>())</span><br></pre></td></tr></table></figure>

<p>反编译出来的结果大同小异，就不再赘述了，唯一的区别就是apply变成了静态方法。</p>
<p>上面这个水壶烧水的例子并不是最佳实践的作法。apply method的一个最佳实践是用来做工厂。比如Scala标准库中的List就提供了apply方法来给我们创建List：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="type">List</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>或者是Map也有类似的用法：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span>(<span class="number">1</span> -&gt; <span class="string">&quot;a&quot;</span>, <span class="number">2</span> -&gt; <span class="string">&quot;b&quot;</span>, <span class="number">3</span> -&gt; <span class="string">&quot;c&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>以上的两段代码并不是在调用List和Map的constructor，而是在调用List和Map的companion objects的apply方法。</p>
<p>Map的创建可以用apply method，而Map最常用的一个方法就是通过key来取得value，这个也有apply method来做：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> map = <span class="type">Map</span>(<span class="number">1</span> -&gt; <span class="string">&quot;a&quot;</span>, <span class="number">2</span> -&gt; <span class="string">&quot;b&quot;</span>, <span class="number">3</span> -&gt; <span class="string">&quot;c&quot;</span>)</span><br><span class="line">map(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>褪去Scala的糖衣(6) -- partial application</title>
    <url>/blog/2013/12/25/desugar-scala-6/</url>
    <content><![CDATA[<p>这篇博客介绍一下Scala中的partial application，局部应用，或者叫做柯里化。</p>
<p>所谓柯里化就是指把一个接受多个参数的函数的一部分参数写死，剩下的一部分由调用者提供。</p>
<p>用Java代码来表述，大概可以写成这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">greet</span><span class="params">(String greeting, String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> greeting + <span class="string">&quot; &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> greet(<span class="string">&quot;Hello&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">greetXiaoMing</span><span class="params">(String greeting)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> greet(greeting, <span class="string">&quot;Xiao Ming&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>greet用来给某个不确定的人打个不确定的招呼。</p>
<p>sayHello用来给某个不确定的人说一句固定的Hello。</p>
<p>greetXiaoMing用来给一个固定的人小明打一个不确定的招呼。</p>
<p>如果用Scala来表达同样的含义的话，可以这样写：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span></span>(greeting: <span class="type">String</span>, name: <span class="type">String</span>) = greeting + <span class="string">&quot; &quot;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span> </span>= greet(<span class="string">&quot;hello&quot;</span>, _: <span class="type">String</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greetXiaoMing</span> </span>= greet(_: <span class="type">String</span>, <span class="string">&quot;Xiao Ming&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其实比Java代码也简单不了多少。只是把暂时不确定的参数用下划线指代出来。</p>
<p>然后我们就可以在稍后需要调用它们的时候再把参数传入：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">sayHello(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">greetXiaoMing(<span class="string">&quot;Ni Hao&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>然后我们看一下这个语言特性是怎么实现的呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">greet</span><span class="params">(String greeting, String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(greeting).append(<span class="string">&quot; &quot;</span>).append(name).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Function1&lt;String, String&gt; <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractFunction1</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">apply</span><span class="params">(String x$<span class="number">1</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Hello.<span class="built_in">this</span>.greet(<span class="string">&quot;hello&quot;</span>, x$<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Function1&lt;String, String&gt; <span class="title function_">greetXiaoMing</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractFunction1</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">apply</span><span class="params">(String x$<span class="number">2</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Hello.<span class="built_in">this</span>.greet(x$<span class="number">2</span>, <span class="string">&quot;Xiao Ming&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到sayHello和greetXiaoMing并不是返回String的，它们返回的是Function1 of String, String。也就是说直接调用它们俩是得不到我们想要的结果的，必须把这个Function1上的apply再调一下才行。实际上正是如此，这段代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">sayHello(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">greetXiaoMing(<span class="string">&quot;Ni Hao&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>会被编译成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sayHello().apply(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">greetXiaoMing().apply(<span class="string">&quot;Ni Hao&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>除此之外，partial application还可以有另一种稍微另类一些的写法：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span></span>(greeting: <span class="type">String</span>)(name: <span class="type">String</span>) = greeting + <span class="string">&quot; &quot;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span> </span>= greet(<span class="string">&quot;hello&quot;</span>)(_)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greetXiaoMing</span> </span>= greet(_: <span class="type">String</span>)(<span class="string">&quot;Xiao Ming&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>反编译的结果和上面的代码是完全一致的。</p>
<p>我不太清楚这种写法存在的意义是不是仅仅起一个向外界宣称“我这个函数之所以出现就是给你局部应用的，不要一下子把两个参数都给我”的作用。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>揭开Scala的糖衣(8) -- pattern matching</title>
    <url>/blog/2013/12/29/desugar-scala-8/</url>
    <content><![CDATA[<p>Pattern matching是Scala中很好用的一个语言特性。先举一个最简单的例子：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">number <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; doSomething()</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span> =&gt; doSomethingElse()</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; doDefault()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个代码和我们熟悉的switch case看起来很像，其实，这段代码反编译之后和Java的switch case确实就是一样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> number; <span class="keyword">switch</span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  doDefault(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  doSomethingElse(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是和Java的switch case不一样的是，Scala的pattern matching作为一个expression是可以evaluate一个值出来的，我们把上面的代码改一下，让doSomething,doSomethingElse和doDefault都返回点东西：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> result = number <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; doSomething()</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span> =&gt; doSomethingElse()</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; doDefault()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，result就承接了能够match上的那个case的返回值。而无需像普通的swtich case一样在每个case中给result赋值。</p>
<p>单是这样看，pattern matching的魅力还不算怎么大，我们再看一下下面这个例子：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br></pre></td></tr></table></figure>

<p>首先声明几个case classes。这些case classes会被编译成一些比较复杂的classes，我们暂时不去关心。</p>
<p>然后看一下如何match类型及其属性：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> animal = createAnimal</span><br><span class="line">animal <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Dog</span>(anyName) =&gt; <span class="string">&quot;this is a dog&quot;</span></span><br><span class="line">  <span class="keyword">case</span> <span class="type">Cat</span>(<span class="string">&quot;kitty&quot;</span>) =&gt; <span class="string">&quot;this is a cat named kitty&quot;</span></span><br><span class="line">  <span class="keyword">case</span> _ =&gt; <span class="string">&quot;other animal&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码很容易懂，如果创建出来的animal是狗的话，无论它的名字叫什么，我们都返回this is a dog，如果是一只名叫kitty的猫，则返回this is a cat named kitty。如果都不是的话，则返回other animal。</p>
<p>很简单的几行代码，就做出了类型判断而且还有属性判断。</p>
<p>如果没有pattern matching，那么就要写if去判断类型，如果类型符合还要做类型转换，然后把转换后的变量中的属性取出来，再然后才能对属性的值做判断，最后才能返回点东西……</p>
<p>类型判断，类型转换，取属性，属性值判断，返回值。这么五件事我们用这样一行代码就都解决了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="type">Cat</span>(<span class="string">&quot;kitty&quot;</span>) =&gt; <span class="string">&quot;this is a cat named kitty&quot;</span></span><br></pre></td></tr></table></figure>

<p>这样的Scala代码会被编译成什么样呢？其实就是我们上面描述的很复杂的样子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal animal;</span><br><span class="line">String string;</span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal2</span> <span class="operator">=</span> (animal = <span class="built_in">this</span>.createAnimal());</span><br><span class="line"><span class="keyword">if</span> ((animal2 <span class="keyword">instanceof</span> Dog)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;this is a dog&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!((animal2 <span class="keyword">instanceof</span> Cat))) <span class="keyword">return</span> <span class="string">&quot;other animal&quot;</span>;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat)(animal2);</span><br><span class="line"><span class="type">String</span> <span class="variable">string2</span> <span class="operator">=</span> (string = cat.name());</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;kitty&quot;</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (string2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;this is a cat named kitty&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;other animal&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">&quot;kitty&quot;</span>.equals(string2))) <span class="keyword">return</span> <span class="string">&quot;other animal&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;this is a cat named kitty&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段反编译出来的代码不很可读。我们就凑合着粗看一下。里面和我们前面说的一样，都是if else，类型判断，转型，判等……</p>
<p>当然，用反编译工具给出的Java代码和上面的Scala代码作比较并不公平。我们自己把它写一遍：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> createAnimal();</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;other animal&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">    result = <span class="string">&quot;this is a dog&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal;</span><br><span class="line">    <span class="keyword">if</span> (cat.name() == <span class="string">&quot;kitty&quot;</span>) &#123;</span><br><span class="line">        result = <span class="string">&quot;this is a cat named kitty&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个样子再和上面的Scala代码比较，可以看到Scala编译器帮我们省掉了局部变量，类型判断和判等这些噪音。</p>
<p>Pattern matching还有很多其他用法，比如用来match tuple：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> hostPort = (<span class="string">&quot;localhost&quot;</span>, <span class="number">80</span>)</span><br><span class="line">hostPort <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> (<span class="string">&quot;localhost&quot;</span>, port) =&gt; <span class="string">&quot;this is localhost address&quot;</span></span><br><span class="line">  <span class="keyword">case</span> (host, port) =&gt; <span class="string">&quot;some other address&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者是用来match option：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> map = <span class="type">Map</span>(<span class="number">1</span> -&gt; <span class="string">&quot;one&quot;</span>, <span class="number">2</span> -&gt; <span class="string">&quot;two&quot;</span>)</span><br><span class="line">map.get(<span class="number">1</span>) <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Some</span>(str) =&gt; <span class="string">&quot;get something from map: &quot;</span> + str</span><br><span class="line">  <span class="keyword">case</span> <span class="type">None</span> =&gt; <span class="string">&quot;no result&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Scala标准库中的Map的get方法的返回类型是Option，如果能够get到东西则返回Some，其中包着get到的值。如果get不到东西，则返回一个None。</p>
<p>由于Tuple和Option本身也是case class，所以上面的两段代码反编译出来和上面的Java代码是大同小异的。就不再赘述了。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>掀开Scala的糖衣(9) -- function composition</title>
    <url>/blog/2013/12/30/desugar-scala-9/</url>
    <content><![CDATA[<p>Function composition，顾名思义，就是函数的组合。直接举例：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHi</span></span>(name: <span class="type">String</span>) = <span class="string">&quot;Hi, &quot;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayBye</span></span>(str: <span class="type">String</span>) = str + <span class="string">&quot;, bye&quot;</span></span><br></pre></td></tr></table></figure>

<p>两个方法，一个说你好，一个说再见。然后我们创建很多个人名：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> names = <span class="type">List</span>(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;xiao ming&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>我们希望对List中的每个人都说你好然后说再见：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">names.map(sayHi).map(sayBye)</span><br></pre></td></tr></table></figure>

<p>好，这样我们的目的实现了。但是，我们调用了两次map，会对整个List遍历两次。我们希望只遍历一次：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">names.map &#123;</span><br><span class="line">  name =&gt; sayBye(sayHi(name))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嗯，这样可以了，但是看起来有一点点不爽。按照从左到右的阅读习惯，我们先看到了sayBye，然后才看到sayHi，而且括号还是包了两层。需要想那么一小下才能明白：按照eager evaluation的规则，先运行sayHi，然后把结果传入sayBye，最后得到一个我们想要的结果。</p>
<p>其实我们真正想要的是一个链式操作，一个pipe：把数据用某种操作进行处理，然后把处理后的结果传递给第二个操作继续处理。类似于这样：a.pipe(b)，或者是这样：a | b。</p>
<p>而Scala的function composition正是做这件事的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">names.map(sayHi _ andThen sayBye)</span><br></pre></td></tr></table></figure>

<p>从左到右，当成英语来读：先sayHi然后再sayBye，清晰明了。</p>
<p>这个andThen并不是什么神奇的语言关键字。它其实只是定义在Function1上的一个方法而已。我们来看看反编译的结果就知道了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">List</span> names =</span><br><span class="line"><span class="type">List</span>$.<span class="type">MODULE</span>$.apply((<span class="type">Seq</span>)<span class="type">Predef</span>$.<span class="type">MODULE</span>$.wrapRefArray(</span><br><span class="line">(<span class="type">Object</span>[])<span class="keyword">new</span> <span class="type">String</span>[] &#123; <span class="string">&quot;world&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;xiao ming&quot;</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="type">List</span>)names.map(((<span class="type">Function1</span>)<span class="keyword">new</span> <span class="type">Serializable</span>() &#123;</span><br><span class="line">    public static <span class="keyword">final</span> long serialVersionUID = <span class="number">0</span>L;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">final</span> <span class="type">String</span> apply(<span class="keyword">final</span> <span class="type">String</span> name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Hello</span>.<span class="keyword">this</span>.sayHi(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).andThen((<span class="type">Function1</span>)<span class="keyword">new</span> <span class="type">Serializable</span>() &#123;</span><br><span class="line">    public static <span class="keyword">final</span> long serialVersionUID = <span class="number">0</span>L;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">final</span> <span class="type">String</span> apply(<span class="keyword">final</span> <span class="type">String</span> str) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Hello</span>.<span class="keyword">this</span>.sayBye(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;), <span class="type">List</span>$.<span class="type">MODULE</span>$.canBuildFrom());</span><br></pre></td></tr></table></figure>

<p>由于反编译工具的原因，这个反编译的结果并不是合法的Java代码，我们凑合着看一下。</p>
<p>我们看到，sayHi和sayBye都是被包到了Functoin1里面，调一下第一个Function1的andThen方法，把第二个Function1传进去，会返回一个新的Function1。这个返回的新的Function1就是我们想要的链式操作了。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>褪去Scala的糖衣(10) -- implicit function</title>
    <url>/blog/2014/01/01/desugar-scala-10/</url>
    <content><![CDATA[<p>Implicit function，中文或许应该叫做隐式函数吧。主要用来作隐式类型转换。例子：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">makeDuckNoise</span></span>() = <span class="string">&quot;gua gua&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">makeChickenNoise</span></span>() = <span class="string">&quot;ge ge&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ducken</span>(<span class="params">chicken: <span class="type">Chicken</span></span>) <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">makeDuckNoise</span></span>() = chicken.makeChickenNoise()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三个类，鸭子，鸡，还有伪装成鸭子的鸡。如果有这么一个函数：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">giveMeADuck</span></span>(duck: <span class="type">Duck</span>) = duck.makeDuckNoise()</span><br></pre></td></tr></table></figure>

<p>该函数要求我们给它提供一只鸭子，我们可以这么调用它：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">giveMeADuck(<span class="keyword">new</span> <span class="type">Duck</span>)</span><br></pre></td></tr></table></figure>

<p>要鸭子就给鸭子，没问题。或者是也可以这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">giveMeADuck(<span class="keyword">new</span> <span class="type">Ducken</span>(<span class="keyword">new</span> <span class="type">Chicken</span>))</span><br></pre></td></tr></table></figure>

<p>把一只鸡伪装成鸭子给它，也没问题。但是如果直接把鸡给它就不行了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">giveMeADuck(<span class="keyword">new</span> <span class="type">Chicken</span>)</span><br></pre></td></tr></table></figure>

<p>编译器会给出type mismatch的错误。</p>
<p>我们已经有一个Ducken类可以用来把鸡化装成鸭子了，那有没有一种方法可以让我们鬼鬼祟祟的就把化妆这件事儿做了？那就不用每次都明火执仗的了。</p>
<p>答案就是用implicit function：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">chickenToDuck</span></span>(chicken: <span class="type">Chicken</span>) = <span class="keyword">new</span> <span class="type">Ducken</span>(chicken)</span><br></pre></td></tr></table></figure>

<p>它的用法很简单，给函数加上implicit这个修饰符，函数的参数是鸡，返回类型是鸭子 （或者是任何鸭子的子类都行）。</p>
<p>然后这行代码就可以编译了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">giveMeADuck(<span class="keyword">new</span> <span class="type">Chicken</span>)</span><br></pre></td></tr></table></figure>

<p>来看一下反编译的结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">giveMeADuck</span><span class="params">(Duck duck)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> duck.makeDuckNoise();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Ducken <span class="title function_">chickenToDuck</span><span class="params">(Chicken chicken)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Ducken</span>(chicken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>giveMeADuck和chickenToDuck都被编译成了中规中矩的方法。giveMeADuck(new Chicken)则被编译成了这个样子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">giveMeADuck(<span class="built_in">this</span>.chickenToDuck(<span class="keyword">new</span> <span class="title class_">Chicken</span>()));</span><br></pre></td></tr></table></figure>

<p>一点意外都没有，implicit在反编译后无影无踪，它就是很纯的一点点糖。</p>
<p>我意淫一下：编译器在发现我们给它的chicken和想要的duck之间存在type mismatch的时候先不着急给出错误，看看有没有标为implicit的函数可以把chicken变成duck或者其子类，如果有则调用该方法，没有再给出错误。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>今天是二零一四年的第一天，回忆一下二零一三年都干了些什么，然后再回忆一下没干什么</title>
    <url>/blog/2014/01/01/my-2013/</url>
    <content><![CDATA[<h2 id="干了什么"><a href="#干了什么" class="headerlink" title="干了什么"></a>干了什么</h2><p><strong>上半年：</strong></p>
<p>看了十几本书；</p>
<p>写了几篇博客；</p>
<p>在github上做了一个豆瓣读书的插件；</p>
<p>肇始了一个十万个为什么的活动，自始至终只有我一个人参与，然后就挂掉了；</p>
<p>做了三章的SICP，然后卡住做不动了；</p>
<p>乏善可陈。</p>
<p>上面列的最后两项的价值最大，但都没做完。究其原因：</p>
<ul>
<li>坚持不够</li>
<li>attention span太短</li>
</ul>
<p>这两项在下半年做的事儿里address到了。</p>
<p><strong>下半年：</strong></p>
<p>又看了十几本书（量与上半年持平）；</p>
<p>又写了几篇博客（量较上半年有增）；</p>
<p>跟完了Coursera上的Functional programming principles in Scala的课，拿到了Statement of Accomplishment with distinction；</p>
<p>键盘速度到了60wpm左右；</p>
<p>找到了坚持和attention span问题的解决方案；</p>
<p>有善可陈。</p>
<p>善在最后一项。解决方案是这样的：</p>
<ul>
<li>戒掉微博，规避碎片化娱乐化的信息。（还没戒掉的是美剧）</li>
<li>把番茄钟用到自己的时间中去。track用在“正经事儿”上的时间。</li>
</ul>
<p>不细说了，下面说没干什么。</p>
<h2 id="没干什么"><a href="#没干什么" class="headerlink" title="没干什么"></a>没干什么</h2><p>我的情商和people skill很低，低的你都猜不到哦亲。</p>
<p>我可以预感到这个东西即将成为我的bottle neck。但是我二零一三年并没有在上面做太多事情。</p>
<p>读了几本我认为会有帮助的书，一些被我认为是不知所云，一些促使我得出了死硬的理性派结论。</p>
<p>二零一四年需要在这个领域积累知识，然后期待量变带来的质变。</p>
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>剥掉Scala的糖衣(11) -- structural types</title>
    <url>/blog/2014/01/02/desugar-scala-11/</url>
    <content><![CDATA[<p>Structural types，中文怎么翻译不确定。我们可以用它来实现类似于鸭子类型的效果。为什么说是“类似”鸭子类型呢？稍后会说到它和鸭子类型的区别。</p>
<p>举一个例子，看看它都可以做什么：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeNoise</span></span>(quacker: &#123;<span class="function"><span class="keyword">def</span> <span class="title">quack</span></span>(): <span class="type">String</span>&#125;) = quacker.quack</span><br></pre></td></tr></table></figure>

<p>声明一个方法，叫做makeNoise，接受什么类型的参数呢？不做严格限制，我们只声明说参数必须有一个叫做quack的方法，该quack方法返回值类型为String。然后在makeNoise方法内调用quack方法。请注意我们并没有声明一个含有quack方法签名的接口或者类，我们仅仅是在声明参数的同时声明我们期待参数含有什么样的成员。</p>
<p>然后我们声明一个Duck类：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quack</span></span>() = <span class="string">&quot;real quack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以调用makeNoise方法了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">makeNoise(<span class="keyword">new</span> <span class="type">Duck</span>)</span><br></pre></td></tr></table></figure>

<p>或者再声明一个NotADuck类：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotADuck</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quack</span></span>() = <span class="string">&quot;fake quack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以把它传给makeNoise方法：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">makeNoise(<span class="keyword">new</span> <span class="type">NotADuck</span>)</span><br></pre></td></tr></table></figure>

<p>甚至是匿名对象也可以：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">makeNoise(<span class="keyword">new</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quack</span></span>() = <span class="string">&quot;anonymous quack&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果我们把Duck的quack方法改个名字：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quackRenamed</span></span>() = <span class="string">&quot;real quack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么编译器就会对下面这行代码给出错误：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">makeNoise(<span class="keyword">new</span> <span class="type">Duck</span>)</span><br></pre></td></tr></table></figure>

<p>type mismatch, found : hello.Duck, required: AnyRef{def quack(): String}</p>
<p>是做了编译时类型检查的。</p>
<p>然后我们反编译代码，看看它是如何实现的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class[] reflParams$Cache1;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SoftReference reflPoly$Cache1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Hello.reflParams$Cache1 = <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    Hello.reflPoly$Cache1 = <span class="keyword">new</span> <span class="title class_">SoftReference</span>((T)<span class="keyword">new</span> <span class="title class_">EmptyMethodCache</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Method reflMethod$Method1(<span class="keyword">final</span> Class x$<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">MethodCache</span> <span class="variable">methodCache1</span> <span class="operator">=</span> Hello.reflPoly$Cache1.get();</span><br><span class="line">    <span class="keyword">if</span> (methodCache1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        methodCache1 = (MethodCache)<span class="keyword">new</span> <span class="title class_">EmptyMethodCache</span>();</span><br><span class="line">        Hello.reflPoly$Cache1 = <span class="keyword">new</span> <span class="title class_">SoftReference</span>((T)methodCache1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> methodCache1.find(x$<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (method1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> method1;</span><br><span class="line">    &#125;</span><br><span class="line">    method1 = ScalaRunTime$.MODULE$.ensureAccessible(x$<span class="number">1.</span>getMethod(<span class="string">&quot;quack&quot;</span>, Hello.reflParams$Cache1));</span><br><span class="line">    Hello.reflPoly$Cache1 = <span class="keyword">new</span> <span class="title class_">SoftReference</span>((T)methodCache1.add(x$<span class="number">1</span>, method1));</span><br><span class="line">    <span class="keyword">return</span> method1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">makeNoise</span><span class="params">(<span class="keyword">final</span> Object quacker)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Object invoke;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        invoke = reflMethod$Method1(quacker.getClass()).invoke(quacker, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ex.getCause();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (String)invoke;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到，makeNoise方法的参数类型被编译成了Object。方法内部通过反射去调用quack方法。</p>
<p>再仔细看一下，方法内做了个catch，如果找不到quack方法就把异常抛出来。我们刚才不是看到有编译时类型检查吗？怎么会找不到quack方法呢？</p>
<p>其实找不到quack方法的情况还是会存在的。假如我们把以上代码打成jar包供别人调用，那别人看到的你这个方法要的是Object啊，随便传一个什么东西进来都可以。如果传入的参数没有quack方法，那自然就会有异常了。这也是一个很好的信号，告诉我们说这个语言特性不适合用在public API中。</p>
<p>刚开始时提到过，这个语言特性不能叫做鸭子类型，为什么呢？我们看两个真正鸭子类型的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeNoise</span>(<span class="params">quacker</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> quacker.<span class="title function_">quack</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">makeNoise</span>(&#123;<span class="attr">quack</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="string">&quot;quack quack&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>上面的是JavaScript的，下面的是C#的。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">Quack</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;quack quack&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">MakeNoise</span> (<span class="params"><span class="built_in">dynamic</span> quacker</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> quacker.Quack ();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		Console.Out.WriteLine (<span class="keyword">new</span> Hello ().MakeNoise (<span class="keyword">new</span> Duck ()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面两段代码中，如果我们把quack或者Quack改个名字的话，都会导致运行失败。而且在声明参数的时候也没有指明我们期待有一个quack或者Quack成员的存在。所以说Scala的这个语言特性不能称之为鸭子类型的原因在于两点：</p>
<ul>
<li>Scala做了编译时类型安全检查</li>
<li>声明参数时显式的指明了期待的成员</li>
</ul>
<p>存疑：虽然上面的C#例子看起来是鸭子类型，但是C#的wiki页面上的typing discipline一项里并没有列出duck typing。原因不明。</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>后记：C#的wiki页面没有把duck typing列为其typing discipline的一项。但是，duck typing的wiki页面上又用C#举了例子。互相矛盾啊，于是我在stackoverflow上问了个问题，引来了C#编译器的程序员之一Eric Lippert，他回答问题之后还写了篇博客来表示对duck typing这个名词的困惑。看完之后我表示更晕了。</p>
<p>所以请不要把上面我说的关于duck typing的东西当真，随便瞄一眼就好了。duck typing是一个没有清晰定义的名词，在我们能够共同认同它的某一种特定的definition之前去讨论它是无谓的。</p>
<p>下面把链接列出：</p>
<p><a href="http://en.wikipedia.org/wiki/C_Sharp_programming_language">C#的wiki</a>  （typing discipline在页面右侧的那个表里）</p>
<p><a href="http://en.wikipedia.org/wiki/Duck_typing">Duck typing的wiki</a></p>
<p><a href="http://ericlippert.com/2014/01/02/what-is-duck-typing/">Eric Lippert的博客</a></p>
<p>以上链接，建议别点  :)</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>除去Scala的糖衣(13) -- default parameter value</title>
    <url>/blog/2014/06/09/desugar-scala-default-parameter-value/</url>
    <content><![CDATA[<p>好久没有写博客了，上一次更新竟然是一月份。</p>
<p>说工作忙都是借口，咋有空看美剧呢。</p>
<p>这半年荒废掉博客说到底就是懒，惯性的懒惰。写博客这事儿，一丢掉就很久捡不起来。</p>
<p>闲话到此为止，下面进入正题。</p>
<p>Default parameter value，默认参数值。<br>这个很容易理解，给参数一个默认值，如果调用者不显式指明参数值，则使用默认值。如果显式指明了，那就用显式指明的值。</p>
<p>举个例子：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(name: <span class="type">String</span> = <span class="string">&quot;world&quot;</span>) = println(<span class="string">&quot;hello &quot;</span> + name)</span><br></pre></td></tr></table></figure>

<p>这个函数，如果我们不给它传参数，它就会打印hello world。就像这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">hello()</span><br></pre></td></tr></table></figure>

<p>如果给了参数：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">hello(<span class="string">&quot;everybody&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>则打印hello everybody。</p>
<p>这个语言特性都有哪些应用场景呢？</p>
<p>它经常用来避免过多的重载。一个很常见很典型的例子就是构造函数重载。</p>
<p>在Java中，为了让调用者能够比较容易的创建某个类的实例，我们通常会提供几个参数列表比较短的构造函数。而这些构造函数存在的唯一意义就是为了写死某几个参数值。而在Scala中，有了这个语言特性，我们就无需那么麻烦了。</p>
<p>那这个语言特性是如何实现的呢？实际上简单的一塌糊涂。</p>
<p>这样一段代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(name: <span class="type">String</span> = <span class="string">&quot;world&quot;</span>) = println(<span class="string">&quot;hello &quot;</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="type">Greeter</span>().hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们的Greeter类含有前面提到过的hello方法。在AnotherClass里调用了hello，并且没有显式指明参数值。</p>
<p>上面的Scala代码生成的bytecode反编译成Java是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        Predef..MODULE$.println(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(<span class="string">&quot;hello &quot;</span>).append(name).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String hello$<span class="keyword">default</span>$<span class="number">1</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnotherClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnotherClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Greeter</span> <span class="variable">qual$1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Greeter</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">x$1</span> <span class="operator">=</span> qual$<span class="number">1.</span>hello$<span class="keyword">default</span>$<span class="number">1</span>();</span><br><span class="line">        qual$<span class="number">1.</span>hello(x$<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，我们所定义的hello方法反编译出来看起来很普通，就是个接受一个参数的方法。</p>
<p>而在Greeter类中，编译器为我们加入了另一个方法hello$default$1，这个方法就是返回一个写死的字符串，其值为world。</p>
<p>在AnotherClass中调用hello时，写死的字符串被取到，然后传进了hello里。</p>
<p>这样，被调用者提供了参数的默认值，调用者在调用时取得该值，然后传入方法。</p>
<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>到这里我不禁联想起C#中的默认参数值的实现方式。</p>
<p>在C#中，默认参数的值会被编译成调用者的一个常量，而不是像Scala一样的由被调用者提供。</p>
<p>这样看起来貌似没啥区别，不就是写死的值换个地方吗？</p>
<p>其实不然，如果被调用者在A程序集内，调用者在B程序集内，那么A更新时，B就必须重新编译才能得到最新的默认值。也就是说，如果当前部署环境中同时存在A和B，而后我们拿一个新版的A来替换老的，这时B仍然在传递老的默认参数值给A。这样就会造成一些看似很诡异的行为偏差。</p>
<p>如果对C#的默认参数值的实现有兴趣，请看<a href="http://www.cnblogs.com/cuipengfei/archive/2011/04/13/2014325.html">我很久很久之前写的博客</a></p>
<p>现在想来，C#这一语言特性的设计者为什么要把它设计成如此容易出错的样子呢？</p>
<p>思而不得其解。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>抹掉Scala的糖衣(14) -- update method</title>
    <url>/blog/2014/06/12/scala-update-method/</url>
    <content><![CDATA[<p>在Scala中，名字叫做update的方法是有特殊作用的。</p>
<p>比如：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> scores = <span class="keyword">new</span> scala.collection.mutable.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">Int</span>]</span><br><span class="line">scores(<span class="string">&quot;Bob&quot;</span>) = <span class="number">100</span></span><br><span class="line"><span class="keyword">val</span> bobsScore = scores(<span class="string">&quot;Bob&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>以上三行代码，我们创建了一个可变的map来存储得分情况，然后我们记录了Bob的得分是100分，最后我们又把Bob的分数取出来了。</p>
<p>这三行代码看似平淡无奇，实则暗藏了一点点玄机。</p>
<p>第二行实际是调用了HashMap的update方法。</p>
<p>第三行实际是调用了HashMap的apply方法。</p>
<p>我们可以把上面的代码改写成下面的等价形式：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> scores = <span class="keyword">new</span> scala.collection.mutable.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">Int</span>]</span><br><span class="line">scores.update(<span class="string">&quot;Bob&quot;</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">val</span> bobsScore = scores.apply(<span class="string">&quot;Bob”)</span></span><br></pre></td></tr></table></figure>

<p>虽然等价，但是可读性却降低了一些。</p>
<p>apply方法我们之前讲过，就不再赘述。</p>
<p>update方法也不太复杂，它的规则就是：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">x(y) = z</span><br></pre></td></tr></table></figure>

<p>这样的代码会被编译为：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">x.update(y, z)</span><br></pre></td></tr></table></figure>

<p>这次博文名字虽然以抹掉糖衣开头，实则有点名不符实，因为这个语言特性过于简单，糖衣很薄，一抹就透。</p>
<p>这次的目的主要是介绍一个update方法的适用场景。</p>
<p>我们来看用来修改某个人地址的一段代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddressChanger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(name: <span class="type">String</span>, age: <span class="type">Int</span>, newAddress: <span class="type">String</span>) = &#123;</span><br><span class="line">    println(<span class="string">s&quot;changing address of <span class="subst">$name</span>, whose age is <span class="subst">$age</span> to <span class="subst">$newAddress</span>&quot;</span>)</span><br><span class="line">    <span class="comment">//actually change the address</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以这样来调用它：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> changer = <span class="keyword">new</span> <span class="type">AddressChanger</span>()</span><br><span class="line">changer.update(<span class="string">&quot;xiao ming&quot;</span>, <span class="number">23</span>, <span class="string">&quot;beijing&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>或者，我们也可以这样来调用它：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> addressOf = <span class="keyword">new</span> <span class="type">AddressChanger</span>()</span><br><span class="line">addressOf(name = <span class="string">&quot;xiao ming&quot;</span>, age = <span class="number">23</span>) = <span class="string">&quot;beijing&quot;</span></span><br></pre></td></tr></table></figure>

<p>这两段代码是等价的。</p>
<p>比较一下，前一种用法显得中规中矩，没什么特别好的，也没啥特大的毛病。</p>
<p>可是后一种用法就不同了，读起来很通顺，有读英语语句的感觉：把名字叫做小明，年龄23岁的人的地址改为北京。</p>
<p>如果再给AddressChanger加上一个apply方法，我们还可以写这样的代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> currentAddress = addressOf(name = <span class="string">&quot;xiao ming&quot;</span>, age = <span class="number">23</span>)</span><br></pre></td></tr></table></figure>

<p>这样，读取和更新的代码都看起来非常自然。</p>
<p>如果我们把这两段代码连起来看：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> currentAddress = addressOf(name = <span class="string">&quot;xiao ming&quot;</span>, age = <span class="number">23</span>)</span><br><span class="line">addressOf(name = <span class="string">&quot;xiao ming&quot;</span>, age = <span class="number">23</span>) = <span class="string">&quot;beijing&quot;</span></span><br></pre></td></tr></table></figure>

<p>感觉甚好。</p>
<p>addressOf(name &#x3D; “xiao ming”, age &#x3D; 23)可以看做一个整体，它就如同一个可读可写的属性。</p>
<p>我们把它放到赋值语句的右侧，就能取到小明的当前住址。</p>
<p>我们把它放到赋值语句的左侧，就能修改小明的住址。</p>
<p>apply和update都是蛮简单的语言特性，但是加以合适的应用，却能得到可读性极强的代码。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Desugar Scala(16) -- lower bound</title>
    <url>/blog/2014/06/21/desugar-scala-lower-bound/</url>
    <content><![CDATA[<p>Lower bound，不知道这个词的确切中文翻译是怎样的。我们直接看例子吧。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>[<span class="type">T</span>](<span class="params">val first: <span class="type">T</span>, val second: <span class="type">T</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">replaceFirst</span></span>[<span class="type">R</span> &gt;: <span class="type">T</span>](newFirst: <span class="type">R</span>): <span class="type">Pair</span>[<span class="type">R</span>] = <span class="keyword">new</span> <span class="type">Pair</span>[<span class="type">R</span>](newFirst, second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义一个叫做Pair的类，其中可以包含两个元素，元素类型为泛型的T。</p>
<p>Pair类中有一个replaceFirst方法，用来把第二个元素和一个新的元素结合起来组成一个新的Pair。新的元素的类型是泛型的R。新组成的Pair的类型是Pair[R]。</p>
<p>到这里我们就要想了，一个T和一个R，它们俩怎么组成新的Pair呢？新的Pair的类型怎么能是Pair[R]呢？</p>
<p>replaceFirst的签名给我们说明了这一点。[R &gt;: T]。这种标记的含义是说R是T的基类。那么一个T和一个R自然可以组合成一个R的Pair了。</p>
<p>单是这样干说，有点不好理解，我们看一个例子：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>汽车和坦克都是机动车。</p>
<p>然后我们可以这样使用它们：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> twoCars: <span class="type">Pair</span>[<span class="type">Car</span>] = <span class="keyword">new</span> <span class="type">Pair</span>(<span class="keyword">new</span> <span class="type">Car</span>(), <span class="keyword">new</span> <span class="type">Car</span>())</span><br><span class="line"><span class="keyword">val</span> tankAndCar: <span class="type">Pair</span>[<span class="type">Vehicle</span>] = twoCars.replaceFirst(<span class="keyword">new</span> <span class="type">Tank</span>())</span><br></pre></td></tr></table></figure>

<p>首先我们用两辆汽车组成一个Pair，其类型为Pair[Car]。</p>
<p>然后我们用一辆坦克替代原来的Pair中的第一个元素，让坦克和第二辆车组成一个新的Pair。新的Pari的类型是Pair[Vehicle]。</p>
<p>这里有一点tricky。我们调用replaceFirst的时候传递的参数的类型是Tank，这是否意味着在这里R就是Tank呢？</p>
<p>不是的，因为很明显Tank不是Car的基类，然而Tank是一个（is a）Vehicle，Vehicle同时也是Car的基类。于是此处的R就是Vehicle。得到的新的Pair自然就是Pair[Vehicle]。</p>
<p>也就是说R会被什么具体类型替换呢？这取决于T和newFirst的类型。</p>
<p>如果newFirst的类型刚好是T的基类，那太好了，R就直接是newFirst的类型。如果newFirst的类型不是T的基类，那R就会是T和newFirst的类型的共同基类。</p>
<h3 id="这个东西挺麻烦的，它有啥用呢？"><a href="#这个东西挺麻烦的，它有啥用呢？" class="headerlink" title="这个东西挺麻烦的，它有啥用呢？"></a>这个东西挺麻烦的，它有啥用呢？</h3><p>保证类型安全，Java没有提供给我们的类型安全。</p>
<p>还是刚才的那段代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> twoCars: <span class="type">Pair</span>[<span class="type">Car</span>] = <span class="keyword">new</span> <span class="type">Pair</span>(<span class="keyword">new</span> <span class="type">Car</span>(), <span class="keyword">new</span> <span class="type">Car</span>())</span><br><span class="line"><span class="keyword">val</span> tankAndCar: <span class="type">Pair</span>[<span class="type">Vehicle</span>] = twoCars.replaceFirst(<span class="keyword">new</span> <span class="type">Tank</span>())</span><br></pre></td></tr></table></figure>

<p>其中的第二行，Scala可以很聪明的推断出replaceFirst的返回值类型是Pair[Vehicle]。实际上，如果我们试图把tankAndCar声明为Pair[Tank]的话，会看到编译时错误。</p>
<p>而类似的代码在Java里则没有这么幸运了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PairJ</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T second;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PairJ</span><span class="params">(T first, T second)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.first = first;</span><br><span class="line">        <span class="built_in">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">first</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">second</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R&gt; Pair&lt;R&gt; <span class="title function_">replaceFirst</span><span class="params">(R newFirst)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>(newFirst, second());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了标明区别，我们这次称之为PairJ。到这里忍不住要小小的黑Java一下，21行代码，和Scala的3行是等价的：）</p>
<p>我们重点看一下replaceFirst在这里的声明，其中声明了一个泛型参数R，但是R和T是没有任何关系的。实际上，在Java中，我们无法表达方法的泛型参数和类型的泛型参数之间的关系。（其原因请参看<a href="http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeParameters.html#FAQ107">这里</a>）</p>
<p>我们写出如下的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PairJ&lt;Car&gt; twoCars = <span class="keyword">new</span> <span class="title class_">PairJ</span>(<span class="keyword">new</span> <span class="title class_">Car</span>(), <span class="keyword">new</span> <span class="title class_">Car</span>());</span><br><span class="line"><span class="type">Tank</span> <span class="variable">actuallyACar</span> <span class="operator">=</span> twoCars.replaceFirst(<span class="keyword">new</span> <span class="title class_">Tank</span>()).second();</span><br></pre></td></tr></table></figure>

<p>先创建两辆车的Pair，然后把第一辆车替换成坦克。再把新组成的Pair里面的第二个元素（其类型是车）取出来，赋值给一个类型为坦克的变量。</p>
<p>如果我们编译这段代码，Java编译器会允许其通过。但是运行起来就会跑出类型转换异常。原因很明显，Car不能转换成Tank。</p>
<p>这个，就是刚才所说的类型安全性上的差异。</p>
<h3 id="等等，脱衣服的部分呢？"><a href="#等等，脱衣服的部分呢？" class="headerlink" title="等等，脱衣服的部分呢？"></a>等等，脱衣服的部分呢？</h3><p>之前的每一篇博客都会把Scala代码编译出的bytecode反编译成Java，来探索其语言特性是如何实现的。</p>
<p>而这一次颇为不同。之前的语言特性虽说Scala写起来比Java会简便一些，但是还没有超出Java的能力范围。多费点劲，用Java还是能做到。</p>
<p>而这一次，这种编译时类型安全检验的严格性，实在是在Java中无法表达的。这全靠了Scala编译器的功劳。</p>
<p>这就意味着，上面所定义的Pair这个类，如果你在Java中使用它，就会失去这种类型安全性。</p>
<p>Scala，这次算你牛，没扒掉你。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala + Play + sbt + Protractor = one build</title>
    <url>/blog/2014/06/22/scala-plus-play-plus-sbt-plus-protractor-equals-one-build/</url>
    <content><![CDATA[<p>我所在的项目的技术栈选用的是Play framework做后端API，前端用Angular JS。</p>
<p>因为用了Scala和Play，构建工具很自然用的就是sbt。</p>
<p>而由于前端用了Angular，所以functional test就选用了和Angular结合较好的protractor。</p>
<p>这一切看起来似乎很美好，一个无状态的后端，一个数据和UI双向绑定的前端。What could possibly go wrong？</p>
<p>一开始也确实如此，没什么问题。我们为了让functional test在CI上跑起来，写了一个脚本来把play dist打出的包部署到CI所在机器上，然后运行protractor。</p>
<p>这个脚本运行还算ok，偶尔有点小问题，修一修也就好了。</p>
<p>不过，这也就是说有两个因素可能会使得我们的CI挂掉，一个是用sbt跑的specs2的测试，一个是protractor的测试。而protractor的测试是基于我们自己所写的脚本的，与sbt没啥关系。</p>
<h3 id="麻烦来了"><a href="#麻烦来了" class="headerlink" title="麻烦来了"></a>麻烦来了</h3><p>上周五的show case，我们一个小时后就要给客户演示现有产品的示例，但是CI挂掉了，新的代码没法走到QA和UAT的环境，bug fix也过不去。</p>
<p>最后我们不得不修改jenkins的配置，把sbt test和protractor的test都暂时禁掉，才让最新的代码到了UAT上去。而这一切，是在show case之前一分钟才解决掉的。</p>
<p>事情总是这样的，出一两次小问题，修修改改就好，我们不会注意到其危害，不会想到其风险。直到琐碎的积累导致了严重的后果，我们才会正视问题的存在。而这个时候问题或许已经复杂和严重到不可修复或者是要花很大成本修复的地步了。保持一个健康的CI是如此。写代码的每一个细节也是如此。</p>
<p>还好，很幸运，我们的问题还没有那么严重，还来得及修。</p>
<p>在决定要修之后，先</p>
<h3 id="定义一下问题是啥"><a href="#定义一下问题是啥" class="headerlink" title="定义一下问题是啥"></a>定义一下问题是啥</h3><p>往简单里说，就是CI不稳定，动不动就随便挂。</p>
<p>说的再细一些，就是我们手写脚本去做部署和测试这件事算是重新发明了轮子。而这个轮子不如已有的经过打磨的轮子那么精巧细致，那么稳定好用。以至于我们的CI偶尔就要出格一次。</p>
<p>Ok，问题定义清楚了，那么想想解决方案吧。</p>
<p>但是，在提出具体的方案之前，先想想，如果把这个现时还未存在的解决方案作用在现有问题之上，会收获一个什么样的结果呢？</p>
<h3 id="验证标准"><a href="#验证标准" class="headerlink" title="验证标准"></a>验证标准</h3><p>基于以上所述，我想解决这个问题的方案要满足以下3点：</p>
<ol>
<li>能让CI重回稳定</li>
<li>一条命令行执行整个build</li>
<li>不要再自己造轮子了</li>
</ol>
<p>第1，2点毋庸赘言，这就是我们问题的核心。关于第3点，是因为我们没有时间精力，也实在没有必要造这个轮子，如果能找到现有的轮子能够解决问题，而且还比我们自己的木头胶皮轮子好用，那岂不妙哉？</p>
<p>于是，我要开始寻找一个能让CI重归稳定的神圣轮子了！让探险的旅途就此展开吧！</p>
<p>![图](<a href="http://static.comicvine.com/uploads/original/7/75497/2189954-aragorn247_screen.jpg">http://static.comicvine.com/uploads/original/7/75497/2189954-aragorn247_screen.jpg</a> &#x3D;400x300)</p>
<h3 id="开始寻找轮子"><a href="#开始寻找轮子" class="headerlink" title="开始寻找轮子"></a>开始寻找轮子</h3><p>我最初的想法是用play的test framework，其中已经集成了selenium，用来做functional test很是合适。但是由于我们基于protractor的测试数量已经不少了，全部重写成本较高，所以这个轮子就放弃了。</p>
<h3 id="残念，再看下一个轮子"><a href="#残念，再看下一个轮子" class="headerlink" title="残念，再看下一个轮子"></a>残念，再看下一个轮子</h3><p>再然后我想到的是自定义一个sbt的task，这个task依赖于sbt已有的run。</p>
<p>这样就能在我的task启动之前把play跑起来，而task本身运行protractor的测试，再之后则杀掉正在运行的play app。</p>
<p>看起来不错，但是有问题：</p>
<p>第一，sbt run跑起来后是不会自己退出的，它会维持play一直在待命的状态，这也就是说我自己的task根本就没机会执行。</p>
<p>第二，即便能找到方法让我自己定义的task和run同时跑起来，protractor运行完毕后还要关掉run，免得占用端口。这又是一件麻烦事儿。</p>
<p>于是，这第二个轮子也被我自己给枪毙掉了。</p>
<h3 id="再次残念，还有轮子吗？"><a href="#再次残念，还有轮子吗？" class="headerlink" title="再次残念，还有轮子吗？"></a>再次残念，还有轮子吗？</h3><p>会有的，总会有的，只要肯去找，还是会有的。</p>
<p>这次我想到，写sbt的task不成，那就写代码。我写个specs2测试，在case里用代码启动sbt run，然后再启动protractor，最后关闭sbt，总行了吧？</p>
<p>这样，确实是可以work的，而实际上我也把它做出来验证了可以work了，但是缺点很大。</p>
<p>第一，由于我们的specs2测试都是用sbt跑的，而在其中再启动sbt，相当于要开两个jvm，消耗很大。在我本地机器上可以压榨的只剩两位数的内存。</p>
<p>第二，在sbt已经编译好了产品代码和测试代码测试之后，再开始跑另一个sbt run，会导致sbt把代码重新编译一遍。而Scala的代码编译是很慢的。我试了一下，这两次启动sbt，两次编译所消耗的时间是四分钟左右。时间成本太高。CI的速度会被拉下来，受不了。</p>
<p>基于以上两点原因，我的第三个轮子也被我自己枪毙了。</p>
<h3 id="命途多舛啊，三次尝试都失败，以你为我要放弃了吗？哼"><a href="#命途多舛啊，三次尝试都失败，以你为我要放弃了吗？哼" class="headerlink" title="命途多舛啊，三次尝试都失败，以你为我要放弃了吗？哼~~~"></a>命途多舛啊，三次尝试都失败，以你为我要放弃了吗？哼~~~</h3><p>最后，我结合第一次的尝试和第三次的尝试找到了一个满意的答案。</p>
<p>来看代码吧：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProtractorSpec</span> <span class="keyword">extends</span> <span class="title">Specification</span> <span class="keyword">with</span> <span class="title">NoTimeConversions</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;my application&quot;</span> should &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;pass the protractor tests&quot;</span> in &#123;</span><br><span class="line"></span><br><span class="line">      running(<span class="type">TestServer</span>(<span class="number">9000</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> resp = <span class="type">Await</span>.result(<span class="type">WS</span>.url(<span class="string">&quot;http://localhost:9000&quot;</span>).get(), <span class="number">2</span> seconds)</span><br><span class="line">        resp.status === <span class="number">200</span></span><br><span class="line"></span><br><span class="line">        runProtractorTests === <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">runProtractorTests</span></span>: <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="string">&quot;protractor functional-test/config/ft.conf.js&quot;</span></span><br><span class="line">      .run(getProcessIO)</span><br><span class="line">      .exitValue()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">getProcessIO</span></span>: <span class="type">ProcessIO</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">ProcessIO</span>(_ =&gt; (),</span><br><span class="line">      stdout =&gt; fromInputStream(stdout).getLines().foreach(println),</span><br><span class="line">      _ =&gt; ())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就只有这么一点点代码。</p>
<p>running和TestServer都是play的test framework所提供的API。顾名思义，其作用就是把play的app跑起来。</p>
<p>然后发一个get请求，assert它的response的status是200，以此来确保play真的是把server运行起来了的。</p>
<p>再然后运行shell脚本，把protractor跑起来。这里Scala会做implicit conversion，把字符串转换成ProcessBuilder，从而可以调用其run方法。</p>
<p>最后assert，protractor的shell脚本是返回了0的，意味着functional test跑成功了。如果protractor测试挂掉，返回了1，那么specs2的这个测试也会挂掉，从而挂掉整个build。而这，正是我想要的。</p>
<h3 id="这个解决方案合规吗？"><a href="#这个解决方案合规吗？" class="headerlink" title="这个解决方案合规吗？"></a>这个解决方案合规吗？</h3><p>检验一下吧。</p>
<p>由于server的启动和关闭都是有play的test framework的API负责的，比自己手写得脚本要稳定，所以符合了重归稳定性这一点。</p>
<p>由于用了specs2的测试，它可以跑在sbt里，所以符合一条命令跑build这一点。</p>
<p>整个解决方案只用了specs2和play的test framework，没有重新发明轮子，所以这一点也符合了。</p>
<p>除了符合最初定下的三条标准之外，还有额外的好处：functional test所跑到的代码会被纳入到测试覆盖率里面去。因为和其他specs2的测试一样，protractor的测试也在sbt jacoco:cover的监视下跑的，所以自然就纳入了coverage的范围。</p>
<h3 id="Takeaway"><a href="#Takeaway" class="headerlink" title="Takeaway"></a>Takeaway</h3><p>在解决这个问题之后，我想我会有三点takeaway：</p>
<ol>
<li><p>多尝试几种方案，不要随便放弃。即便想，也不要。</p>
</li>
<li><p>不要屈就于working solution，要相信一定存在你现在还没想到的更好的方式。</p>
</li>
<li><p>重复发明轮子总是会显得很诱人，因为它看起来可以非常直接而且准确的解决我们的问题。而实际上它常常是直接而且准确的解决我们的问题的现象。如果能找到现象产生的原因，干死这个原因，问题的解决或许会更彻底。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Desugar Scala(15) -- unapply和unapplySeq方法</title>
    <url>/blog/2014/06/14/scala-unapply-method/</url>
    <content><![CDATA[<p>实在想不到什么动词可以当做脱衣服来讲了，所以从现在开始这系列博文就叫做Desugar Scala了。除非哪天才思泉涌，又想到了新词：）</p>
<p>开始正文。</p>
<p>名字叫做unapply和unapplySeq的方法在Scala里也是有特殊含义的。</p>
<p>我们前面说过case class在做pattern match时很好用，而除case class之外，有unapply或unapplySeq方法的对象在pattern match时也有很好的应用场景。</p>
<p>比如这段代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(z: <span class="type">Double</span>): <span class="type">Option</span>[<span class="type">Double</span>] = <span class="type">Some</span>(math.sqrt(z))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义了一个unapply方法，用来计算平方根。<br>我们可以像调用普通方法一样的调用它：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number: <span class="type">Double</span> = <span class="number">36.0</span></span><br><span class="line"><span class="type">Square</span>.unapply(number)</span><br></pre></td></tr></table></figure>

<p>这样会得到36的平方根:6。实际上返回值是Some(6)。</p>
<p>上面的方式是对unapply的浪费，unapply真正的好处是这样的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number: <span class="type">Double</span> = <span class="number">36.0</span></span><br><span class="line">number <span class="keyword">match</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Square</span>(n) =&gt; println(<span class="string">s&quot;square root of <span class="subst">$number</span> is <span class="subst">$n</span>&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;nothing matched&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们无需显式调用unapply方法，而把是它用在pattern match中，让编译器替我们调用它。</p>
<p>当我们写下这段pattern match的代码时，编译器其实替我们做了好几件事：</p>
<ol>
<li>调用unapply，传入number</li>
<li>接收返回值并判断返回值是None，还是Some</li>
<li>如果是Some，则将其解开，并将其中的值赋值给n（就是case Square(n)中的n）</li>
</ol>
<p>这段代码反编译出来是这个样子的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">36.0D</span>;</span><br><span class="line">   <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> number;</span><br><span class="line">   <span class="type">Option</span> <span class="variable">localOption</span> <span class="operator">=</span> Square..MODULE$.unapply(d1);</span><br><span class="line">   <span class="comment">//调用unapply，传入number</span></span><br><span class="line">   BoxedUnit localBoxedUnit;</span><br><span class="line">   <span class="keyword">if</span> (localOption.isEmpty()) &#123;<span class="comment">//判断返回值是None</span></span><br><span class="line">     Predef..MODULE$.println(<span class="string">&quot;nothing matched&quot;</span>);</span><br><span class="line">     localBoxedUnit = BoxedUnit.UNIT;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;<span class="comment">//判断返回值是Some</span></span><br><span class="line">     <span class="type">double</span> <span class="variable">n</span> <span class="operator">=</span> BoxesRunTime.unboxToDouble(localOption.get());</span><br><span class="line">     <span class="comment">//将Some解开，并将其中的值赋值给n</span></span><br><span class="line">     Predef..MODULE$.println(<span class="keyword">new</span> <span class="title class_">StringContext</span>(Predef..MODULE$.wrapRefArray((Object[]) <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">       <span class="string">&quot;square root of &quot;</span>, <span class="string">&quot; is &quot;</span>, <span class="string">&quot;&quot;</span></span><br><span class="line">     &#125;) ).s(Predef..MODULE$.genericWrapArray(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">       BoxesRunTime.boxToDouble(number), BoxesRunTime.boxToDouble(n)</span><br><span class="line">     &#125;)));</span><br><span class="line">     localBoxedUnit = BoxedUnit.UNIT;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>如果没有unapply方法和pattern match语法之间的这种结合，我们自己写代码要写成什么样子呢？</p>
<p>或许会比上面反编译的代码简单一些，但是显式地调用开平方的方法，用if else来判断Option，以及将真正的返回值从Option里面解出来这三件事是免不掉的。</p>
<p>unapplySeq和unapply的作用很是类似，例如这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Names</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapplySeq</span></span>(str: <span class="type">String</span>): <span class="type">Option</span>[<span class="type">Seq</span>[<span class="type">String</span>]] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.contains(<span class="string">&quot;,&quot;</span>)) <span class="type">Some</span>(str.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span> <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义一个unapplySeq方法，用逗号作为分隔符来把字符串拆开。</p>
<p>然后我们可以这样应用它：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> namesString = <span class="string">&quot;xiao ming,xiao hong,tom&quot;</span></span><br><span class="line">namesString <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Names</span>(first, second, third) =&gt; &#123;</span><br><span class="line">    println(<span class="string">&quot;the string contains three people&#x27;s names&quot;</span>)</span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$first</span> <span class="subst">$second</span> <span class="subst">$third</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;nothing matched&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与上面的例子很是类似，不过编译器在这里替我们做的事情更多了：</p>
<ol>
<li>调用unapplySeq，传入namesString</li>
<li>接收返回值并判断返回值是None，还是Some</li>
<li>如果是Some，则将其解开</li>
<li>判断解开之后得到的sequence中的元素的个数是否是三个</li>
<li>如果是三个，则把三个元素分别取出，赋值给first，second和third</li>
</ol>
<p>如果没有unapplySeq方法和pattern match语法之间的这种结合，我们自己写代码来做这五件事会显得很是繁琐。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>褪去Scala的糖衣(12) -- implicit function（补）</title>
    <url>/blog/2014/01/05/more-on-scala-implicit-function/</url>
    <content><![CDATA[<p>上次<a href="http://cuipengfei.me/blog/2014/01/01/desugar-scala-10/">博客谈到了implicit function</a>，但是漏掉了一些东西，今天补上。</p>
<p>由于上次已经讲过implicit function的实现细节，这次就不再重复了。今天只补充上次漏掉了的implicit function的一种很好的实践。</p>
<p>先看一段specs2的测试代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.specs2.mutable._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldSpec</span> <span class="keyword">extends</span> <span class="title">Specification</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;The &#x27;Hello world&#x27; string&quot;</span> should &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;contain 11 characters&quot;</span> in &#123;</span><br><span class="line">      <span class="string">&quot;Hello world&quot;</span> must have size <span class="number">11</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们试着理解这个测试代码在做什么的时候，无须多少思考，因为它和人类语言一样的亲近和自然。但是如果我们想知道specs2如何做到这一点时，就有点费解了。</p>
<p>我们知道xObject yMethod zParameter的写法是一个语法糖，它和xObject.yMethod(zParameter)是一样的。也就是说should和in都是方法名。于是，问题来了，should和in前面是个String啊，String上哪有这两个方法的定义？</p>
<p>想必答案你已经猜到了，specs2定义了一些implicit functions来把String转换成能够调用should和in的对象。至于是哪些对象，因为涉及到了specs2的细节，我们暂不讨论。我们试着模仿specs2来写出一段类似人类语言的代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eat</span></span>(food: <span class="type">String</span>) = println(<span class="string">&quot;I just ate &quot;</span> + food)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个Person类，Person有一个名字，只会做一件事：吃。</p>
<p>然后我们可以这样调用它：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">Person</span>(<span class="string">&quot;Xiao ming&quot;</span>).eat(<span class="string">&quot;steamed dumplings&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>我们让小明吃点蒸饺。或者也可以这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">Person</span>(<span class="string">&quot;Xiao ming&quot;</span>) eat <span class="string">&quot;boiled dumplings&quot;</span></span><br></pre></td></tr></table></figure>

<p>再煮点饺子让小明吃。这就是我们前面提到过的xObject yMethod zParameter的写法了。让小明吃点东西还得new一个Person出来，这太麻烦了，我们定义一个implicit function：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">stringToPerson</span></span>(name: <span class="type">String</span>) = <span class="keyword">new</span> <span class="type">Person</span>(name)</span><br></pre></td></tr></table></figure>

<p>这样就可以把String转换成Person了。然后就可以像这样写：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Xiao ming&quot;</span> eat <span class="string">&quot;more dumplings&quot;</span></span><br></pre></td></tr></table></figure>

<p>虽然我们写的是“Xiao ming”，但是编译器会把stringToPerson的调用加上去，然后才调用eat方法。</p>
<p>这行代码看起来已经很接近人类语言了。</p>
<p>连吃三顿饺子，明哥，您饱了吧？</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>论“如果Scala类有方法接收闭包，这些方法在Java里就不可用，因为Java目前尚不支持闭包。”这句话是错的</title>
    <url>/blog/2014/06/27/scala-java-interop-closure/</url>
    <content><![CDATA[<p>最近在看郑大翻译的《Scala程序设计》，其中第十一章有一句话：</p>
<blockquote>
<p>如果Scala类有方法接收闭包，这些方法在Java里就不可用，因为Java目前尚不支持闭包。</p>
</blockquote>
<p>口说无凭，拍照为证：</p>
<p><img data-src="http://ww2.sinaimg.cn/large/8b1ece2agw1ehszbfbsj1j20xc18g17s.jpg"></p>
<p>当时看到这句话就感觉不对。因为JVM本身没有对函数式编程提供任何支持，所以无论是Java中常用的Guava，还是Scala，其对闭包的支持都是通过用类来包裹函数实现的。</p>
<p>如果说Java目前（其时Java 8还没面世）尚不支持闭包，那倒是还说得过去，因为毕竟是要用类包裹一层，不算真正的函数传递。</p>
<p>但是说如果Scala类有方法接收闭包，这些方法在Java里就不可用，那就不对了，包一层匿名内部类，我不还是能用吗？虽说不太好看，也不能说不能用啊。</p>
<p>为了验证一下，写点代码来试试吧。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnePluser</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span></span>(func: () =&gt; <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    func() + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先定义一个Scala类，OnePluser，它有一个plusOne方法，接收一个函数，给函数的返回值加1，然后返回。非常简单。</p>
<p>在Scala里可以这么调用它：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnePluserCaller</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">callIt</span></span>(): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">OnePluser</span>().plusOne(() =&gt; <span class="number">5</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一样的简单，一个匿名函数传给它，这个匿名函数返回一个写死的5。这样最后的返回值会是6。</p>
<p>这段代码如果反编译成Java，会是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnePluserCaller</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">callIt</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OnePluser</span>().plusOne(<span class="keyword">new</span> <span class="title class_">AbstractFunction0</span>.mcI.sp() &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">apply</span><span class="params">()</span> &#123; <span class="keyword">return</span> apply$mcI$sp(); &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="type">int</span> apply$mcI$sp() &#123; <span class="keyword">return</span> <span class="number">5</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>毫不出奇，调用plusOne的地方需要提供一个不接收参数，返回一个Int的函数，这个函数在Scala里是() &#x3D;&gt; 5，编译出来就是一个AbstractFunction0的实例，其中的apply方法返回一个写死的5。可以想见，在plusOne中就会调用这个apply方法（已验证，非臆测）。</p>
<p>既然Scala的编译器可以用这种方式来实现函数的传递，那在Java代码中难道就不可以吗？</p>
<p>我们写点代码来验证一下吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.runtime.AbstractFunction0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnePluserCallerJ</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">callIt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OnePluser</span>().plusOne(<span class="keyword">new</span> <span class="title class_">AbstractFunction0</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码基本就是照上面的反编译结果照抄的，AbstractFunction0的定义在scala.runtime.AbstractFunction0里，在scala-library-xxx.jar里。xxx是版本号。</p>
<p>上面的代码可以编译，可以运行，而且也可以得到6这个返回值。</p>
<p>由此可以证明在当前的Scala版本下（我现在用的是2.10.4）作者的这段话是不成立的。</p>
<p>但是，当时呢？</p>
<p>我查了一下，这本书的出版日期是09年，然后查了一下Scala的版本，08年的版本是2.7.7。于是我下载了scala-library-2.7.7.jar。发现其中确实没有AbstractFunction0的定义，但是现在版本的AbstractFunction0是实现了Function0的，而Function0的定义在2.7.7中是有的。而当时如果在Java中写一个实现了Function0的匿名内部类，不也是可行的吗？</p>
<p>Ok，不关注那么老的事儿了，可以确定的一点是，在当前版本下，在Java中是可以调用Scala中定义的接收闭包的函数的。</p>
<p>THE END</p>
]]></content>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>大理</title>
    <url>/blog/2014/08/10/da-li/</url>
    <content><![CDATA[<p>昆明机场，等待去大理的飞机</p>
<p>![：）](<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t5jg23zj20hs0nu0wt.jpg">http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t5jg23zj20hs0nu0wt.jpg</a> &#x3D;800x)</p>
<p>下了飞机，出租车上，窗外有云，和蓝天</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t5lh0jvj21w02io1ky.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t5lh0jvj21w02io1ky.jpg</a> &#x3D;800x)</p>
<p>第二天早上，帮校长画墙</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t6vgeh4j20f20qowfs.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t6vgeh4j20f20qowfs.jpg</a> &#x3D;800x)</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t6umefgj20qo0f23zj.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t6umefgj20qo0f23zj.jpg</a> &#x3D;800x)</p>
<p>王鹏和顺子也在画</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t5ohwv6j21w02ioe82.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t5ohwv6j21w02ioe82.jpg</a> &#x3D;800x)</p>
<p>去环绕洱海</p>
<p>![：）](<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t5rds9nj22io1w0x6p.jpg">http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t5rds9nj22io1w0x6p.jpg</a> &#x3D;1200x)</p>
<p>视野开阔，水面如镜</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t5tphlyj22io1w0kjl.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t5tphlyj22io1w0kjl.jpg</a> &#x3D;1200x)</p>
<p>云，与水，与山</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t5vwmxkj22io1w0kjl.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t5vwmxkj22io1w0kjl.jpg</a> &#x3D;1200x)</p>
<p>云诡</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t5yjz3ij22io1w0kjl.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t5yjz3ij22io1w0kjl.jpg</a> &#x3D;1200x)</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t677ddmj22io1w0u0x.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t677ddmj22io1w0u0x.jpg</a> &#x3D;1200x)</p>
<p>无尽的路</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t6cjok0j21w02io7wi.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t6cjok0j21w02io7wi.jpg</a> &#x3D;1200x)</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t6ouqxcj22io1w04qq.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t6ouqxcj22io1w04qq.jpg</a> &#x3D;1200x)</p>
<p>你是一株什么植物？</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t6ilxm1j22io1w0b2a.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t6ilxm1j22io1w0b2a.jpg</a> &#x3D;1200x)</p>
<p>你又是一簇什么花？</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t6lishyj22io1w0x6p.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t6lishyj22io1w0x6p.jpg</a> &#x3D;1200x)</p>
<p>晚上回来，墙画好了</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7twb68w8j20np0hsdh6.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7twb68w8j20np0hsdh6.jpg</a> &#x3D;1200x)</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7twfj2qfj20np0hs76x.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7twfj2qfj20np0hs76x.jpg</a> &#x3D;1200x)</p>
<p>大门口也颇有点样子了</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7twdzj0gj20np0hs76v.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7twdzj0gj20np0hs76v.jpg</a> &#x3D;1200x)</p>
<p>晒出一条麒麟臂</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t6tr10gj20qo0zkgya.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t6tr10gj20qo0zkgya.jpg</a> &#x3D;1200x)</p>
<p>你是谁家的狗？</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t6xx53lj21w02iou0x.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t6xx53lj21w02iou0x.jpg</a> &#x3D;1200x)</p>
<p>为什么一到饭点就来？</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t70jalbj22io1w0npd.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t70jalbj22io1w0npd.jpg</a> &#x3D;1200x)</p>
<p>扎染的布，不需要买一匹</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t740ay1j22io1w0kjm.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7t740ay1j22io1w0kjm.jpg</a> &#x3D;1200x)</p>
<p>走，去喝酒</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tb6qowij20qo0f0dgu.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tb6qowij20qo0f0dgu.jpg</a> &#x3D;1200x)</p>
<p>尼玛，为什么这么悲壮？</p>
<p>![：）](<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tb7fs00j20qo0f0ta4.jpg">http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tb7fs00j20qo0f0ta4.jpg</a> &#x3D;1200x)</p>
<p>洱海门下听歌</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7tb8ywj6j20qo0f00u6.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7tb8ywj6j20qo0f00u6.jpg</a> &#x3D;1200x)</p>
<p>被雨困住走不了</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tb9y5zbj20qo0f0abc.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tb9y5zbj20qo0f0abc.jpg</a> &#x3D;1200x)</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbb7rv4j20qo0k076g.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbb7rv4j20qo0k076g.jpg</a> &#x3D;1200x)</p>
<p>时间的轨迹变得模糊，不记得这是哪天晚上，大家在画墙</p>
<p>![：）](<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t74us92j20hs0nujup.jpg">http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t74us92j20hs0nujup.jpg</a> &#x3D;800x)</p>
<p>燕子来了，走，我们再去一次洱海</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbhdshdj20hs0d9dgm.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbhdshdj20hs0d9dgm.jpg</a> &#x3D;800x)</p>
<p>Kratos ！ ！ ！</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tbi2kq4j20hs0d9mxy.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tbi2kq4j20hs0d9mxy.jpg</a> &#x3D;800x)</p>
<p>大家都骑的自行车，是的</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tbc1njnj20hs0dc0to.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tbc1njnj20hs0dc0to.jpg</a> &#x3D;800x)</p>
<p>停车拍照</p>
<p>![：）](<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tbjyfjgj20hs0npmyw.jpg">http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tbjyfjgj20hs0npmyw.jpg</a> &#x3D;800x)</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/mw690/8b1ece2agw1ej7tbj3z0mj20hs0dc0tz.jpg">http://ww3.sinaimg.cn/mw690/8b1ece2agw1ej7tbj3z0mj20hs0dc0tz.jpg</a> &#x3D;800x)</p>
<p>![：）](<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t7xldcyj22io1w0x6p.jpg">http://ww2.sinaimg.cn/large/8b1ece2agw1ej7t7xldcyj22io1w0x6p.jpg</a> &#x3D;800x)</p>
<p>又是波谲云诡<br><a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t99kua8j28c01ss4qv.jpg" target="_blank">点击看大图</a></p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t99kua8j28c01ss4qv.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7t99kua8j28c01ss4qv.jpg</a> &#x3D;4000x)</p>
<p>又是无尽的路</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t9nv70uj22io1w0u0x.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7t9nv70uj22io1w0u0x.jpg</a> &#x3D;1200x)</p>
<p>无尽的路全景<br><a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7taa5gkrj28c01ssx6v.jpg" target="_blank">点击看大图</a></p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7taa5gkrj28c01ssx6v.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7taa5gkrj28c01ssx6v.jpg</a> &#x3D;4000x)</p>
<p>左手山，右手水<br><a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tatvzpgj28c01ssb2g.jpg" target="_blank">点击看大图</a></p>
<p>![：）](<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tatvzpgj28c01ssb2g.jpg">http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tatvzpgj28c01ssb2g.jpg</a> &#x3D;4000x)</p>
<p>这是我们当天的队伍</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tb640cfj20hs0d9js4.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tb640cfj20hs0d9js4.jpg</a> &#x3D;800x)</p>
<p>下午累了，吃蛋炒饭。我的索马里海盗造型。</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tb496o3j20hs0nuafg.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tb496o3j20hs0nuafg.jpg</a> &#x3D;800x)</p>
<p>脚蹬子掉了，海盗修车</p>
<p>![：）](<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tb55t2mj20hs0dgab4.jpg">http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tb55t2mj20hs0dgab4.jpg</a> &#x3D;800x)</p>
<p>这是哪天的饭？</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tbglwrxj20k00qodjf.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7tbglwrxj20k00qodjf.jpg</a> &#x3D;800x)</p>
<p>翻墙</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7tcodq6nj20qo0f275v.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7tcodq6nj20qo0f275v.jpg</a> &#x3D;800x)</p>
<p>![：）](<a href="http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tcmilqjj20qo0f2jsp.jpg">http://ww2.sinaimg.cn/large/8b1ece2agw1ej7tcmilqjj20qo0f2jsp.jpg</a> &#x3D;800x)</p>
<p>降魔杵</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7vgwbjczj20k00qodj2.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7vgwbjczj20k00qodj2.jpg</a> &#x3D;800x)</p>
<p>寺外全景<br><a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tc6hvxsj28c01ssu12.jpg" target="_blank">点击看大图</a></p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tc6hvxsj28c01ssu12.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tc6hvxsj28c01ssu12.jpg</a> &#x3D;800x)</p>
<p><a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbxyah7j28c01ssqvc.jpg" target="_blank">点击看大图</a></p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbxyah7j28c01ssqvc.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tbxyah7j28c01ssqvc.jpg</a> &#x3D;800x)</p>
<p>此为何物？</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7vgyuar9j20k00qo0ww.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7vgyuar9j20k00qo0ww.jpg</a> &#x3D;800x)</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/large/8b1ece2agw1ej7vgxhsk3j20qo0k00u8.jpg">http://ww3.sinaimg.cn/large/8b1ece2agw1ej7vgxhsk3j20qo0k00u8.jpg</a> &#x3D;800x)</p>
<p>我要撤了，大家包饺子</p>
<p>![：）](<a href="http://ww2.sinaimg.cn/mw690/8b1ece2agw1ej7tcgqk6lj20dc09zaac.jpg">http://ww2.sinaimg.cn/mw690/8b1ece2agw1ej7tcgqk6lj20dc09zaac.jpg</a> &#x3D;600x)</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/large/8b1ece2agw1ej7tchgeihj209y0dcmxl.jpg">http://ww1.sinaimg.cn/large/8b1ece2agw1ej7tchgeihj209y0dcmxl.jpg</a> &#x3D;400x)</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7tciado3j209y0dcmxd.jpg">http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7tciado3j209y0dcmxd.jpg</a> &#x3D;400x)</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/mw690/8b1ece2agw1ej7tcjbj5cj20hs0nsdgw.jpg">http://ww4.sinaimg.cn/mw690/8b1ece2agw1ej7tcjbj5cj20hs0nsdgw.jpg</a> &#x3D;600x)</p>
<p>合影</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7tcbixf4j20f00qowgu.jpg">http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7tcbixf4j20f00qowgu.jpg</a> &#x3D;600x)</p>
<p>再见！</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tceiarqj22io1w0x6p.jpg">http://ww4.sinaimg.cn/large/8b1ece2agw1ej7tceiarqj22io1w0x6p.jpg</a> &#x3D;1000x)</p>
<p>我走之后棚子搭好了</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7vgv5561j20qo0k0adm.jpg">http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7vgv5561j20qo0k0adm.jpg</a> &#x3D;600x)</p>
<p>![：）](<a href="http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7vgt5k59j20qo0k0di4.jpg">http://ww1.sinaimg.cn/mw690/8b1ece2agw1ej7vgt5k59j20qo0k0di4.jpg</a> &#x3D;600x)</p>
<p>大家还在一起吃饭</p>
<p>![：）](<a href="http://ww3.sinaimg.cn/mw690/8b1ece2agw1ej7tckandsj20qo0f00ua.jpg">http://ww3.sinaimg.cn/mw690/8b1ece2agw1ej7tckandsj20qo0f00ua.jpg</a> &#x3D;600x)</p>
<p>![：）](<a href="http://ww4.sinaimg.cn/mw690/8b1ece2agw1ej7tcl911qj20qo0f0763.jpg">http://ww4.sinaimg.cn/mw690/8b1ece2agw1ej7tcl911qj20qo0f0763.jpg</a> &#x3D;600x)</p>
<p>故事还在继续</p>
<pre><code>THE END
</code></pre>
]]></content>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>论“如果trait有方法实现，那么Java类就不能实现这个trait”这句话是错的</title>
    <url>/blog/2014/06/28/scala-java-interop-trait-with-impl/</url>
    <content><![CDATA[<p>最近还是在看郑大翻译的《Scala程序设计》，其中第十一章还有一句话：</p>
<blockquote>
<p>如果trait有方法实现，那么Java类就不能实现这个trait</p>
</blockquote>
<p>口说还是无凭，还是拍照为证：</p>
<p><img data-src="http://ww1.sinaimg.cn/large/8b1ece2agw1ehtqjokutnj21kw23u7wh.jpg"></p>
<p>我感觉这句话是错的，下面寻根究底地探索一下。</p>
<p>trait这个语言特性<a href="http://cuipengfei.me/blog/2013/10/13/scala-trait/">前面的博文</a>讲过。</p>
<p>一个含有方法实现的trait会被编译成一个interface，还有一个含有实现的静态方法。</p>
<p>所有extends或者是with这个trait的Scala类，实际上都是implements了这个interface，在具体实现中调用了静态方法。</p>
<p>快速的简单回忆一下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">HappyThoughts</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">whatAreYouThinking</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot; food :D &quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个含有方法实现的trait。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">with</span> <span class="title">HappyThoughts</span></span></span><br></pre></td></tr></table></figure>

<p>然后让Dog去with这个trait。</p>
<p>之后就可以这样调用：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">Dog</span>().whatAreYouThinking()</span><br></pre></td></tr></table></figure>

<p>这样就能打印出food :D了。虽然Dog本身是空的，但是因为with了一个trait，它也拥有了一些行为。</p>
<p>再来看看反编译出的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HappyThoughts</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">whatAreYouThinking</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HappyThoughts$class</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">whatAreYouThinking</span><span class="params">(HappyThoughts $<span class="built_in">this</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    Predef..MODULE$.println(<span class="string">&quot; food :D &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $init$(HappyThoughts $<span class="built_in">this</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HappyThoughts就是上面这样的，一个interface，还有一个含有实现的静态方法。</p>
<p>Dog则是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">HappyThoughts</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whatAreYouThinking</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    HappyThoughts.class.whatAreYouThinking(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">  	HappyThoughts.class.$init$(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它implements了HappyThoughts，其实现则依赖于上面提到的静态方法。</p>
<p>Ok，足够清晰了。</p>
<p>这么一个trait，当真在Java中不可以利用吗？</p>
<p>写点代码试试看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogJ</span> <span class="keyword">implements</span> <span class="title class_">HappyThoughts</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whatAreYouThinking</span><span class="params">()</span> &#123;</span><br><span class="line">        HappyThoughts$class.whatAreYouThinking(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基本照抄上面反编译的代码。这段Java代码是可以编译的，而且也可以运行，运行结果也是打印出了food :D。</p>
<p>这次，我就不去探寻旧版本的Scala是如何处理trait的了。我们只要知道当前版本（比如我用的2.10.4）的Scala中定义的含有方法实现的trait，拿到Java中依然是可用的就行了。虽说用起来有一点蹩脚，但终归是可用的。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>在使用play framework的evolutions？需要支持SQL Server？用Liquibase吧</title>
    <url>/blog/2014/07/18/play-evolutions-to-liquibase/</url>
    <content><![CDATA[<p>我所在的项目在用Scala + Play framework做一个web app。</p>
<p>Play自带的evolutions是一个DB Migration工具，从一开始我们就在用它来做所有阶段的数据迁移工作。</p>
<p>运行自动化测试时它可以帮每个测试用例在H2中创建数据（H2是Play默认的内存数据库）。<br>在下一个测试用例运行时evolutions则会创建一份和上次完全相同的新数据，这样我们的测试可以获得独立性而不用担心之前的测试遗留的副作用。也不用担心会给下一个测试遗留下什么脏数据。</p>
<p>在测试或者部署环境中运行时它也可以针对Postgres做数据迁移。</p>
<p>这一切看起来都挺好，我们就差喊evolutions是我们忠实的好伙伴了。</p>
<p>但是，快到给终端客户部署时，某一家客户提出他们一定要使用SQL Server，我们最初提出的使用Postgres他们不接受了。这时我们才发现evolutions的设计初衷就是在开发和测试阶段提供便利性，它根本就没想成为一个production ready的东西。</p>
<p>这样看来我们必须得寻找一个正经的DB Migration的工具了。而且这个DB Migration工具一定要满足以下几点：</p>
<ol>
<li>能够在运行自动化测试时和H2结合使用（因为我们已经有很多测试在依赖于H2跑了，要换掉成本较高）</li>
<li>能支持多种数据库（今天有人要SQL Server的支持，明天说不定还会有人要其他的）</li>
<li>在支持多种数据库时不需要我们写不同风格的SQL脚本（要写出让各个DB都不挑剔的SQL实在是太费劲了）</li>
</ol>
<p>我最先想到的就是Flyway，之前用过，而且TW的tech radar也提到过它。</p>
<p>但是它并没有入选，原因在于上面的第三点。Flyway要求使用者自己提供执行所需的SQL脚本。<br>这就意味着我们写SQL时需要同时兼顾H2，Postgres，SQL Server的异同。而且还无法预知未来的其他数据库会对我们现在写出的SQL脚本产生什么样的影响。</p>
<p>最后我们选择了Liquibase，我们可以通过JSON，YAML，或者XML来定义数据。Liquibase自己负责把我们定义的数据翻译给各种不同的数据库。</p>
<p>这样，通过一层中间语言。我们就隔离了数据库的差异对我们开发工作可能会造成的影响。</p>
<p>Ok，要用Liquibase这个大方向就确定了。但是具体怎么把它跑起来呢？在什么时机跑它呢？</p>
<p>用脚本跑？</p>
<p>Liquibase确实提供了Standalone，我们可以用脚本来调用它。</p>
<p>但是这怎么和build结合起来呀？在测试时调用它？在app启动时调用它？</p>
<p>那H2运行的端口每次都未必是一样的，这怎么办啊？</p>
<p>这个方案想想就费劲。</p>
<p>把它做成sbt的一个task？</p>
<p>这样确实比直接用脚本要稍微距离我们的build近一点，但是还是会有类似的问题。我们需要显式地去调用它，还要选择合适的时机去调用它。实现起来也会很麻烦。</p>
<p>而实际上，Play自己是支持plug in的。我们想要控制执行时机，而有谁比Play自己更了解它的运行时机呢？</p>
<p>而且已经有人做了liquibase play plug in。我把它fork了一份，更新了liquibase和play的版本，提高了log的level。并且部署到了sonatype去。</p>
<p>由于是Play自己的plug in，不是我们试图插入的生硬的脚本或者sbt task。Play自己知道该在什么合适的时机去执行它。</p>
<p>下面说一下如何应用它吧。</p>
<ul>
<li>在所有的conf文件中删掉所有和evolutions有关的配置</li>
</ul>
<p>这两个东西不能一起用，要不然我们需要同时维护两种DB Migration的脚本。</p>
<ul>
<li>在dependencies中加入这一项：</li>
</ul>
<p>“com.github.cuipengfei” % “play-liquibase_2.11” % “1.1”</p>
<p>很明显，这是用来引入这个plugin的。</p>
<ul>
<li>在conf目录下创建一个名为play.plugins的文件，在其中写入：</li>
</ul>
<p>400:com.github.cuipengfei.LiquibasePlugin</p>
<p>冒号前的400用来定义plugin的执行优先级，Play会由此决定何时执行该plugin。</p>
<p>冒号后是plugin的完全限定名。</p>
<ul>
<li>在你需要的conf文件中加入两行：</li>
</ul>
<p>liquibaseplugin&#x3D;enabled</p>
<p>applyLiquibase.default&#x3D;true</p>
<p>这样用来启用该plugin。</p>
<ul>
<li>在conf&#x2F;liquibase&#x2F;default&#x2F;下创建一个modules.xml。</li>
</ul>
<p>在其中写入你的数据定义。（具体如何写，liquibase的官网有详细的介绍）</p>
<p>如果你用的数据库名字不是default，相应的替换就ok了。</p>
<p>这样，就大功告成了。</p>
<p>当你用sbt运行自动化测试时，liquibase会帮你创建数据。</p>
<p>当你在本地调试运行时，liquibase会帮你set up数据库。</p>
<p>当应用被部署到生产环境下去的时候，liquibase也可以帮你在第一次运行时进行数据的初创。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>ScalaInAction</tag>
      </tags>
  </entry>
  <entry>
    <title>Desugar Scala(17) -- Option和for，以及脑子里发生的事情</title>
    <url>/blog/2014/08/30/options-for/</url>
    <content><![CDATA[<p>Scala里的for关键字是个很有趣的东西。可以用来把多层嵌套for循环写成一层。比如这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i&lt;<span class="number">-1</span> to <span class="number">10</span>;j&lt;<span class="number">-1</span> to <span class="number">10</span>;k&lt;<span class="number">-1</span> to <span class="number">10</span>) <span class="keyword">yield</span>(<span class="string">s&quot;<span class="subst">$i</span> <span class="subst">$j</span> <span class="subst">$k</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这行代码执行的结果是这样的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">10</span></span><br><span class="line">......</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>这样，就可以用一行代码写出三层循环的效果。代码看起来非常紧凑，噪音很少。</p>
<p>但是今天主要要说的不是这种for，而是它和Option结合的写法。</p>
<p>Option本身是一个抽象类，代表一个可能存在，也可能不存在的值（那谁谁的喵？）。它有两个实现类，分别是Some和None。顾名思义，Some代表有值，None代表没有。</p>
<p>实际上，上面的说法不够准确，Some是一个实现类，而None实际是一个单例，不过这点对后面的内容没影响。</p>
<p>现在设想一个很简单的场景，需要用单价和数量来算总价，而单价和数量未必拿得到，那代码大概会是这样的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculateTotal</span></span>: <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">  <span class="keyword">val</span> price: <span class="type">Option</span>[<span class="type">Int</span>] = getPrice</span><br><span class="line">  <span class="keyword">val</span> amount: <span class="type">Option</span>[<span class="type">Int</span>] = getAmount</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (price.isEmpty || amount.isEmpty) &#123;</span><br><span class="line">    <span class="type">None</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">Some</span>(price.get * amount.get)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getPrice和getAmount都返回一个Option[Int]，就类似Java中Integer可以为null一样。计算出来的总价也是一个Option[Int]，说不定会有，也说不定没有。</p>
<p>在这段代码中先检查单价和数量是否存在，如果二者中任意一个不存在，那就返回None，代表无法求得总价。如果二者都存在，那就将二者的乘积用Some包起来返回。</p>
<p>这代码看起来还ok，很常规的写法，但是稍显啰嗦。如果用上for的话，可以大大简化这段代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculateTotalWithFor</span></span>: <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">  <span class="keyword">for</span> (price &lt;- getPrice; amount &lt;- getAmount) <span class="keyword">yield</span> price * amount</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法体只有一行了，而它实现出来的行为和上面那段代码是完全一致的。</p>
<p>这感觉好神奇啊，不用判断价格和数量是否存在，也不需要根据判断结果决定到底返回None还是Some。它是怎么搞的呢？</p>
<p>看一下反编译的结果吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Option&lt;Object&gt; <span class="title function_">calculateTotalWithFor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getPrice().flatMap(<span class="keyword">new</span> <span class="title class_">AbstractFunction1</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Option&lt;Object&gt; <span class="title function_">apply</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> price)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> OptionAndFor..MODULE$.account$of$OptionAndFor$$getAmount().map(<span class="keyword">new</span> <span class="title class_">AbstractFunction1</span>.mcII.sp() &#123;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> price$<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> apply$mcII$sp(amount);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> apply$mcII$sp(<span class="type">int</span> amount) &#123;</span><br><span class="line">                    <span class="keyword">return</span> price * amount;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个反编译的结果很不好读，不过还是可以看出个大概。它先是对getPrice的返回值调用了flatMap，给其传入一个匿名函数（AbstractFunction1），在这个匿名函数里面又对getAmount的返回值调用了map，也给其传入了一个匿名函数，再在这第二层匿名函数里做了乘法运算。</p>
<p>如果用Scala把它表达出来，是这样的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculateTotalWithFlatMapAndMap</span></span>: <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">  getPrice.flatMap(price =&gt; getAmount.map(amount =&gt; amount * price))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此可见，上面使用for的代码的神奇之处在于它利用了Option的flatMap和map方法。</p>
<p>这两个方法具有一个共同特征：如果被调用flatMap或者map的当前Option实例为None的话，则忽略传入的匿名函数，直接返回None。</p>
<p>这很容易理解，要参与运算的成员之一已经是None了，那就不用管剩下的成员到底是啥了，它随便是啥，最终的计算结果都会是None。这和最初写出的用 || 运算符的代码的逻辑是一致的。</p>
<p>到此为止，我们给Option和for的结合使用脱光了衣服，它就是利用Option的flatMap和map来实现紧凑的代码的。</p>
<h3 id="神奇之处不仅在于更短的代码，还在于它提高了信噪比，给我们提供了更加简化的思考模型"><a href="#神奇之处不仅在于更短的代码，还在于它提高了信噪比，给我们提供了更加简化的思考模型" class="headerlink" title="神奇之处不仅在于更短的代码，还在于它提高了信噪比，给我们提供了更加简化的思考模型"></a>神奇之处不仅在于更短的代码，还在于它提高了信噪比，给我们提供了更加简化的思考模型</h3><p>最初那段用if else的代码，在写它或者读它的时候，我们的脑子里面发生了什么呢？</p>
<pre><code>1. 要获取价格和数量
2. 要判断价格是否为空，要判断数量是否为空        （与业务关联较小，属于技术范畴）
3. 如果任意一个为空，结果是空                 （与业务关联较小，属于技术范畴）
4. 如果两个都不是空，再做乘法运算
</code></pre>
<p>而在写或者读用for的那段代码的时候，脑子里又是怎么想的呢？</p>
<pre><code>1. 获取价格和数量
2. 做乘法运算
</code></pre>
<p>我们写这段代码的目的是要表述业务逻辑，是要给未来读代码的人传递和业务相关的信息。</p>
<p>而空值判断是偏技术的，把这种代码消掉，我们传递给其他程序员的信息里就含有更少的与业务无关的噪音。而且我们自己写起来的时候，脑子里也不需要考虑那么多的东西。</p>
<p>对自己，对他人都有利。这实在是一个美妙的语言特性。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>solving regular problems in scala</title>
    <url>/blog/2014/09/06/solving-regular-problems-in-scala/</url>
    <content><![CDATA[<iframe src="//slides.com/pengfeicui/solving-regular-problems-in-scala/embed" width="800" height="600" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>ScalaInAction</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark RDD的fold和aggregate为什么是两个API？为什么不是一个foldLeft？</title>
    <url>/blog/2014/10/31/spark-fold-aggregate-why-not-foldleft/</url>
    <content><![CDATA[<p>大家都知道Scala标准库的List有一个用来做聚合操作的foldLeft方法。</p>
<p>比如我定义一个公司类：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span>(<span class="params">name:<span class="type">String</span>, children:<span class="type">Seq</span>[<span class="type">Company</span>]=<span class="type">Nil</span></span>)</span></span><br></pre></td></tr></table></figure>
<p>它有名字和子公司。<br>然后定义几个公司：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> companies = <span class="type">List</span>(<span class="type">Company</span>(<span class="string">&quot;B&quot;</span>),<span class="type">Company</span>(<span class="string">&quot;A&quot;</span>),<span class="type">Company</span>(<span class="string">&quot;T&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>三家大公司，然后呢，我假设有一家超牛逼的公司把它们给合并了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">companies.foldLeft(<span class="type">Company</span>(<span class="string">&quot;King&quot;</span>))((king,company)=&gt;<span class="type">Company</span>(name=king.name,king.children:+company))</span><br></pre></td></tr></table></figure>

<p>这个执行的结果是这样的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; companies.foldLeft(<span class="type">Company</span>(<span class="string">&quot;King&quot;</span>))((king,company)=&gt;<span class="type">Company</span>(name=king.name,king.children:+company))</span><br><span class="line">res6: <span class="type">Company</span> = <span class="type">Company</span>(<span class="type">King</span>,<span class="type">List</span>(<span class="type">Company</span>(<span class="type">B</span>,<span class="type">List</span>()), <span class="type">Company</span>(<span class="type">A</span>,<span class="type">List</span>()), <span class="type">Company</span>(<span class="type">T</span>,<span class="type">List</span>())))</span><br></pre></td></tr></table></figure>

<p>可见foldLeft的结果是一家包含了BAT三大家得新公司。</p>
<p>由List[Company]聚合出一个新的Company，这种属于foldLeft的同构聚合操作。</p>
<p>同时，foldLeft也可以做异构的聚合操作：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">companies.foldLeft(<span class="string">&quot;&quot;</span>)((acc,company)=&gt;acc+company.name)</span><br></pre></td></tr></table></figure>

<p>它的执行结果是这样的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; companies.foldLeft(<span class="string">&quot;&quot;</span>)((acc,company)=&gt;acc+company.name)</span><br><span class="line">res7: <span class="type">String</span> = <span class="type">BAT</span></span><br></pre></td></tr></table></figure>

<p>由List[Company]聚合出一个String。</p>
<p>这样的API感觉很方便，只要是聚合，无论同构异构，都可以用它来做。</p>
<p>最近接触了Spark，其中的RDD是做分布式计算时最常用的一个类。</p>
<p>RDD有一个叫做fold的API，它和foldLeft的签名很像，唯一区别是它只能做同构聚合操作。</p>
<p>也就是说如果你有一个RDD[X]，通过fold，你只能构造出一个X。</p>
<p>如果我想通过一个RDD[X]构造一个Y出来呢？</p>
<p>那就得用aggregate这个API了，aggregate的签名是这样的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">aggregate[<span class="type">U</span>](zeroValue: <span class="type">U</span>)(seqOp: (<span class="type">U</span>, <span class="type">T</span>) ⇒ <span class="type">U</span>, combOp: (<span class="type">U</span>, <span class="type">U</span>) ⇒ <span class="type">U</span>)(<span class="keyword">implicit</span> arg0: <span class="type">ClassTag</span>[<span class="type">U</span>]): <span class="type">U</span></span><br></pre></td></tr></table></figure>

<p>它比fold和foldLeft多需要一个combOp做参数。</p>
<p>这让我很不解，同构和异构的API干嘛非得拆成两个呢？怎么不能学Scala的标准库，把它做成类似foldLeft的样子呢？</p>
<p>后来想明白了，这是由于Spark需要分布运算造成的。</p>
<p>先想一下Scala List的foldLeft是怎么工作的？</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">companies.foldLeft(<span class="type">Company</span>(<span class="string">&quot;King&quot;</span>))((king,company)=&gt;<span class="type">Company</span>(name=king.name,king.children:+company))</span><br></pre></td></tr></table></figure>

<ol>
<li>拿到初始值，即名字为king的公司，把它和list中的第一个公司合并，成为一个包含一家子公司的新公司</li>
<li>把上一步中的新公司拿来和list中的第二个公司合并，成为一个包含两家子公司的新公司</li>
<li>把上一步中的新公司拿来和list中的第三个公司合并，成为一个包含三家子公司的新公司</li>
</ol>
<p>这是同构的过程。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">companies.foldLeft(<span class="string">&quot;&quot;</span>)((acc,company)=&gt;acc+company.name)</span><br></pre></td></tr></table></figure>

<ol>
<li>拿到初始值，即空字符串，把它和list中的第一个公司的名字拼在一起，成为B</li>
<li>把上一步中的B第二个公司名字拼一起，成为BA</li>
<li>把上一步中的BA拿来和list中的第三个公司的名字拼一起，成为BAT</li>
</ol>
<p>这是异构的过程。</p>
<p>像多米诺骨牌一样，从左到右依次把list中的元素吸收入结果中。</p>
<p>现在假设RDD[X]中有一个类似foldLeft的API，其签名和foldLeft一致，我现在调用foldLeft，给它一个f:(Y,X)&#x3D;&gt;Y，接下来该发生什么呢？</p>
<ol>
<li>因为要分布计算，所以我先要把手里的很多个X分成几份，分发到不同的节点上去</li>
<li>每个节点把拿到的很多个X计算出一个Y出来</li>
<li>把所有节点的结果拿来，这时我手里就有了很多个Y</li>
<li>啊。。。我不知道怎么把很多个Y变成一个Y啊。。。</li>
</ol>
<p>由于Spark的RDD不像Scala的List一样只需要推倒一副多米诺骨牌，而是要推倒很多副，最后再对很多副多米诺骨牌的结果做聚合。</p>
<p>这时如果是同构还好，我只需要再用f:(X,X)&#x3D;&gt;X做一遍就ok了。</p>
<p>但是如果是异构的，那我就必须得再需要一个f:(Y,Y)&#x3D;&gt;Y了。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>ScalaInAction</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala中Stream的应用场景及其实现原理</title>
    <url>/blog/2014/10/23/scala-stream-application-scenario-and-how-its-implemented/</url>
    <content><![CDATA[<h1 id="假设一个场景"><a href="#假设一个场景" class="headerlink" title="假设一个场景"></a>假设一个场景</h1><p>需要在50个随机数中找到前两个可以被3整除的数字。</p>
<p>听起来很简单，我们可以这样来写：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomList</span> </span>= (<span class="number">1</span> to <span class="number">50</span>).map(_ =&gt; <span class="type">Random</span>.nextInt(<span class="number">100</span>)).toList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isDivisibleBy3</span></span>(n: <span class="type">Int</span>) = &#123;</span><br><span class="line">  <span class="keyword">val</span> isDivisible = n % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line">  println(<span class="string">s&quot;<span class="subst">$n</span> <span class="subst">$isDivisible</span>&quot;</span>)</span><br><span class="line">  isDivisible</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">randomList.filter(isDivisibleBy3).take(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>一个产生50个随机数的函数；</p>
<p>一个检查某数字是否能被3整除的函数；</p>
<p>最后，对含有50个随机数的List做filter操作，找到其中所有能够被3整除的数字，取其中前两个。</p>
<p>把这段代码在Scala的console里面跑一下，结果是这样的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; randomList.filter(isDivisibleBy3).take(<span class="number">2</span>)</span><br><span class="line"><span class="number">31</span> <span class="literal">false</span></span><br><span class="line"><span class="number">71</span> <span class="literal">false</span></span><br><span class="line"><span class="number">95</span> <span class="literal">false</span></span><br><span class="line"><span class="number">7</span> <span class="literal">false</span></span><br><span class="line"><span class="number">38</span> <span class="literal">false</span></span><br><span class="line"><span class="number">48</span> <span class="literal">true</span></span><br><span class="line"><span class="number">88</span> <span class="literal">false</span></span><br><span class="line"><span class="number">52</span> <span class="literal">false</span></span><br><span class="line"><span class="number">2</span> <span class="literal">false</span></span><br><span class="line"><span class="number">27</span> <span class="literal">true</span></span><br><span class="line"><span class="number">90</span> <span class="literal">true</span></span><br><span class="line"><span class="number">55</span> <span class="literal">false</span></span><br><span class="line"><span class="number">96</span> <span class="literal">true</span></span><br><span class="line"><span class="number">91</span> <span class="literal">false</span></span><br><span class="line"><span class="number">82</span> <span class="literal">false</span></span><br><span class="line"><span class="number">83</span> <span class="literal">false</span></span><br><span class="line"><span class="number">8</span> <span class="literal">false</span></span><br><span class="line"><span class="number">51</span> <span class="literal">true</span></span><br><span class="line"><span class="number">96</span> <span class="literal">true</span></span><br><span class="line"><span class="number">27</span> <span class="literal">true</span></span><br><span class="line"><span class="number">12</span> <span class="literal">true</span></span><br><span class="line"><span class="number">76</span> <span class="literal">false</span></span><br><span class="line"><span class="number">17</span> <span class="literal">false</span></span><br><span class="line"><span class="number">53</span> <span class="literal">false</span></span><br><span class="line"><span class="number">54</span> <span class="literal">true</span></span><br><span class="line"><span class="number">70</span> <span class="literal">false</span></span><br><span class="line"><span class="number">29</span> <span class="literal">false</span></span><br><span class="line"><span class="number">49</span> <span class="literal">false</span></span><br><span class="line"><span class="number">12</span> <span class="literal">true</span></span><br><span class="line"><span class="number">83</span> <span class="literal">false</span></span><br><span class="line"><span class="number">18</span> <span class="literal">true</span></span><br><span class="line"><span class="number">6</span> <span class="literal">true</span></span><br><span class="line"><span class="number">7</span> <span class="literal">false</span></span><br><span class="line"><span class="number">76</span> <span class="literal">false</span></span><br><span class="line"><span class="number">51</span> <span class="literal">true</span></span><br><span class="line"><span class="number">95</span> <span class="literal">false</span></span><br><span class="line"><span class="number">76</span> <span class="literal">false</span></span><br><span class="line"><span class="number">85</span> <span class="literal">false</span></span><br><span class="line"><span class="number">87</span> <span class="literal">true</span></span><br><span class="line"><span class="number">84</span> <span class="literal">true</span></span><br><span class="line"><span class="number">44</span> <span class="literal">false</span></span><br><span class="line"><span class="number">44</span> <span class="literal">false</span></span><br><span class="line"><span class="number">89</span> <span class="literal">false</span></span><br><span class="line"><span class="number">84</span> <span class="literal">true</span></span><br><span class="line"><span class="number">42</span> <span class="literal">true</span></span><br><span class="line"><span class="number">44</span> <span class="literal">false</span></span><br><span class="line"><span class="number">0</span> <span class="literal">true</span></span><br><span class="line"><span class="number">23</span> <span class="literal">false</span></span><br><span class="line"><span class="number">35</span> <span class="literal">false</span></span><br><span class="line"><span class="number">55</span> <span class="literal">false</span></span><br><span class="line">res34: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">48</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure>

<p>其最终结果固然是没有问题，找到了48和27这两个数字。但是非常明显的可以看出，isDivisibleBy3被调用了50次，找到了远多于两个的能被3整除的数字，但是最后我们只关心其中前两个结果。</p>
<p>这似乎有点浪费，做了很多多余的运算。</p>
<p>对于这个例子来说，这还没什么，我们的List很小，判断整除于否也不是什么耗时操作。</p>
<p>但是如果List很大，filter时所做的运算很复杂的话，那这种做法就不可取了。</p>
<h1 id="现有解法的优缺点"><a href="#现有解法的优缺点" class="headerlink" title="现有解法的优缺点"></a>现有解法的优缺点</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">randomList.filter(isDivisibleBy3).take(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>这行代码有一个优点：</p>
<p>用描述性、声明性的语言描述了我们要做的事是什么，而无需描述怎么做。我们只需说先用filter过滤一下，然后拿前两个，整件事就完成了。</p>
<p>但是它同时也有一个缺点：</p>
<p>做了多余的运算，浪费资源，而且这个缺点会随着数据量的增大以及计算复杂度的增加而更为凸显。</p>
<h1 id="试着解决其缺点"><a href="#试着解决其缺点" class="headerlink" title="试着解决其缺点"></a>试着解决其缺点</h1><p>解决多余运算的思路很简单，不要过滤完整个List之后再取前两个。而是在过滤的过程中如果发现已经找到两个了，那剩下的就忽略掉不管了。</p>
<p>顺着这个思路很容易写出如下很像Java的代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first2UsingMutable</span></span>: <span class="type">List</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">  <span class="keyword">val</span> result = <span class="type">ListBuffer</span>[<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">  randomList.foreach(n =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDivisibleBy3(n)) result.append(n)</span><br><span class="line">    <span class="keyword">if</span> (result.size == <span class="number">2</span>) <span class="keyword">return</span> result.toList</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  result.toList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个可变的List，开始遍历随机数，找到能被3整除的就把它塞进可变List里面去，找够了两个就返回。</p>
<p>执行的结果如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; first2UsingMutable</span><br><span class="line"><span class="number">31</span> <span class="literal">false</span></span><br><span class="line"><span class="number">89</span> <span class="literal">false</span></span><br><span class="line"><span class="number">21</span> <span class="literal">true</span></span><br><span class="line"><span class="number">29</span> <span class="literal">false</span></span><br><span class="line"><span class="number">12</span> <span class="literal">true</span></span><br><span class="line">res35: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">21</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到，运算量确实变少了，找够了两个就直接收工了。</p>
<p>但是这实在很糟糕，显式使用了return同时还引入了可变量。</p>
<p>有什么东西像是一个foreach循环而又可以不引入可变量呢？fold</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first2UsingFold</span></span>: <span class="type">List</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">  randomList.foldLeft(<span class="type">Nil</span>: <span class="type">List</span>[<span class="type">Int</span>])((acc, n) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (acc.size == <span class="number">2</span>) <span class="keyword">return</span> acc</span><br><span class="line">    <span class="keyword">if</span> (isDivisibleBy3(n)) n :: acc</span><br><span class="line">    <span class="keyword">else</span> acc</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; first2UsingFold</span><br><span class="line"><span class="number">98</span> <span class="literal">false</span></span><br><span class="line"><span class="number">77</span> <span class="literal">false</span></span><br><span class="line"><span class="number">68</span> <span class="literal">false</span></span><br><span class="line"><span class="number">93</span> <span class="literal">true</span></span><br><span class="line"><span class="number">93</span> <span class="literal">true</span></span><br><span class="line">res36: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">93</span>, <span class="number">93</span>)</span><br></pre></td></tr></table></figure>

<p>效果和上面一段代码类似，没有多余的运算。但是由于需要early termination，所以还是摆脱不了return。</p>
<p>这两种解法在去除多余运算这个缺点的同时也把原来的优点给丢掉了，我们又退化回了描述如何做而不是做什么的程度了。</p>
<h1 id="如何保持代码的表意性而又不用做多余运算呢？"><a href="#如何保持代码的表意性而又不用做多余运算呢？" class="headerlink" title="如何保持代码的表意性而又不用做多余运算呢？"></a>如何保持代码的表意性而又不用做多余运算呢？</h1><p>其实类似的问题是有套路化的解决方案的：使用Stream。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">randomList.toStream.filter(isDivisibleBy3).take(<span class="number">2</span>).toList</span><br></pre></td></tr></table></figure>

<p>这行代码执行的结果：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; randomList.toStream.filter(isDivisibleBy3).take(<span class="number">2</span>).toList</span><br><span class="line"><span class="number">86</span> <span class="literal">false</span></span><br><span class="line"><span class="number">15</span> <span class="literal">true</span></span><br><span class="line"><span class="number">53</span> <span class="literal">false</span></span><br><span class="line"><span class="number">20</span> <span class="literal">false</span></span><br><span class="line"><span class="number">93</span> <span class="literal">true</span></span><br><span class="line">res42: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">15</span>, <span class="number">93</span>)</span><br></pre></td></tr></table></figure>

<p>可见没有多余运算了，而且这行代码和最初代码极为相似，都是通过描述先做filter再做take来完成任务的。缺点没有了，优点也保留了下来。</p>
<p>这同样都是filter和take，代码跟代码的差距咋就这么大呢？</p>
<p>答案就是：因为Stream利用了惰性求值（lazy evaluation），或者也可以称之为延迟执行（deferred execution）。</p>
<p>接下来就看一下这两个晦涩的名词是如何帮助Stream完成工作的吧。</p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>在这里我借用一下Functional programming in Scala这本书里对Stream实现的代码，之所以不用Scala标准库的源码是因为我们只需要实现filter，take和toList这三个方法就可以展示Stream的原理，就不需要动用重型武器了。</p>
<p>先假设我们自己实现了一个MyStream，它的用法和Stream是类似的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">MyStream</span>(randomList: _*).filter(isDivisibleBy3).take(<span class="number">2</span>).toList</span><br></pre></td></tr></table></figure>

<p>以这一行代码为引子，我们来开始解剖MyStream是如何工作的。</p>
<h1 id="类型签名"><a href="#类型签名" class="headerlink" title="类型签名"></a>类型签名</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">MyStream</span>[+<span class="type">A</span>] </span>&#123;</span><br><span class="line">	. . . . . .</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Empty</span> <span class="keyword">extends</span> <span class="title">MyStream</span>[<span class="type">Nothing</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Cons</span>[+<span class="type">A</span>](<span class="params">h: (</span>) <span class="title">=&gt;</span> <span class="title">A</span>, <span class="title">t</span></span>: () =&gt; <span class="type">MyStream</span>[<span class="type">A</span>]) <span class="keyword">extends</span> <span class="type">MyStream</span>[<span class="type">A</span>]</span><br></pre></td></tr></table></figure>

<p>一个trait叫做MyStream，其中的内容我们暂时忽略掉。</p>
<p>它有两个子类，一个Cons，一个Empty。Empty当然是代表空Stream了。</p>
<p>而Cons则是头尾结构的，头是Stream中的一个元素，尾是Stream中余下的元素。请注意头和尾这两个参数的类型并不是A，头的类型是一个能够返回A的函数，尾的类型是一个能够返回MyStream[A]的函数。</p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>有了以上的类型定义以及头尾结构，我们就可以把很多个Cons加一个Empty（或者是无限多个Cons，没有Empty）连起来就构成一个Stream了，比如这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Cons</span>(()=&gt;<span class="number">1</span>,()=&gt;<span class="type">Cons</span>(()=&gt;<span class="number">2</span>,()=&gt;<span class="type">Empty</span>))</span><br></pre></td></tr></table></figure>

<p>这样就可以构造一个含有1，2的Stream了。</p>
<p>不过，请注意，上面的说法并不严谨，实际上它是一个包含着两个分别会返回1和2的函数的Stream。</p>
<p>也就是说当上面的代码在构造Cons的时候，1和2还没有“出生”，它们被包在一个函数里，等着被释放出来。</p>
<p>如果说我们通常熟知的一些集合包含的是花朵的话，那Stream所包含的就是花苞，它本身不是花，但是有开出花来的能力。</p>
<h1 id="Smart初始化"><a href="#Smart初始化" class="headerlink" title="Smart初始化"></a>Smart初始化</h1><p>当然，如果直接暴露Cons的构造函数出去给别人用的话，那这API也未免太不友好了，所以Stream需要提供一个易用的初始化的方式：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>[<span class="type">A</span>](elems: <span class="type">A</span>*): <span class="type">MyStream</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (elems.isEmpty) empty</span><br><span class="line">    <span class="keyword">else</span> cons(elems.head, apply(elems.tail: _*))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cons</span></span>[<span class="type">A</span>](hd: =&gt; <span class="type">A</span>, tl: =&gt; <span class="type">MyStream</span>[<span class="type">A</span>]): <span class="type">MyStream</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> head = hd</span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> tail = tl</span><br><span class="line">    <span class="type">Cons</span>(() =&gt; head, () =&gt; tail)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">empty</span></span>[<span class="type">A</span>]: <span class="type">MyStream</span>[<span class="type">A</span>] = <span class="type">Empty</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个没有太多好解释的，我们就是用apply和小写的cons这两个方法来把客户代码原本要写的一大堆匿名函数给代劳掉。</p>
<p>需要注意的一点是apply方法看似是递归的，好像是你调用它的时候如果给它n个元素的话，它会自己调用自己n-1次。事实上它确实会调用自己n-1次，但是并不是立即发生的，为什么呢？</p>
<p>因为小写的cons方法所接受的第二个参数不是eager evaluation的，这就会使得apply(elems.tail: _*)这个表达式不会立即被求值。这就意味着，apply缺失会被调用n次，但是这n次并不是一次接一次连续发生的，它只会在我们对一个Cons的尾巴求值时才会发生一次。</p>
<p>如果说普通的集合中包含的是数据的话，那Stream中所包含的就是能够产生数据的算法。</p>
<p>如何？是不是花朵花苞的感觉又回来了？</p>
<p>还记得我们开始剖析的时候那句代码是什么吗？</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">MyStream</span>(randomList: _*).filter(isDivisibleBy3).take(<span class="number">2</span>).toList</span><br></pre></td></tr></table></figure>

<p>现在我们算是把MyStream(randomList: _*)这一小点说清了。</p>
<p>接下来看MyStream(randomList: _*).filter(isDivisibleBy3)是如何work的。</p>
<h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">MyStream</span>[+<span class="type">A</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">filter</span></span>(p: <span class="type">A</span> =&gt; <span class="type">Boolean</span>): <span class="type">MyStream</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="keyword">this</span> <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Cons</span>(h, t) =&gt;</span><br><span class="line">        <span class="keyword">if</span> (p(h())) cons(h(), t().filter(p))</span><br><span class="line">        <span class="keyword">else</span> t().filter(p)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Empty</span> =&gt; empty</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">. . . . . .</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个方法定义在基类里，又是一个看似递归的实现。</p>
<p>为什么说是看似呢？因为在</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (p(h())) cons(h(), t().filter(p))</span><br></pre></td></tr></table></figure>

<p>这行代码中我们又用到了小写的cons，它所接受的参数不会被立即求值。也就是说filter一旦找到一个合适的元素，它就不再继续跑了，剩下的计算被延迟了。</p>
<p>比较值得提一下的是：这里的h()是什么呢？h是构造Cons时的第一个参数，它是什么类型的？()&#x3D;&gt;A。它就是之前提到的能够生产数据的算法，就是那个能够开出花朵的花苞。在这里我们说h()，就是在调用这个函数来拿到它所生产的数据，就是让一个花苞开出花朵。</p>
<h1 id="take"><a href="#take" class="headerlink" title="take"></a>take</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">MyStream</span>(randomList: _*).filter(isDivisibleBy3).take(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>接下来就该说take是如何work的了。在这里我们可以回顾一下，MyStream(randomList: _*)返回一个类型为MyStream[Int]，其中包含很多个可以返回Int的函数的容器。然后我们调用了这个容器的filter方法，filter又返回一个包含很多个可以返回Int的函数的容器。请注意，到这里为止，真正的计算还没有开始，真正的计算被包含到了一个又一个的函数（花苞）中，等待着被调用（绽放）。</p>
<p>那对filter的结果调用take又会怎样呢？</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">MyStream</span>[+<span class="type">A</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  . . . . . .</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">take</span></span>(n: <span class="type">Int</span>): <span class="type">MyStream</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) <span class="keyword">this</span> <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Cons</span>(h, t) <span class="keyword">if</span> n == <span class="number">1</span> =&gt; cons(h(), <span class="type">MyStream</span>.empty)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Cons</span>(h, t) =&gt; cons(h(), t().take(n - <span class="number">1</span>))</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="type">MyStream</span>.empty</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="type">MyStream</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  . . . . . .</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看过了前面的apply和filter之后，take就显得顺眼了很多。我们又见到了小写的cons，条件反射一般，我们就可以意识到，只要看见cons，那就意味着作为它的参数的表达式不会被立即求值，那这就意味着计算被放到了函数里，稍后再执行。那稍后到底是什么时候呢？</p>
<p>那就得看下面的toList了。</p>
<h1 id="toList"><a href="#toList" class="headerlink" title="toList"></a>toList</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">MyStream</span>[+<span class="type">A</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  . . . . . .</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toList</span></span>: <span class="type">List</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="keyword">this</span> <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Cons</span>(h, t) =&gt; h() :: t().toList</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Empty</span> =&gt; <span class="type">Nil</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>又是一个递归实现，但是这次可不是看似递归了，这次是实打实的递归：只要还没有遇到空节点，就继续向后遍历。这次没有使用cons，没有任何计算被延迟执行，我们通过不断地对h()求值，来把整个Stream中每一个能够生产数据的函数都调用一遍以此来拿到我们最终想要的数据。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>要把以上的代码细节全部load进脑子跑一遍确实不太容易，我们人类的大脑栈空间太浅了。</p>
<p>所以我们试着从上面所罗列出的纷繁的事实中抽象出一些适合人脑理解的描述性语句吧：</p>
<ul>
<li><p>List(1,2,3)会构造一个容器，容器中包含数据</p>
</li>
<li><p>List(1,2,3).filter(n&#x3D;&gt;n&gt;1)会构造出一个新的容器，其中包含2和3，这两块具体的数据</p>
</li>
<li><p>List(1,2,3).filter(n&#x3D;&gt;n&gt;1).take(1)会把上一步中构造成的容器中的第一块数据取出，放入一个新容器</p>
</li>
<li><p>MyStream(1,2,3)也会构造一个容器，但是这个容器中不包含数据，它包含能够生产数据的算法</p>
</li>
<li><p>MyStream(1,2,3).filter(n&#x3D;&gt;n&gt;1)也会构造出一个新的容器，这个容器中所包含的仍然是算法，是基于上一步构造出的能生产1，2，3的算法之上的判断数字是否大于1的算法</p>
</li>
<li><p>MyStream(1,2,3).filter(n&#x3D;&gt;n&gt;1).take(1)会把上一步中构造成的算法容器中的第一个算法取出，放入一个新容器</p>
</li>
<li><p>MyStream(1,2,3).filter(n&#x3D;&gt;n&gt;1).take(1).toList终于把上面所有步骤构造出的算法执行了，从而得到了最终想要的结果</p>
</li>
</ul>
<p>上面对List和Stream的应用的区别在哪儿呢？</p>
<p>就在于List是先把数据构造出来，然后在一堆数据中挑选我们心仪的数据。</p>
<p>而Stream是先把算法构造出来，挑选心仪的算法，最后只执行一大堆算法中我们需要的那一部分。</p>
<p>这样，自然就不会执行多余的运算了。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>ScalaInAction</tag>
      </tags>
  </entry>
  <entry>
    <title>2014年总结</title>
    <url>/blog/2014/12/27/2014/</url>
    <content><![CDATA[<p>2014年即将结束，需要做一些总结。</p>
<p>既然总结是写在博客上的，第一项就先说博客吧。</p>
<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><p>2014年写了18篇博客，其中15篇和Scala有关，自认为都是有且仅有干货的。</p>
<p>对此，我比较_<strong>满意</strong>_。</p>
<p>不过这个数字存在欺骗性，15篇Scala的博客，其中4篇写于1月份，6篇写于6月份，其余的零散的写就与其他月份。</p>
<p>66.66…%集中地爆发于两个月里，其余十个月只贡献了总体的33.33…%</p>
<p>可见写博客这件事于我而言并没有形成持久的习惯，只是随激情而来的自我娱乐。</p>
<p>明年可以_<strong>改进</strong>_的是不要嫌话题小，不要嫌话题不够深。<br>有了有价值的想法就记下来，形成惯性。</p>
<h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p><img data-src="http://i3.tietuku.com/363db6f06852244e.png" alt="alt text"></p>
<p>38本，加上马上快读完的一本Ruby的书，算是39本。</p>
<p>对这个数字，我比较_<strong>满意</strong>_。</p>
<p>但是其中直接或间接与技术相关的只有8本，只占20%。</p>
<p>所以，和上面一节类似，单独观察总体数字本身是极具欺骗性的。</p>
<p>另一个我不满意的是读书的结果。把这39本书的封面罗列出来放到面前，我都能记得我看过这本书，但是有很多我都记不起其主要观点是什么。</p>
<p>所以明年的一个_<strong>改进</strong>_点是做笔记和书评，有利于记忆和吸收。</p>
<p>另外一个_<strong>改进</strong>_点是领域，我明年需要看一些轻量级的经济、哲学和社会心理学的书。口说无凭，于此立字为据。</p>
<h1 id="MOOC"><a href="#MOOC" class="headerlink" title="MOOC"></a>MOOC</h1><p><img data-src="http://i2.tietuku.com/98b280b6a1ac2512.png"></p>
<p>上图来自MOOC学院，data visualization做的很漂亮，不过没有分年统计。</p>
<p>2014年实际只上完了4门课。</p>
<p>对这些课程的质量，从中的收获我都比较_<strong>满意</strong>_。</p>
<p>不太满意的是数字，明年_<strong>改进</strong>_的目标定在6。</p>
<p>与读书不同，上课需要的时间比较长。有的课会持续两个月。一年能上完的课不会太多，领域不宜太广。</p>
<p>暂定技术相关的至少3门，其他三门如果有特别好的非技术课就上一下，没有的话就还是上技术课。给自己留一些随性自由发挥的空间：）</p>
<h1 id="Well-being"><a href="#Well-being" class="headerlink" title="Well-being"></a>Well-being</h1><p>今年体重从72.5公斤降到了61.1公斤。</p>
<p>最近三个月的数据统计</p>
<img data-src="http://i3.tietuku.com/f020ea0a6adc01a6.png" style="width: 500px;"/>

<p>上张一个月前的裸照：）</p>
<img data-src="http://i3.tietuku.com/df10eb25abd486c8.png" style="width: 200px;"/>

<p>明年没有太多改进的目标，维持就ok了。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>脾气还是不好，察言观色并据此反应的能力还是差。</p>
<p>今年试过的手段有降低分贝，减慢语速，少用激进词汇，延长反应时间，多听少说。</p>
<p>有效果，但不是很明显。执行不够有效，自我监控不够严格。</p>
<p>对此，我_<strong>不满意</strong>_。</p>
<p>像这种与天性作斗争的行为，其过程一定是困难，漫长，且鲜有正面自我回馈的。</p>
<p>明年需要_<strong>改进</strong>_的是，持续以上改进手段的执行，增加自控强度。</p>
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>2015武汉郑大晔校第二次课</title>
    <url>/blog/2014/11/16/zdyx2015wuhansecondclass/</url>
    <content><![CDATA[<iframe src="//slides.com/pengfeicui/285849/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
]]></content>
      <tags>
        <tag>TW</tag>
      </tags>
  </entry>
  <entry>
    <title>Tech radar 武汉 microservice envy</title>
    <url>/blog/2015/01/13/tech-radar-wuhan/</url>
    <content><![CDATA[<iframe src="//slides.com/pengfeicui/microservice-envy/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
]]></content>
      <tags>
        <tag>TW</tag>
      </tags>
  </entry>
  <entry>
    <title>2015第一季度</title>
    <url>/blog/2015/03/29/2015-first-season/</url>
    <content><![CDATA[<p>时间是以何种方式流逝的呢？</p>
<p>三个月瞬间就不见了。</p>
<p>对照着去年的总结和当时对未来的期望写一下2015年第一季度吧。</p>
<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><p>惨不忍睹。</p>
<p>除了一个应付任务的tech radar的session写在了博客上，其他啥都没写。</p>
<p>去年博客有产出是因为在刷Scala这个主线任务。</p>
<p>今年做的都是支线任务，这一点那一点，难以形成有效的产出。</p>
<p>要形成有效的产出，需要有plan，有execution，有retro。</p>
<p>兴之所至，就把今年的博客主线任务定为OO与FP的比较和结合应用吧。</p>
<h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p>不错。</p>
<p>第一个季度已经读完10本书。数量达标。</p>
<p>说过要做的笔记也做了。</p>
<p>笔记的作用确实很好，每隔一段时间回顾一次，spaced repetition可以促进和加深记忆。<br>不会再有“卧槽，这本书我看过吗？作者都讲了些啥啊？”的尴尬事。</p>
<p>看完了《经济学原理》的微观分册，这是最近几年来读过的最大部头的一本书。鉴于之前一直没有耐心读厚书，这可以算作是一个进步。</p>
<p>开始把待读的书按照内容领域和期待得到的效果分类放到豆列里。这样每次没书看了就去想读的豆列里挑一本。不用每次都700选一了。</p>
<p>读书的领域扩张也在按照之前的计划进行，没有风险。</p>
<p>博客需要有主线任务，读书要配合，可以优先选一些讲paradigm的书来读。</p>
<h1 id="MOOC"><a href="#MOOC" class="headerlink" title="MOOC"></a>MOOC</h1><p>尴尬。</p>
<p>这三个月一个mooc都没有跟。4月13日，reactive programming课要开，这个一定要跟，而且一定要跟完。</p>
<p>估计完成当时6门课的目标有点悬了。</p>
<p>非常无耻地修改一下mooc的目标吧：配合主线任务，以读书和mooc作为输入，博客作为产出。<br>数量和领域都不做具体限定。<br>（果然够无耻）</p>
<h1 id="体重"><a href="#体重" class="headerlink" title="体重"></a>体重</h1><p>稳定。</p>
<p>上次写年终总结的时候是61.1公斤，现在是61.0公斤。</p>
<p>当时写的是：</p>
<blockquote>
<p>明年没有太多改进的目标，维持就ok了。</p>
</blockquote>
<p>没有了减重目标，没有了改进方向，效果果然是不会自动出现的啊。<br>这是很有意思的一个现象，没有了改进的意愿，或许潜意识里对热量摄入和消耗都没有那么敏感和严格。</p>
<p>还好胸在变大，肱三在变大，腹肌在浮出水面。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>写个阶段性总结还是有用，发掘出了主线任务。</p>
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>职业女性确实处于劣势吗？记一次不甚严谨的考据 -- 向胡适之先生的遥远致敬</title>
    <url>/blog/2015/04/04/women-in-finance-it-and-r-and-d/</url>
    <content><![CDATA[<h1 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h1><p>前两天，在一个武汉本地程序员聚集的技术社区微信群里某位群友发了两张图片：</p>
<p><img data-src="http://ww4.sinaimg.cn/mw690/8b1ece2agw1eqsw4fbiytj20fe0a6q8i.jpg"></p>
<p><img data-src="http://ww1.sinaimg.cn/mw690/8b1ece2agw1eqsw4dzf8ej20fe09v0z9.jpg"></p>
<p>这是某个IT公司的招聘宣传，为程序员提供的鼓励师。</p>
<p>（由于图片出现在愚人节期间，不确定该公司是真的有这样的人员配备，还是恶作剧的，此处暂且存疑）</p>
<p>马上群里就有一位X君跳出来说这种事情就是混蛋啊，怎么女人就得给男人端茶倒水擦汗啊。</p>
<p>另外一位Y君就说没有啊，这就是开个玩笑啊，不要这么较真啊。</p>
<p>X君继续说：！@#￥%……&amp;*啊</p>
<p>Y君回应：*&amp;……%￥#@！啊</p>
<p>于是，你也可以猜到的，这中间X君就说了IT行业对于女性从业者存在歧视，收入不平等之类的话。</p>
<p>这让我颇为感慨：武汉也无非是这样。武大的樱花烂熳的时节，群中却有这样标致极了的讨论。其实，又何止武汉呢？</p>
<p>正当X君与Y君酣战之时，有另外一位群友问声称存在收入歧视的X君是否有数据支持其观点。</p>
<p>恰巧我这周正在看《胡适文选》。胡适之先生反复提醒读者<strong>要有怀疑精神，凡事要讲求证据，要用科学的手段得出科学的结论。</strong></p>
<p><strong>胡适之先生之言于我心有戚戚焉，于是我便想要搜罗数据，深入了解一下这个话题，算作是对胡适之先生的遥远致敬。</strong></p>
<p>以上，为源起。</p>
<h1 id="定题"><a href="#定题" class="headerlink" title="定题"></a>定题</h1><p>近来我正尝试着自我疏离本性中近似于周树人先生的那一部分。</p>
<p>便不太愿用“歧视”这个颇为尖刻的词汇，因而本文的标题中用了“劣势”这一稍为中性的说法。</p>
<p>既然要考据，就不妨把话题放大些，不独观察IT行业的女性，莫若把视角扩宽到整个职业女性上去。</p>
<p>再加上我不是专业的考据家，并没有投入大量时间精力去搜索资料，交叉引证也不够详备，那就不能怕会过谦，也在标题上加上“不甚严谨”这几个字。</p>
<p>于是便有了这个颇显啰嗦的标题：<strong>《职业女性确实处于劣势吗？记一次不甚严谨的考据 – 向胡适之先生的遥远致敬》。</strong></p>
<p>是为题目由来。</p>
<h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>我是一个颇为庸俗的人，也时常会被称为理性的人。</p>
<p><strong>于是，别人看待职业女性的眼光、上司是否会给小鞋穿、同事是否会区别对待等等这些无法量化，难以考量的因素均不采用。</strong></p>
<p><strong>我就只认准了：</strong></p>
<p><strong>在一个行业中具有某种特征的人群占多数就可以被称作是有优势的</strong></p>
<p><strong>在一个行业中具有某种特征的人群挣钱多就可以被称作是有优势的</strong></p>
<p><strong>这两条考校标准。</strong></p>
<p>所以接下来通篇都围绕着<strong>人数多寡和挣钱多少</strong>展开。</p>
<h1 id="什么行业收入高？"><a href="#什么行业收入高？" class="headerlink" title="什么行业收入高？"></a>什么行业收入高？</h1><p>**中华人民共和国国家统计局，中国统计年鉴（2014）**中有一个条目：<strong>按行业分城镇单位就业人员平均工资</strong>，以Excel格式提供：</p>
<p>（这一行Excel实在是太长了，我把它分开截了两张图）</p>
<p><img data-src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqsy6hday7j21wc090q76.jpg"></p>
<p><img data-src="http://ww4.sinaimg.cn/large/8b1ece2agw1eqsy4ojncwj21dq09a0wn.jpg"></p>
<p>其中收入最高的三个行业标记为了红色，分别为金融，IT和科研。</p>
<p>原数据可以在这里找到：<br><a href="http://www.stats.gov.cn/tjsj/ndsj/2014/indexch.htm" target="_blank">http://www.stats.gov.cn/tjsj/ndsj/2014/indexch.htm</a></p>
<p>点击左侧的“四、就业和工资”然后点击第“4-15”项，里面可以下载Excel。</p>
<p>或者也可以直接通过这个链接下载Excel：<br><a href="http://www.stats.gov.cn/tjsj/ndsj/2014/zk/html/Z0415C.xls">http://www.stats.gov.cn/tjsj/ndsj/2014/zk/html/Z0415C.xls</a></p>
<p>那接下来就按图索骥，考量这三个行业中女性的状况。</p>
<p>（为什么只有三个？笔者精力有限，只求管窥，不求完全覆盖）</p>
<h1 id="金融"><a href="#金融" class="headerlink" title="金融"></a>金融</h1><p>搜寻良久，实在是找不到国内的资料，只好拿些英文的资料作为旁证了。</p>
<p>以下是来自美国的<strong>公平就业机会委员会（Equal Employment Opportunity Commission,缩写为EEOC）<strong>2006年发布的一份报告中关于</strong>女性金融从业者比例</strong>的图表：</p>
<p><img data-src="http://ww2.sinaimg.cn/large/8b1ece2agw1eqtfg16y00j210q0gg7ez.jpg"></p>
<p>从最后一行的汇总信息可以看出，经理级别的职位，女性占18%左右。</p>
<p>专业从业者中，女性约为26%。</p>
<p>技术与销售类的职位则只有个位数的百分点。</p>
<p>但到了书记员，抄写员（Clerical，表中最后一列）这一类的职位，却有43%是女性。</p>
<p><strong>由此不难观察到，在美国，金融这个高薪行业中女性在做着勤务工作，升到经理职位的甚少。</strong></p>
<p>这份报告的出处：<br><a href="http://www.eeoc.gov/eeoc/statistics/reports/finance/finance.pdf" target="_blank">http://www.eeoc.gov/eeoc/statistics/reports/finance/finance.pdf</a></p>
<p>公平就业机会委员会的wiki页面：<a href="http://zh.wikipedia.org/wiki/公平就业机会委员会" target="_blank">http://zh.wikipedia.org/wiki/公平就业机会委员会</a></p>
<p>而另外一份来自于英国**平等与人权委员会（Equality and Human Rights Commission，EHRC）**2009年春季发布的报告则有些不同：</p>
<p><img data-src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqtfj8tpjsj214010ahcb.jpg"></p>
<p>从这张<strong>男女性别比例</strong>的图表可以看出，英国的金融行业男女从业人数基本一比一，差距不大。<br>从最后一行的汇总数据来看，女性还比男性多一个百分点。</p>
<p>而下面这张出自同一报告的关于<strong>收入差距</strong>的图表，则显露了另外的信息：</p>
<p><img data-src="http://ww2.sinaimg.cn/large/8b1ece2agw1eqtfg31dloj218c14qe6v.jpg"></p>
<p>英国金融行业中，全职工作的男性年收入比全职工作的女性多55%。</p>
<p>而在全社会所有行业中，这个数字也有28%。</p>
<p><strong>可见在英国女性虽然以同等的人数参与进了金融行业，但是却没有拿到哪怕是接近同等的薪水。</strong></p>
<p>这份报告的出处：<br><a href="http://www.equalityhumanrights.com/sites/default/files/documents/download__finance_gender_analyis_research.pdf" target="_blank">http://www.equalityhumanrights.com/sites/default/files/documents/download__finance_gender_analyis_research.pdf</a></p>
<p>平等与人权委员会的wiki页面：<a href="http://en.wikipedia.org/wiki/Equality_and_Human_Rights_Commission" target="_blank">http://en.wikipedia.org/wiki/Equality_and_Human_Rights_Commission</a></p>
<h1 id="IT"><a href="#IT" class="headerlink" title="IT"></a>IT</h1><p>接下来开始看三大高收入行业中的第二名：IT行业中女性的状况。</p>
<p>我找到了一份来自美国的非营利机构：**National Center for Women &amp; Information Technology (NCWIT)**在2009年发布的报告。</p>
<p>（没找到这个机构确切的中文翻译，就保留原文吧）</p>
<p>报告中有一张<strong>女性IT从业人员比例随年份变化的趋势图</strong>：</p>
<p><img data-src="http://ww4.sinaimg.cn/large/8b1ece2agw1eqszx7ctf5j20vc0jujte.jpg"></p>
<p>容易看出，从上个世纪八十年代中期到九十年代初期，女性IT从业者比例在攀升，从30%增长到37%左右。</p>
<p>在此之后则一路下降，到2008年已经减少到了25%左右。</p>
<p>出自同一报告的还有另外一张<strong>男女收入差距随工作经验变化的趋势图</strong>：</p>
<p><img data-src="http://ww1.sinaimg.cn/large/8b1ece2agw1eqszx63er1j20vk0h8jto.jpg"></p>
<p>可以看出，入行初期男女收入没太大区别，但从第三年开始，逐渐拉开差距，由3%增加到12%。</p>
<p>好了，又是一个高薪行业。<strong>女性只占其中的四分之一，而且收入还比男性少。</strong></p>
<p>报告出处：<a href="http://www.ncwit.org/sites/default/files/legacy/pdf/NCWIT_TheFacts_rev2010.pdf" target="_blank">http://www.ncwit.org/sites/default/files/legacy/pdf/NCWIT_TheFacts_rev2010.pdf</a></p>
<p>NCWIT的wiki页面：<a target="_blank" href="http://en.wikipedia.org/wiki/National_Center_for_Women_%26_Information_Technology">http://en.wikipedia.org/wiki/National_Center_for_Women_%26_Information_Technology</a></p>
<h1 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h1><p>高薪行业之三，科研。</p>
<p>找到了两份来自欧盟的报告。</p>
<p>第一份报告中有一张<strong>科研行业中女性从业者比例</strong>的图表，数据采集自1999年：</p>
<p><img data-src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqtgj4x3wdj20w80pcwhe.jpg"></p>
<p>不难看出，其中希腊和葡萄牙的女性科研工作人员较多，占有41%和43%。</p>
<p>德国和匈牙利则很低，女性只有14%到19%。</p>
<p>其他八个国家大致是落在26%到33%这个区间。</p>
<p>第二份报告发布于2012年，其中有一张<strong>男女收入差距</strong>的图表：</p>
<p><img data-src="http://ww3.sinaimg.cn/large/8b1ece2agw1eqtgj4s92yj20ty0t6wl8.jpg"></p>
<p>该图表数据统计于2002年和2006年，从中不难看出，女性在科研行业的各个分支中收入比男性低20%到40%。</p>
<p><strong>由此可见，在欧洲，科研行业作为一个高薪行业，其中女性从业人员较少。<br>即便进入这个行业的女性，其收入也要较男性低。</strong></p>
<p>第一份报告出处：<a href="https://ec.europa.eu/research/swafs/pdf/pub_gender_equality/wir_final.pdf" target="_blank">https://ec.europa.eu/research/swafs/pdf/pub_gender_equality&#x2F;wir_final.pdf</a></p>
<p>第二份报告出处：<a href="http://ec.europa.eu/research/science-society/document_library/pdf_06/meta-analysis-of-gender-and-science-research-synthesis-report.pdf" target="_blank">http://ec.europa.eu/research/science-society/document_library&#x2F;pdf_06&#x2F;meta-analysis-of-gender-and-science-research-synthesis-report.pdf</a></p>
<p>发布报告的欧盟网站：<a href="http://ec.europa.eu/index_en.htm" target="_blank">http://ec.europa.eu/index_en.htm</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><strong>以上观察了三个薪水最高的行业：金融，IT和科研，这三个行业中都呈现出了女性从业人员少于男性，且收入低于男性的态势。</strong></p>
<p>如果这条结论和以上干巴巴的数据无法让您获得感性的认知的话，那我们再结合其他数据做个分析。</p>
<p>以下是来源于非营利组织<strong>National Association of Colleges and Employers (NACE)<strong>的一份报告中关于</strong>平均年工资涨幅</strong>的数据：</p>
<p><img data-src="http://ww1.sinaimg.cn/large/8b1ece2agw1eqtzeznwmwj21020eqwgt.jpg"></p>
<p>可以从最后一行看出，平均工资涨幅是每年7.5%。</p>
<p>这意味着什么呢？</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>] pry(main)&gt; <span class="title class_">Math</span>.log(<span class="number">1.55</span>,<span class="number">1.075</span>)</span><br><span class="line">=&gt; <span class="number">6.059885534213904</span></span><br><span class="line">[<span class="number">2</span>] pry(main)&gt; <span class="title class_">Math</span>.log(<span class="number">1.12</span>,<span class="number">1.075</span>)</span><br><span class="line">=&gt; <span class="number">1.5670305391527257</span></span><br><span class="line">[<span class="number">3</span>] pry(main)&gt; <span class="title class_">Math</span>.log(<span class="number">1.20</span>,<span class="number">1.075</span>)</span><br><span class="line">=&gt; <span class="number">2.5210161634544224</span></span><br><span class="line">[<span class="number">4</span>] pry(main)&gt; <span class="title class_">Math</span>.log(<span class="number">1.40</span>,<span class="number">1.075</span>)</span><br><span class="line">=&gt; <span class="number">4.652504958776575</span></span><br></pre></td></tr></table></figure>

<p>如果您不是IT行业的看不懂上面的代码没关系，我来解释一下。</p>
<p>这意味着，如果您是一名金融行业的女性从业者，您旁边座位上是一名和您同时进公司的男同事。<br>你们的关系很好，他甚至都不介意让您看他的工资单。这给在公司属于珍稀物种的您带来了不少宽慰。<br>但是经过分析自己历年的工资涨幅，您会发现如果您想要和他赚到一样多的钱的话，您还要再工作<strong>六年</strong>才行。</p>
<p>而这个数字在IT行业是<strong>一年半</strong>。</p>
<p>在科研行业是<strong>两年半</strong>到<strong>四年半</strong>。</p>
<p>以上引用报告出处：<a href="https://www.naceweb.org/uploadedFiles/Content/static-assets/downloads/executive-summary/2014-september-salary-survey-executive-summary.pdf" target="_blank">https://www.naceweb.org/uploadedFiles/Content/static-assets/downloads/executive-summary/2014-september-salary-survey-executive-summary.pdf</a></p>
<p>NACE的wiki页面：<a href="http://en.wikipedia.org/wiki/National_Association_of_Colleges_and_Employers" target="_blank">http://en.wikipedia.org/wiki/National_Association_of_Colleges_and_Employers</a></p>
<h1 id="然后呢？"><a href="#然后呢？" class="headerlink" title="然后呢？"></a>然后呢？</h1><p>以上仅仅是通过交叉引证来描述了职业女性的状况。是属于<strong>实证性的表述（positive statement）。</strong></p>
<p>而关于职业女性应该处于何种状况，那是属于<strong>规范性的表述（normative statement）</strong>，本文就不涉及了。</p>
<p>女性在这些高薪行业中人数少于男性，这是好事吗？这是坏事吗？</p>
<p>女性在这些高薪行业中收入低于男性，应该如何评价这件事呢？</p>
<p>金融，IT和科研，听起来都是理工宅男的专长啊，女的少不是属于正常现象吗？</p>
<p>女性的收入低于男性，那有可能是她们干活不给力啊，那收入低就是应该的吧？</p>
<p>所有这些问题，都属于<strong>价值判断</strong>。通过上面引用的数据，以及常识的积累，我对这些问题会有确定性的判断。<br>想来你也能猜到我的判断是什么。但是我不把它说出来，<strong>留待读者自己得出结论</strong>。</p>
<h1 id="2020-11-12-更新"><a href="#2020-11-12-更新" class="headerlink" title="2020-11-12 更新"></a>2020-11-12 更新</h1><p>感谢读者Victoria Mesbere的来信并推荐了一篇与本文主题契合的文章：技术女性赋权指南。</p>
<p>与本文只揭示现象不同，这篇文章给出了一些可供实操的建议，推荐阅读：<a href="https://www.websiteplanet.com/blog/the-empowering-guide-for-women-in-tech/">https://www.websiteplanet.com/blog/the-empowering-guide-for-women-in-tech/</a></p>
]]></content>
      <tags>
        <tag>Fem</tag>
      </tags>
  </entry>
  <entry>
    <title>English workshop Wuhan 2015.04.14</title>
    <url>/blog/2015/04/11/wuhan-english-workshop/</url>
    <content><![CDATA[<iframe src="//slides.com/pengfeicui/deck/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
]]></content>
      <tags>
        <tag>TW</tag>
      </tags>
  </entry>
  <entry>
    <title>Principles of Reactive Programming Week One作业导学</title>
    <url>/blog/2015/04/19/principles-of-reactive-programming-week-one/</url>
    <content><![CDATA[<p>#前尘<br>Principles of Reactive Programming在4月13号又开课了。<br><a href="https://www.coursera.org/course/reactive">https://www.coursera.org/course/reactive</a></p>
<p>上次开课是在2013年的11月，当时我刚第一次上完Functional programming principles in Scala，热情很高于是就报名参加了这门课。<br>还群发了一个邮件找人一起上课。</p>
<p>但是上了几周发现有点难，于是就放弃了。现在去bitbucket看，最后一次push停留在了2013-11-18。</p>
<p>后来还在上海被8x鄙视于无形之中。</p>
<h1 id="后世"><a href="#后世" class="headerlink" title="后世"></a>后世</h1><p>14年做了几个月的Scala开发，后来Functional programming principles in Scala再次开课又上了一遍，拿了个认证证书。</p>
<p>感觉似乎可以再挑战一次。</p>
<h1 id="今生"><a href="#今生" class="headerlink" title="今生"></a>今生</h1><p>上课习得的知识放在脑子里是不牢靠的。大脑有遗忘周期。</p>
<p>需要有成文或者成代码的产出，作为日后回忆和做spaced repetition的资料。</p>
<p>于是就有了这个即将成为系列的博文中的第一篇《Principles of Reactive Programming Week One作业导学》。</p>
<p>这系列博文的目标读者仅限于报名参加了这门课并且看完了视频，看完了作业的instruction之后仍有困难的同学。</p>
<p>这系列博文不会公布作业的答案，那是违反Coursera的code of honor的。</p>
<p>我只会试着解释作业中已有的代码，以及应该如何入手。</p>
<p>其实，写这个系列博文对我的帮助比对读者的帮助要大。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Heap-scala"><a href="#Heap-scala" class="headerlink" title="Heap.scala"></a>Heap.scala</h2><p>第一周的代码下载下来之后，先来看一下Heap.scala这个文件。</p>
<p>这个文件里定义了很多个trait。现在只需要关注其中一个Heap。</p>
<p>这个就是所有其他trait都会去extend的基类（这个说法合适吗？）。<br>它定义了所有Heap的实现者都需要实现的方法。</p>
<p>然后BinomialHeap完整实现了Heap定义的所有东西。</p>
<p>Bogus1BinomialHeap到Bogus5BinomialHeap都是继承自BinomialHeap，其中各自覆盖了BinomialHeap的不同方法，以不同的方式引入了bug。<br>第一周作业的目的就是用ScalaCheck把其中的bug找出来。</p>
<p>这个文件里还有一个IntHeap，这个稍后再说。</p>
<p>实现代码其实就只有这一个文件，接下来看测试代码。</p>
<h2 id="QuickCheckSuite-scala"><a href="#QuickCheckSuite-scala" class="headerlink" title="QuickCheckSuite.scala"></a>QuickCheckSuite.scala</h2><p>这个文件里主要定义了QuickCheckSuite这个测试类。</p>
<p>这个测试类继承自FunSuite，这是ScalaTest的测试基类。同时mix in了Checkers，这是ScalaTest为了与ScalaCheck集成而提供的trait。</p>
<p>接下来看测试的case：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkBogus</span></span>(p: <span class="type">Prop</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> foundBug = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    check(p)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> e: <span class="type">TestFailedException</span> =&gt;</span><br><span class="line">      foundBug = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  assert(foundBug, <span class="string">&quot;A bogus heap should NOT satisfy all properties. Try to find the bug!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;Binomial heap satisfies properties.&quot;</span>) &#123;</span><br><span class="line">  check(<span class="keyword">new</span> <span class="type">QuickCheckHeap</span> <span class="keyword">with</span> <span class="type">BinomialHeap</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;Bogus (1) binomial heap does not satisfy properties.&quot;</span>) &#123;</span><br><span class="line">  checkBogus(<span class="keyword">new</span> <span class="type">QuickCheckHeap</span> <span class="keyword">with</span> <span class="type">Bogus1BinomialHeap</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;Bogus (2) binomial heap does not satisfy properties.&quot;</span>) &#123;</span><br><span class="line">  checkBogus(<span class="keyword">new</span> <span class="type">QuickCheckHeap</span> <span class="keyword">with</span> <span class="type">Bogus2BinomialHeap</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，每个case都调用了check这个方法，或者是check的变体-checkBogus。</p>
<p>checkBogus里面则调用了check，并且assert说一定要出现TestFailedException异常了，测试才算成功。也就是说checkBogus的目的就是要在某些Heap的实现中找到bug。</p>
<p>现在来看check这个方法本身。它接受一个类型为Prop的参数，这些参数从哪儿来呢？这些参数就是：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">QuickCheckHeap</span> <span class="keyword">with</span> <span class="type">BinomialHeap</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="type">QuickCheckHeap</span> <span class="keyword">with</span> <span class="type">Bogus1BinomialHeap</span></span><br></pre></td></tr></table></figure>
<p>这些代码。</p>
<p>这就意味着QuickCheckHeap一定要是一个Prop，是不是这样呢？</p>
<h2 id="QuickCheckHeap-scala"><a href="#QuickCheckHeap-scala" class="headerlink" title="QuickCheckHeap.scala"></a>QuickCheckHeap.scala</h2><p>那就到QuickCheckHeap.scala这个文件中来看一下。</p>
<p>可以看到QuickCheckHeap这个抽象类确实是extends了Properties，而properties又extends了Prop。那么，没问题，这个类型是匹配的。</p>
<p>QuickCheckHeap里可以定义任意多个property，这些property将会检查Heap的实现正确与否。</p>
<p>而且它还mix in了IntHeap，就是前面略过的那个trait。它的目的是锁定Heap这个trait里所定义的A这个元素的类型到Int。</p>
<h2 id="全部连起来"><a href="#全部连起来" class="headerlink" title="全部连起来"></a>全部连起来</h2><p>第一周作业的已有代码很少，有用的就是这三个文件。</p>
<p>Heap.scala定义了很多个Heap的不同实现。有些是正确的，有些是有bug的。</p>
<p>QuickCheckSuite.scala则是测试的入口点，它由JunitRunner拽着跑起来。<br>其中的test case使用ScalaCheck去检查对于Heap这种数据结构恒定为true的properties是不是hold住的。</p>
<p>对于Heap这种数据结构恒定为true的properties从哪儿来呢？就来自于QuickCheckHeap.scala。<br>QuickCheckHeap本身是一个抽象类，不可以被实例化。但是由于有了牛逼的trait，就可以用这种代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">QuickCheckHeap</span> <span class="keyword">with</span> <span class="type">BinomialHeap</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="type">QuickCheckHeap</span> <span class="keyword">with</span> <span class="type">Bogus1BinomialHeap</span></span><br></pre></td></tr></table></figure>
<p>创建出实例，进行测试了。</p>
<p>最后，我们的任务就是在QuickCheckHeap.scala添加更多的properties，把所有实现有误的Heap都揪出来。</p>
<h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>有没有发现QuickCheckHeap.scala里面有些奇怪的代码？</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">property(<span class="string">&quot;min1&quot;</span>) = forAll &#123; (heap: <span class="type">H</span>, a: <span class="type">A</span>) =&gt;</span><br><span class="line">  <span class="keyword">val</span> min = <span class="keyword">if</span> (isEmpty(heap)) a <span class="keyword">else</span> findMin(heap)</span><br><span class="line">  findMin(insert(min, heap)) == min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>property(“min should be min”)，这看起来像是一个方法调用啊。</p>
<p>尼玛，方法调用后面怎么跟着一个等号啊？等号后面还有一个有返回值的表达式啊？</p>
<p>这是啥啊？</p>
<p>这是个乍一看很自然，但是仔细一想很费解的Scala语言特性-update方法。</p>
<p>详情请见我之前的一篇博客：<a href="http://cuipengfei.me/blog/2014/06/12/scala-update-method/">http://cuipengfei.me/blog/2014/06/12/scala-update-method/</a></p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>MOOC</tag>
        <tag>Reactive</tag>
      </tags>
  </entry>
  <entry>
    <title>twu pecha kucha</title>
    <url>/blog/2015/04/22/twu-pecha-kucha/</url>
    <content><![CDATA[<iframe src="//slides.com/pengfeicui/deck-4/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
]]></content>
      <tags>
        <tag>TWU</tag>
      </tags>
  </entry>
  <entry>
    <title>Principles of Reactive Programming Week Two作业导学</title>
    <url>/blog/2015/04/26/principles-of-reactive-programming-week-2/</url>
    <content><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>这系列博文的目标读者仅限于报名参加了这门课并且看完了视频，看完了作业的instruction之后仍有困难的同学。</p>
<p>这系列博文不会公布作业的答案，那是违反Coursera的code of honor的。</p>
<p>我只会试着解释作业中已有的代码，以及应该如何入手。</p>
<p>其实，写这个系列博文对我的帮助比对读者的帮助要大。</p>
<p>这周的作业不太难，主要就是一个观察者模式。</p>
<h1 id="Signal是怎么work的？"><a href="#Signal是怎么work的？" class="headerlink" title="Signal是怎么work的？"></a>Signal是怎么work的？</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> a = <span class="type">Var</span>(<span class="number">1</span>)</span><br><span class="line">a: calculator.<span class="type">Var</span>[<span class="type">Int</span>] = calculator.<span class="type">Var</span>@<span class="number">7</span>ca6f5b9</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> b = <span class="type">Var</span>(<span class="number">2</span>)</span><br><span class="line">b: calculator.<span class="type">Var</span>[<span class="type">Int</span>] = calculator.<span class="type">Var</span>@<span class="number">2286</span>d26</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> c = <span class="type">Signal</span>(a() + b())</span><br><span class="line">c: calculator.<span class="type">Signal</span>[<span class="type">Int</span>] = calculator.<span class="type">Signal</span>@<span class="number">5</span>c60548d</span><br><span class="line"></span><br><span class="line">scala&gt; c()</span><br><span class="line">res8: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">scala&gt; a()=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">scala&gt; c()</span><br><span class="line">res10: <span class="type">Int</span> = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">scala&gt; b()=<span class="number">20</span></span><br><span class="line"></span><br><span class="line">scala&gt; c()</span><br><span class="line">res12: <span class="type">Int</span> = <span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>如果能搞懂上面的代码是如何work的，作业题中需要用到Signal的地方就不会有太大问题了。</p>
<p>a&#x3D;1，b&#x3D;2，c&#x3D;a+b，所以c就是3。</p>
<p>a变成10之后c就变成了12（10+2）。</p>
<p>b再变成20之后，c就变成了30（10+29）。</p>
<p>这个级联的变化是如何发生的呢？</p>
<p>有两个关键点：</p>
<ul>
<li>Signal的constructor</li>
<li>Signal的update方法</li>
</ul>
<p>先看Signal的constructor。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span>[<span class="type">T</span>](<span class="params">expr: =&gt; <span class="type">T</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是它的签名，关键在于expr的类型签名，expr的类型不是T，而是&#x3D;&gt;T。</p>
<p>这就意味着expr可以是任何类型为T的表达式，可以是一个字面量，也可以是任意复杂的代码块。</p>
<p>比如Signal(123)是可以的，Signal(complicatedMethodCall())也可以。</p>
<p>最上面那块代码中的val c &#x3D; Signal(a() + b())就属于后一种。</p>
<p>a() + b()不会被立即求值成3然后传入Signal的constructor，而是整体作为一个可以被反复求值的表达式被记录在Signal的实例中。</p>
<p>constructor的入口参数可以被反复求值是级联变化的基础，那是什么触发了真正的变化呢？</p>
<p>那就是关键点之二：update方法。</p>
<p>update方法的妙处在于，如果一个类A有update方法，那么：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">A</span>()</span><br><span class="line">x(y)=z</span><br></pre></td></tr></table></figure>

<p>在编译之后会变成这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">A</span>()</span><br><span class="line">x.update(y,z)</span><br></pre></td></tr></table></figure>

<p>详情请见我之前的一篇博客：<a href="http://cuipengfei.me/blog/2014/06/12/scala-update-method/">http://cuipengfei.me/blog/2014/06/12/scala-update-method/</a></p>
<p>Signal的update方法是protected的，不可访问，所以它只可以从变，不可自变。</p>
<p>而Var把update方法public出来了，这样，在下面这样的代码执行时：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">a()=<span class="number">10</span></span><br><span class="line"><span class="comment">//a.update(10)</span></span><br></pre></td></tr></table></figure>

<p>a就会通知它的observers去重新求值。<br>这样就实现了a或者b这样的Var变化的时候，c这样的Signal跟着变化的效果。</p>
<p>搞懂了上面的内容就足以去做作业了。</p>
<h1 id="怎么和html页面结合起来的？"><a href="#怎么和html页面结合起来的？" class="headerlink" title="怎么和html页面结合起来的？"></a>怎么和html页面结合起来的？</h1><p>执行instruction里提到的webUI&#x2F;fastOptJS这个task就会把Scala作业代码编译成js。</p>
<p>这个task是scalajs这个dependency带进来的（在webui.sbt里）。</p>
<p>webui这个项目里有一个CalculatorUI.scala文件，也会被编译成js。其中的代码就把作业代码和html的UI结合起来了。</p>
<p>就是这样了，这周的作业不难懂也不太难做。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>MOOC</tag>
        <tag>Reactive</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式的尴尬就像用菜刀开啤酒</title>
    <url>/blog/2015/05/27/trait-and-fp-makes-strategy-pattern-irrelevant/</url>
    <content><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote>
<p>策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。</p>
</blockquote>
<p>以上是中文wiki中对策略模式的定义。</p>
<blockquote>
<p>In computer programming, the strategy pattern (also known as the policy pattern) is a software design pattern that enables an algorithm’s behavior to be selected at runtime. The strategy pattern:</p>
</blockquote>
<ul>
<li>defines a family of algorithms,</li>
<li>encapsulates each algorithm, and</li>
<li>makes the algorithms interchangeable within that family.</li>
</ul>
<blockquote>
<p>Strategy lets the algorithm vary independently from clients that use it.</p>
</blockquote>
<p>以上是英文版的。</p>
<h1 id="鸭子"><a href="#鸭子" class="headerlink" title="鸭子"></a>鸭子</h1><p>这种偏学术性的描述实在太绕嘴，来思考一个实例：</p>
<p>我们需要创建一些鸭子，鸭子有什么行为呢？</p>
<ul>
<li>鸭子会飞</li>
<li>会叫</li>
<li>会游泳</li>
</ul>
<p>不过，是否所有的鸭子都是这样呢？万一是玩具鸭子呢？万一是猎人放在水里的用来勾引公鸭子的木质母鸭子呢？万一是外星来客太空鸭呢？</p>
<p>你已经知道什么意思了。</p>
<p>鸭子的各个子类的飞和叫的行为不尽相同。所以我们想把飞和叫这两种行为独立开来，让它们可以自由组合在鸭子的不同子类中。</p>
<p>以上例子来自著名的《Head first design patterns》。</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>以下是《Head first design patterns》附带的代码：</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategy%2Ffly%2FFlyBehavior.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategy%2Ffly%2FFlyWithWings.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategy%2Ffly%2FFlyNoWay.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>飞行的接口，以及两个实现：一个真会飞，一个不会飞。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategy%2Fquack%2FQuackBehavior.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategy%2Fquack%2FQuack.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategy%2Fquack%2FMuteQuack.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>叫的接口，两个实现，一个真会叫，一个不会叫。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategy%2Fducks%2FDuck.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategy%2Fducks%2FMallardDuck.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategy%2Fducks%2FDecoyDuck.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>最后，终于到了鸭子。鸭子的顶层抽象类声明两个字段，一个用来飞，一个用来叫。</p>
<p>这样在子类里就可以把这两个字段锁定到某个特定的实现，以实现任意的组合。</p>
<p>可以看到，绿头鸭（mallard）组合了真会飞和真会叫。而诱饵鸭（decoy，猎人用来勾引鸭子上钩的那个）则组合了不会飞和不会叫。</p>
<p>可以想象随着飞和叫这两个家族的扩大，我们可以组合出更多种类的鸭子来。</p>
<p>很好，很灵活，很强大，对吧？</p>
<h2 id="不过再想一下"><a href="#不过再想一下" class="headerlink" title="不过再想一下"></a>不过再想一下</h2><p>我们想要的不过是把两个家族的不同行为塞到鸭子的子类里去。是否有更容易的办法来做到呢？</p>
<h1 id="trait"><a href="#trait" class="headerlink" title="trait"></a>trait</h1><p>一说到把行为塞到某个类里，就会想到mix in，很自然就想到了Scala的trait。</p>
<p>更多关于Scala的trait的详情请参考我的另一篇博客： <a href="http://cuipengfei.me/blog/2013/10/13/scala-trait/">http://cuipengfei.me/blog/2013/10/13/scala-trait/</a></p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2Fstrategytrait%2FFly.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>飞行家族。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2Fstrategytrait%2FQuack.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>叫的行为的家族。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2Fstrategytrait%2FDuck.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>最后，鸭子的各种实现。</p>
<p>貌似和Java版的实现差距不大，飞和叫的interface和class变成了trait。</p>
<p>Duck原来是持有Fly和Quack的实例，现在则是变成了混入Fly和Quack这两个trait。</p>
<p>这个代码比Java短一些，紧凑一些，构造函数中的赋值变成了类型声明时的混入。</p>
<h2 id="不过再想一下-1"><a href="#不过再想一下-1" class="headerlink" title="不过再想一下"></a>不过再想一下</h2><p>我们不过是想要把某种行为塞入到某个类里面去，真的有必要用interface，class，trait来把这些行为包裹起来吗？</p>
<p>行为通常是以哪种形式承载的呢？</p>
<h1 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h1><p>行为通常是以函数承载的。</p>
<p>也就是说我们想要做的不过是把符合某个签名的函数塞到鸭子的子类里去而已，而却用interface，class，trait来把这些行为包裹起来了。有些臃肿不是吗？</p>
<p>下面是直接把函数塞入鸭子子类的做法：</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2Fstrategyfp%2FDuck.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>Fly和Quack不再是interface或者是trait。而是type aliase。</p>
<p>Scala的type aliase就类似于C#的delegate，用来声明function signature。</p>
<p>更多关于type aliase的更多详情请参考我的另一篇博客： <a href="http://cuipengfei.me/blog/2013/12/23/desugar-scala-4/">http://cuipengfei.me/blog/2013/12/23/desugar-scala-4/</a></p>
<p>这样，会飞不会飞，会叫不会叫就无需被class或者trait包裹着了，直接就是一个个的函数。</p>
<p>鸭子的子类通过构造函数接收飞和叫的两个函数作为参数，就能够组合不同的行为了。</p>
<p>如果说之前triat的实现方式与Java实现版相比偏重了inheritance而不是composition，这一版的实现则又回到了纯composition的路上了。</p>
<p>紧凑程度，实体数量都比以上两版有改进。这一点从行数上可以窥见：Java版63行，trait版29行，最后一版21行。</p>
<h1 id="菜刀开啤酒"><a href="#菜刀开啤酒" class="headerlink" title="菜刀开啤酒"></a>菜刀开啤酒</h1><p>最后回到标题上去：菜刀开啤酒，意即用不合适的工具解决问题。</p>
<p>strategy patten要解决的问题其实就是如何把一族行为的不同实现注入到某个类里去。</p>
<p>这一点，最开头的wiki定义已经说的很明白了：</p>
<blockquote>
<p>Strategy lets the algorithm vary independently from clients that use it.</p>
</blockquote>
<p>无论是class，还是function，都是为程序员提供抽象的手段。当我们想要抽象的东西就是一段algorithm（正如wiki所说）的时候，用function来做抽象就是更加轻量且合适的选择。</p>
<p>该模式提出的时候FP并不如今日盛行，其作者选用纯OO的方式解决了问题，并广为传播，实为功德。</p>
<p>不过今天我们有了开瓶器，就无需一定要用菜刀了。</p>
<p>最后是一个Java 8的实现：</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Ftree%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategyj8%2FFly.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Ftree%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategyj8%2FQuack.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Ftree%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategyj8%2FBehaviorsRepo.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Ftree%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategyj8%2FDuck.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Ftree%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategyj8%2FMallardDuck.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Ftree%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fstrategyj8%2FDecoyDuck.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>看起来比最开始的那一版好一些，但是我还是看它不顺眼。</p>
<p>为什么呢？</p>
<p>一定是由于我强烈的偏见而没有其他任何原因，一定是这样的。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>OODP</tag>
      </tags>
  </entry>
  <entry>
    <title>职责链模式的别扭就像用门框夹核桃</title>
    <url>/blog/2015/05/30/fp-implementation-of-chain-of-responsibility/</url>
    <content><![CDATA[<h1 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h1><blockquote>
<p>责任链模式在面向对象程式设计里是一种软件设计模式，它包含了一些命令对象和一系列的处理对象。每一个处理对象决定它能处理哪些命令对象，它也知道如何将它不能处理的命令对象传递给该链中的下一个处理对象。该模式还描述了往该处理链的末尾添加新的处理对象的方法。</p>
</blockquote>
<p>以上是wiki对职责链模式的定义。</p>
<p>举个例子来说，我们的系统中需要记录日志的功能。日志需要根据优先级被发送到不同的地方。</p>
<p>低优先级的日志输出到命令行就好了。而高优先级的错误信息则需要通过邮件通知相关人员并且输出到命令行。</p>
<p>这个例子也是来自wiki的。</p>
<p>以下是wiki提供的Java实现：</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fchainofresponsibility%2FLogger.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>首先定义一个Logger抽象类。从其setNext和message这两个方法可以看出，我们后面会把多个具有不同writeMessage实现的Logger链到一起，并且依次让它们处理某件需要被记录的事件。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fchainofresponsibility%2FStdoutLogger.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fchainofresponsibility%2FEmailLogger.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fchainofresponsibility%2FStderrLogger.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>然后有三个Logger的实现，分别为向命令行输出消息，发送邮件（当然是假的），向命令行输出错误。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fchainofresponsibility%2FChainOfResponsibilityExample.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>最后，有一个main函数，创建三个Logger的实例，把它们通过setNext链在一起。 只需要调用一次message就可以让三个Logger依次工作。</p>
<p>如果以后再有更多的Logger呢，还是可以通过同样的方式把它们链接起来协同工作。</p>
<p>很好，很强大，很易于扩展，对吧？</p>
<h2 id="不过再想一下"><a href="#不过再想一下" class="headerlink" title="不过再想一下"></a>不过再想一下</h2><p>这三个Logger的实现类看起来都非常的单薄，弱不禁风。</p>
<p>一个接收mask的构造函数，其唯一职责就是把接收到的mask传递给父类的构造函数。</p>
<p>然后父类根据mask和所发生事件优先级的大小关系决定到底要不要调用子类实现的writeMessage方法。</p>
<p>也就是说，子类完全没有定义自己的实例级状态，其实例级方法的行为也就谈不上随着其状态的变化而变化了。</p>
<p>换句话说，这几个子类存在的价值就在于为父类提供writeMessage这个函数。</p>
<p>啊。。。。。。！</p>
<p>一说到提供函数，我就想到了。。。。。。</p>
<h1 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h1><p>我想到的自然是FP了，既然需要的是函数，那我们就使用函数好了。</p>
<p>何必用更重的抽象手段：类，去包裹函数呢？</p>
<p>下面就是比较偏函数式的Scala实现：</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2Fchain%2FLoggers.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>这个代码已经简短到我不想解释的程度了。不过还是解释一下吧。</p>
<p>三个log的的等级ERR，NOTICE和DEBUG和之前Java的实现是一样的。</p>
<p>一个case class Event，用来包裹需要被log的事件。</p>
<p>type Logger则是声明了一个函数签名，凡是符合这个签名的函数都可以作为logger被使用。</p>
<p>然后便是三个函数实现，它们将mask通过闭包封进函数内。这三个函数共同依赖一个私有handleEvent函数，其作用和Java代码中的message类似，判断mask和正在发生的事件之间优先级大小关系，并以此决定当前logger是否需要处理该事件。</p>
<p>哎？等一下，这个是职责链模式啊，那个啥，链在哪儿呢？就在main函数里。其中的andThen就可以把三个logger链在一起。</p>
<p>这个andThen是个什么东西？何以如此神奇？</p>
<p>欲知详情，请参考我之前的另一篇博客： <a href="http://cuipengfei.me/blog/2013/12/30/desugar-scala-9/">http://cuipengfei.me/blog/2013/12/30/desugar-scala-9/</a></p>
<p>而链接之后的结果本身也是一个函数，于是我们就可以调用chain并传入Event了。</p>
<p>这份代码和前面Java版的行为是等价的，输出是一致的。</p>
<h1 id="门框夹核桃"><a href="#门框夹核桃" class="headerlink" title="门框夹核桃"></a>门框夹核桃</h1><p>最后回到标题上去：门框夹核桃，意即用不合适的工具解决问题。</p>
<p>职责链模式想要做到的事情其实就是把多个函数链起来调用。</p>
<p>该模式提出的时候FP并不如今日盛行，其作者选用类来包装需要被链接的多个函数，这无可厚非。</p>
<p>无论是class，还是function，都是为程序员提供抽象的手段。当我们想要链接的东西就是多个function，选择直接用function而非class就会显得更加自然，也更加轻量且合适。</p>
<p>当年design pattern的作者广为传播各种patterns，实为功德。</p>
<p>不过今天我们有了核桃夹，就无需一定要用门框了。</p>
<p>最后，依照惯例，羞辱Java一小下下。<br>以上wiki提供的实现有77行，偏FP风的实现只有38行，只有一个实体Event。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>OODP</tag>
      </tags>
  </entry>
  <entry>
    <title>解释器模式：OOP versus Functional Decomposition</title>
    <url>/blog/2015/06/05/interpreter-pattern-oop-versus-functional-decomposition/</url>
    <content><![CDATA[<h1 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h1><blockquote>
<p>In computer programming, the interpreter pattern is a design pattern that specifies how to evaluate sentences in a language. The basic idea is to have a class for each symbol (terminal or nonterminal) in a specialized computer language. The syntax tree of a sentence in the language is an instance of the composite pattern and is used to evaluate (interpret) the sentence for a client.</p>
</blockquote>
<p>以上是wiki对解释器模式的描述。</p>
<p>这是一个学术性稍强的模式，不太好找到生活化的比喻。</p>
<p>就直接上代码吧。</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先有一个表达式的接口，定义一个求值的方法，该方法接收一个String -&gt; Expression的map。</p>
<p>可以猜到，这个map就是该表达式求值的时候需要用到的context。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Plus</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    Expression leftOperand;</span><br><span class="line">    Expression rightOperand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Plus</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        leftOperand = left;</span><br><span class="line">        rightOperand = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> leftOperand.interpret(variables) + rightOperand.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Minus</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    Expression leftOperand;</span><br><span class="line">    Expression rightOperand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Minus</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        leftOperand = left;</span><br><span class="line">        rightOperand = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> leftOperand.interpret(variables) - rightOperand.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Number</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Variable</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Variable</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == variables.get(name)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> variables.get(name).interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后有表达式的四个实现类：加法表达式，减法表达式，数字表达式，还有变量。</p>
<p>数字表达式在求值的时候就直接返回它被创建时拿到的数字就好了，这是最简单的。</p>
<p>加法和减法的interpret方法在求值的时候仅仅是把行为委托给了两个子表达式，再对子表达式的求值结果做加减法。</p>
<p>变量在求值的时候则是去context里面寻找其name对应的表达式（也就是它所指向的表达式），然后对其求值。</p>
<p>下面是对它们的结合使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterpreterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Expression&gt; context = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        context.put(<span class="string">&quot;w&quot;</span>, <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">5</span>));</span><br><span class="line">        context.put(<span class="string">&quot;x&quot;</span>, <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>));</span><br><span class="line">        context.put(<span class="string">&quot;z&quot;</span>, <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">42</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Plus</span> <span class="variable">expr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Plus</span>(<span class="keyword">new</span> <span class="title class_">Variable</span>(<span class="string">&quot;w&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Minus</span>(<span class="keyword">new</span> <span class="title class_">Variable</span>(<span class="string">&quot;x&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Variable</span>(<span class="string">&quot;z&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(expr.interpret(context));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先构造一个context，里面有w，x，z三个数字。然后计算w+(x-z)的值（看着像不像Lisp？）。</p>
<h2 id="不过再想一下"><a href="#不过再想一下" class="headerlink" title="不过再想一下"></a>不过再想一下</h2><p>这些代码实际做的是什么事呢？</p>
<p>实际就是把一个以遇到Number为退出条件的递归算法拆碎了。</p>
<p>如果我们不把它拆碎，就写成递归函数会如何呢？</p>
<h1 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h1><p>用Scala试着实现一下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span>(<span class="params">left: <span class="type">Expr</span>, right: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span>(<span class="params">left: <span class="type">Expr</span>, right: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Var</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ExprEval</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>(expr: <span class="type">Expr</span>, context: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Expr</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    expr <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Plus</span>(l, r) =&gt; eval(l, context) + eval(r, context)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Minus</span>(l, r) =&gt; eval(l, context) - eval(r, context)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Var</span>(name) =&gt; eval(context(name), context)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> context = <span class="type">Map</span>(<span class="string">&quot;w&quot;</span> -&gt; <span class="type">Number</span>(<span class="number">5</span>), <span class="string">&quot;x&quot;</span> -&gt; <span class="type">Number</span>(<span class="number">10</span>), <span class="string">&quot;z&quot;</span> -&gt; <span class="type">Number</span>(<span class="number">42</span>))</span><br><span class="line">    <span class="keyword">val</span> expr = <span class="type">Plus</span>(<span class="type">Var</span>(<span class="string">&quot;w&quot;</span>), <span class="type">Minus</span>(<span class="type">Var</span>(<span class="string">&quot;x&quot;</span>), <span class="type">Var</span>(<span class="string">&quot;z&quot;</span>)))</span><br><span class="line">    println(eval(expr, context))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是全部代码，与Java版等价。<br>递归函数很容易看懂，其退出条件也很容易看出来。</p>
<p>69行代码变成了26行。</p>
<p>四个case class代表四种表达式，其中并没有什么方法，只是用来作为数据的承载者。</p>
<p>一个eval函数，用pattern match来对四种表达式进行不同的处理。</p>
<p>不过这次我倒不是要宣扬说解释器模式属于是用不合适的工具解决问题。</p>
<p>而是要介绍两种组织代码的方式：按行组织还是按列组织。</p>
<h1 id="按行组织代码与按列组织代码"><a href="#按行组织代码与按列组织代码" class="headerlink" title="按行组织代码与按列组织代码"></a>按行组织代码与按列组织代码</h1><p>昨天我在看解释器模式，准备写一个Java实现，再写一个Scala实现，并以此来达到我黑Java的阴暗目的。</p>
<p>但是看了wiki上的示例代码后，马上就想起了去年上过的一门MOOC：<a href="https://www.coursera.org/course/proglang">《Programming languages》</a>。<br>（这门课是由华盛顿大学的Dan Grossman教授讲授的，内容极好，强烈推荐。）</p>
<p>这门课里有一节就提到了上面说的两种组织代码的方式：按行组织还是按列组织。<br>这节课的视频在这里：<a href="https://www.youtube.com/watch?v=uEHnI3pq_FM">https://www.youtube.com/watch?v=uEHnI3pq_FM）</a></p>
<p>比如我们上面的两版代码，Java代码把对表达式的求值分散在每个不同的表达式类里。</p>
<p>而Scala代码把求值代码集中写在一个函数里，pattern match每种表达式类型并求值。</p>
<p>如果要做成一个表格的话，就是这样的：</p>
<p><img data-src="http://ww2.sinaimg.cn/large/8b1ece2agw1esug8rpnudj207o0bwt8v.jpg" alt="table"></p>
<p>其中的问号代表具体的求值实现。</p>
<p>Java代码横向组织，有一个Plus类，里面有interpret方法，有一个Minus类，里面有interpret方法，等等。这是按照行组织。</p>
<p>而Scala代码则纵向组织，有一个eval函数，纵向把四种表达式的求值都包揽了。这是按列组织。</p>
<p>上面的表格太小，看着不明显，现在假设我们需要打印表达式的功能。那么表格就会变成这样：</p>
<p><img data-src="http://ww4.sinaimg.cn/large/8b1ece2agw1esugg4y9wij20ba0c43yu.jpg" alt="table2"></p>
<p>可以想象，Java代码里会在每个表达式类里加一个toString函数的实现。横向扩展，一个类把数据和算法组织在一起。</p>
<p>而在Scala代码里则会写一个toString的递归函数，包揽所有字符串打印的工作。纵向扩展，一个函数去分辨数据类型，并据此选择计算策略。</p>
<h1 id="OOP-versus-Functional-Decomposition"><a href="#OOP-versus-Functional-Decomposition" class="headerlink" title="OOP versus Functional Decomposition"></a>OOP versus Functional Decomposition</h1><p>那到底哪种组织方式更好呢？</p>
<p>并没有确定的答案，Dan Grossman教授在课程中给出的解释是这样的：</p>
<blockquote>
<p>FP and OOP often doing the same thing in exact opposite way: organize the program “by rows” or “by columns”.<br>Which is “most natural” may depend on what you are doing (e.g., an interpreter vs. a GUI) or personal taste.</p>
</blockquote>
<p>到底如何组织取决于你想要解决什么样的问题，比如你要做一个GUI库，那么数据与算法放在一起，互相接近是最自然的组织方式。这时选择OOP是最好的设计决策。</p>
<p>而如果你要实现的东西类似于本文中的解释器，那么一个递归的算法来统一处理所有表达式类型则是最自然的。这时选择Functional Decomposition是最好的设计决策。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>OOP与Functional Decomposition，这二者并不是完全对立的。</p>
<p>熟练掌握多种抽象与代码组织方式，正确识别应用场景，据此选择合适的范式，或者是选择多种范式结合使用，才是这一系列博文的真实用意。</p>
<p>只不过由于传统的OO设计模式过于盛行，FP范式接受度不够，才会有这一系列博文黑Java，捧Scala的表象。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>OODP</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式的不爽就像用指甲刀刮胡子</title>
    <url>/blog/2015/06/01/command-pattern-fp-implementation/</url>
    <content><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><blockquote>
<p>在面向对象程式设计的范畴中，命令模式是一种设计模式，它尝试以物件来代表实际行动。命令物件可以把行动(action) 及其参数封装起来，于是这些行动可以被：</p>
</blockquote>
<blockquote>
<ul>
<li>重复多次</li>
<li>取消（如果该物件有实作的话）</li>
<li>取消后又再重做</li>
</ul>
</blockquote>
<p>以上是wiki对命令模式的定义（术语像是台湾的）。</p>
<p>下面是来自《Head first design patterns》的一个例子：</p>
<p>假设你有很多家用电器：电灯泡，电视，音响，还有一个水疗浴缸。（就是没有手电筒）</p>
<p>每个家用电器都有自己的开关装置，处于不同的位置。如果你想把它们都开启，需要一个一个地去按按钮。</p>
<p>现在你想要有一个遥控器，一键开启所有电器，一键关闭所有电器。</p>
<p>或者是一键完成任意的电器操作组合。</p>
<p>每个电器的接口都是不同的，但是又需要和同一个遥控器集成，于是呢，肯定要有一个统一的接口了。</p>
<p>于是就有了下面命令模式的实现代码。</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fappliances%2FLight.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fappliances%2FTV.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fappliances%2FStereo.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fappliances%2FHottub.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>首先是有四大件家用电器。各自之间没有什么关系。</p>
<p>这里面的代码都有点傻，不过没关系，我们就想象这都是些很复杂的硬件通信之类的代码就好了。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2FCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>然后，定义一个Command接口，其中只有一个execute()方法。</p>
<p>之后我们会用它的实现类来操作各种电器。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fcommands%2FLightOnCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fcommands%2FLightOffCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fcommands%2FTVOnCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fcommands%2FTVOffCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fcommands%2FStereoOnCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fcommands%2FStereoOffCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fcommands%2FHottubOnCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Fcommands%2FHottubOffCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>这一大坨，就是Command的实现了。</p>
<p>四大件电器，于是便有八个Command，分别负责每个电器的开启和关闭。</p>
<p>有些电器的开启和关闭比别的要复杂一些，不过这没有关系，因为它们的细节都被封装在Command的实现类里面了，我们接下来的代码只要和Command这个接口打交道就好了。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2FMacroCommand.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>还有一个宏命令，用来组合其他命令。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Frunner%2FRemoteControl.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>可以实现遥控器了。</p>
<p><img data-src="http://elisabethrobson.com/wp-content/uploads/2014/07/Command.jpg" alt="http:&#x2F;&#x2F;elisabethrobson.com&#x2F;wp-content&#x2F;uploads&#x2F;2014&#x2F;07&#x2F;Command.jpg"></p>
<p>这个遥控器上的按钮都是空白的，我们可以给它置入任意我们想要的命令。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2Fcommand%2Frunner%2FRemoteLoader.java&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>终于可以写一个main函数了：</p>
<ul>
<li>把家用电器和其对应的Command联系起来</li>
<li>把各种Command组合成开启和关闭两个宏命令</li>
<li>把宏命令置入遥控器</li>
</ul>
<p>然后，只要按一个按钮，就可以开启所有电器，享受资产阶级奢靡的生活了。</p>
<p>享受够了之后只要再按一个按钮就可以把所有电器关闭掉。</p>
<p>如果再有别的电器，只需要实现几个新的Command，把新的Command组合入宏命令，继续使用遥控器就好了。</p>
<p>换句话说，因为遥控器和电器之间通过Command解耦了，增加新的电器和新的Command对于遥控器没有影响，遥控器的代码是稳定的。这也就是所谓的对扩展开放，对修改关闭。</p>
<p>很好，很符合良好的设计原则，看着就舒服对吧？</p>
<h2 id="不过再想一下"><a href="#不过再想一下" class="headerlink" title="不过再想一下"></a>不过再想一下</h2><p>电灯的开启和关闭这两个命令仅仅是对电灯的两个方法的简单代理。</p>
<p>音响的开启和关闭这两个命令仅仅是对音响的两个方法的简单代理。</p>
<p>电视机的关闭也是简单的代理。</p>
<p>这些命令类是否看起来太单薄了呢？它们的方法异常瘦弱，营养不良。</p>
<p>它们除了持有一个需要操作的电器的实例之外，基本没有什么实例级状态。</p>
<p>（电视开机还好，由于需要选择频道，好歹调用了两个方法。<br>水疗浴缸操作比较复杂，需要调节温度，所以也还稍微好一些。）</p>
<p>每次看到这种贫血的类，我就怀疑它们存在的必要性。</p>
<p>如果我们只是想要给家用电器内的方法构造一个统一个的对外接口，是不是可以用函数式来实现呢？</p>
<h1 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h1><p>来试试用Scala实现：</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2FcommandFP%2Fappliances%2FLight.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2FcommandFP%2Fappliances%2FTV.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2FcommandFP%2Fappliances%2FStereo.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2FcommandFP%2Fappliances%2FHottub.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>首先是有四大件家用电器，这部分和Java的代码等价。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2FcommandFP%2FCommands.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>这一段用来定义各种命令的代码就不同了。</p>
<p>我们对家用电器的各种方法的调用都是只期待其副作用，不期待任何返回值的。所以可以定义一个函数签名Command来涵盖所有这类操作。</p>
<p>和上面的Java代码类似，这里也有一个宏命令，只不过实现简单一些。</p>
<p>电视的开启，水疗浴缸的开和关都有对应的方法来把家用电器的实例封入闭包中。</p>
<p>咦？电灯的开关，音响的开关，以及电视的关闭都跑哪儿去了呢？</p>
<p>由于这几个操作都只涉及到一个方法的调用，它们直接就符合Command的函数签名，所以不用再封入任何闭包了。这一点看下面的代码就明白了。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2FcommandFP%2FRemoteControl.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2FcommandFP%2FRemoteLoader.scala&style=hybrid&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>我们可以定义一个遥控器。其中有开启，和关闭两排按钮。</p>
<p>最后，可以写一个main函数，其中所做的事情和之前Java代码main函数所做的事情是一样的。</p>
<p>只不过，不需要创建各种Command的实例。</p>
<p>而且light.on，stereo.on，light.off，stereo.off，tv.off这几个方法由于符合Command的签名，是可以直接拿来当Command用的。（注意方法名后面没有()，不是调用，而是函数传递）</p>
<p>前后两版代码是等价的。只不过：</p>
<ul>
<li>247行代码变成了93行代码</li>
<li>16个实体变成了7个</li>
</ul>
<p>作为一个多按几个按钮都嫌麻烦的好逸恶劳的资产阶级，这个结果是我所乐于见到的。</p>
<p>更少，更紧凑的代码。更少的实体。我终于可以用更小的成本来享受我昂贵的家用电器了。</p>
<h1 id="指甲刀刮胡子"><a href="#指甲刀刮胡子" class="headerlink" title="指甲刀刮胡子"></a>指甲刀刮胡子</h1><p>最后回到标题上去：指甲刀刮胡子，意即用不合适的工具解决问题。</p>
<p>命令模式想要做到的事情其实就是给各种不同的操作寻找一个统一的接口，从而实现调用者（遥控器）和被调用者（家用电器）之间的解耦。</p>
<p>给不同的操作寻找一个统一的接口这件事可以通过接口来做，但是我们同时要承担写一堆贫血类的代价。</p>
<p>而如果直接用函数来做的话，则可以得到更紧凑简洁的代码（就像object Commands这个实体内的代码一样）。</p>
<p>该模式提出的时候FP并不如今日盛行，其作者选用了可能会导致贫血类泛滥的解决方案，这无可厚非。传播了解耦和开闭等良好设计的原则也实为功德。</p>
<p>不过今天我们有了剃须刀，就无需一定要用指甲刀来刮胡子了。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>OODP</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式 in FP：Mutation vs Transformation</title>
    <url>/blog/2015/06/13/observers-pattern-fp/</url>
    <content><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><blockquote>
<p>观察者模式（有时又被称为发布&#x2F;订阅模式）是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实作事件处理系统。</p>
</blockquote>
<p>以上是wiki对观察者模式的解释。</p>
<p>举一个《Head first design pattern》中的例子：</p>
<p>比如说有一个气象站，每当气象有变化的时候就需要显示当前天气。<br>需要显示历史平均气温，最高气温和最低气温。<br>还需要根据气压预测晴雨。</p>
<p>这种情况就很适合使用观察者模式，每种需要显示气象的装置作为观察者，气象数据本身作为可以被观察的对象。<br>每当气象变化的时候，被观察的对象就会通知观察者来根据新的数据作出新的显示。</p>
<p>以下是书中给出的代码：</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temp, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer o)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先定义两个接口，一个是观察者，接收新的气象数据。一个是被观察者，可以注册观察者以及通知观察者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherData</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer o)</span> &#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMeasurements</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来定义气象数据本身。代码很容易理解，把观察者保存在一个list里，每当气象数据变化的时候就通知这些观察者去做出新的处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> &#123;</span><br><span class="line">        weatherData.registerObserver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Current conditions: &quot;</span> + temperature</span><br><span class="line">                + <span class="string">&quot;F degrees and &quot;</span> + humidity + <span class="string">&quot;% humidity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatisticsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">maxTemp</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">minTemp</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">tempSum</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numReadings;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StatisticsDisplay</span><span class="params">(WeatherData weatherData)</span> &#123;</span><br><span class="line">        weatherData.registerObserver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temp, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        tempSum += temp;</span><br><span class="line">        numReadings++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (temp &gt; maxTemp) &#123;</span><br><span class="line">            maxTemp = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (temp &lt; minTemp) &#123;</span><br><span class="line">            minTemp = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Avg/Max/Min temperature = &quot;</span> + (tempSum / numReadings)</span><br><span class="line">                + <span class="string">&quot;/&quot;</span> + maxTemp + <span class="string">&quot;/&quot;</span> + minTemp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForecastDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">currentPressure</span> <span class="operator">=</span> <span class="number">29.92f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> lastPressure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ForecastDisplay</span><span class="params">(WeatherData weatherData)</span> &#123;</span><br><span class="line">        weatherData.registerObserver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temp, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        lastPressure = currentPressure;</span><br><span class="line">        currentPressure = pressure;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;Forecast: &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentPressure &gt; lastPressure) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Improving weather on the way!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentPressure == lastPressure) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;More of the same&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentPressure &lt; lastPressure) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Watch out for cooler, rainy weather&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后有三个观察者，分别负责显示当前气象，气象历史分析和晴雨预测。</p>
<p>CurrentConditionsDisplay是最简单的，没有任何状态，它只是负责在每次气象有变化的时候把最新的气象显示出来。</p>
<p>StatisticsDisplay复杂一点点，它需要记录历史气温，以便于计算平均温度，最高和最低气温。这是一个会有状态变化的对象。</p>
<p>ForecastDisplay也有状态变化，它需要记录上次的气压，以便于根据气压变化来预测晴雨。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherStation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeatherData</span> <span class="variable">weatherData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeatherData</span>();</span><br><span class="line">        <span class="type">CurrentConditionsDisplay</span> <span class="variable">currentDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CurrentConditionsDisplay</span>(weatherData);</span><br><span class="line">        <span class="type">StatisticsDisplay</span> <span class="variable">statisticsDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StatisticsDisplay</span>(weatherData);</span><br><span class="line">        <span class="type">ForecastDisplay</span> <span class="variable">forecastDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForecastDisplay</span>(weatherData);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">78</span>, <span class="number">90</span>, <span class="number">29.2f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，有一个main函数，把以上所有代码串起来。</p>
<p>三个观察者都在观察同一个气象数据，每当气象有变化的时候，三个观察者都会被通知，并作出相应处理。</p>
<p>如果我们需要其他的更复杂的气象显示装置，只需要实现Observer接口，注册到气象数据上去，那么在每次气象有变化的时候就可以收到通知并作出处理。不需要对已有代码做出任何改变。</p>
<p>很灵活，很强大，对吧？</p>
<h2 id="不过再想一下"><a href="#不过再想一下" class="headerlink" title="不过再想一下"></a>不过再想一下</h2><p>观察者模式有没有更好地实现方式呢？</p>
<p>答案肯定是有的。</p>
<p>C#的delegate和Event就是一种用来实现观察者模式的很好的语言特性。它在语言级别为添加事件订阅和取消订阅提供了支持。</p>
<p>不过这一篇博客主要是想要讲一个immutable的观察者模式实现，C#就不多讲了。</p>
<p>可以想一下，上面的Java代码里的三个观察者，CurrentConditionsDisplay是没有任何状态变化的，它存在的意义仅在于其update方法。<br>而这个方法每次都是接受最新的气象数据，并作出输出。</p>
<p>StatisticsDisplay和ForecastDisplay则是截取气象历史数据不同的片段，将其作为可变状态封装在内部，并据其状态的改变决定update方法的行为。</p>
<p>这样看来，如果我们有一种方式，可以提供完整的气象数据历史，那么这三个观察者就都可以各取所需，而不需要拥有自己的可变状态了。</p>
<p>具体该怎么做呢？</p>
<h1 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h1><p>以下是Scala的实现：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span>(<span class="params">temperature: <span class="type">Float</span> = 0,</span></span></span><br><span class="line"><span class="params"><span class="class">                       humidity: <span class="type">Float</span> = 0,</span></span></span><br><span class="line"><span class="params"><span class="class">                       pressure: <span class="type">Float</span> = 0,</span></span></span><br><span class="line"><span class="params"><span class="class">                       observers: <span class="type">Seq</span>[<span class="type">Observer</span>] = <span class="type">Nil</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                       history: <span class="type">Seq</span>[<span class="type">WeatherData</span>] = <span class="type">Seq</span>(<span class="type">WeatherData</span>(history = <span class="type">Nil</span></span>))) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">register</span></span>(observer: <span class="type">Observer</span>) =</span><br><span class="line">    <span class="keyword">this</span>.copy(temperature, humidity, pressure, observers :+ observer, history)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">weatherChanged</span></span>(weatherData: <span class="type">WeatherData</span>) = &#123;</span><br><span class="line">    <span class="keyword">val</span> newHistory = history :+ weatherData</span><br><span class="line">    observers.foreach(observer =&gt; observer(newHistory))</span><br><span class="line">    <span class="keyword">this</span>.copy(temperature, humidity, pressure, observers, newHistory)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Observers</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">Observer</span> </span>= <span class="type">Seq</span>[<span class="type">WeatherData</span>] =&gt; <span class="type">Unit</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> currentConditionsDisplay: <span class="type">Observer</span> = history =&gt;</span><br><span class="line">    println(<span class="string">s&quot;Current conditions: &quot;</span> +</span><br><span class="line">      <span class="string">s&quot;<span class="subst">$&#123;history.last.temperature&#125;</span> F degrees and &quot;</span> +</span><br><span class="line">      <span class="string">s&quot;<span class="subst">$&#123;history.last.humidity&#125;</span> % humidity&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> statisticsDisplay: <span class="type">Observer</span> = history =&gt;</span><br><span class="line">    println(<span class="string">s&quot;Avg/Max/Min temperature = &quot;</span> +</span><br><span class="line">      <span class="string">s&quot;<span class="subst">$&#123;history.map(_.temperature).sum / history.size&#125;</span>&quot;</span> +</span><br><span class="line">      <span class="string">s&quot;/<span class="subst">$&#123;history.map(_.temperature).max&#125;</span>&quot;</span> +</span><br><span class="line">      <span class="string">s&quot;/<span class="subst">$&#123;history.map(_.temperature).max&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> forecastDisplay: <span class="type">Observer</span> = history =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> currentPressure = history.last.pressure</span><br><span class="line">    <span class="keyword">val</span> lastPressure = history.dropRight(<span class="number">1</span>).last.pressure</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;Forecast: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (currentPressure &gt; lastPressure) println(<span class="string">&quot;Improving weather on the way!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (currentPressure == lastPressure) println(<span class="string">&quot;More of the same&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (currentPressure &lt; lastPressure) println(<span class="string">&quot;Watch out for cooler, rainy weather&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> weatherData = <span class="type">WeatherData</span>()</span><br><span class="line">      .register(currentConditionsDisplay)</span><br><span class="line">      .register(statisticsDisplay)</span><br><span class="line">      .register(forecastDisplay)</span><br><span class="line"></span><br><span class="line">    weatherData</span><br><span class="line">      .weatherChanged(<span class="type">WeatherData</span>(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4</span>f))</span><br><span class="line">      .weatherChanged(<span class="type">WeatherData</span>(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2</span>f))</span><br><span class="line">      .weatherChanged(<span class="type">WeatherData</span>(<span class="number">78</span>, <span class="number">90</span>, <span class="number">29.2</span>f))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是Scala实现的全部代码了。</p>
<p>开始分析之前，先做一个极其复杂的数学运算：<br>106行的Java代码，等价于54行Scala代码。<br>7个类，变成了3个。</p>
<p>下面开始正经的分析。</p>
<p>首先有一个叫做WeatherData的case class，它是完全不可变的。</p>
<p>其register方法，接受一个新的Observer作为参数，并产生一个新的包含比原来多一个Observer的WeatherData实例。</p>
<p>其weatherChanged方法接受一个新的气象数据，生成一个新的历史数据Seq，并把目前为止包含所有历史气象数据的Seq传递给每一个Observer去做处理。最后返回一个包含最新历史数据的新的WeatherData实例。</p>
<p>那么这些Observer具体是怎么定义的呢？</p>
<p>首先Observer只是一个type，不是一个class，它是没有状态的，用来定义函数签名。</p>
<p>三个具体的display仅仅是三个符合Observer签名的函数，它们都接受气象历史数据作为参数，在历史数据中各取所需，作出处理。都是没有任何副作用的。<br>这很合理，毕竟只是display，仅需要对数据进行分析和显示，只读不写，没有什么要改变已有数据的必要性。</p>
<p>最后一个main函数把所有代码串起来，就得到了一份没有任何可变性的代码。</p>
<h1 id="Mutation-vs-Transformation"><a href="#Mutation-vs-Transformation" class="headerlink" title="Mutation vs Transformation"></a>Mutation vs Transformation</h1><p>在Java版的代码中，不同的显示设备不断地根据最新的气象数据改变自己的状态，并根据改变之后的状态来决定其update的行为。</p>
<p>而在Scala代码中，不同的显示设备没有状态，它们都仅仅是函数而已。它们在每次气象变化时根据全部气象历史数据决定自己的行为。</p>
<p>全部代码中没有重新赋值语句，所有的赋值操作都是对局部变量的赋值，程序员可以感知到的变化就只在于observers列表和history列表的增长。而即便是这两个数据结构的增长都是通过不断生成新的不可变的Seq来实现的。</p>
<p>总结来说，Java版代码通过改变已有数据来达成行为的改变。而Scala代码则通过利用不可变的函数和不断生成不可变的数据来实现行为的改变。</p>
<p>这种不可变的代码于什么优势呢？</p>
<p>其好处在于需要程序员操心的事情更少。变化的点越少，麻烦事越少。</p>
<p>如果以上的Java代码有问题，程序员除了需要检查计算平均气温，最高最低气温，气压变化的算法之外，还需要检查重新赋值语句所造成的效果。气温的sum是否算对了？测温次数是否算错了？气压变化是否记录对了？这些都是变化的点，这些都是导致错误的可能性之所在。</p>
<p>而在Scala代码中，如果代码有问题，同样需要检查算法的正确性，也就是检查不可变的函数的正确性。除此之外，只需要检查history列表的增长就可以了。而一个列表的增长是很难出错的。</p>
<p>Java中所有对象状态的改变分散在代码中不同的地方，到了Scala代码中它们都集中到了一个列表的增长上，仅仅通过对这个列表的transformation就驱动了其余全部代码的行为改变。减少了变化的点，就减少了出错的可能情况的数量，减少了程序员的负担。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>OODP</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式 in FP：Pattern Matching</title>
    <url>/blog/2015/06/16/visitor-pattern-pattern-match/</url>
    <content><![CDATA[<blockquote>
<p>访问者模式是一种将算法与对象结构分离的软件设计模式。</p>
</blockquote>
<blockquote>
<p>这个模式的基本想法如下：首先我们拥有一个由许多对象构成的对象结构，这些对象的类都拥有一个accept方法用来接受访问者对象；访问者是一个接口，它拥有一个visit方法，这个方法对访问到的对象结构中不同类型的元素作出不同的反应；在对象结构的一次访问过程中，我们遍历整个对象结构，对每一个元素都实施accept方法，在每一个元素的accept方法中回调访问者的visit方法，从而使访问者得以处理对象结构的每一个元素。我们可以针对对象结构设计不同的实在的访问者类来完成不同的操作。</p>
</blockquote>
<p>以上是wiki对访问者模式的定义。</p>
<p>这个定义着实难读。我们来看wiki给出的例子：</p>
<p>假设我们要为汽车建模，汽车有不同的组成部件，轮胎，车身，和引擎。</p>
<p>在开车之前需要先检查车辆每个部件的状况，然后依次启动所有部件以启动汽车。</p>
<p>在这里我们很容易识别出车的组件各自应该是一个实体。而对车辆组件进行检查和启动的代码应该分别处于不同的实体中。</p>
<p>这样就有了访问者的代码（来自wiki）：</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ICarElement</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ICarElementVisitor visitor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wheel</span> <span class="keyword">implements</span> <span class="title class_">ICarElement</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Wheel</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ICarElementVisitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span> <span class="keyword">implements</span> <span class="title class_">ICarElement</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ICarElementVisitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Body</span> <span class="keyword">implements</span> <span class="title class_">ICarElement</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ICarElementVisitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">ICarElement</span> &#123;</span><br><span class="line">    ICarElement[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elements = <span class="keyword">new</span> <span class="title class_">ICarElement</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Wheel</span>(<span class="string">&quot;front left&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Wheel</span>(<span class="string">&quot;front right&quot;</span>), <span class="keyword">new</span> <span class="title class_">Wheel</span>(<span class="string">&quot;back left&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Wheel</span>(<span class="string">&quot;back right&quot;</span>), <span class="keyword">new</span> <span class="title class_">Body</span>(), <span class="keyword">new</span> <span class="title class_">Engine</span>()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ICarElementVisitor visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ICarElement elem : elements) &#123;</span><br><span class="line">            elem.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先是汽车部件的实体。它们都实现同一个ICarElement的接口。<br>该接口定义一个accept方法，用来接受访问者然后用访问者来访问所有汽车部件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ICarElementVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Wheel wheel)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Engine engine)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Body body)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Car car)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarElementPrintVisitor</span> <span class="keyword">implements</span> <span class="title class_">ICarElementVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Wheel wheel)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Visiting &quot;</span> + wheel.getName() + <span class="string">&quot; wheel&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Engine engine)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Visiting engine&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Body body)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Visiting body&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Visiting car&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarElementDoVisitor</span> <span class="keyword">implements</span> <span class="title class_">ICarElementVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Wheel wheel)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Kicking my &quot;</span> + wheel.getName() + <span class="string">&quot; wheel&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Engine engine)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Starting my engine&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Body body)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Moving my body&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Starting my car&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就是访问者的实体。它们都实现ICarElementVisitor接口。<br>这个接口里定义的方法有点多，分别对应每个汽车部件定义了一个visit方法的重载。</p>
<p>在实现的时候自然是做检查的实体实现每个部件的检查，启动的实体实现每个部件的启动。</p>
<p>这里就有一个陷阱，如果代码发展的趋势是汽车部件的种类会增加的话，那这个接口就很不稳定。每增加一种汽车部件就要修改接口并且修改每个实现类。</p>
<p>而如果代码发展的趋势是在自检和启动之外加一些保养啊，洗车啊之类的话就没问题，不需要对已有代码进行修改。</p>
<p>所以使用访问者模式的时候要注意识别被访问者是否是相对稳定而访问者是有扩展趋势的，这样用这个模式才合适。</p>
<p>接下来的代码把以上所有代码串起来执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisitorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ICarElement</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        car.accept(<span class="keyword">new</span> <span class="title class_">CarElementPrintVisitor</span>());</span><br><span class="line">        car.accept(<span class="keyword">new</span> <span class="title class_">CarElementDoVisitor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从最后的main函数来看，只要能确保汽车部件的数量不会增加，而只有访问者增加，那么客户代码只需要增加一行就能够增加对整车进行清洗或者保养的行为。</p>
<p>车的部件和对部件的操作相互分离，独立发展。很灵活，很巧妙，对吧？</p>
<h2 id="不过再想一下"><a href="#不过再想一下" class="headerlink" title="不过再想一下"></a>不过再想一下</h2><p>其实也不需要使劲想了，如果你看过这一系列博文前面的几篇的话，想必已经能够猜到我的用意了。</p>
<p>这些访问者存在的意义就在于承载对汽车部件的某些具体操作，操作是个好听的词儿，说白了就是函数啊。</p>
<p>那既然这些类只是承载函数而已，何不直接就用函数而不费劲去用类包裹一层呢？</p>
<h1 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h1><p>那接下来就是用Scala的实现：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">CarElement</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">accept</span></span>(visitor: <span class="type">Visitor</span>) = visitor(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">CarElement</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">CarElement</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Wheel</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">CarElement</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">CarElement</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> elements: <span class="type">Seq</span>[<span class="type">CarElement</span>] = <span class="type">Seq</span>(</span><br><span class="line">    <span class="type">Wheel</span>(<span class="string">&quot;front left&quot;</span>), <span class="type">Wheel</span>(<span class="string">&quot;front right&quot;</span>),</span><br><span class="line">    <span class="type">Wheel</span>(<span class="string">&quot;back left&quot;</span>), <span class="type">Wheel</span>(<span class="string">&quot;back right&quot;</span>),</span><br><span class="line">    <span class="type">Body</span>(), <span class="type">Engine</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">accept</span></span>(visitor: <span class="type">Visitor</span>) = &#123;</span><br><span class="line">    elements.foreach(_.accept(visitor))</span><br><span class="line">    visitor(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是汽车各种部件的定义，和Java代码没有太大区别。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Visitors</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">Visitor</span> </span>= <span class="type">CarElement</span> =&gt; <span class="type">Unit</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> printVisitor: <span class="type">Visitor</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Wheel</span>(name) =&gt; println(<span class="string">s&quot;Visiting <span class="subst">$name</span> wheel&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Body</span>() =&gt; println(<span class="string">&quot;Visiting Body&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Engine</span>() =&gt; println(<span class="string">&quot;Visiting Engine&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Car</span>() =&gt; println(<span class="string">&quot;Visiting Car&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> doVisitor: <span class="type">Visitor</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Wheel</span>(name) =&gt; println(<span class="string">s&quot;Kicking my <span class="subst">$name</span> wheel&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Body</span>() =&gt; println(<span class="string">&quot;Moving my body&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Engine</span>() =&gt; println(<span class="string">&quot;Starting my engine&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Car</span>() =&gt; println(<span class="string">&quot;Starting my car&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这一段定义了一个叫做Visitor的type，它只是一个函数签名。任何接受一个汽车部件作为参数并且没有返回值的函数都符合它的签名，也就可以被视作Visitor。</p>
<p>接下来是两个符合Visitor签名的函数，都是用pattern match实现的。</p>
<p>pattern match这种神奇的语言特性是如何实现的呢？背后的原因并不神奇，更多详情请参考我之前的另一篇博客：<a href="http://cuipengfei.me/blog/2013/12/29/desugar-scala-8/">http://cuipengfei.me/blog/2013/12/29/desugar-scala-8/</a></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">VisitorDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> car = <span class="type">Car</span>()</span><br><span class="line">    car.accept(printVisitor)</span><br><span class="line">    car.accept(doVisitor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后定义一个main函数，与Java的main函数做的事情是等价的。</p>
<p>这样，100行变成了45行。Visitor不再作为臃肿的实体存在，而只是函数。</p>
<p>而且如果遵照同样的假设，认为车的部件是稳定的，而访问者是会增多的，那这段Scala代码的增长趋势是每加一个访问者就加一个函数。与Java代码的增长趋势相同。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这次分析的访问者模式和之前的一些模式很类似，当我们需要的实体仅仅是作为承载某种行为的一个载具，那就可以考虑将实体消去，而换用函数这种更简单，更轻量级的抽象方式来实现我们想要的东西。</p>
<p>当年OO模式出现的时候，FP并不盛行，原作者提出的方案无可厚非。不过我们今天有了FP这种更趁手的工具，就可以考虑在合适的时候将其与OO结合使用来达到更好的设计的目的。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>OODP</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法模式：子类型多态和高阶函数</title>
    <url>/blog/2015/06/23/template-method-pattern/</url>
    <content><![CDATA[<blockquote>
<p>模板方法模式定义了一个算法的步骤，并允许次类别为一个或多个步骤提供其实践方式。让次类别在不改变算法架构的情况下，重新定义算法中的某些步骤。</p>
</blockquote>
<p>以上是wiki对模板方法的定义。</p>
<p>比较容易理解，我们有一个算法，其中某些步骤是确定的不太会变的代码。而另外一些步骤则需要变化并且自由组合。</p>
<p>《Head First Design Patterns》里有一个🌰：</p>
<p>假设我们需要制作咖啡因饮品，其实就是咖啡和茶。制作步骤有些类似，分为四步：1烧水，2泡，3装杯，4加调料。</p>
<p>其中第一步和第三步是稳定的代码，变化可能性不大，而第二步和第四步则每种饮品有自己的风味。</p>
<p>这样就有了下面的代码：</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2FtemplatemethodJ%2FCaffeineBeverage.java&style=github&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>首先有一个咖啡因饮品的抽象类，定义一个算法骨架：1烧水，2泡，3装杯，4加调料。<br>其中的第二步和第四步是有待实现的抽象方法，留给子类决定怎么搞。第一步和第三步是写死的。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2FtemplatemethodJ%2FCoffee.java&style=github&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>接下来是咖啡，它实现了过滤咖啡和添加牛奶、糖的步骤。这样当它的实例的prepareRecipe方法被调用时就会执行父类的烧水、装杯，以及自己的泡和加调料。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2FtemplatemethodJ%2FTea.java&style=github&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>还有，就是茶了。它和咖啡不一样，是用浸泡而不是过滤，加的是柠檬而不是牛奶和糖。</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fjava%2FtemplatemethodJ%2FBeverageTestDrive.java&style=github&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>最后用一个main函数来执行制作咖啡和茶的代码。</p>
<p>很好，如果再有其他的咖啡因饮品，只需要增加一个子类，并且实现两个方法就好了。只要我们对于四个步骤的定义在该领域中足够稳定，这份代码就是很好很强大，易于扩展的。</p>
<p>有代码如此，夫复何求呢？</p>
<h2 id="不过再想一下"><a href="#不过再想一下" class="headerlink" title="不过再想一下"></a>不过再想一下</h2><p>这个模式想要达到的，不过是将一个算法的某些部分做的灵活一些，可以自由替换和组合。</p>
<p>那这个，不就是函数组合吗？如果我们使用的是允许高阶函数的语言的话，那还有什么必要把这些函数包装在类里呢？</p>
<h1 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h1><p>接下来是用Scala实现的版本：</p>
<script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Fcuipengfei%2FBlogCode%2Fblob%2Fmaster%2FOODPFP%2Fsrc%2Fmain%2Fscala%2FtemplatemethodS%2FBeverages.scala&style=github&showBorder=on&showFileMeta=on&showCopy=on"></script>

<p>首先，定义三个type，分别是泡和加调料这两个步骤，还有饮品本身（这三个type其实是一样的，看起来有点傻）。</p>
<p>然后有一个算法骨架，把第一和第三步锁死，把第二和第四步空出来，分别用一个参数来实现注入不同的实现。</p>
<p>接下来有泡和加调料的四种不同实现，分别是一个函数，符合各自的函数签名。</p>
<p>最后，用一个main函数来执行。可以看到，泡和加调料的函数是作为参数传入的。如果我们需要加牛奶和糖的茶，或者是柠檬味的咖啡的话，也会变得非常容易。</p>
<p>就这样，51行代码变成了28行。四个类变成了一个object。</p>
<p>而如果是要用子类型多态（subtype polymorphism）来做到这样的自由组合，那么我们需要的或许就是策略模式，把泡和加调料分别写成接口并提供不同的实现类来组合。可以想象，这会导致很多的boilerplate。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>Java代码中实现多态的方式是通过子类继承父类并且实现抽象方法来实现的。而Scala代码中则是通过把不同的函数传入骨架组合出一个新的函数来实现的。</p>
<p>子类型多态（subtype polymorphism）是个好东西，但是在某些场景下显得有点重。能用高阶函数这种轻量级的方式来实现的时候，就没有必要选择子类型多态这种过重的方式。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>OODP</tag>
      </tags>
  </entry>
  <entry>
    <title>2015第二季度</title>
    <url>/blog/2015/07/04/2015-second-season/</url>
    <content><![CDATA[<p>2015竟然这么快就过去一半了。逝者如斯夫。</p>
<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><p>第一季度总结的时候说：</p>
<blockquote>
<p>今年的博客主线任务定为OO与FP的比较和结合应用吧。</p>
</blockquote>
<p>这个任务完成的不错，这个主题写了7篇博客。</p>
<p>迭代器已经irrelevant了，中介者和备忘录太简单就没写，状态模式没找到好的FP实现方式。<br>这样11种行为模式除去上述4个，算是基本覆盖完了。</p>
<p>Principles of Reactive Programming作业导学写了两篇，后面的有点难，写不出来了。。。<br>这一点后面MOOC再说。</p>
<p>还有一篇gender pay gap的博客，算是今年到目前为止阅读量最多的得意之作。</p>
<p>在武汉做了一次学英语的workshop，在TWU做了pecha kucha，总结成了两篇。</p>
<p>这样，不算季度总结的博客，写了12篇，数量和内容自己都满意。和技术相关的还可以充当复习和刷新记忆的资料。</p>
<p>不错，博客这方面达标了。</p>
<h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p>这个季度比较惨。这一季度只读了五本书。</p>
<p>一部分原因在于TWU的日程太紧，一部分原因在于博客，MOOC和翻译占用的时间很多，不可兼得。</p>
<p>还好第一季度看书比较多，所以到目前为止这半年一共读过16本书，总体数量还不算太惨。</p>
<p>这十六本书里有7本有笔记，可以充当复习和刷新记忆的资料，而且效果很好。自己写的笔记，瞄一眼，整本书的内容和重点就全部复活。</p>
<p>不过看书的领域方面有点杂，2014总结的时候说：</p>
<blockquote>
<p>明年需要看一些轻量级的经济、哲学和社会心理学的书。</p>
</blockquote>
<p>这方面执行的不好。</p>
<p><img data-src="http://i1.tietuku.com/26b6dd870a313983.png" alt="http:&#x2F;&#x2F;i1.tietuku.com&#x2F;26b6dd870a313983.png"></p>
<p>于是建了一个trello，把2015下半年要读的书预先plan出来。每个月plan两三本，一部分符合上述他山之石的领域，一部分符合OOP和FP的技术主线。</p>
<p><img data-src="http://i1.tietuku.com/09607b3bd8c47d1d.png" alt="http:&#x2F;&#x2F;i1.tietuku.com&#x2F;09607b3bd8c47d1d.png"></p>
<p>这样plan的数量并不大，如果突然出现兴趣很高，或者优先级很高的书的话，可以随时插入计划中。</p>
<p>另外，pipeline定义清晰，每本书要读完，有笔记，有复习，有某种形式的产出（笔记也算）。</p>
<h1 id="MOOC"><a href="#MOOC" class="headerlink" title="MOOC"></a>MOOC</h1><p>把Principles of Reactive Programming跟完了，证书拿到了。</p>
<p><img data-src="http://i1.tietuku.com/cff384ac4788e10b.png" alt="http:&#x2F;&#x2F;i1.tietuku.com&#x2F;cff384ac4788e10b.png"></p>
<p>但是照实说，这门课没学懂，只是应付过了。后四周的作业导学没写出来。</p>
<p>主要原因在于事先对课程难度估计过低，投入时间不够。下次开课，需要再跟一遍。</p>
<p>除此之外，下半年对于MOOC这方面不做过多预期，有特别好的特别感兴趣的就跟，没有就算了。</p>
<p>算是对年初说过的话彻底食言了。。。</p>
<h1 id="体重"><a href="#体重" class="headerlink" title="体重"></a>体重</h1><p>在印度这段时间健身房出勤率74%左右，还挺好。</p>
<p>现在，60.5公斤，第一季度结束时是61。基本算是没变。充分说明了没有改进目标就不会有成绩。</p>
<p>不过鉴于我现在已经不算胖子了，这方面仍然不做过多奢求，维持就好。</p>
<p>另外，腹肌的轮廓开始出现了，我很开心：）</p>
<img data-src="http://i1.tietuku.com/4866dc89e0ffac6a.jpg" style="width: 300px;"/>

<img data-src="http://i1.tietuku.com/6b5710437ae31c2f.jpg" style="width: 300px;"/>

<h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><p>接了出版社一个翻译的活儿，《Seven more languages in seven weeks》，是本蛮不错的书。这个额外的任务投入时间较多也是读书方面有欠缺的原因之一。</p>
<p>对出版充满期待。</p>
<h1 id="时间管理与统计"><a href="#时间管理与统计" class="headerlink" title="时间管理与统计"></a>时间管理与统计</h1><p>从四月一号开始，开始使用pomotodo这款超赞的番茄钟软件。从开始的第一天开始，到现在为止，凡是需要坐下来专心执行的事情都有记录。</p>
<p><img data-src="http://i1.tietuku.com/50d083b12ab39342.png" alt="http:&#x2F;&#x2F;i1.tietuku.com&#x2F;50d083b12ab39342.png"></p>
<p>这款软件的统计分析功能很好用，每个番茄钟还可以加tag。可以看到，这三个月做多的时间放在了TWU的备课上（26%），其次是翻译书（16%），mooc和blog紧跟其后（13%和10%），然后还有读书和写TWU需要的总结反馈（都是7%）。</p>
<p>这样，有数据，为什么读书少就一目了然了。</p>
<p>另外，可以看到这三个月平均日完成7.55个番茄钟。这个数量很说明问题，工作的效率靠感觉是感觉不出来的，要靠统计数据和分析。<br>7.55个番茄钟，相当于四个小时左右。每天平均专心工作，执行任务的时间只有四个小时啊！</p>
<p>这里面有一部分原因是TWU过程中需要听别的讲师的很多sessions，如果没有这个因素，日均数量应该是9个左右。</p>
<p>下个季度这方面的数据会是什么样的很难说，如果做的工作中有很大部分涉及沟通和协调的话，这个数字或许会走低。</p>
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>2015第三季度</title>
    <url>/blog/2015/10/05/2015-3rd-season/</url>
    <content><![CDATA[<p>惨。</p>
<p>八月份上了一个大客户的项目，到了晚上没力气也没心情做任何事情。</p>
<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><p>没写。上个季度六月的系列告一段落后7月没写。到了8月就不用说了。</p>
<h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p>七月八月读了7本书，9月一本未读。</p>
<p>在trello中建的计划，其中7月执行的不错，8月一般，九月，当让，啥都没做。</p>
<h1 id="MOOC"><a href="#MOOC" class="headerlink" title="MOOC"></a>MOOC</h1><p>无。</p>
<h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><p>上次提到的书已经交稿了，坐等出版。</p>
<h1 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h1><p>这项不错，我从一开始就想好，无论什么事没时间没心情做，这件事不能停。</p>
<p>从八月份开始，有了系统的计划</p>
<p><img data-src="http://i13.tietuku.com/3c423d466868f0e6.png" alt="Alt text"></p>
<p>三个大肌群，所有小肌群，各自一个计划。</p>
<p>从八月初执行至今，共记录41次workout，举铁345吨。</p>
<p><img data-src="http://i13.tietuku.com/237378291054c70a.png" alt="Alt text"></p>
<p>平均每次去健身房8吨，日最高记录15吨。</p>
<p>这段时间出勤率67%。</p>
<p>从去年6月8日到现在，共485天，出勤314次，出勤率64%。</p>
<p>其中武汉201次，印度72次，成都41次。</p>
<h1 id="总之"><a href="#总之" class="headerlink" title="总之"></a>总之</h1><p><img data-src="http://i.ytimg.com/vi/qQNvkINSEsY/hqdefault.jpg" alt="Alt text"></p>
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>2015</title>
    <url>/blog/2016/01/03/2015/</url>
    <content><![CDATA[<p>2015年结束了，一如已经结束了的每一年，非常迅速。</p>
<p>按惯例，从博客说起。</p>
<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><p>15年写了16篇博客，其中9篇是与Scala，Reactive，OODP相关的。这个数字倒还不算太坏。</p>
<p>14年总结的时候说：</p>
<blockquote>
<p>明年可以改进的是不要嫌话题小，不要嫌话题不够深。 有了有价值的想法就记下来，形成惯性。</p>
</blockquote>
<p>15年第一季度没有执行这一条原则。其原因在于懒惰。</p>
<p>15年第二季度超额执行。其原因在于找到了主线任务，足够的探索便促成了足够的产出。</p>
<p>第三季度和第四季度未执行。其原因在于到客户现场去工作彻底打乱了所有的日常习惯与日程计划。</p>
<p>这么看来，博客这一块有得有失，得者为要找到一个足够有趣的主线任务，用来催生产出。失者为习惯的打破与难以重补。</p>
<p>由此得出16年需要执行的事项：</p>
<p>主线任务要明确，暂定为Reactive以及与之相关的一切。Review不能每个季度做一次，要每个月做一次，每次可以短，不能没有，这样强迫自己去关注进度，不可斜视。</p>
<h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><img data-src="http://i4.tietuku.com/9ba5abac153d116a.png">

<img data-src="http://i4.tietuku.com/607f32c9450c71cf.png">

<p>这个数字可以，分布情况不太漂亮。5月和9月是两个空档。</p>
<p>5月是因为刚去TWU，说得过去。9月是因为去了客户现场，其实也说得过去。</p>
<p>但是内容控制的不好。</p>
<p>14年总结说的是：</p>
<blockquote>
<p>另外一个改进点是领域，我明年需要看一些轻量级的经济、哲学和社会心理学的书。口说无凭，于此立字为据。</p>
</blockquote>
<p>这方面第一季度执行的可以，第二季度开始用trello track，也不错。<br>但是下半年就废了，还是前文提过的同样的原因。</p>
<p>16年的trello重新建了一个board，遵循上段同样的方式，每个月review。</p>
<h1 id="MOOC"><a href="#MOOC" class="headerlink" title="MOOC"></a>MOOC</h1><p>极其差。</p>
<p>一年只上完了一门课。没有勇气提16年的目标了。看际遇吧。</p>
<h1 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h1><p>这个坚持执行的很好。还探索出了好的玩法。</p>
<img data-src="http://i4.tietuku.com/59dfa3e76e11f382.jpg">

<p>数据统计不完整，但是可以凑合看，增重0.4，减脂0.1，算是净增1斤肌肉。曲线不难看，但是这个数字不算漂亮。</p>
<img data-src="http://i4.tietuku.com/93656571b24423e4.jpg">

<p>从8月4号开始用bodyspace来track运动量，至此共91次，重量累计935吨。</p>
<p>这个数字累积到1000吨（也就是100万千克）时就换方法，不着重统计重量了，而是统计围度。</p>
<p>下面统计下出勤率：</p>
<p>从14年6月8日到现在,共574天。出勤362次，出勤率63%。</p>
<h1 id="时间管理与统计"><a href="#时间管理与统计" class="headerlink" title="时间管理与统计"></a>时间管理与统计</h1><p>这个统计是从15年4月1日开始的，9，10月份由于去客户现场的原因，中断掉了。数据就放在这儿，不分析了。</p>
<img data-src="http://i4.tietuku.com/5e3c1b5be12d1fe5.png">

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>这一年脾气见好，不错。</p>
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>利用CouchBase为弱网环境构建云同步Android应用</title>
    <url>/blog/2016/03/10/couchbase-android-sync/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Wifi，4G，3G，这些我们习以为常的东西，未必对所有人来说都是随时可用的。</p>
<p>以我当前所在项目为例，应用场景是某欠发达地区医疗服务机构的药品库存管理。</p>
<p>所谓欠发达，具体怎样呢？</p>
<ul>
<li>没有台式电脑</li>
<li>没有笔记本</li>
<li>只能使用低端的安卓平板</li>
<li>4G，3G信号不要想</li>
<li>我们去过现场的一位同事甚至要爬到树上去，才能勉强收到2G信号<br><img data-src="http://img2.cache.netease.com/cnews/2009/2/2/20090202093425b68f3.jpg" alt="tree"></li>
<li>即便是2G信号，也是时断时续，非常不稳定</li>
</ul>
<p>因此，需要随时保持连通的BS结构基本不可行，我们选择了重度依赖移动端设备本地存储的CS结构（胖客户端）。</p>
<p>网络不可用时，库存变动存储在安卓本地，何时网络可用，再将数据与服务器同步。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>以上描述的解决方案似乎合情合理，但是真实实施中还是遇到不少问题：</p>
<ul>
<li>本地schema与服务器schema不一致，中间涉及数据转换与回转</li>
<li>本地到服务器的同步数据流动链条过长（本地orm-&gt;本地Json serialization-&gt;服务器Json deserialization-&gt;服务器orm），链条中任何一环都有出差池的可能性。<br>换句话说，导致数据健全性受损的可能性分散在了太多的点上，一旦出错，难以定位</li>
<li>服务器到本地的数据同步，上一条中所描述的链条的逆向，同样是链条太长，潜在的出现错误的点太多</li>
<li>服务器端所掌握的数据只是客户端真实数据的一个变体，并且还未必是最新的，这样就导致当移动端应用因其本地数据而出错的时候，我们只能对着服务器干着急</li>
</ul>
<p>以上描述的问题并不是偶发性的，它不像这里有个bug今天修了，明天那里有个bug再修一次就好。</p>
<p>只要我们仍然要在弱网环境中运行应用，我们就需要重度依赖本地存储，就需要持续的在移动端和服务端进行双向数据同步，以上的问题就将会一直存在。</p>
<p>这是自然环境限制与技术选择所带来的固有的内在的问题。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>上面提到：</p>
<blockquote>
<p>这是自然环境限制与技术选择所带来的固有的内在的问题。</p>
</blockquote>
<p>这句话再解释明白一些，自然环境限制指的是很差的网络可用性，技术选择指的是服务器端提供REST API，移动端利用该API进行通信。</p>
<p>以上这二者相结合导致了上述情况成为了固有的内在的问题。</p>
<p>自然环境的限制我们无法突破，我们不能把基站部署过去，让大家打电话之前不用再爬到树上去。</p>
<p>但是技术选择是完全受我们控制的，是有做文章的空间的。</p>
<p>这就引出了文章标题提到的CouchBase。</p>
<h1 id="CouchBase"><a href="#CouchBase" class="headerlink" title="CouchBase"></a>CouchBase</h1><p>关于CouchBase是一个怎样的DB，请大家自行搜索。</p>
<p>我们主要关注它推出的CouchBase-Lite（android和iOS均有对应版本）。</p>
<p><img data-src="https://camo.githubusercontent.com/c1aa705fde3eb12245c06730d850c23e5a84ad8d/687474703a2f2f746c657964656e2d6d6973632e73332e616d617a6f6e6177732e636f6d2f636f756368626173652d6c6974652f636f756368626173652d6c6974652d6172636869746563747572652e706e67" alt="replicate"></p>
<p>左边的绿色方框是移动端应用，它通过蓝色标示的Sync Gateway与CouchBase Server通信。</p>
<p>请注意图中的箭头都是双向的，任何一方对本地数据库的写操作，都会导致对方的更新。任何一方的网络暂时中断也没有关系，在网络恢复的时候将会自动重试。</p>
<p>这样一来，数据同步的思路就变了，不再是在服务器端定义上传下载的API，移动端进行调用。而是利用DB自有的replication机制进行数据同步。</p>
<p>这就意味着我们在移动端只需要关注建立领域特定的模型，并将其存储入移动端本地的CouchBase即可，至于后面的序列化、网络通信等等问题就不需要我们去担心了。</p>
<p>关注点中很大一部分就这样被分离了出去，交由infrastructure去完成。</p>
<p>至于DB自有的replication机制的可靠性，应该可以比较安全的做出假设，认为一个有商用场景的DB厂商的通用数据备份机制不会比我们自己拼凑出来的更差。</p>
<h1 id="一个原型"><a href="#一个原型" class="headerlink" title="一个原型"></a>一个原型</h1><p><a href="https://github.com/cuipengfei/Spikes/tree/master/android/sync-prototype">https://github.com/cuipengfei/Spikes/tree/master/android/sync-prototype</a></p>
<p>上面的链接是一个基本可用的购物清单应用。全部代码都在，供参考。</p>
<p>下面谈如何把玩它。</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>下载CouchBase Server： <a href="http://www.couchbase.com/nosql-databases/downloads#">http://www.couchbase.com/nosql-databases/downloads#</a>，安装，配置管理员账户，不赘述。</p>
<p>在CouchBase Server的Admin console(默认地址： <a href="http://127.0.0.1:8091/index.html)%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAbucket%EF%BC%8C%E5%91%BD%E5%90%8D%E4%B8%BAdemodb%E3%80%82">http://127.0.0.1:8091/index.html)中创建一个bucket，命名为demodb。</a></p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装sync_gateway，Mac用户可以：<br>	brew install sync_gateway</p>
<p>以上github代码克隆下来后，sync-gateway路径下有个名为start_sync_gateway_server.sh的脚本，运行它来启动sync gateway。</p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>运行同一个路径下的create_user.sh，来创建一个名为user1的用户，然后运行create_session.sh，为该用户创建一个session。</p>
<p>create_session.sh脚本有类似如下的输出：</p>
<pre><code>&#123;&quot;session_id&quot;:&quot;a469f18027647e4957ffd1743e2ea33ce0386dbc&quot;,&quot;expires&quot;:&quot;2016-02-21T17:51:43.071175586+08:00&quot;,&quot;cookie_name&quot;:&quot;SyncGatewaySession&quot;&#125;
</code></pre>
<p>把其中的session id记下备用。</p>
<p>（注：这里的用户和session都是sync gateway需要的，与CouchBase Server无直接关系）</p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>找到代码中的MainActivity类，在startSync方法中加入session id：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line"><span class="type">Replication</span> <span class="variable">pullReplication</span> <span class="operator">=</span> database.createPullReplication(syncUrl);</span><br><span class="line">pullReplication.setCookie(<span class="string">&quot;SyncGatewaySession&quot;</span>, <span class="string">&quot;a469f18027647e4957ffd1743e2ea33ce0386dbc&quot;</span>, <span class="literal">null</span>, <span class="number">86400000000000L</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">pullReplication.setChannels(asList(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">pullReplication.setContinuous(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Replication</span> <span class="variable">pushReplication</span> <span class="operator">=</span> database.createPushReplication(syncUrl);</span><br><span class="line">pushReplication.setCookie(<span class="string">&quot;SyncGatewaySession&quot;</span>, <span class="string">&quot;a469f18027647e4957ffd1743e2ea33ce0386dbc&quot;</span>, <span class="literal">null</span>, <span class="number">86400000000000L</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">pushReplication.setChannels(asList(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">pushReplication.setContinuous(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>这段代码负责启动replication，双向同步从此而起。</p>
<p>找到createGroceryItem，为其中创建document的代码指定其所归属的用户：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> database.createDocument();</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; properties = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">properties.put(<span class="string">&quot;channels&quot;</span>, asList(<span class="string">&quot;user1&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>这几行代码可以保证各个移动端用户之间的数据不会混杂在一起。</p>
<h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>在genymotion中启动android虚拟机（如果使用其他虚拟设备或者真机，请注意修改代码中的服务器ip地址）。</p>
<p>在购物清单中创建几条记录，然后清空移动端本机数据，重启应用，可以看到刚刚被清空的购物清单会从服务器上同步回来。</p>
<p>也可以尝试把虚拟机的网络连接断掉，创建或者修改几条记录，稍后重新连通网络，可以发现数据仍然可以上传到服务器。</p>
<p>还可以尝试用第三步中提到的脚本多创建几个用户，在不同的android虚拟机中使用不同用户，可以发现它们对彼此的数据是没有访问权的。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上第五步提到的双向同步，离线操作，不同用户之间的数据隔离，都不需要我们写任何特殊的代码来实现。</p>
<p>我们移动端的代码与CouchBase的集成基本就只涉及到第四步中提到的启动replication和创建document，那这样移动端剩下的工作就只有构建业务逻辑了。</p>
<p>如果你的移动端应用也需要在弱网环境下进行离线操作，在网络恢复时与服务器同步数据的话，不妨尝试一下CouchBase。</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手实现Promises/A+规范</title>
    <url>/blog/2016/05/15/promise/</url>
    <content><![CDATA[<p>Promise并不是一个新的概念,它已经有将近30年的历史.</p>
<p>其早期的雏形还有里氏替换原则的提出者Barbara Liskov的贡献在其中.</p>
<p><a href="https://en.wikipedia.org/wiki/Futures_and_promises#History">https://en.wikipedia.org/wiki/Futures_and_promises#History</a></p>
<p>而Promises&#x2F;A+这个规范的出现,则为JavaScript世界中众多Promise实现库提供了一套统一的API和交互机制.</p>
<p>Promises&#x2F;A+提供了配套的测试集:<a href="https://github.com/promises-aplus/promises-tests">https://github.com/promises-aplus/promises-tests</a>.</p>
<p>其中共有872个测试,如果你的实现能够让全部测试绿起来,则可以认为该实现符合了标准.</p>
<p>我的Promise实现:<a href="https://github.com/cuipengfei/Spikes/tree/master/js/promise">https://github.com/cuipengfei/Spikes/tree/master/js/promise</a></p>
<p>在npm上的发布:<a href="https://www.npmjs.com/package/RWPromise">https://www.npmjs.com/package/RWPromise</a></p>
<p>要实现Promises&#x2F;A+的规范其实并不需要很多代码,我的实现只有88行.当然,仅仅是符合规范和一个可用,易用的Promise库之间还有很大的差距.</p>
<p>如果作为教学或者演示的目的,我认为我的这份实现是已有实现中最简洁的一版.</p>
<h1 id="自己实现Promise规范时需要注意的几点"><a href="#自己实现Promise规范时需要注意的几点" class="headerlink" title="自己实现Promise规范时需要注意的几点:"></a>自己实现Promise规范时需要注意的几点:</h1><h2 id="1-promise的状态一旦确定-不可更改"><a href="#1-promise的状态一旦确定-不可更改" class="headerlink" title="1. promise的状态一旦确定,不可更改"></a>1. promise的状态一旦确定,不可更改</h2><p>一个符合规范的promise有三种可能的状态:pending,resolved,rejected。</p>
<p>这三者是互斥的。</p>
<p>一个pending的promise可以变成resolved,或者rejected。</p>
<p>但是一旦进入resolved或者rejected状态,就再也不能变了。</p>
<p>用形象的语言来描述的话:一个promise就是一个关于未来的承诺,诺言一旦履行,不能反悔。</p>
<p>假设有如下代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = ???();<span class="comment">//首先以某种方式拿到一个promise,假设这个promise现在是pending的</span></span><br><span class="line">p.<span class="title function_">then</span>(x,y);<span class="comment">//然后把你希望在成功和失败时执行的x,y通过then方法挂进去</span></span><br></pre></td></tr></table></figure>

<p>时间流逝,假设???()方法内部在未来某个不确定的时间执行了:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p.<span class="title function_">resolve</span>();</span><br></pre></td></tr></table></figure>

<p>然后,你的x函数应该会被调用。</p>
<p>再然后,<strong>无论p的resolve方法或者reject方法再怎么被调用,p的状态都不会再变更,x和y也再不会被执行了</strong>。</p>
<h2 id="2-树状结构"><a href="#2-树状结构" class="headerlink" title="2. 树状结构"></a>2. 树状结构</h2><p>对then方法的多次调用会形成一个树状的数据结构。</p>
<p>假设有如下代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = ???();<span class="comment">//首先以某种方式拿到一个promise</span></span><br><span class="line">p</span><br><span class="line">    .<span class="title function_">then</span>(a,b) <span class="comment">//假设这次then的调用返回的是一个新的promise实例,称之为p1</span></span><br><span class="line">    .<span class="title function_">then</span>(c,d);<span class="comment">//假设这次then的调用返回的是一个新的promise实例,称之为p2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码等价于:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = ???();<span class="comment">//首先以某种方式拿到一个promise</span></span><br><span class="line"><span class="keyword">var</span> p1 = p.<span class="title function_">then</span>(a,b);</span><br><span class="line"><span class="keyword">var</span> p2 = p1.<span class="title function_">then</span>(c,d);</span><br></pre></td></tr></table></figure>

<img data-src="http://i2.buimg.com/425a951ceb32210c.png" />

<p>当然,这个代码形成的会是类似于一个链表的结构,可以把它<strong>看作是树状结构的一个特例</strong>,也就是树中每个节点都最多只有一个子节点。</p>
<p>而如下的代码则会形成我们惯常看到的树:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = ???();</span><br><span class="line"><span class="keyword">var</span> p1 = p.<span class="title function_">then</span>(a,b);</span><br><span class="line"><span class="keyword">var</span> p2 = p.<span class="title function_">then</span>(c,d);</span><br><span class="line"><span class="keyword">var</span> p3 = p.<span class="title function_">then</span>(e,f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p4 = p1.<span class="title function_">then</span>(g,h);</span><br><span class="line"><span class="keyword">var</span> p5 = p3.<span class="title function_">then</span>(i,j);</span><br></pre></td></tr></table></figure>

<img data-src="http://i2.buimg.com/83a315d738e7dc45.png" />

<p>这时,树中每一个节点可以有任意多的子节点(取决于它的then被调用了多少次)。</p>
<p>了解promise的树状结构,将有助于实现promise时在自己脑子里构造递归模型。</p>
<h2 id="3-回调的执行时机"><a href="#3-回调的执行时机" class="headerlink" title="3. 回调的执行时机"></a>3. 回调的执行时机</h2><p>这是实现promise的时候,最容易把人搞晕的一点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = ???();<span class="comment">//首先以某种方式拿到一个promise,假设这时p是pending的状态</span></span><br><span class="line"><span class="keyword">var</span> p1 = p.<span class="title function_">then</span>(a,b);</span><br><span class="line"><span class="keyword">var</span> p2 = p1.<span class="title function_">then</span>(c,d);</span><br></pre></td></tr></table></figure>

<p>以上代码执行完之后,我们手里有3个promise:p,p1,p2.</p>
<p>这时,a,b,c,d都还没有执行。</p>
<p>在未来某个不确定的时间,如果p的resolve方法被调用了,接下来会发生的事情是:</p>
<ul>
<li>p会把传给resolve方法的参数value记住,并把自己的状态标记为resolved (以后就再也不能变了)</li>
<li>a会被调用到,其参数为value<ul>
<li>如果a执行过程中不出错<ul>
<li>p1的状态被变成resolved,p1会把a的返回值记住</li>
<li>c会被调用到,其参数为a的返回值<ul>
<li>如果c执行过程中不出错<ul>
<li>p2的状态被变成resolved,p2会把c的返回值记住</li>
</ul>
</li>
<li>如果c执行过程中出错<ul>
<li>p2的状态被变成rejected,p2会把c抛出的异常记住</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>如果a执行过程中出错<ul>
<li>p1的状态被变成rejected,p1会把a抛出的异常记住</li>
<li>d会被调用到,参数为a抛出的异常<ul>
<li>如果d执行过程中不出错<ul>
<li>p2的状态被变成resolved,p2会把d的返回值记住</li>
</ul>
</li>
<li>如果d执行过程中出错<ul>
<li>p2的状态被变成rejected,p2会把d抛出的异常记住</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这样,就看出递归的意思来了。不过b并没有在上面出现,这是因为p本身是被resolve的,b只有在p被reject的时候才会执行。</p>
<p>在未来某个不确定的时间,如果p的reject方法被调用了,接下来会发生的事情是:</p>
<p>。。。 。。。</p>
<p>就不用写了,把上面的ａ替换为ｂ就好了。</p>
<p>以上的例子中,我们拿到p的时候它的状态是pending的,我们会先调用p的then,然后p才会被resolve(或者reject掉)。<br>也就是说当我们通过调用then传递给promise两个回调的时候,promise还没有能力确定应该执行哪个回调,只有当未来promise自己被resolve或者reject了的时候,它自己的状态确定了,它才知道该挑哪一个回调来执行。</p>
<p>还有另一种可能性,那就是当你拿到p的时候p就已经被resolve(或者reject掉了),这时如果你再调用then方法的话,所传入的两个回调,到底哪个应该被调用,马上就可以决定了。</p>
<p>也就是说回调被调用的触发点一共有三个,then,resolve,reject这三个方法。</p>
]]></content>
      <tags>
        <tag>Promises/A+</tag>
      </tags>
  </entry>
  <entry>
    <title>当锤子遇到钉子</title>
    <url>/blog/2016/06/04/when-hammer-meets-nail/</url>
    <content><![CDATA[<p><sub>此文标题党。更切题的标题应该叫做《如何用统计科学来黑星座》或者是《积极注册Facehub，促进统计科学蓬勃发展》 </sub></p>
<h1 id="锤子-JS-Promise"><a href="#锤子-JS-Promise" class="headerlink" title="锤子　JS Promise"></a>锤子　JS Promise</h1><p>最近对JS社区里的Promises&#x2F;A+规范产生了很浓的兴趣，感觉Promise这套东西确实蛮不错的，给异步算法的编写者和异步算法的消费者之间提供了一套统一的沟通手段，也为异步算法的消费者提供了更悦目易读的代码组织方式。</p>
<p>自己把它实现了一遍:<a href="https://www.npmjs.com/package/RWPromise">https://www.npmjs.com/package/RWPromise</a></p>
<p>然后在武汉办公室run了3次workshop:<a href="http://cuipengfei.me/blog/2016/05/15/promise/">http://cuipengfei.me/blog/2016/05/15/promise/</a>。</p>
<p>手里有了这么一把锤子就总想找个钉子敲一敲。总在想能去哪里找N多异步操作来让我来组织一下呢?</p>
<h1 id="钉子-《异类》"><a href="#钉子-《异类》" class="headerlink" title="钉子　《异类》"></a>钉子　《异类》</h1><p>无巧不成书，刚好最近在豆瓣上买了一本叫做《异类》的书在看:　<a href="https://read.douban.com/ebook/10580943/">https://read.douban.com/ebook/10580943/</a></p>
<p>书中一开篇就提到了加拿大冰球运动员选拔机制中很有趣的一件轶事:</p>
<blockquote>
<p>职业青年队绝大多数球员的生日集中在1月、2月和3月，这实在有点不可思议</p>
</blockquote>
<blockquote>
<p>加拿大冰球队按年龄分组所依据的分界线是1月1日，即从1月1日到当年12月31日之间出生的球员将会被分在同一组。也就是说，一个1月1日出生的选手，是在跟许多年纪比他小的队友争夺晋级权——在青春期到来之前，由于有将近12个月的年龄差距，球员之间在生理成熟度上将会表现出巨大的差异。</p>
</blockquote>
<blockquote>
<p>正如冰球队员的成长经历一样，因年龄大几个月而显现的微弱优势会在孩子的成长过程中不断积累，最终引导孩子走向成功或不成功，自信或不自信的轨道中，其影响会延伸许多年。</p>
</blockquote>
<p>能否进入加拿大职业青年冰球队竟然和出生月份有关系，实在是太有趣了。</p>
<p>假想如果你运动天赋非常好，但是不幸出生在12月，于是不得不从小和大你将近一岁的少年运动员一起训练。<br>表现难免显得不那么出色，不受教练待见，得不到正面反馈，出场坐冷板凳……逐渐逐渐，伤仲永。</p>
<p>由此就联想到了，到TW来工作的人其出生月份是否也存在什么神奇的规律呢？</p>
<h2 id="Facehub"><a href="#Facehub" class="headerlink" title="Facehub"></a>Facehub</h2><p>生日信息哪家强？<br>Facehub帮你忙，它可以查到每个注册用户的生日(只有月日，没有年)。</p>
<p>（注：Facehub是ThoughtWorks公司内部的一个社交网站，只对员工开放注册。用户可以在该网站了解其他同事的信息。）</p>
<p>作为一个内部推广的网站，FaceHub在公司内邮件组里总是铺天盖地、见缝插针地作广告宣传，每次看到觉得审美都疲劳了，不过到了需要的时候第一个就想到了它。<br>广告的作用，诚不我欺。</p>
<p>我先目测，Facehub用户不会超过500人。<br>并且用户的id是连续的自增数字，这就很好办了，我只要构造N多获取用户数据的GET请求就好了。<br>这N多的GET请求，肯定不能一个一个慢慢发送，那就需要异步请求了，这就是钉子啊！<br>这就是大量的需要被组织的异步操作啊！<br>钉锤终于有机会合体了。</p>
<p>于是我就写了这么个脚本:　<a href="https://github.com/cuipengfei/Spikes/blob/master/js/birth/birth.js">https://github.com/cuipengfei/Spikes/blob/master/js/birth/birth.js</a></p>
<p>其中使用Promise把大量的异步Http请求组织起来，然后统计其结果。</p>
<p>(注:如果需要自己跑这个脚本，需要把第七行的token替换成你自己的合法值，如果您没有账号的话就无需尝试了哦)</p>
<p>以下是统计结果，获取到用户数量348：</p>
<iframe width="600" height="400" src="https://live.amcharts.com/FhYjd/embed/" frameborder="0"></iframe>

<p>由此可以看到，来TW工作的人，11月，10月，8月出生的最多，5月出生的最少。</p>
<p>由于样本量不够大(只有348人)，所以统计数据的含义还不太好说。</p>
<h2 id="下面是我胡乱猜测的、不科学的、不严谨的理论"><a href="#下面是我胡乱猜测的、不科学的、不严谨的理论" class="headerlink" title="下面是我胡乱猜测的、不科学的、不严谨的理论"></a>下面是我胡乱猜测的、不科学的、不严谨的理论</h2><blockquote>
<p>我们小学入学时卡生日印象中是用8月卡的，那么这就和加拿大的冰球挑队员卡1月类似。</p>
</blockquote>
<blockquote>
<p>那这样，小学入学后，优势的积累就应该会倾向于8，9，10这几月的学生(类比冰球青年职业队队员集中分布在1，2，3这几个月)。</p>
</blockquote>
<blockquote>
<p>这几个月生日的小学生从小积累优势，并在成年后把优势携带到了求职之中去。</p>
</blockquote>
<blockquote>
<p>那为什么我们统计出来是8，10，11月份的人份额多呢?怎么不是8，9，10这几个月呢?统计出来的数据为什么把9月给跳过去了呢？可怜的9月得罪谁了呢？</p>
</blockquote>
<blockquote>
<p>我猜是由于9月这群人会成为某种星座的几率实在是太高了，被命运之神无情的给镇压掉了。:(抱歉</p>
</blockquote>
<p>既然已经有了这份代码，可以统计出生月份，索性再统计些其他侧面的数据:</p>
<iframe width="600" height="400" src="https://live.amcharts.com/GI4ZG/embed/" frameborder="0"></iframe>

<p>可见天秤和狮子座的最多，金牛座的最少。和上面的月份排名差异不大。</p>
<p>仔细看下的话，发现我只得罪了7.4%的人，好欣慰:)</p>
<iframe width="600" height="400" src="https://live.amcharts.com/JjYjF/embed/" frameborder="0"></iframe>

<p>看入职日期，大学毕业和跳槽的高峰期很凸显。9，10月最少，这倒不算什么惊人的发现。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>由于只统计了348人的信息，所以以上猜测仅供娱乐，请勿当真。</p>
<p>请大家积极注册Facehub，并填写真实的生日信息，以促进统计科学的繁荣发展。<br>（如果您无法注册，可以考虑投一份简历，然后再来促进统计科学的繁荣发展哦）</p>
]]></content>
      <tags>
        <tag>TW</tag>
        <tag>星座</tag>
      </tags>
  </entry>
  <entry>
    <title>Desugar Scala(18) -- stackable traits</title>
    <url>/blog/2017/06/14/desugar-scala-stackable-traits/</url>
    <content><![CDATA[<p>Stackable traits是一种怎样的特性呢？</p>
<p>来举一个🌰</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntQueue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(): <span class="type">Int</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">put</span></span>(x: <span class="type">Int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个IntQueue，抽象类，定义了get和put，没有实现。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicIntQueue</span> <span class="keyword">extends</span> <span class="title">IntQueue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> buf = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>() = buf.remove(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">put</span></span>(x: <span class="type">Int</span>) = &#123;</span><br><span class="line">    buf += x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再定义一个BasicIntQueue，把上述IntQueue实现了。<br>它的实现没有什么花样，就是先进先出。</p>
<p>接下来就有意思了：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Incrementing</span> <span class="keyword">extends</span> <span class="title">IntQueue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">put</span></span>(x: <span class="type">Int</span>) = &#123;</span><br><span class="line">    <span class="keyword">super</span>.put(x + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Doubling</span> <span class="keyword">extends</span> <span class="title">IntQueue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">put</span></span>(x: <span class="type">Int</span>) = &#123;</span><br><span class="line">    <span class="keyword">super</span>.put(<span class="number">2</span> * x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义了两个trait，都扩展自IntQueue。<br>一个是把数字先加一再放进队列，另一个是先把数字加倍再放入队列。</p>
<p>要注意这里的modifier：abstract override，以及在trait中对super的调用。稍后反编译的时候可以看懂它们的真实含义。</p>
<p>那这两个trait可以怎么使用呢？</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MagicQueue</span> <span class="keyword">extends</span> <span class="title">BasicIntQueue</span> <span class="keyword">with</span> <span class="title">Incrementing</span> <span class="keyword">with</span> <span class="title">Doubling</span></span></span><br></pre></td></tr></table></figure>

<p>定义一个MagicQueue，它扩展自BasicIntQueue，同时mixin了上面的两个trait。</p>
<p>MagicQueue它自己是一行实现代码都没有的，那么它的行为会是什么样子呢？</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> queue = <span class="keyword">new</span> <span class="type">MagicQueue</span></span><br><span class="line"></span><br><span class="line">queue.put(<span class="number">100</span>)</span><br><span class="line">queue.get() <span class="comment">//会返回201</span></span><br><span class="line"></span><br><span class="line">queue.put(<span class="number">500</span>)</span><br><span class="line">queue.get() <span class="comment">//会返回1001</span></span><br></pre></td></tr></table></figure>

<p>可以看到，它会先把数字乘以二，然后加一再放入队列。</p>
<p>MagicQueue继承了BasicIntQueue，混入了Incrementing和Doubling，它的行为就会是先跑Doubling后跑Incrementing最后跑BasicIntQueue（从右到左依序生效）。</p>
<p>这是种很实用的语言特性，你可以写很多个不同的trait，让它们都extend IntQueue。<br>同时写很多class让它们实现IntQueue。<br>然后每一个实现了IntQueue的class都可以和任意一个或者任意多个trait随意组合应用。</p>
<p>这给语言的使用者提供了很强的composition的便利性。</p>
<p>那下面看下这个语言特性是如何实现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">IntQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> p0)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicIntQueue</span> <span class="keyword">extends</span> <span class="title class_">IntQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayBuffer&lt;Object&gt; buf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayBuffer&lt;Object&gt; <span class="title function_">buf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.buf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BoxesRunTime.unboxToInt(<span class="built_in">this</span>.buf().remove(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buf().$plus$eq((Object)BoxesRunTime.boxToInteger(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BasicIntQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buf = (ArrayBuffer&lt;Object&gt;)<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先，IntQueue和BasicIntQueue反编译之后平淡无奇，一个抽象类，一个实现类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Doubling</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> chap12$Doubling$$<span class="built_in">super</span>$put(<span class="keyword">final</span> <span class="type">int</span> p0);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> p0)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Doubling$class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="keyword">final</span> Doubling $<span class="built_in">this</span>, <span class="keyword">final</span> <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        $<span class="built_in">this</span>.chap12$Doubling$$<span class="built_in">super</span>$put(<span class="number">2</span> * x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $init$(<span class="keyword">final</span> Doubling $<span class="built_in">this</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Doubling这个trait则被编译成了一个接口加一个抽象类，其中除了put之外还有一个名字有点奇怪的方法声明。<br>稍后可以看到它有什么用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Incrementing</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> chap12$Incrementing$$<span class="built_in">super</span>$put(<span class="keyword">final</span> <span class="type">int</span> p0);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> p0)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Incrementing$class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="keyword">final</span> Incrementing $<span class="built_in">this</span>, <span class="keyword">final</span> <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        $<span class="built_in">this</span>.chap12$Incrementing$$<span class="built_in">super</span>$put(x + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $init$(<span class="keyword">final</span> Incrementing $<span class="built_in">this</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Incrementing则和Doubling是一个路数。</p>
<p>（这里出现的chap12字样是我写代码时package的名字）</p>
<p>最后揭露真相的时候到了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MagicQueue</span> <span class="keyword">extends</span> <span class="title class_">BasicIntQueue</span> <span class="keyword">implements</span> <span class="title class_">Incrementing</span>, Doubling</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> chap12$Doubling$$<span class="built_in">super</span>$put(<span class="keyword">final</span> <span class="type">int</span> x) &#123;</span><br><span class="line">        Incrementing$class.put((Incrementing)<span class="built_in">this</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        Doubling$class.put((Doubling)<span class="built_in">this</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> chap12$Incrementing$$<span class="built_in">super</span>$put(<span class="keyword">final</span> <span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MagicQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        Incrementing$class.$init$((Incrementing)<span class="built_in">this</span>);</span><br><span class="line">        Doubling$class.$init$((Doubling)<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MagicQueue本身被编译成了以上的样子。</p>
<p>我们看一下它的put方法被调用时会怎样呢？</p>
<ol>
<li><p>它去调用Doubling$class.put这个静态方法，把自己和数字都传入</p>
</li>
<li><p>Doubling$class.put则会先把数字乘以二，然后把乘积传给MagicQueue的chap12$Doubling$$super$put</p>
</li>
<li><p>MagicQueue的chap12$Doubling$$super$put方法则会把MagicQueue自己的实例以及乘积都传给Incrementing$class.put这个静态方法</p>
</li>
<li><p>Incrementing$class.put则会把接收到的参数，也就是乘积，加一，然后把加和后的数字传给MagicQueue的chap12$Incrementing$$super$put</p>
</li>
<li><p>MagicQueue的chap12$Incrementing$$super$put最终把乘以二又加了一的数字传给了super.put</p>
</li>
<li><p>super.put其实就是BasicIntQueue.put了，到这里终于把数字存到ArrayBuffer里面了</p>
</li>
</ol>
<p>这样，Doubling,Incrementing,BasicIntQueue它们三个的行为就堆叠（stackable）在一起了。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>信息安全要做好，身份认证不能少。众邦银行胡乱搞，别人知我钱多少。</title>
    <url>/blog/2018/10/14/zb-bank/</url>
    <content><![CDATA[<p>一首绝句作为定场诗，接下来开始正式的内容。</p>
<p>最近，我在网上进行了一些稀奇古怪的操作，于是乎我莫名其妙的得到了一个“众邦银行”的账户。</p>
<p>这个名字并不是很熟悉，查了一下，看起来还算是有头有脸的样子。</p>
<blockquote>
<p><strong>武汉众邦银行股份有限公司</strong>（简称<strong>武汉众邦银行</strong>，英语：<strong>Wuhan Zhongbang Bank Co., Ltd.</strong>，<a href="https://zh.wikipedia.org/wiki/%E7%B8%AE%E5%AF%AB">缩写</a>：<strong>Z-BANK</strong>）是中华人民共和国境内第11家开业的民营银行，也是湖北省首家获批开业的民营银行。</p>
</blockquote>
<p>以上是wiki的信息。</p>
<p><img data-src="/images/zb-bank/zb-info.png"></p>
<p>国内一共十七家民营银行，这个众邦是第十一家，或许应该不会太差吧？</p>
<p>这样想的我实在是too young，too simple，还需要继续提高自己的知识水平。</p>
<p>这家银行其他方面不敢说，但是信息安全方面，是非常值得质疑的。</p>
<p>下面是我的众邦银行账户上的一部分流水：</p>
<p><img data-src="/images/zb-bank/liushui.png"></p>
<p>首先，时间的格式化有问题，小时和分钟之间有两个冒号，这叫个啥？</p>
<p>分钟的两位数中间又有一个冒号，这叫个啥？</p>
<p>秒钟干脆就没有了，这叫个啥？</p>
<p>不但没有秒钟，分钟的第二位数后面还有一个冒号，这又是个啥？</p>
<p>这就算了，时间的格式化，小问题，大概还是能看懂的。</p>
<p>关键是这个页面的URL啊，同志们。</p>
<p>它的URL有啥问题呢？先不着急说。我们看两个其他的例子先。</p>
<h3 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h3><p>查看我在京东的历史订单，URL是这样的：<a href="https://order.jd.com/center/list.action">https://order.jd.com/center/list.action</a></p>
<p>域名&#x2F;center&#x2F;list.action，这里面不包含任何多余的信息。</p>
<p>如果我把这个URL发给别人，别人如果正处于登录了京东的状态的话，打开看到的肯定是人家自己的订单。</p>
<p>如果没有登录京东，就会看到京东的登录页面。</p>
<p>没有问题，这很好，很合理。</p>
<h3 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h3><p>再看看支付宝，查看我在支付宝的流水，URL是这样的：<a href="https://consumeprod.alipay.com/record/standard.htm">https://consumeprod.alipay.com/record/standard.htm</a></p>
<p>域名&#x2F;record&#x2F;standard.htm，也很干净，path里没有啥脏东西。</p>
<p>如果我把这个URL发给别人，别人如果正处于登录了支付宝的状态的话，打开看到的肯定是人家自己的流水。</p>
<p>如果没有登录支付宝，就会看到支付宝的登录页面。</p>
<p>好了，应该不需要更多的例子了，大的原则就是我的购物和流水信息别人不应该仅仅通过一个URL就能看到。</p>
<p>接下来，看一看反面典型吧。没错，反面典型就是这个“中华人民共和国境内第11家开业的民营银行，也是湖北省首家获批开业的民营银行”–众邦银行。</p>
<p><a href="https://perbank.z-bank.com/weixinServer/htmlShow/weixinBank/views/transfer/tradeRecord.html?/iwJPm77nZq2HJfE5F1i0O8eJZlV6AJqePqv0T7or1bZwkrWnishU3vmqDhXVKGFRuCcJFfjMxcu9khuk5DU8JtIvYvdELXHJMfGepT4I1UAYMCuutU8mQotdPwHAgq4nhocB1nKeeE4HKhWkNMG3kvv/HqUv0QA5F+oxCtdtYRpM9hwNz4mbAL/7VALq7818qWxJgTpWGt9zmO/G9tFb6rSBiW00BT1aPSPCBsswXk939y2I2qc/8yclDRs41ex=">https://perbank.z-bank.com/weixinServer/htmlShow/weixinBank/views/transfer/tradeRecord.html?/iwJPm77nZq2HJfE5F1i0O8eJZlV6AJqePqv0T7or1bZwkrWnishU3vmqDhXVKGFRuCcJFfjMxcu9khuk5DU8JtIvYvdELXHJMfGepT4I1UAYMCuutU8mQotdPwHAgq4nhocB1nKeeE4HKhWkNMG3kvv/HqUv0QA5F+oxCtdtYRpM9hwNz4mbAL/7VALq7818qWxJgTpWGt9zmO/G9tFb6rSBiW00BT1aPSPCBsswXk939y2I2qc/8yclDRs41ex=</a></p>
<p>上面是我在众邦银行的流水页面的URL。</p>
<p>哇呀，好花哨啊，这么多字符呀，看起来乱呼呼的，想必很安全吧？</p>
<p>并没有！</p>
<p>任何一个人，在任何一台设备上，使用任何浏览器，访问这个URL，就可以得到，你猜是啥？</p>
<p>没错，就是我在众邦银行的流水了。</p>
<p>不信的话，你访问一下那个URL，看到的内容和本文上面的截图里是一样的。</p>
<p>实在不是我想要搞一个大新闻，然后把众邦银行批判一番，而是众邦银行犯的这个错误太低级了。</p>
<p>作为国家批准钦定的民营银行，你们怎么能这个样子呢？将来用户的信息安全有了偏差的话，你们是不是要负责任的呀？</p>
<p>你们搞的这个东西呀，一点都不excited，简直让我折寿-1s。</p>
<p>你们这样搞啊，行不通的，这绝对不是坠吼的，简直不知道低到哪里去了。</p>
<p>希望你们能努力提高自身的知识水平，积累一点人生经验。</p>
<p>悄悄地做一点微小的工作，修复这个问题，之后就可以慢声大发财。</p>
<p>来日才好和用户们谈笑风生啊。</p>
]]></content>
      <tags>
        <tag>🐸</tag>
      </tags>
  </entry>
  <entry>
    <title>让你的系统在上线之前就接受炮火的洗礼-影子流量</title>
    <url>/blog/2018/11/22/shadow-traffic/</url>
    <content><![CDATA[<p>随着持续集成，持续交付等理念的传播，很多软件开发团队都搭建了自己的staging、UAT等<strong>类生产环境</strong>。这些环境的软硬件及网络配置会尽量贴近真实的生产环境，起到沙盘演练的作用。</p>
<p>类生产环境毕竟前面还有一个类字，沙盘毕竟不是真实的战场，尽量贴近毕竟还不是完全吻合。</p>
<p>类生产环境与真实生产环境的一个<strong>重要差异</strong>就是访问量。稍具规模的互联网应用每天几百万访问量是很正常的，而类生产环境的访问量一般都会相形见绌。</p>
<p>有各种工具可以弥合这个差异，比如Apache JMeter，Gatling。测试人员可以和开发人员一起设计测试用例，以自动化或者半自动化的方式对类生产环境进行<strong>压力测试</strong>。</p>
<p><strong>不过</strong>即便是精心设计出来的用例也还是用例，不是真实请求。真实请求具有<strong>多样性</strong>，会随着昼夜交替而变化，会随着时事热点而波动，这是很难用工具模拟出来的。</p>
<p>这就引出了这篇文章的主角-影子流量（shadow traffic）。</p>
<p>简言之，影子流量（shadow traffic）就是将发给生产环境的请求<strong>复制</strong>一份<strong>转发</strong>到类生产环境上去，以此来达到压力测试和正确性测试的目的。</p>
<p>这就如同把真实战场上的敌方炮火投放到演习场里去。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>Shadow traffic通常有两种实现方式：服务端实现，客户端实现。</p>
<p>下图描述的是服务端实现的简化示例。</p>
<p><img data-src="https://pic1.zhimg.com/v2-49cb80cd0d2e1b2d6731d9e459e1fab0_b.jpg"></p>
<p><img data-src="https://pic1.zhimg.com/80/v2-49cb80cd0d2e1b2d6731d9e459e1fab0_hd.jpg"></p>
<p>生产环境接收到来自于用户<strong>或者</strong>是上游系统的请求，在响应该请求的同时，将这个请求原封不动的也发送给类生产环境。</p>
<p>下图描述的是客户端的实现。</p>
<p><img data-src="https://pic4.zhimg.com/v2-b5c81fcbbacd543e508e161578f892eb_b.jpg"></p>
<p><img data-src="https://pic4.zhimg.com/80/v2-b5c81fcbbacd543e508e161578f892eb_hd.jpg"></p>
<p>客户设备<strong>或者</strong>上游系统在发给生产环境请求的同时，给类生产环境也发送一个一模一样的请求。</p>
<p>这两种实现方式各有优劣，放到服务端做可以减少客户端设备的流量消耗，这一点对于移动应用很重要。</p>
<p>客户端的实现则较简单，通常只需要几行代码即可。如果后端架构较复杂，则可以选择前端实现。</p>
<p>无论前端还是后端实现，都需要遵循发射后不管(<strong>fire and forget</strong>)的原则，以免阻塞正常流程或者增加响应时间。</p>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>笼统来说，shadow traffic可以适用于所有互联网应用。而在以下场景中，shadow traffic的作用格外明显：</p>
<ul>
<li>要用新系统替换掉老旧系统</li>
<li>系统经历了大规模改造，直接上线面对客户风险较大</li>
<li>系统更新，需要提供向后兼容性</li>
<li>试验性质的架构调整</li>
</ul>
<p>在以上场景运用shadow traffic，可以在不影响终端用户的情况下完成验证与测试。</p>
<h2 id="启用时机"><a href="#启用时机" class="headerlink" title="启用时机"></a>启用时机</h2><p>在上线之前一段时间集中地进行测试固然是一种可行的方式，不过我个人更倾向于在项目运转的早期引入shadow traffic。</p>
<p>这样做可以让开发团队尽早的并且持续的接触到真实的外界压力。相当于用一种成本并不怎么高的方式构建出了具有产品运维经验的开发团队。</p>
<h2 id="配套机制"><a href="#配套机制" class="headerlink" title="配套机制"></a>配套机制</h2><p>Shadow traffic的原理和实现方式并不深奥，但要让它发挥出应有的价值还需要一些前期工作的配合。</p>
<h2 id="基础设施监控"><a href="#基础设施监控" class="headerlink" title="基础设施监控"></a>基础设施监控</h2><p>要了解系统的表现，基础设施监控是必不可少的。</p>
<p>上图是我所经历过的一个项目的可视化监控界面。监控范围涵盖了docker container的数量，请求数量，响应时间，以4或者5打头的HTTP状态码的数量，网络、内存、CPU用量等等。</p>
<p>通过如上的可视化图表，开发团队可以实时得到反馈。</p>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>基础设施监控可以提供一个外部视角，日志则能够窥见应用内部。</p>
<p>日志可以帮助开发团队定位shadow traffic中发现的问题，shadow traffic也可以促使开发团队提升日志的质量。这二者可以起到双向的积极促进作用。</p>
<h2 id="下游系统的配合"><a href="#下游系统的配合" class="headerlink" title="下游系统的配合"></a>下游系统的配合</h2><p>如果一个系统开启了shadow traffic，可以想见它的下游系统所面对的压力也会陡升。</p>
<p>这时有必要与下游系统负责团队做好事先沟通。</p>
<h2 id="用法变式"><a href="#用法变式" class="headerlink" title="用法变式"></a>用法变式</h2><p>Shadow traffic并非是一成不变的技术实践，可以按需微调。</p>
<h2 id="请求挑取"><a href="#请求挑取" class="headerlink" title="请求挑取"></a>请求挑取</h2><p>并非每一个请求都有被转发的必要。可以优先选取流量大或者业务价值高的请求。</p>
<h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>如果想做极限压力测试，可以把每一个请求重复发送多次给类生产环境。</p>
<p>当然也可以只挑取10%的请求来发送给类生产环境，随着团队信心的提升而逐步升高。</p>
<h2 id="重播"><a href="#重播" class="headerlink" title="重播"></a>重播</h2><p>可以截取并保存每天尖峰时刻的请求，在其他时段反复重播。</p>
<p>这种考验可以有效的锻炼团队的心理素质，并促使团队形成应急预案。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>如果明天要上线，今天会是一个让人惴惴不安的日子。</p>
<p>系统性能表现如何？会不会有奇形怪状的用户行为导致系统异常？与上下游系统的衔接会不会出现问题？</p>
<p>这些问题的答案，可以通过测试人员的精心模拟来寻找。但仍难免会挂一漏万。</p>
<p>启用shadow traffic，如果开发团队可以习惯于有shadow traffic的日常，也就具有了应对线上运维问题的能力。</p>
]]></content>
      <tags>
        <tag>shadow traffic</tag>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>读屠龙术五卷，粗浅总结一下太祖的套路</title>
    <url>/blog/2019/04/11/tu-long-shu-mao/</url>
    <content><![CDATA[<p>最近快速浏览完了太祖的五卷选集。粗浅的尝试着总结一下太祖做事情和分析问题解决问题时都会运用一些什么样的套路。</p>
<h1 id="性质决定形式"><a href="#性质决定形式" class="headerlink" title="性质决定形式"></a>性质决定形式</h1><p><font size="3">革命不是请客吃饭，不是做文章，不是绘画绣花，不能那样雅致，那样从容不迫，文质彬彬，那样温良恭俭让。革命是暴动，是一个阶级推翻一个阶级的暴烈的行动。</font></p>
<hr>
<p><font size="3">大家明白，不论做什么事，不懂得那件事的情形，它的性质，它和它以外的事情的关联，就不知道那件事的规律，就不知道如何去做，就不能做好那件事。</font></p>
<hr>
<p><font size="3">中国是一个经过了一次革命的、政治经济发展不平衡的、半殖民地的大国，这是中国革命战争的第一个特点。这个特点，不但基本地规定了我们政治上的战略和战术，而且也基本地规定了我们军事上的战略和战术。</font></p>
<hr>
<p><font size="3">办法是跟着方针来的。方针是不抵抗主义的时候，一切办法都反映不抵抗主义，这个我们已经有了六年的教训。方针如果是坚决抗战，那就非实行合乎这个方针的一套办法不可，非实行这八大纲领不可。</font></p>
<h1 id="要究根源"><a href="#要究根源" class="headerlink" title="要究根源"></a>要究根源</h1><p><font size="3">开会时要使到会的人尽量发表意见。有争论的问题，要把是非弄明白，不要调和敷衍。一次不能解决的，二次再议（以不妨碍工作为条件），以期得到明晰的结论。</font></p>
<hr>
<p><font size="3">战争问题中的唯心论和机械论的倾向，是一切错误观点的认识论上的根源。他们看问题的方法是主观的和片面的。或者是毫无根据地纯主观地说一顿；或者是只根据问题的一侧面、一时候的表现，也同样主观地把它夸大起来，当作全体看。 … … 反对战争问题中的唯心论和机械论的倾向，采用客观的观点和全面的观点去考察战争，才能使战争问题得出正确的结论。</font></p>
<h1 id="抓大放小"><a href="#抓大放小" class="headerlink" title="抓大放小"></a>抓大放小</h1><p><font size="3">有些同志的批评不注意大的方面，只注意小的方面。他们不明白批评的主要任务，是指出政治上的错误和组织上的错误。至于个人缺点，如果不是与政治的和组织的错误有联系，则不必多所指摘，使同志们无所措手足。而且这种批评一发展，党内精神完全集注到小的缺点方面，人人变成了谨小慎微的君子，就会忘记党的政治任务，这是很大的危险。</font></p>
<hr>
<p><font size="3">据衡山的调查，贫农领袖百人中八十五人都变得很好，很能干，很努力。只有百分之十五，尚有些不良习惯。这只能叫做“少数不良分子”，决不能跟着土豪劣绅的口白，笼统地骂“痞子”。要解决这“少数不良分子”的问题，也只能在农会整顿纪律的口号之下，对群众做宣传，对他们本人进行训练，把农会的纪律整好，决不能随便派兵捉人，损害贫农阶级的威信，助长土豪劣绅的气势。这一点是非常要注意的。</font></p>
<hr>
<p><font size="3">要充分相信青年人，绝大多数是会胜任的。个别人可能不称职，也不用怕，以后可以改选掉。这样做，基本方向是不会错的。</font></p>
<h1 id="注重调查研究而后有解决方案"><a href="#注重调查研究而后有解决方案" class="headerlink" title="注重调查研究而后有解决方案"></a>注重调查研究而后有解决方案</h1><p><font size="3">你对于那个问题不能解决吗？那末，你就去调查那个问题的现状和它的历史吧！你完完全全调查明白了，你对那个问题就有解决的办法了。一切结论产生于调查情况的末尾，而不是在它的先头。只有蠢人，才是他一个人，或者邀集一堆人，不作调查，而只是冥思苦索地“想办法”，“打主意”。须知这是一定不能想出什么好办法，打出什么好主意的。换一句话说，他一定要产生错办法和错主意。</font></p>
<hr>
<p><font size="3">调查就像“十月怀胎”，解决问题就像“一朝分娩”。</font></p>
<hr>
<p><font size="3">对于国内和国际的政治、军事、经济、文化的任何一方面，我们所收集的材料还是零碎的，我们的研究工作还是没有系统的。二十年来，一般地说，我们并没有对于上述各方面作过系统的周密的收集材料加以研究的工作，缺乏调查研究客观实际状况的浓厚空气。“闭塞眼睛捉麻雀”，“瞎子摸鱼”，粗枝大叶，夸夸其谈，满足于一知半解，这种极坏的作风，这种完全违反马克思列宁主义基本精神的作风，还在我党许多同志中继续存在着。</font></p>
<h1 id="不要盲从"><a href="#不要盲从" class="headerlink" title="不要盲从"></a>不要盲从</h1><p><font size="3">我们说上级领导机关的指示是正确的，决不单是因为它出于“上级领导机关”，而是因为它的内容是适合于斗争中客观和主观情势的，是斗争所需要的。</font></p>
<hr>
<p><font size="3">我们说马克思主义是对的，决不是因为马克思这个人是什么“先哲”，而是因为他的理论，在我们的实践中，在我们的斗争中，证明了是对的。</font></p>
<hr>
<p><font size="3">马克思说的武装起义之后一刻也不应该停止进攻，这是说乘敌不备而突然起义的群众，应该不让反动的统治者有保守政权或恢复政权的机会，趁此一瞬间把国内反动的统治势力打个措手不及，而不要满足于已得的胜利，轻视敌人，放松对于敌人的进攻，或者畏缩不前，坐失消灭敌人的时机，招致革命的失败。这是正确的。然而不是说，敌我双方已在军事对抗中，而且敌人是优势，当受敌人压迫时，革命党人也不应该采取防御手段。如果这样想，那就是第一号的傻子。</font></p>
<hr>
<p><font size="3">不要迷信。中国人也好，外国人也好，死人也好，活人也好，对的就是对的，不对的就是不对的，不然就叫做迷信。要破除迷信。不论古代的也好，现代的也好，正确的就信，不正确的就不信，不仅不信而且还要批评。这才是科学的态度。</font></p>
<h1 id="注重工作细节"><a href="#注重工作细节" class="headerlink" title="注重工作细节"></a>注重工作细节</h1><p><font size="3">每到一处，壁上写满了口号。惟缺绘图的技术人材，请中央和两省委送几个来。</font></p>
<hr>
<p><font size="3">大家要努力去发展农业和手工业的生产，多造农具，多产石灰，使明年的收获增多，恢复钨砂、木头、樟脑、纸张、烟叶、夏布、香菇、薄荷油等特产过去的产量，并把它们大批地输出到白区去。</font></p>
<hr>
<p><font size="3">我郑重地向大会提出，我们应该深刻地注意群众生活的问题，从土地、劳动问题，到柴米油盐问题。妇女群众要学习犁耙，找什么人去教她们呢？小孩子要求读书，小学办起了没有呢？对面的木桥太小会跌倒行人，要不要修理一下呢？许多人生疮害病，想个什么办法呢？一切这些群众生活上的问题，都应该把它提到自己的议事日程上。</font></p>
<h1 id="不要用静态的眼光看问题"><a href="#不要用静态的眼光看问题" class="headerlink" title="不要用静态的眼光看问题"></a>不要用静态的眼光看问题</h1><p><font size="3">革命的道路，同世界上一切事物活动的道路一样，总是曲折的，不是笔直的。革命和反革命的阵线可能变动，也同世界上一切事物的可能变动一样。</font></p>
<hr>
<p><font size="3">国民党营垒中，在民族危机到了严重关头的时候，是要发生破裂的。</font></p>
<hr>
<p><font size="3">日本是小国，地小、物少、人少、兵少，中国是大国，地大、物博、人多、兵多这一个条件，于是在强弱对比之外，就还有小国、退步、寡助和大国、进步、多助的对比，这就是中国决不会亡的根据。强弱对比虽然规定了日本能够在中国有一定时期和一定程度的横行，中国不可避免地要走一段艰难的路程，抗日战争是持久战而不是速决战；然而小国、退步、寡助和大国、进步、多助的对比，又规定了日本不能横行到底，必然要遭到最后的失败，中国决不会亡，必然要取得最后的胜利。</font></p>
<h1 id="先行动起来"><a href="#先行动起来" class="headerlink" title="先行动起来"></a>先行动起来</h1><p><font size="3">革命战争是民众的事，常常不是先学好了再干，而是干起来再学习，干就是学习。</font></p>
<h1 id="批判的学习"><a href="#批判的学习" class="headerlink" title="批判的学习"></a>批判的学习</h1><p><font size="3">对于外国文化，排外主义的方针是错误的，应当尽量吸收进步的外国文化，以为发展中国新文化的借镜；盲目搬用的方针也是错误的，应当以中国人民的实际需要为基础，批判地吸收外国文化。苏联所创造的新文化，应当成为我们建设人民文化的范例。对于中国古代文化，同样，既不是一概排斥，也不是盲目搬用，而是批判地接收它，以利于推进中国的新文化。</font></p>
<hr>
<p><font size="3">后起而且发展得很快的帝国主义国家，即德日两国的军事家中，积极地鼓吹战略进攻的利益，反对战略防御。这种思想，是根本不合于中国革命战争的。德日帝国主义的军事家们指出防御的一个重要的弱点是不能振奋人心，反而使人心动摇。这是说的阶级矛盾剧烈，而战争的利益仅仅属于反动的统治阶层乃至反动的当权政派的那种国家。我们的情况不同。在保卫革命根据地和保卫中国的口号下，我们能够团结最大多数人民万众一心地作战</font></p>
<h1 id="不耻下问，兼听则明"><a href="#不耻下问，兼听则明" class="headerlink" title="不耻下问，兼听则明"></a>不耻下问，兼听则明</h1><p><font size="3">其中还有些问题没有弄清楚，需要先征求下级的意见。我们切不可强不知以为知，要“不耻下问”[2]，要善于倾听下面干部的意见。先做学生，然后再做先生；先向下面干部请教，然后再下命令。</font></p>
<hr>
<p><font size="3">你们对上述计划意见如何？这个计划有何缺点？执行有何困难？统望考虑电告。</font></p>
<hr>
<p><font size="3">像卫立煌、翁文灏这样的有爱国心的国民党军政人员，我们应当继续调动他们的积极性。就是那些骂我们的，像龙云、梁漱溟、彭一湖之类，我们也要养起来，让他们骂，骂得无理，我们反驳，骂得有理，我们接受。这对党，对人民，对社会主义比较有利。</font></p>
<h1 id="定量分析"><a href="#定量分析" class="headerlink" title="定量分析"></a>定量分析</h1><p><font size="3">胸中有“数”。这是说，对情况和问题一定要注意到它们的数量方面，要有基本的数量的分析。任何质量都表现为一定的数量，没有数量也就没有质量。我们有许多同志至今不懂得注意事物的数量方面，不懂得注意基本的统计、主要的百分比，不懂得注意决定事物质量的数量界限，一切都是胸中无“数”，结果就不能不犯错误。</font></p>
<h1 id="分清屁股（立场）"><a href="#分清屁股（立场）" class="headerlink" title="分清屁股（立场）"></a>分清屁股（立场）</h1><p><font size="3">十月革命推翻了资产阶级，这在世界上是个新鲜事情。对这个革命，国际资产阶级不管三七二十一，骂的多，总是说不好。俄国资产阶级是个反革命阶级，那个时候，国家资本主义这一套他不干，他怠工，破坏，拿起枪来打。俄国无产阶级没有别的办法，只好干掉他。这就惹火了各国资产阶级，他们就骂人。我们这里对待民族资产阶级比较缓和一点，他就舒服一点，觉得还有些好处。现在艾森豪威尔威尔、杜勒斯不让美国的新闻记者到中国来，实际上就是承认我们的政策有这个好处。如果我们这里是一塌糊涂，他们就会放那些人来，横直是写骂人文章。他们就是怕写出来的文章不专门骂人，还讲一点好话，那个事情就不好办。</font></p>
<hr>
<p><font size="3">江苏作了一个调查，有的地区，县区乡三级干部中间，有百分之三十的人替农民叫苦。后头一查，这些替农民叫苦的人，大多数是家里比较富裕，有余粮出卖的人。这些人的所谓“苦”，就是有余粮。所谓“帮助农民”、“关心农民”，就是有余粮不要卖给国家。这些叫苦的人到底代表谁呢？他们不是代表广大农民群众，而是代表少数富裕农民。</font></p>
<hr>
<p><font size="3">“人性论”。有没有人性这种东西？当然有的。但是只有具体的人性，没有抽象的人性。在阶级社会里就是只有带着阶级性的人性，而没有什么超阶级的人性。我们主张无产阶级的人性，人民大众的人性，而地主阶级资产阶级则主张地主阶级资产阶级的人性，不过他们口头上不这样说，却说成为唯一的人性。有些小资产阶级知识分子所鼓吹的人性，也是脱离人民大众或者反对人民大众的，他们的所谓人性实质上不过是资产阶级的个人主义，因此在他们眼中，无产阶级的人性就不合于人性。现在延安有些人们所主张的作为所谓文艺理论基础的“人性论”，就是这样讲，这是完全错误的。</font></p>
<hr>
<p><font size="3">对于革命的文艺家，暴露的对象，只能是侵略者、剥削者、压迫者及其在人民中所遗留的恶劣影响，而不能是人民大众。人民大众也是有缺点的，这些缺点应当用人民内部的批评和自我批评来克服，而进行这种批评和自我批评也是文艺的最重要任务之一。但这不应该说是什么“暴露人民”。对于人民，基本上是一个教育和提高他们的问题。</font></p>
<h1 id="事物的两面性"><a href="#事物的两面性" class="headerlink" title="事物的两面性"></a>事物的两面性</h1><p><font size="3">把毒草，把非马克思主义和反马克思主义的东西，摆在我们同志面前，摆在人民群众和民主人士面前，让他们受到锻炼。不要封锁起来，封锁起来反而危险。这一条我们跟苏联的做法不同。为什么要种牛痘？就是人为地把一种病毒放到人体里面去，实行“细菌战”，跟你作斗争，使你的身体里头产生一种免疫力。</font></p>
<hr>
<p><font size="3">日本国度比较地小，其人力、军力、财力、物力均感缺乏，经不起长期的战争。日本统治者想从战争中解决这个困难问题，但同样，将达到其所期求的反面，这就是说，它为解决这个困难问题而发动战争，结果将因战争而增加困难，战争将连它原有的东西也消耗掉。</font></p>
<hr>
<p><font size="3">国民党是一个复杂的政党。它虽被这个代表大地主、大银行家、大买办阶层的反动集团所统治，所领导，却并不整个儿等于这个反动集团。它有一部分领袖人物不属于这个集团，而且被这个集团所打击、排斥或轻视。它有不少的干部、党员群众和三民主义青年团的团员群众并不满意这个集团的领导，而且有些甚至是反对它的领导的。</font></p>
<hr>
<p><font size="3">坏事也算一种经验，也有很大的作用。我们就有陈独秀、李立三、王明、张国焘、高岗、饶漱石这些人，他们是我们的教员。此外，我们还有别的教员。在国内来说，最好的教员是蒋介石。我们说不服的人，蒋介石一教，就说得服了。蒋介石用什么办法来教呢？他是用机关枪、大炮、飞机来教。还有帝国主义这个教员，它教育了我们六亿人民。一百多年来，几个帝国主义强国压迫我们，教育了我们。所以，坏事有个教育作用，有个借鉴作用。</font></p>
<hr>
<p><font size="3">军队的生产自给，在我们的条件下，形式上是落后的、倒退的，实质上是进步的，具有重大历史意义的。在形式上，我们违背了分工的原则。但是，在我们的条件下——国家贫困、国家分裂（这些都是国民党主要统治集团所造成的罪恶结果）以及分散的长期的人民游击战争，我们这样做，就是进步的了。大家看，国民党的军队面黄肌瘦，解放区的军队身强力壮。大家看，我们自己，在没有生产自给的时候，何等困难，一经生产自给，何等舒服。</font></p>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>marx</tag>
      </tags>
  </entry>
  <entry>
    <title>被诅咒的与被祝福的</title>
    <url>/blog/2019/06/20/zxz-swd/</url>
    <content><![CDATA[<p>身陷南洋囹圄，心系故园风物，无以聊赖之中，撰文权作慰藉。</p>
<h1 id="从Neal-Ford的一段话讲开去"><a href="#从Neal-Ford的一段话讲开去" class="headerlink" title="从Neal Ford的一段话讲开去"></a>从Neal Ford的一段话讲开去</h1><p>前段时间看了Neal Ford的一个演讲，<a href="https://player.oreilly.com/videos/9781491901137">原视频</a></p>
<p>其中一段讲到了传统工程与软件工程的区别。</p>
<p>於我心甚有戚戚焉。</p>
<p>译如下：</p>
<blockquote>
<p>软件工程和传统工程是截然不同的。</p>
</blockquote>
<blockquote>
<p>在传统工程的世界中，当你进入施工阶段时，你基本上是在给原子塑形，原子结构是很难重构的。一旦你将它们塑造成特定的形状，它们往往会保持这种形状，很难将它们变成其他形状。除非你熔化它们再回炉重造。因此，制造物理物品是一个非常昂贵的过程。这就意味着，我们会希望在施工开始之前正确做出设计。</p>
</blockquote>
<blockquote>
<p>但在软件世界中，我们不是在铸造原子。我们在比特（bit）的世界里，这些比特（bit）都非常具有可塑性。对比特（bit）进行更改非常容易。我们来比较一下，传统工程中有施工，软件世界中与之对应的是什么呢？那就是是编译和部署。编译和部署实际上是我们所设计的东西在现实世界中的表征，电子沿导电线路移动，对现实世界施加影响力。这就表明，对于我们软件世界而言，我们的设计蓝图就是我们的源代码。</p>
</blockquote>
<blockquote>
<p>在传统工程业中，最昂贵的部分是施工阶段。在桥梁和其他种类的物理制造中存在许多预测性数学，这样做的原因并不是为了获得更安全的结构，虽说它在客观上确实会达成这一点。初衷其实是为了节约成本。造完了一座桥梁，然后让重物碾压过去，观察桥梁是否会崩塌，从而来确认桥梁质量达标与否，这样做，万一垮塌了，这成本就实在是太昂贵了。所以你需要可预测性，因为制造这些东西太贵了。</p>
</blockquote>
<blockquote>
<p>但在软件世界中，因为施工过程对应的是编译和部署，所以改变的成本非常低，可以随时进行。我们甚至不必为此操心，每当我们停止打字时，我们的计算机内都会涌现出一小群精灵把我们设计的东西给制造出来，以便我们能够以一种逼真的方式对其进行测试。</p>
</blockquote>
<blockquote>
<p>所以Reeves先生说，“鉴于软件设计相对容易并且基本上可以免费构建，一个不足为奇的启示是，软件设计往往非常庞大和复杂。”</p>
</blockquote>
<blockquote>
<p>我相信软件是现在人类思维创造出来的最复杂的东西，有几个原因导致它们如此复杂，其中一个原因是物理世界中存在许多有用的约束，而软件的世界中这样的约束太少。</p>
</blockquote>
<hr>
<p>蓝图设计对应源码编写，建造施工对应编译部署，这着实有趣。</p>
<p>我们使用建筑这个隐喻来关照软件的时候，通常都是把架构设计对照到蓝图上去，而把源码编写对照到建造施工上去。</p>
<p>而Neal Ford不是这样使用建筑隐喻的。</p>
<p><img data-src="http://i1.fuimg.com/691355/770eef4285d59e81.png" alt="Markdown"></p>
<p>可以看出来，Neal Ford这个隐喻在落地程度上更进一层。</p>
<h1 id="牛老爵爷的诅咒"><a href="#牛老爵爷的诅咒" class="headerlink" title="牛老爵爷的诅咒"></a>牛老爵爷的诅咒</h1><p>Neal Ford这段话的内容非常丰富。</p>
<p>除了上述隐喻之外，还有桥梁不能像软件一样测试，软件如此复杂的原因是我们缺乏真实世界中的物理限制。</p>
<p>诚哉斯言，与土木工程师比起来，我们软件工程师确实是具有非常奢侈的环境。这个代码怎样？跑跑测试就知道了。</p>
<p>能想象土木工程师说这种话吗？</p>
<p>老板娘: 那栋楼设计搞的怎么样了？有没有仔细的检查过？</p>
<p>工程师: 我觉得没问题，直接施工建造出来看看就好了。</p>
<p>老板娘: 好，我相信你，既然你这么有信心，那就来吧。</p>
<p><img data-src="http://i2.tiimg.com/691355/b18dcdf9861e98bb.png" alt="Markdown"></p>
<p><img data-src="http://i2.tiimg.com/691355/809c6a1b7c0c142f.png" alt="Markdown"></p>
<p>工程师: 😳 😳 😳</p>
<p>老板娘: 请问您信心的来源是啥？有依据吗？你这么乱搞，我得陪多少钱？</p>
<p>工程师: 这是个小工程，有点粗心了。另一个，那个大桥的项目，我一定用心！</p>
<p><img data-src="http://i2.tiimg.com/691355/0373758da912bbbd.png" alt="Markdown"></p>
<p>老板娘: 合龙这部分，你是不是忘了设计喜鹊了？你打算让牛郎织女自己组成一个平行四边形吗？</p>
<p>工程师: 卒</p>
<p>老板娘: 破产</p>
<p>一旦发现失误，拆掉重造太贵，土木工程师没法像我们软件工程师一样动不动就跑测试，动不动就debug，只能事先把设计做好。</p>
<p>不过，也正是由于牛顿老爵爷设下了诅咒，土木工程师被逼练就了严谨的作风，扎实的推算能力。</p>
<p>（此处用牛老爵爷代表包括麦克斯韦在内的诸多先贤）</p>
<h1 id="蛮荒西部-牛顿管不了-图灵没来得及立法"><a href="#蛮荒西部-牛顿管不了-图灵没来得及立法" class="headerlink" title="蛮荒西部 牛顿管不了 图灵没来得及立法"></a>蛮荒西部 牛顿管不了 图灵没来得及立法</h1><p>牛爷的诅咒持久而坚固，不过，还是有它管不到的法外之地。</p>
<p>引力，电磁力，强力，弱力，你们能耐程序员何？程序员就是要任性地玩弄bits。</p>
<p>祖师爷死得早，一口苹果啃完，留待我等程序员飘零纵欲至今。</p>
<p>福兮？祸兮？</p>
<h1 id="Robert-C-Martin：还是要设立并遵守基本法"><a href="#Robert-C-Martin：还是要设立并遵守基本法" class="headerlink" title="Robert C. Martin：还是要设立并遵守基本法"></a>Robert C. Martin：还是要设立并遵守基本法</h1><p>无独有偶。最近看了《架构整洁之道》这本书。作者Robert C. Martin讲述了编程范式的发展历史，字里行间表达了与Neal Ford颇为神似的一些观点。</p>
<p>摘抄如下：</p>
<blockquote>
<p>结构化编程是第一个普遍被采用的编程范式（但是却不是第一个被提出的），由Edsger Wybe Dijkstra于1968年最先提出。与此同时，Dijkstra还论证了使用goto这样的无限制跳转语句将会损害程序的整体结构。接下来的章节我们还会说到，也是这位Dijkstra最先主张用我们现在熟知的if&#x2F;then&#x2F;else语句和do&#x2F;while&#x2F;until语句来代替跳转语句的。我们可以将结构化编程范式归结为一句话：结构化编程对程序控制权的直接转移进行了限制和规范。</p>
</blockquote>
<blockquote>
<p>面向对象编程对程序控制权的间接转移进行了限制和规范。</p>
</blockquote>
<blockquote>
<p>函数式编程对程序中的赋值进行了限制和规范。</p>
</blockquote>
<blockquote>
<p>它们都从某一方面限制和规范了程序员的能力。没有一个范式是增加新能力的。也就是说，每个编程范式的目的都是设置限制。这些范式主要是为了告诉我们不能做什么，而不是可以做什么。</p>
</blockquote>
<blockquote>
<p>这三个编程范式分别限制了goto语句、函数指针和赋值语句的使用。那么除此之外，还有什么可以去除的吗</p>
</blockquote>
<blockquote>
<p>这些编程范式的历史知识与软件架构有关系吗？当然有，而且关系相当密切。譬如说，多态是我们跨越架构边界的手段，函数式编程是我们规范和限制数据存放位置与访问权限的手段，结构化编程则是各模块的算法实现基础。这和软件架构的三大关注重点不谋而合：功能性、组件独立性以及数据管理。</p>
</blockquote>
<hr>
<p>原文的意思非常明白，Structured programming，OO，FP都是在约束我们作为程序员的行为，给我们立下基本法，免得我们瞎搞。</p>
<p>Neal Ford: 自然界的物理定律是个好东西啊，可以限制土木工程师，让他们无法乱搞。我们软件世界里缺的就是这个。</p>
<p>Robert C. Martin: 老弟所言甚是。缺少自然的馈赠，我们就搞人为的规约。诸多编程范式都已经尝试过做这件事了。天不立法人立法。</p>
<h1 id="张信哲表示同意"><a href="#张信哲表示同意" class="headerlink" title="张信哲表示同意"></a>张信哲表示同意</h1><p>张信哲：你俩说的对，自由是个好东西，但是不能《过火》，免得过犹不及。</p>
<p><img data-src="http://i2.tiimg.com/691355/7f1e9d0fcf5aeaa9.png" alt="Markdown"></p>
<h1 id="工程师之荣光-演绎-归纳"><a href="#工程师之荣光-演绎-归纳" class="headerlink" title="工程师之荣光 演绎 归纳"></a>工程师之荣光 演绎 归纳</h1><blockquote>
<p>人类99%的机率都在使用归纳法，只有1%的机率使用演绎法因为演绎法需要消耗认知能量，所以默认使用归纳法。</p>
</blockquote>
<p>土木工程师要仰仗演绎推理，这是理工科之荣光。</p>
<p>此乃吾辈偏执之骄傲。</p>
<p>怎奈沦落为软件工程师，我们要重度依赖归纳才能勉强维持生活这样子。</p>
<p>代码有问题？跑一跑tests，改一改。还不行？再改改，再跑跑。仍然不行？那我可要debug了！！！</p>
<p>反复利用run tests和debug的方式来观察现象，收集现象，总结现象，反推原理。</p>
<p>这是软件工程师在脑力不断失败的绝望中不断降低自己身段的慷慨悲歌。</p>
<p>福兮？祸兮？</p>
<h1 id="测试要先写-别着急跑-debug不到万不得已最好别用"><a href="#测试要先写-别着急跑-debug不到万不得已最好别用" class="headerlink" title="测试要先写 别着急跑 debug不到万不得已最好别用"></a>测试要先写 别着急跑 debug不到万不得已最好别用</h1><p>为了保护我们宝贵的智商与荣光，在此作出如下建议。</p>
<p>测试写完，然后去写实现代码的时候要尽力去争取一遍过。</p>
<p>在试图用run test去验证刚刚写完的实现代码之前，别着急，可以先回头把代码捋一遍，用肉脑跑一遍先。</p>
<p>不到万不得已，别用debug。因为一旦你开始debug，就是认输了，认怂了。承认无法通过肉脑来演绎推理明白了。</p>
<p>不要过于骄纵，不要过量服用软件世界给我们的自由，多给自己一些人为设置的限制，向土木工程师看齐。</p>
<p>没想到吧？前面写的神神叨叨，最后来到了如此接地气的建议上。</p>
<h1 id="别误会-不是那个意思"><a href="#别误会-不是那个意思" class="headerlink" title="别误会 不是那个意思"></a>别误会 不是那个意思</h1><p>不是宣扬big upfront design。</p>
<p>不是反对short feedback loop。</p>
<p>不是反对跑测试，只是建议别着急跑，不要太过依赖跑测试，优先用肉脑，然后才跑测试。</p>
<p>不是否认debug的价值，只是希望大家尽力放慢做出要去debug的决定的速度，让子弹飞一会，给肉脑机会，让它跑一会。</p>
<p>不是否认归纳的价值，只是建议演绎与归纳不可偏废，不要过度依赖归纳而冷落演绎。</p>
<hr>
<p>谨以此文与诸君共勉。For the serious hardcore programmers。</p>
]]></content>
      <tags>
        <tag>Uncle Bob</tag>
      </tags>
  </entry>
  <entry>
    <title>今日简史</title>
    <url>/blog/2018/10/21/JIN-RI-JIAN-SHI/</url>
    <content><![CDATA[<h1 id="第一部分科技颠覆"><a href="#第一部分科技颠覆" class="headerlink" title="第一部分科技颠覆"></a>第一部分科技颠覆</h1><blockquote>
<p>20世纪，来自纽约、伦敦、柏林和莫斯科的全球精英讲述了三大故事，号称能够解释人类过去、预测全球未来。这三大故事是：法西斯主义故事、共产主义故事，以及自由主义故事。第二次世界大战打倒了法西斯主义故事，于是从20世纪40年代末到80年代末，世界成为共产主义故事和自由主义故事的战场。等到共产主义受挫，自由主义故事就成为人类了解过去的主要指南、未来无法取代的使用手册</p>
</blockquote>
<blockquote>
<p>1938年，人类有三种全球性的故事可以选择；1968年只剩下两个；1998年，似乎只有一个故事胜出；2018年，这个数字降到了0。</p>
</blockquote>
<blockquote>
<p>过去推动俄国、中国和古巴革命的，是一群对经济至关重要但缺乏政治权力的人；而2016年，支持英国脱欧和特朗普的，却是一群虽然还享有政治权力却担心失去经济价值的人。</p>
<p>自由主义分别学习了帝国主义、法西斯主义和共产主义某些最优秀的概念。</p>
</blockquote>
<blockquote>
<p>自由主义学习了共产主义，于是扩大了同理的范围，开始在重视自由之外也同时重视平等。</p>
</blockquote>
<blockquote>
<p>即使在第二次世界大战之后，西方自由主义者还是很少将他们所谓的共通价值应用到非西方人民的身上。所以，荷兰人在自己的国土被纳粹残酷占领5年，于1945年重新站起来之后做的第一件事，就是召集军队横跨半个地球，希望重新占领前殖民地印度尼西亚。尽管在1940年，荷兰人只战斗了4天就举手投降放弃独立地位，但为了压制印度尼西亚的独立，他们却鏖战了4年之久。这也就难怪全球许多民族解放运动所寄望的都是苏联和中国，而不是自诩为自由主义领导者的西方国家。</p>
</blockquote>
<blockquote>
<p>自由主义能够让无产阶级与资产阶级、信徒与无神论者、原住民与移民、欧洲人与亚洲人之间都和睦相处，靠的就是保证每个人都能拿到更大的一块饼。</p>
</blockquote>
<blockquote>
<p>接下来该做些什么？第一步是缓和对末日预言的反应，从恐慌转为困惑。恐慌其实是一种傲慢，是自以为完全知道世界正在走向毁灭；困惑则是比较谦逊的态度，也就能看得比较清楚。</p>
</blockquote>
<blockquote>
<p>19世纪汽车取代马车时的情景，当时有许多马车夫转行当出租车司机，只是我们可能不是那些马车夫，而是被淘汰的马。</p>
</blockquote>
<blockquote>
<p>AlphaZero从零开始学习国际象棋，用了多久才准备好与Stockfish8的对局，而且发展出天才般的直觉？答案是4小时。你没看错，就是4小时。</p>
</blockquote>
<blockquote>
<p>所有的公投和选举，诉诸的永远是人类的“感觉”，而不是人类的理性。如果民主谈的就是理性决策，那么哪还有理由让人人都享有平等的投票权？甚至还投什么票呢？早就有充分的证据显示，就是有一些人比别人学识更渊博、更具理性，特别是讲到特定的经济和政治问题时更是如此。[2]英国脱欧投票之后，著名生物学家理查德·道金斯（RichardDawkins）就提出抗议，认为绝大多数英国民众（包括他自己）其实都缺乏必要的经济和政治科学背景，根本不该要求他们投下这张公投票。“这岂不就像是要用全国公投决定爱因斯坦的代数算得对不对，又或是让乘客表决飞机驾驶员该在哪条跑道降落？”[3]</p>
</blockquote>
<blockquote>
<p>在20世纪后期，民主国家的表现通常优于专制国家，是因为民主国家更善于处理数据。民主制度采用分布式的信息处理，由许多人和机构来做出决定，而专制制度则是把所有信息和权力都集中在一处。鉴于20世纪的科技水平，把太多信息和权力都集中在一个地方并不是有效率的做法。在当时，没有人能够及时处理完所有信息，并做出正确决定。这也就成了苏联做出的决策水平远低于美国，苏联经济远远落后于美国经济的部分原因。然而，人工智能很快就会让钟摆摆向相反的方向。有了人工智能，就能集中处理大量的信息，甚至因为机器学习在分析越多信息之后效果越好，所以人工智能可能会让集中式系统比分布式系统效率更高。</p>
</blockquote>
<blockquote>
<p>到了21世纪，除了过去的集体歧视之外，我们可能还要面临日益严重的个人歧视问题。[31]</p>
</blockquote>
<blockquote>
<p>今天世界各地的政治家似乎可以在各种不同的经济政策之间做选择，政治家有种以为自己可以选的错觉，但真正重要的决定早就由经济学家、金融专家和商人在提出选项时就做完了。也就是说，是他们为政治家定下了选择的方向。而再过几十年，就可能是由人工智能来提出选项，供政治家进行挑选了。</p>
</blockquote>
<blockquote>
<p>智能是解决问题的能力，意识则是能够感受痛苦、喜悦、爱和愤怒等事物的能力。我们之所以会两者不分，是因为对人类和其他哺乳动物来说，智能与意识会携手同行。哺乳动物处理大多数问题时靠的是“感觉”，但计算机会用完全不同的方式来解决问题。</p>
</blockquote>
<blockquote>
<p>大多数人类的痛苦将不再是受到剥削，而是更糟的局面：再也无足轻重。</p>
</blockquote>
<blockquote>
<p>农业革命之后，财产不断增加，分配不平等的问题也随之出现。人类拥有土地、动物、植物和工具之后，僵化的等级社会出现了，一小群精英世世代代垄断了大部分的财富和权力。人类也学会了接受这种情况，认为这再自然不过，甚至可能是天命难违。</p>
</blockquote>
<blockquote>
<p>但到了现代晚期，平等已经成为几乎所有人类社会的理想。部分原因在于共产主义和自由主义等新思想的兴起，还有部分原因是工业革命使民众比以往任何时候都更加重要。工业化的经济需要大量的普通劳动者，工业化的军队也需要大量的普通士兵。无论哪种政体的国家，都极为重视国民的健康、教育和福利，因为它们需要几百万健康的劳动者在生产线工作，需要几百万个忠诚的士兵在战壕里作战。</p>
</blockquote>
<blockquote>
<p>在生物工程与人工智能兴起之后，人类可能会分裂成两个群体：一小群超人类，以及绝大多数位于下层而且毫无用途的智人。雪上加霜的是，等到民众不再具备经济与政治上的力量，国家对国民健康、教育和福利的投资意愿也可能降低。成了多余的人，是件非常危险的事。这时候，民众的未来只能依赖一小群精英能否心存善意。就算这种善意能维持几十年，但只要遭逢危难（例如气候突变），要把多余的人抛到脑后实在太诱人，也太简单。</p>
</blockquote>
<blockquote>
<p>在古代，土地是世界上最重要的资产，政治斗争是为了控制土地，而一旦太多的土地集中在少数人手中，社会就分裂成贵族和平民。到了现代，机器和工厂的重要性超过土地，政治斗争便转为争夺这些重要生产工具的控制权。等到太多机器集中在少数人手中，社会就分裂成资本家和无产阶级。但到21世纪，数据的重要性又会超越土地和机器，于是政治斗争就是要争夺数据流的控制权。</p>
</blockquote>
<blockquote>
<p>他们真正的业务不是销售广告，而是靠吸引我们的注意力，取得了关于我们的大量数据，这些数据远比任何广告收入更有价值。我们不是他们的用户，而是商品。</p>
</blockquote>
<blockquote>
<p>这些巨头在短期内可能仍然需要卖广告，但它们现在评估应用程序、产品和公司的标准已经不再是能赚多少钱，而是能收集到多少数据。某款热门的应用程序可能缺乏商业模式，甚至短期内还会亏损，但只要能取得数据，就能价值数十亿美元。</p>
</blockquote>
<blockquote>
<p>该由谁拥有数据？关于我的DNA、我的大脑和我的生命，这些数据到底是属于我、属于政府、属于企业，还是属于全体人类？</p>
</blockquote>
<blockquote>
<p>企业发挥抑制作用，但也可能导致令人毛骨悚然的数字独裁。政治人物有点儿像音乐家，只不过他们手中的乐器是人类的情绪和生化系统。他们发表讲话，于是全国就感到一阵恐惧；他们发了一则推文，于是就爆发了一股仇恨。在我看来，实在不该让这些“音乐家”拿到更先进的乐器。如果哪天政治人物可以直接按下我们的情绪按钮，随意让我们感到焦虑、仇恨、欢乐或无趣，政治就只会是一场情绪的闹剧。虽然我们担心企业的力量过于强大，但从历史上来看，让政府的力量过于强大也不见得更好。</p>
</blockquote>
<h1 id="第二部分政治挑战"><a href="#第二部分政治挑战" class="headerlink" title="第二部分政治挑战"></a>第二部分政治挑战</h1><blockquote>
<p>有无数演讲和文献直接把古代雅典的民主制度和今日的欧盟联系在一起，赞颂欧洲自由民主的历史长达2500年，但这就像盲人摸象的寓言，盲人只摸到了大象的尾巴，就以为大象像一支画笔一样。确实，数百年来，民主思想都是欧洲文化的一部分，但它从来不是欧洲文化的全貌。虽然雅典民主制度赫赫有名、影响深远，但其实就只是在巴尔干半岛的一个小角落，做了一个称不上真心实意的实验，而且只撑了200多年。如果说欧洲文明在过去25个世纪就是民主、就是人权，那么又怎么解释斯巴达和恺撒、十字军和西班牙征服者、宗教裁判所和奴隶贸易，以及路易十四和拿破仑？难道这些都是异地文明的入侵？</p>
</blockquote>
<blockquote>
<p>2011年，总部位于纽约布鲁克林的犹太极端正统派刊物《日志》（DiTzeitung）爆出丑闻。《日志》刊出了一张美国总统偕高层观看美军突袭本·拉登的照片，却用修图软件把所有女性抹去，其中包括国务卿希拉里。该报解释，根据犹太教的“庄重法则”，不得不这么做。类似的另一则丑闻，则是在《查理周刊》（CharlieHebdo）遭遇恐怖袭击之后，多国领导人在巴黎参加了一场反恐大游行，但以色列《预兆报》（HaMevaser）所刊出的照片也用修图软件抹去了德国总理默克尔，希望避免她的影像让虔诚的读者心中生起任何淫念。另一家极端正统派报纸《通信报》（Hamodia）的发行人也声援这种做法，解释这种做法的背后是“数千年的犹太传统”。[5]</p>
</blockquote>
<blockquote>
<p>大约700万年前，黑猩猩和大猩猩的祖先本来是同一个物种，后来才分裂成两个族群，各自演化。物种一旦分裂，就没有回头路了。由于不同物种交配所生的后代不具繁殖能力，因此物种永远不会融合。</p>
</blockquote>
<blockquote>
<p>普鲁士铁血宰相俾斯麦读了达尔文的《物种起源》（OntheOriginofSpecies）之后曾说，巴伐利亚人正是奥地利人与人类之间缺少的那个环节。[10]</p>
</blockquote>
<blockquote>
<p>“伊斯兰国”占领叙利亚和伊拉克的大片国土后，杀害了数万人，炸毁了历史遗迹，推倒了雕像，有系统地毁掉了过往政权和西方文化影响的符号象征。[13]但当“伊斯兰国”的士兵走进当地银行，看到美元上有美国总统的肖像、用英文写着赞颂美国政治与宗教理想的语句时，却不会烧毁美国的这一象征。因为美元超越了政治和宗教分歧，得到了世界的广泛认可。</p>
</blockquote>
<blockquote>
<p>各地民众开始觉得全球资本主义冷酷无情，令人感到孤立无援，再加上担心未来国家健康、教育和福利制度无以为继，于是又投入民族主义的怀抱来寻求安慰和意义。</p>
</blockquote>
<blockquote>
<p>冷战在几乎没有流血的情况下结束，建立了新的国际主义世界秩序，人类进入前所未有的和平时代。不仅核战争免于爆发，各种战争的数量也在减少。自1945年以来，单纯因为侵略而造成的边界变化少之又少，大多数国家也不再将战争作为标准的政治工具。</p>
</blockquote>
<blockquote>
<p>目前，肉类产业不仅给数十亿动物造成无尽的苦难，同时也是全球变暖的主要原因；肉类产业大量使用抗生素和有毒物质，是污染空气、土地和水资源的一个元凶。根据英国机械工程师协会（InstitutionofMechanicalEngineers）2013年的报告，每生产1千克牛肉需要15000升淡水，而生产1千克马铃薯只需要287升淡水。[11]</p>
</blockquote>
<blockquote>
<p>在这样一个充满无情竞争的世界，落后的代价谁都承受不起，所以只要有一个国家选择走上高风险、高回报的科技之路，其他国家就会被迫跟进。为了避免这样的向下竞争，人类需要某种全球性的认同和忠诚。</p>
</blockquote>
<h1 id="第三部分绝望与希望"><a href="#第三部分绝望与希望" class="headerlink" title="第三部分绝望与希望"></a>第三部分绝望与希望</h1><blockquote>
<p>那么，恐怖分子怎么指望自己有什么影响力呢？他们发动恐怖袭击之后，对手的士兵、坦克和舰船数量丝毫没有减少，通信网络、公路和铁路基本完好无损，工厂、港口和基地也不动如山。其实，恐怖分子所指望的，正在于，虽然几乎无法破坏对手的任何实质力量，但袭击造成的恐惧和混乱会让对手全力出击，过度反应。在恐怖分子的算计之中，激怒对手，让对手动用其强大的力量来反击，所造成的军事和政治风暴绝对会比恐怖分子自己所能造成的更大。</p>
</blockquote>
<blockquote>
<p>恐怖分子其实就像一只苍蝇，想要摧毁一家瓷器店。苍蝇力气那么小，连一只茶杯都动不了，怎样才能如愿？最好的办法就是找头公牛，飞进它的耳朵，开始嗡嗡作响，让这头公牛因恐惧和愤怒而发狂，在瓷器店里横冲直撞。这正是“9·11”事件后的情景，恐怖主义分子刺激了美国这头公牛在中东这家瓷器店横冲直撞。</p>
</blockquote>
<blockquote>
<p>只是挑衅对手，却不去摧毁对手的任何武器或选择，其实就是一种绝望的表现，可见已经实在没有别的选项。如果还有其他选项，能够给对手造成严重的实质损害，任何人都不会选择恐怖主义袭击。</p>
</blockquote>
<blockquote>
<p>恐怖分子其实是在执行一种不可能完成的任务：手上没有军队，却想用暴力来改变政治权力的平衡。为达到目的，恐怖分子就会向政府提出一个不可能的挑战：要政府证明自己可以随时随地保护所有公民免遭暴力侵害。恐怖分子希望在政府试着应对这项不可能的挑战时，让政治重新洗牌，并拿到一些预料之外的王牌。</p>
</blockquote>
<blockquote>
<p>现代政权的合法性正来自保证公共领域不受政治暴力的影响。</p>
</blockquote>
<blockquote>
<p>14世纪，黑死病夺走了欧洲1&#x2F;4~1&#x2F;2人口的生命，但没有任何一位国王因此失去王位，也没有任何一位国王为了战胜这场瘟疫做过什么努力，原因就在于当时并没有人认为预防瘟疫是国王职责的一部分。但是，当时的统治者如果允许宗教异端在其领土传播，不仅可能丢了王冠，还可能掉了脑袋。</p>
</blockquote>
<blockquote>
<p>如果放在1150年，几个伊斯兰教徒在耶路撒冷杀害了几个平民，要求基督教军队离开圣城，非但不会让人觉得恐怖，反而会招来耻笑。想让人把你当回事儿，你至少得先夺下一两座固若金汤的城堡吧？对我们中世纪的祖先来说，恐怖主义实在算不上什么，他们有太多更大的问题需要处理。</p>
</blockquote>
<blockquote>
<p>到了现代，中央集权的结果，国家使领土内的政治暴力日益减少，而在过去几十年，西方国家境内几乎已经完全看不到政治暴力。法国、英国或美国的公民无须拥有武力，也能争取城镇、企业、组织甚至政府本身的控制权。就连几万亿美元、几百万士兵和几千艘战舰、战机和核导弹的控制权，也能够在不打一发子弹的前提下，从一批政客手中转移到另一批政客手上。人类很快就习惯了这种情形，认为这就是自然的权利。这种时候，就算只是偶尔杀害几十人的零星政治暴力行为，似乎也成了对国家政权合法性甚至存在的致命威胁。这就像往大空瓶里丢一枚小硬币，会发出很大的噪声。</p>
</blockquote>
<blockquote>
<p>国家体制创造了一个没有政治暴力的巨大空间，结果就像装了回音板，即便再小的政治暴力声音，也会被回音板放大。一个国家里的政治暴力越少，公众受到恐怖主义行为的冲击就越大。</p>
</blockquote>
<blockquote>
<p>到21世纪，为什么各大强权想要打一场成功的战争竟如此困难？原因之一在于经济本质的改变。在过去，经济资产主要是实物资产，因此可以很直观地通过征服使自己壮大。</p>
</blockquote>
<blockquote>
<p>犹太教在人类故事中的角色，有点儿像弗洛伊德的母亲在现代西方史中的角色。无论是好是坏，西格蒙德·弗洛伊德已经深深影响了现代西方的科学、文化、艺术和民间智慧。没有弗洛伊德的母亲，就不会有弗洛伊德，而且他的个性、抱负与想法也很有可能深受他与母亲的关系影响（他也一定会肯定这种说法）。但在撰写现代西方史的时候，没人会认为值得花上整整一章来写弗洛伊德的母亲。同样，如果没有犹太教，就不会有基督教，但在撰写世界历史的时候，犹太教并不值得花费太大的篇幅。</p>
</blockquote>
<blockquote>
<p>猿类首领早就发展出这种倾向：它们愿意帮助贫寒、穷乏和无父无母的成员。而又过了几百万年，才轮到《圣经》告诉古代以色列人“不可苦待寡妇和孤儿”</p>
</blockquote>
<blockquote>
<p>一神论有一点影响是毫无疑问的，那就是让许多人比以前更不宽容，于是导致宗教迫害与宗教战争蔓延肆虐各方。在多神论者的眼中，不同民族崇拜不同的神灵，进行各式各样的仪礼和仪式，完全没有问题。因此多神论者也很少仅因为他人宗教信仰不同，就加以斗争、迫害或杀害。与此相反，一神论者相信只有自己的神是唯一的真神，也相信这个神要求所有人都要服从他。因此，随着基督教和伊斯兰教传播到世界各地，各种宗教战争、宗教裁判和宗教歧视的发生率也节节攀升。</p>
</blockquote>
<blockquote>
<p>犹太科学家之所以成就非凡，原因之一就在于犹太文化极为重视教育。</p>
</blockquote>
<blockquote>
<p>而在所有形式的谦逊当中，或许最重要的就是在神的面前谦逊。每次讲到神，人们往往都自称卑微，但转头就以神之名，对同胞颐指气使。</p>
</blockquote>
<blockquote>
<p>世俗主义最重视的就是“真相”（truth）。这里的真相必须基于观察和证据，而非只单纯依靠信仰。世俗主义努力不把真相与相信混为一谈。</p>
</blockquote>
<blockquote>
<p>通常，正是因为故事本身并不真实，才更需要有强烈的信仰。</p>
</blockquote>
<blockquote>
<p>资本主义也同样以一种开放的科学理论开始，但逐渐变成一种教条。许多资本主义者不断重复呼喊着自由市场和经济成长的口号，却无视现实的改变。不论现代化、工业化或私有化有时会造成怎样的可怕后果，资本主义的虔诚信徒都会将之视为“成长的烦恼”，保证只要再成长一点，一切就会变好。</p>
</blockquote>
<blockquote>
<p>自由主义者常常就会展现出绝对的信仰，相信“普选”这个神奇的仪式能扭转乾坤。他们在伊拉克、阿富汗和刚果等地参加战斗，投入数十亿美元，坚信只要能够举行普选，就能让这些地方如同丹麦一样拥有更灿烂的阳光。尽管这种做法一再失败，在早有普选传统的地方也偶尔会选出专制平民主义者，但最后的结果与多数的独裁统治相差无几。如果你想质疑普选究竟能否达到所声称的效果，虽然不会被送到劳改营，但各种教条上的霸凌很可能会像一桶冰水浇到你的头上。</p>
</blockquote>
<blockquote>
<p>人类并非真的天生就有生命权或自由权，但正是出于对这个故事的信念，让我们得以约束专制政权的力量，</p>
</blockquote>
<h1 id="第四部分真相"><a href="#第四部分真相" class="headerlink" title="第四部分真相"></a>第四部分真相</h1><blockquote>
<p>现代的全球化世界天生就有一个特点：因果关系高度分化且复杂。</p>
</blockquote>
<blockquote>
<p>现代历史最严重的罪行，不仅源于仇恨和贪婪，还源于无知和冷漠。美丽迷人的英国淑女虽然从未去过非洲或加勒比海，但通过购买在伦敦证交所上市的股票和债券，就让大西洋的奴隶贸易获得了资金。接着，淑女在下午4点左右喝着下午茶，加入雪白的方糖让茶更为香甜，但这些方糖产自环境如地狱般的奴隶庄园，而她当然对此一无所知。</p>
</blockquote>
<blockquote>
<p>人类一直活在后真相时代。智人就是一种后真相物种，创造并相信虚构故事的能力越高，就越能发挥更多的能力。</p>
</blockquote>
<blockquote>
<p>智人之所以能够征服地球，最重要的因素就在于创造并传播虚构故事的独特能力。人类是唯一能与众多陌生个体合作的哺乳动物，原因就在于只有人类能够创造虚构故事，并且把这些故事流传出去，让几百万人相信。只要每个人都相信同样的故事、遵守同样的法律，就能有效地彼此合作。</p>
</blockquote>
<blockquote>
<p>如果你想指责脸谱网或那些政客开启了全新而恐怖的后真相时代，请提醒自己，不过几百年前，还有几百万的基督徒把自己锁在一个不断自我强化的神话泡泡里，从来不敢质疑《圣经》在各种事实上是否真实。几千年来，人类社群网络里许多的“新闻”和“事实”其实都是虚构的，讲述着奇迹、天使、恶魔和女巫的故事，是无畏的记者从地狱最深处给我们带来了第一手报道。我们没有任何科学证据指出夏娃被蛇诱惑、所有异教徒死后的灵魂都在地狱燃烧，也没有任何科学证据证明如果婆罗门阶层与吠舍阶层的人通婚会令宇宙的创造者震怒。然而就是有几十亿人相信这些故事，一信就是几千年。有些假新闻，就是能够长长久久。</p>
</blockquote>
<blockquote>
<p>如果只有1000个人，相信某个编造的故事，相信一个月，这是假新闻。但如果是10亿人，相信某个编造的故事，相信1000年，这就成了宗教信仰，而且会警告所有其他人不准说这是“假新闻”，否则就会伤害了信徒的感情（或是引发他们的怒火）。</p>
</blockquote>
<blockquote>
<p>想到可口可乐，你的脑中浮现的是什么画面？是一群健康的年轻人一起快乐运动，还是一群超重的糖尿病患者躺在病床上？大口灌下可口可乐并不会让你变年轻，不会让你变健康，也不会让你变得像运动员一样，反而只会增加患上肥胖和糖尿病的概率。然而，可口可乐几十年来投入几十亿美元，把自己与年轻、健康和运动联系在一起，几十亿人潜意识里也就这么相信了。</p>
</blockquote>
<blockquote>
<p>想测试群众是否忠诚，与其要求他们相信某个事实，还不如要求他们相信某件荒谬的事。如果头头表示“太阳从东边升起，从西边落下”，就算属下对他没半点儿忠诚，也会鼓掌同意；但如果头头表示“太阳从西边升起，从东边落下”，只有真正效忠的属下才会愿意鼓掌。</p>
</blockquote>
<blockquote>
<p>假设有个神秘的亿万富翁向你提议：“我每个月给你30美元，而你要让我每天给你洗脑一小时，在你心中植入我想植入的各种政治和商业偏见。”理智的人大概都会拒绝。这个神秘的亿万富翁稍微改变了一下提议：“你让我每天给你洗脑一小时，而我为你提供的这项服务完全免费！”忽然之间，全球就有几亿人觉得这真是个好主意。</p>
</blockquote>
<blockquote>
<p>2015年的电影《机械姬》（ExMachina），表面上讲的是一位人工智能专家爱上一个女性机器人，却遭到她的欺瞒和玩弄的故事。但事实上，这部电影描绘的并不是人类对于智能机器人的恐惧，而是男性对于聪明女性的恐惧，特别是害怕女性解放可能造成女性统治的结果。</p>
</blockquote>
<blockquote>
<p>赫胥黎的火眼金睛看穿了这片密布的乌云，预想未来的社会没有战争、饥荒和瘟疫，只有永续的健康、繁荣与和平。那是个消费主义的世界，性、药物和摇滚毫无限制，只以幸福快乐为最高价值。《美丽新世界》的基本假设是：人类就是生化算法，而科学可以破解这套算法，再运用技术加以操控。</p>
</blockquote>
<blockquote>
<p>赫胥黎的天才之处就在于点出如果想要控制民众，利用“爱”和“快乐”会比利用“恐惧”和“暴力”更为可靠。</p>
</blockquote>
<blockquote>
<p>读《美丽新世界》，其实既令人不安，也发人深省，因为你很难去指责把这一切变成反面乌托邦的因素。毕竟，世界繁荣和平，人人满意欢喜，这又有什么不好呢？</p>
</blockquote>
<h1 id="第五部分生存下去"><a href="#第五部分生存下去" class="headerlink" title="第五部分生存下去"></a>第五部分生存下去</h1><blockquote>
<p>没有任何政府有能力隐藏它们不喜欢的所有信息；另一方面，现在如果想用各种互相矛盾的报道、无关紧要的话题来影响大众，完全是轻而易举。比如，全球民众现在如果想知道叙利亚的阿勒颇（Aleppo）遭轰炸的情况，或是南极冰盖融化的最新情形，只要上网点一下就能得到信息。然而网络上众说纷纭，实在难以判断哪些内容可信。正是因为只要点一下就能得到无数其他信息，也就令人难以专注。</p>
</blockquote>
<blockquote>
<p>许多教育专家认为，学校现在该教的就是“4C”，即批判性思考（criticalthinking）、沟通（communication）、合作（collaboration）和创意（creativity）。[3]说得宽泛一点儿，学校不应该太看重特定的工作技能，而要强调通用的生活技能。最重要的是能够随机应变，学习新事物，在不熟悉的环境里仍然保持心智平衡。想跟上2050年的世界，人类不只需要发明新的想法和产品，最重要的是得一次又一次地重塑自己。</p>
</blockquote>
<blockquote>
<p>想在这样的世界过得顺风顺水，需要心态非常灵活、情感极度平衡。人类将不得不一再放弃某些自己最熟悉的事物，并要学会与未知和平相处。</p>
</blockquote>
<blockquote>
<p>一套故事可以纯粹出于虚构，只要能让我们有身份认同，觉得人生有意义，就已足够。事实上，如果以我们目前的科学知识来判断，全世界有史以来所有文化、宗教和部落的千千万万个故事，没有一个是真实的，全部只是人类的发明。如果你想问人生有何真正的意义，而对方是用一个故事来回答你，这个答案肯定是错的。故事细节如何并不会有所区别，任何故事，都一定是错的。原因在于，宇宙绝不是以故事的方式运作。</p>
</blockquote>
<blockquote>
<p>多数故事之所以仍能屹立不倒，靠的并不是稳固的地基，而是屋顶的重量。以基督教的故事为例，这套故事的基础实在薄弱。到底有什么证据可以证明全宇宙创造者的儿子是在大约两千年前、在银河系的某个地方以碳基生命[5]形式诞生？又有什么证据可以证明这事发生在加利利，而且他的母亲还是个处女？虽然如此，以这个故事为基础，全球就是建立起了许多重要的机构与体制，而且单凭其重量就形成了强大的力量，使这个故事颠扑不破。</p>
</blockquote>
<blockquote>
<p>“仪式”是一种神奇的行为，能让抽象变得具体、虚构变得真实。</p>
</blockquote>
<blockquote>
<p>而讲到军事，纪律和仪式的关系密不可分，从古罗马到如今，士兵花上无数小时，练习着行进，敬礼，把靴子擦得锃亮。拿破仑有句名言，说他只要用一个勋章，就能让士兵愿意献出自己的生命。</p>
</blockquote>
<blockquote>
<p>而讲到仪式的重要性，或许最懂这件事的就是孔子了。对孔子来说，尊礼是社会和谐、政治稳定的关键。诸如《礼记》《周礼》《仪礼》等儒家经典，记载了各种国事场合需要怎样的仪式，甚至连礼器的数量、乐器的种类、礼服的颜色，诸多规范巨细无遗。而每当国家遭遇危机，儒家很快就会认为必定是哪里失了礼，就好像在打了一场败仗之后，长官认为败因在于士兵没有把靴子擦干净。[9]</p>
</blockquote>
<blockquote>
<p>在现代西方，儒家对礼仪的执迷往往被认为是浅薄的和过时的，但事实上，由此或许正可看出孔子对人性有着怎样深刻和永恒的理解。儒家之所以能够从中国流传到韩国、越南和日本，并且形成源远流长的社会和政治结构，或许并非偶然。如果想知道生命的终极真相，礼仪和仪式会是个巨大的障碍。但如果你想知道的是如何达到社会的稳定与和谐（就像孔子那样），真相往往只是一种负担，而礼仪和仪式反而是你最好的伙伴。</p>
</blockquote>
<blockquote>
<p>到了2018年，还是有很多人认为两根木棍钉在一起就成了上帝，墙上一张五颜六色的海报就成了革命，而在风中飘扬的一块布就成了国家。你当然不可能看到或听到法国，因为法国只存在于人的想象当中，但你确实可以看到三色旗，听到《马赛曲》。于是，靠着挥舞国旗，咏唱国歌，国家就从一个抽象的故事变得现实且一触可及。</p>
</blockquote>
<blockquote>
<p>印度政府要把资源拿来升起巨大的国旗，而不是在德里的贫民窟建造污水处理系统？原因就在于这面国旗可以让印度变得“真实”，而这是污水处理系统做不到的。</p>
</blockquote>
<blockquote>
<p>就算你因为信仰上帝或相信国家的概念而受苦，并不能证明就真有上帝或真有国家。或许你只是因为自己太轻信谣言，所以得付出代价？但大多数人并不喜欢承认自己是傻瓜。所以，他们为某种信念牺牲越多，这种信念就会越强烈。这正是牺牲献祭这件事神奇的魔力。主持献祭的神职人员想让我们臣服于神威之下，并不需要给我们什么（无论是雨水、金钱，还是胜利），反而要从我们这里取走一些东西。只要我们被说服并做出某些痛苦的牺牲，我们就会被困在这个概念里。</p>
</blockquote>
<blockquote>
<p>你认为女性为什么想要对方为自己戴上钻戒？对方一旦做出如此巨大的经济牺牲，就得说服自己，这一切一定有价值、有意义。</p>
</blockquote>
<blockquote>
<p>如果你因某个故事之名给自己造成痛苦，你的选择是：“我要么相信这个故事是真的，要么就是个容易受骗的傻瓜。”但如果你是因某个故事之名给别人造成痛苦，你的选择则是：“我要么相信这个故事是真的，要么就是个残忍无情的坏蛋。”而因为我们既不想承认自己是傻瓜，也不想承认自己是坏蛋，只好相信这个故事是真的。</p>
</blockquote>
<blockquote>
<p>人类很少把所有的信念都投注在单一的故事上，而是有个“信念组合”，里面有几个不同的故事、几个不同的身份认同，可以配合需求任意切换。几乎所有的社会和运动，都有这种认知失调的情形。</p>
</blockquote>
<blockquote>
<p>可以找到许多伯尼·桑德斯（BernieSanders）的支持者，一边相信未来会出现革命，一边相信应该做出明智的投资。就算原本是在讨论现在的财富分配如何不公平，他们也可以轻轻松松忽然转向讨论他们在华尔街的投资表现。</p>
</blockquote>
<blockquote>
<p>民族主义告诉我的，是我的国家独一无二，而我对自己国家的义务应该不同于一般；而法西斯主义告诉我的，是我的国家比别人的更优越，而我对自己国家的义务应该排挤掉其他一切义务。在任何情况下，其他团体或个人的利益，都不应该超越我的国家的利益。就算我的国家会给远方土地上几百万个陌生人造成极大的痛苦，而且换得的利益微不足道，我还是该无条件地支持我的国家，否则我就是个卑鄙的叛徒。我的国家要我杀几百万人，我就该杀几百万人。我的国家要我背叛真相、背叛美的事物，我就该背叛真相、背叛美的事物。</p>
</blockquote>
<blockquote>
<p>这种国家崇拜对人很有吸引力，因为这会让人觉得自己的国家是全世界最美、最重要的。第二次世界大战与纳粹大屠杀事件，就代表这种思维方式可能带来的骇人结果。很遗憾，现在要批评法西斯主义究竟有何不好，常常成效不彰，原因在于只把法西斯主义讲得像头恐怖的怪兽，却没提法西斯主义有何诱人之处。</p>
</blockquote>
<blockquote>
<p>确实，纳粹大约有20%的区长（gauleiter，相当于现在的省长或州长）、10%的将军决定自尽[19]，但这也代表有80%的区长、90%的将军非常乐意继续活下去。至于绝大多数领有党证的纳粹党员，甚至盖世太保的成员，都既没有发疯，也没有自杀，后来成了很好的农夫、教师、医生或保险代理人。</p>
</blockquote>
<blockquote>
<p>只要政客的话语开始掺杂一些神秘的语词，就该提高警惕。面对真实的痛苦，这些人可能会用某些空泛难解的表达来加以包装，作为申辩。其中有四个词要特别小心：牺牲、永恒、纯净、恢复。只要听到其中任何一个，心中就该警铃大作。如果领导人常常说“他们的牺牲，将能恢复我们这个永恒国家的纯净”之类的话，你就该知道自己问题大了。想要维持理智，就要记得把这些空话转回现实：有士兵痛苦地哭泣，有妇女遭到殴打和残虐，有儿童恐惧地颤抖。</p>
</blockquote>
<blockquote>
<p>内观（Vipassana，这是古印度巴利文，意为“内省”）禅修课程。</p>
</blockquote>
]]></content>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>[译] FP vs OO</title>
    <url>/blog/2019/11/03/fp-vs-oo/</url>
    <content><![CDATA[<p>原文地址：<a href="https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html">https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html</a></p>
<p>原作者：Robert C. Martin (Uncle Bob)</p>
<p>在过去的几年中，我通过与人结对来学习函数式编程，他们中的很多人表达了反对OO的偏见。他们经常会说：“啊，这太像对象了。”</p>
<p>他们会这样说是因为他们认为FP和OO在某种程度上是互斥的。许多人似乎认为程序FP的程度等同于其非OO的程度。我认为这种观点是学习新事物的自然结果。</p>
<p>当我们采用一种新技术时，我们通常倾向于避开以前使用的旧技术。这很自然，因为我们认为新技术“更好”，因此旧技术就一定是“更糟”的。</p>
<p>在此博客中，我将说明OO和FP是正交的，但它们并不互斥。一个好的函数式程序可以（并且应该）是面向对象的。而且一个好的面向对象程序可以（并且应该）是函数式的。在此之前，我们必须非常谨慎地给FP和OO这两个词语下个定义。</p>
<h1 id="什么是OO？"><a href="#什么是OO？" class="headerlink" title="什么是OO？"></a>什么是OO？</h1><p>我将在这里采取非常还原主义的立场。OO有许多有效的定义，涵盖了丰富的概念，原理，技术，模式和哲学。在这里，我将忽略所有这些内容，而将重点放在最基础的东西上。我采取这种还原主义的原因是，很多围绕着OO的丰富特性实际上根本不是OO所特有的，而是整体软件开发丰富性的一部分。在这里，我将重点介绍面向对象不可分割的那部分。</p>
<p>看看以下两个表达式：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>：<span class="built_in">f</span>(o);</span><br><span class="line"><span class="number">2</span>：o<span class="selector-class">.f</span>();</span><br></pre></td></tr></table></figure>

<p>有什么区别？</p>
<p>显然，没有实际的语义差异。差异完全在语法上。但是一个看起来是FP的，另一个看起来是OO的。这是因为我们会推断表达式2具有特殊的语义行为，同时我们推断表达式1不具有这种特殊语义行为。这种特殊语义行为就是：多态性。</p>
<p>当我们看到表达式1时，我们看到名为f的函数被应用在了o上。我们推断只有一个名为f的函数，并且它可能不是围绕着o的标准函数中的一员。</p>
<p>另一方面，当我们看到表达式2时，我们看到一个名为f的消息被发送给了一个名为o的对象。我们推测可能还有其他类型的对象可以接受该消息f，因此我们不知道被调用的f具体是哪一个。<strong>其行为取决于o的类型，即f是多态的。</strong></p>
<p>对多态性的这种预期是OO编程的本质。这是还原论的定义；它与OO密不可分。没有多态性的OO不是OO。OO的所有其他属性，例如封装的数据，绑定到该数据的方法，甚至继承，与表达式1的关系要比与表达式2的关系更多。</p>
<p>C和Pascal程序员（甚至在某种程度上甚至包括Fortran和Cobol程序员）都创建了包含封装函数和数据结构的系统。要创建和使用这种封装的结构并不一定非得需要OO语言。封装，甚至简单的继承，在此类语言中都是显而易见且自然的。（在C和Pascal中比其他更自然。）</p>
<p>因此，真正将OO程序与非OO程序区分开的是多态性。</p>
<p>您可能会说可以通过在f内部使用switch语句或if&#x2F;else来实现多态。的确如此，因此我必须向OO添加一个约束。</p>
<blockquote>
<p>多态机制一定不能创建从调用方到被调用方的源码依赖关系。</p>
</blockquote>
<p>为了解释这一点，请再次看看上文的两个表达式。表达式1：f(o)似乎对f函数的源码有依赖。我们之所以如此推断是因为我们推断只有一个f，所以调用者必须认识被调用者。</p>
<p>但是，当我们看表达式2时，从o.f()我们推断出一些不同的东西。我们知道可能会有很多个f的实现，而且我们不知道真正要被调用到的是其中哪个。因此表达式2对于f函数的源码没有依赖。</p>
<p>具体来说，这意味着包含对函数进行多态调用的模块（源文件）绝对不能以任何方式引用包含这些函数实现的模块（源文件）。不可以有任何include或use或require或任何其它这样的声明使得一个源文件依赖另一个。</p>
<p>因此，我们对OO的简化定义是：</p>
<blockquote>
<p>调用者的源码对于被调用者的源码不产生依赖的一种动态多态技巧。</p>
</blockquote>
<h1 id="什么是FP？"><a href="#什么是FP？" class="headerlink" title="什么是FP？"></a>什么是FP？</h1><p>同样，我将采用还原主义。FP具有悠久的历史和传统，可追溯到软件之外的其他领域。FP范式里存在很多原理，技术，定理，哲学和概念。我将忽略所有这些内容，直接进入将FP与任何其他范式区分开的不可分割的属性。简而言之，就是：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">当 a<span class="operator">=</span><span class="operator">=</span>b 时 f(a)<span class="operator">=</span><span class="operator">=</span>f(b)</span><br></pre></td></tr></table></figure>

<p>在函数式程序中，每次调用同一个函数并给出同一个参数时，都会得到相同的结果。无论程序执行了多长时间。这叫做引用透明性。</p>
<p>这意味着函数f不可以更改任何影响函数f行为方式的全局状态。而且，如果我们说函数f可以代表系统中的所有函数 – 系统中的所有函数都必须是引用透明的 – 那么系统中的任何函数都无法改变任何全局状态。系统中的任何函数都无法执行任何操作，来导致系统中的另一个函数对相同的输入返回不同的值。</p>
<p>其更深的含义是，任何命名值都无法更改。也就是说，不能有赋值运算符。</p>
<p>现在，如果您仔细地考虑一下，您可能会得出这样的结论：仅由引用透明的函数组成的程序根本无法执行任何操作-因为任何有用的系统行为都会改变某些事物的状态。即使只是打印机或显示器的状态。但是，如果我们从引用透明性约束中排除硬件以及外界的任何元素，那么事实证明我们确实可以创建非常有用的系统。</p>
<p>诀窍当然是递归。考虑一个以state数据结构作为参数的函数。此参数包含函数工作需要的所有状态信息。该函数将创建一个新的state，里面包含更新过的值。该函数做的最后一件事就是调用它自己并把新的state作为参数传递进去。</p>
<p>这是函数式程序可以用来跟踪内部状态的变化而无需真正改变任何内部状态的简单技巧之一。</p>
<p>因此，函数式编程的简化定义为：</p>
<blockquote>
<p>引用透明 – 没有重新赋值。</p>
</blockquote>
<h1 id="FP-vs-OO"><a href="#FP-vs-OO" class="headerlink" title="FP vs OO"></a>FP vs OO</h1><p>现在OO和FP社区都要向我开炮了。还原主义不是赢得朋友的好方法。但这有时很有用。我认为有必要在似乎正在传播的FP vs OO的迷因上说两句。</p>
<p>显然，我选择的两个归约定义是完全正交的。多态和引用透明之间没有任何关系。它们之间没有交集。</p>
<p>但是正交并不意味着相互排斥（问问麦克斯韦就知道了）。建立同时使用动态多态性和引用透明性的系统是完全可能的。不仅可能，而且是可取的！</p>
<p>为什么是可取的？二者各自独立可取，合一仍可取！我们希望系统具有动态多态性，为了解耦。依赖关系可以跨架构边界反转。可以使用Mocks and Fakes和其他类型的Test Doubles进行测试。可以在不强制更改其他模块的情况下修改模块。这使得系统更易于更改和改进。</p>
<p>我们还希望系统具有引用透明性，为了可预测性。无法更改内部状态使系统更易于理解，更改和改进。它大大减少了竞态和其他并发更新问题的机会。</p>
<p>底线是：</p>
<p>没有FP vs OO。</p>
<p>FP和OO可以很好地合作。这两个属性都是现代系统所希望具有的。同时基于OO和FP原理构建的系统将最大限度地提高灵活性，可维护性，可测试性，简单性和健壮性。排斥一个赞成另一个只会削弱系统的结构。</p>
]]></content>
      <tags>
        <tag>Uncle Bob</tag>
      </tags>
  </entry>
  <entry>
    <title>小岛经济学</title>
    <url>/blog/2019/01/06/2019-1-6-island-economy/</url>
    <content><![CDATA[<h1 id="第一章一个好点子出炉了"><a href="#第一章一个好点子出炉了" class="headerlink" title="第一章一个好点子出炉了"></a>第一章一个好点子出炉了</h1><p>基本的经济原则，这个原则可以提高人们的生活水平：消费不足，敢于冒险！</p>
<p>在经济学术语中，资本指的是一种设备，这种设备的建设和使用本身没有什么意义，其意义在于利用设备建设和制造其他需要的东西。艾伯想要的不是那张网，而是鱼。这张网或许可以给他带来更多的鱼。因此，这张网就是一种资本，是有价值的。</p>
<p>在艾伯孤注一掷去编织渔网之前，小岛上还没有什么储蓄之所。他决定冒险挨饿制造的这张网成了小岛上的第一件资本设备。这件设备接着会带来储蓄（为了让这个故事能够继续进行，我们假设这些鱼不会腐烂变质），而这种剩余产品就是健康经济的命脉。</p>
<p>工具改变了一切，使经济的出现成为可能。长矛帮助我们捕获猎物，铲子帮助我们种植庄稼，渔网帮助我们捕鱼。这些工具提高了我们的劳动效率。我们生产的东西越多，可以消费的东西就越多，我们的生活也就变得越美好。</p>
<p>努力使有限的资源（每种资源都是有限的）产生最大的效益以尽可能满足人类的需求，这就是经济这一概念最简单的定义。工具、资本以及创新是实现这一目标的关键。</p>
<p>经济增长的原因：找到了生产人类所需物品的更好方式。不管一个经济体最后变得多么强大，这个原因是不会改变的。</p>
<p>第一章，经济的增长主要取决于生产力的提高。</p>
<h1 id="第二章把财富分享给别人"><a href="#第二章把财富分享给别人" class="headerlink" title="第二章把财富分享给别人"></a>第二章把财富分享给别人</h1><p>虽然艾伯从来没有刻意使他人受益，但他的资本无疑帮助了岛上的所有人。</p>
<p>处理储蓄（鱼）的方式只有5种：1.他可以把储蓄存起来。2.他可以把储蓄消费掉。3.他可以把储蓄借出去。4.他可以用储蓄投资。5.他可以将上述4个方式有机结合起来。毫无疑问，艾伯的最终决定取决于个人对风险和回报的偏好。但不管最终方案是什么，他的抉择都会惠及这座小岛的经济，而且也不会给自己的两个邻居增加负担。</p>
<p>有了多余的鱼，小岛上的几位居民每天终于可以比原来多吃一些鱼了（原来是每天一条鱼），但是经济并没有增长，因为他们的消费增长了。而他们的消费之所以增长，是因为经济增长了。这个道理很简单，但令人不解的是现代经济学家竟然会在这个简单的问题上纠缠不休。</p>
<p>大多数经济学家认为，给老百姓更多的钱花就可以增加需求，但是这种做法并不能改变真正的需求，只会使人们花更多的钱购买已经生产出来的商品。只有增加供给才能切实满足人们更多的需求。</p>
<p>假设艾伯对自己的相对财富有些负罪感，听了两个人的说法后思想动摇了，于是无偿地把鱼分给了他们，那么贝克和查理会怎样处理这些鱼呢？没有了还款的压力，两个人最有可能做的是利用这份礼物享受闲暇时光。这样做并没有什么错（事实上，这也是大多数人类行为的目标），但是贝克和查理的假日时光并不能提高这座小岛的生产能力。因此，尽管慈善之举听起来颇有雅量，也会提升艾伯的人气，但这一举动却无法像商业贷款一样推动经济发展。</p>
<p>最根本的是，所有能够增加捕鱼（生产）量的事物都会惠及小岛，鱼越多，大家就越有可能吃到更多东西，也就越有可能做捕鱼以外的事情，</p>
<p>也许有人会想，如果艾伯果真是一个贪心的人，拿着自己的新财富生财，从而变得越来越富有，那该怎么办？这样真的很危险吗？如果艾伯增加储蓄（而不需要亲自劳动）的唯一途径就是将这些储蓄借给自己的邻居的话，那他又何必大量囤积呢？但若非如此，他的财产就不会增加，甚至还会越来越少，因为他自己还要消费呢！私人资本主义可以促使那些将个人利益作为唯一动机的人帮助他人提高生活水平，这是最有意义的。</p>
<p>财富从来就是一个相对的概念。</p>
<p>富人致富的原因（至少开始时）是他们为他人提供了有价值的东西。艾伯就为那些没有足够储蓄的人提供了储蓄。如果他赢利了，那也是因为他提供的服务对别人是有价值的。</p>
<p>第二章。资本的流动有助于提高生产力。</p>
<p>借贷市场会受到外力挤压，如果出现这种情况，灾难便在所难免了。</p>
<h1 id="第三章信用卡的多种用途"><a href="#第三章信用卡的多种用途" class="headerlink" title="第三章信用卡的多种用途"></a>第三章信用卡的多种用途</h1><p>商业贷款是资本的最佳用途，因为这样可以扩大生产。</p>
<p>当然，通过借钱或借鱼的做法创业，无法保证企业一定会成功，因为借款人可能无法完全实现自己最初的计划。</p>
<p>商业贷款并非社会储蓄的唯一选择，艾伯还可以选择其他贷款形式——消费贷款和应急贷款。</p>
<p>消费贷款如果不能提高产能的话，这笔贷款无论是对贷款人还是借款人来说都是一种负担。</p>
<p>出现了紧急情况，艾伯可以从自己的储蓄（鱼）中拿出一部分作为困难生活贷款。贝克和查理可以先吃借来的鱼，等身体恢复了再出去捕鱼。尽管艾伯很清楚这次的“贷款”血本无归的可能性很大，但他知道，如果不贷款给他们，风险更高。与消费贷款不同，如果艾伯不向贝克和查理提供这份应急贷款，两人很可能会丧命。如果真的发生这种情况，这座小岛就失去生产能力了。</p>
<p>这些政策的关键推动因素就是认为政府规划者要比储蓄者更清楚什么有利于社会发展的观念。</p>
<p>实际信贷是受有限储备制约的。</p>
<p>现在，人们都认为信贷市场的有效运作所需要的就是有意愿的借款人。然而，与其他资源一样，在发放贷款前必须先积累储蓄才行。</p>
<h1 id="第四章经济到底是如何发展的"><a href="#第四章经济到底是如何发展的" class="headerlink" title="第四章经济到底是如何发展的"></a>第四章经济到底是如何发展的</h1><p>这些丰富的活动说明了人类社会在农业发展之后所发生的变化。只有当我们能够生产出额外的食物时，我们才有时间做其他事情。</p>
<p>一笔备用的储蓄会防止经济崩溃，可以迅速重建受损的资产。</p>
<p>消费不能超过产能，我们的借款不能超出存款，</p>
<p>储蓄创造了资本，而资本使生产扩大成为可能，所以储蓄起来的一美元对经济产生的积极影响要大于消费掉的一美元。</p>
<h1 id="第五章在鱼被指定为货币之后"><a href="#第五章在鱼被指定为货币之后" class="headerlink" title="第五章在鱼被指定为货币之后"></a>第五章在鱼被指定为货币之后</h1><p>岛上的价格体系和鱼的真实（或者固有）价格相关。</p>
<p>达菲提高生产率，受益的不只是他自己，还有岛民。价格降低之后，更多的人买得起独木舟，因此他的顾客群也扩大了。</p>
<p>由于生产率提高了（储蓄、创新和投资的结果），独木舟的价格便随之下降，更多顾客能够享受到拥有独木舟的好处。昔日富人独享的奢侈品也成了普通消费品。</p>
<p>技术创新是个单向的过程。除非人们失去记忆，否则生产效率必然会越来越高。因此，价格具有随着时间推移而降低的趋势。</p>
<p>得益于他的资本，莫里收费更低，但是赚取的利润更多。</p>
<p>如果货币供应稳定（就像美联储成立前的美国那样），生产率的提高会促使价格下降。</p>
<p>价格下降并不一定会影响特定行业的发展，我们不止一次地见证过这一点。</p>
<p>虽然计算机的价格不断大幅下降，但是这个行业的赢利还是非常丰厚。产品价格的下跌并未阻挡计算机革新的步伐。</p>
<p>起决定作用的不是消费，而是生产！</p>
<p>虽然有这么多反面证据，通货紧缩还是被当作经济的头号敌人。这是因为通货紧缩（与通货膨胀相反）是政治家最好的朋友。这一点我们在后面会详细说明。</p>
<h1 id="第六章为什么会有储蓄"><a href="#第六章为什么会有储蓄" class="headerlink" title="第六章为什么会有储蓄"></a>第六章为什么会有储蓄</h1><p>虽然岛民愿意通过贷款和投资使自己多余的鱼增值，但是大多数人既没有时间也没有能力判断某项商业计划的优劣。</p>
<p>他用邻居的储蓄放贷，所获收益的一部分作为储户的利息和看守人员的工资，剩下的部分作为自己的利润。</p>
<p>有时生产率大幅提高，岛上的存鱼量也随之大大增加。如果储藏室里堆满了鱼，银行就会主动降低贷款利率。因为此时银行承受损失的能力较强，而且健康的经济也为新企业的发展提供了良好的环境。</p>
<p>当存鱼较少时，迈克斯放贷就格外谨慎。因为在储蓄不足的情况下，一旦有人拖欠贷款，后果将非常严重。为了抵消高风险可能带来的损失，迈克斯会向借款人收取更高的利率，并提高存款利率以刺激储蓄。</p>
<p>高利率会抑制借贷，延缓经济增长。但同时，高利率也能刺激储蓄。最终，银行资产会再次积累起来，到那时利率又会下降。</p>
<p>曼尼从那些对银行存款利率不满意的储户那里募集存鱼，然后再把募集到的鱼投入备受瞩目的项目。</p>
<p>美联储的决定总是基于政治考量而非经济因素。因为低利率能够使经济表面上表现更好，降低还款压力，还能帮金融公司赚钱，所以很多人都喜欢低利率。</p>
<p>低利率会刺激借贷、抑制储蓄，</p>
<h1 id="第七章基础设施与贸易"><a href="#第七章基础设施与贸易" class="headerlink" title="第七章基础设施与贸易"></a>第七章基础设施与贸易</h1><p>提供就业岗位并非经济的目的。经济的目的是不断提高生产力。</p>
<h1 id="第八章一个共和国就这样诞生了"><a href="#第八章一个共和国就这样诞生了" class="headerlink" title="第八章一个共和国就这样诞生了"></a>第八章一个共和国就这样诞生了</h1><p>如果生产者不缴纳税款，政府雇员连饭都吃不上。</p>
<h1 id="第九章政府的职能开始转变了"><a href="#第九章政府的职能开始转变了" class="headerlink" title="第九章政府的职能开始转变了"></a>第九章政府的职能开始转变了</h1><p>一些参议员基于情感原因认为，宪法中关于纳税与投票权的关系从根本上来说是非民主的。基于进步主义精神，这项规定被废除了，很多不太关心政府预算支出的人也获得了投票权。</p>
<p>你们每发行10张钞票，我都只有9条鱼可以兑换。如果储户发现我们没有足够的鱼可以兑换，他们就会蜂拥到银行来兑现，那时我就没有存鱼啦。你必须停止发行鱼邦储备券，并提高税率。我们必须恢复储备。”</p>
<p>一旦岛上的储户意识到把鱼存在银行不安全，他们就会停止储蓄。他们会像从前那样把鱼堆在家里。那样的话，我们就没有足够的资本维持我们现在赖以生存的设施，更没有资金投资新的项目了！我们的整个经济就会崩溃！”</p>
<p>1913年，美联储成立。美联储发行纸币，承诺纸币持有者可以随时将其兑换成黄金，从而取代了当时流通的私营银行发行的钞票。</p>
<h1 id="第十章不断缩水的鱼就像货币一样"><a href="#第十章不断缩水的鱼就像货币一样" class="headerlink" title="第十章不断缩水的鱼就像货币一样"></a>第十章不断缩水的鱼就像货币一样</h1><p>官鱼越来越小，不久后岛民每天只吃一条鱼已经无法填饱肚子了，大多数人每天至少要吃两条鱼。因为官鱼是岛上的货币，所以物价都必须相应上涨才能弥补鱼损失的营养价值。于是通鱼膨胀的难题产生了。</p>
<p>随着通鱼膨胀愈演愈烈，岛民们终于注意到他们从银行取出的鱼比他们存入银行的鱼要小。因此，虽然有利息的诱惑，人们还是开始减少储蓄，有些人索性一点儿也不储蓄了。反过来，由于物价不断快速上涨，人们必须抓紧消费，以免损失鱼的价值。</p>
<p>快速的通鱼膨胀的最大受害者是退休人员。在参加工作的那些年里他们把鱼存入银行，而现在他们每天必须吃两三条鱼才能果腹。他们原以为可以让他们维持生活20年的储蓄，四五年就用光了。</p>
<p>通鱼膨胀抑制储蓄，银行储蓄额随之降低了。结果，可以用来投资有前景的项目或者支持不景气的企业的存鱼减少了。</p>
<p>通货膨胀其实就是货币供应量增加，与其相反的情况即为通货紧缩，意指货币供应收紧。从另一方面来说，价格自身其实不会膨胀或者紧缩，只会上涨或下跌。所以膨胀的不是价格，而是货币供应。</p>
<p>凡是1990年以前出版的字典对通货膨胀的定义都是货币供应量的增加。较新版本的字典的定义就开始松动了。</p>
<p>忘记了一旦物价下跌到一定程度，人们就会开始消费。这个过程淘汰了不必要的产能，把物价调低到符合内在供求关系的水平。</p>
<p>产能过剩</p>
<h1 id="第十一章中岛帝国：远方的生命线"><a href="#第十一章中岛帝国：远方的生命线" class="headerlink" title="第十一章中岛帝国：远方的生命线"></a>第十一章中岛帝国：远方的生命线</h1><p>多年来，经济学家对美中关系的理解一直是错误的。大多数人认为那是一种互利互惠的双边关系：美国得到廉价商品和贷款，中国得到制造业的就业机会。然而，这真的是一种双赢的安排吗？美国人占了便宜：他们不用生产就可以得到商品，不必储蓄就可以得到贷款。而对于中国人来说，他们辛勤工作却不能消费自己生产的产品，他们努力储蓄却得不到贷款。</p>
<p>美国的低利率很大程度上是由国外的高储蓄率造成的，大多数当代经济学权威都没有意识到这一点。要记住，想要借贷，就必须先储蓄。所幸，对于美国来说，全球经济使得借与存的关系可以不受国境的限制。</p>
<p>外国人持有的美元很多都存在美国的银行里，因而又可以借贷给美国人。这么一来，美国人即使不储蓄也可以获得贷款。</p>
<p>如果没有中国和其他国家的储蓄，美国人以及美国政府想要借钱就会很困难，他们将不得不承担高额的贷款利率。对于靠贷款推动的美国经济而言，利率偏高和信贷吃紧是一个致命的组合。</p>
<h1 id="第十二章服务业是如何崛起的"><a href="#第十二章服务业是如何崛起的" class="headerlink" title="第十二章服务业是如何崛起的"></a>第十二章服务业是如何崛起的</h1><p>正常来讲，贸易逆差能够自我调节。如果一个国家处于贸易顺差状态，也就是说其出口额大于进口额，就会在国际上形成对其货币的需求。如果你想要该国的产品，你就需要该国的货币。所以，强势的贸易地位会使一国货币坚挺，弱势的贸易地位会导致该国货币疲软。如果没有人想购买你的产品，也就没有人需要你的货币。但是，一旦一国的货币升值，该国的产品也会相应涨价。这就给处于弱势贸易地位的国家提供了进入该国市场的机会。他们的商品销售得越多，国际市场对其货币的需求就越大。这股货币平衡力量会使脱缰野马般的贸易失衡得到控制。</p>
<h1 id="第十四章棚屋价格是如何涨上去的"><a href="#第十四章棚屋价格是如何涨上去的" class="headerlink" title="第十四章棚屋价格是如何涨上去的"></a>第十四章棚屋价格是如何涨上去的</h1><p>银行想寻找一个稳妥的项目，最后它们盯上了岛上沉睡着的棚屋贷款市场，认为那是低风险贷款的理想对象。</p>
<p>虽然棚屋贷款不能提高岛上的生产能力和借款人的还款能力（商业贷款则可以），但是这些贷款安全性很高。与那些借给前途未卜的企业家的商业贷款不同，棚屋贷款有天然的抵押物，也就是所购买的棚屋。如果借款人不能还款，银行还可以没收棚屋，把它卖掉，以偿还贷款。</p>
<p>有些岛民愤愤不平，因为并不是所有人都有机会获得棚屋贷款。富人一般很容易得到贷款，而没有储蓄或者信用记录较差的人就没那么幸运了。有人觉得穷人被剥夺了使用岛上财富的权利。参议员认为这是潜在的竞选议题，于是插手进来，想要解决这个问题。</p>
<h1 id="第十五章快了！快了！棚屋市场要崩溃了"><a href="#第十五章快了！快了！棚屋市场要崩溃了" class="headerlink" title="第十五章快了！快了！棚屋市场要崩溃了"></a>第十五章快了！快了！棚屋市场要崩溃了</h1><p>他们手里已经有很多钞票了。如果他们不接受，那些钞票只会更加贬值。他们现在只能任由我们摆布。</p>
<h1 id="第十六章情形怎么变得如此糟糕"><a href="#第十六章情形怎么变得如此糟糕" class="headerlink" title="第十六章情形怎么变得如此糟糕"></a>第十六章情形怎么变得如此糟糕</h1><p>选择很简单：1．减少消费，用储蓄还债；2．增大产量，卖掉多余的货物还债；3．追加贷款，继续保持现有的消费水平。在前两个选择中，美索尼亚人都要吃苦。要么努力工作，要么减少消费，再不然就是双管齐下。而第三种选择可以把一切痛苦转嫁给外国人。毫无疑问，参议员们勇敢地选择让外国人当替罪羊。通过这些措施，他们希望恢复消费支出，重新建立国内健康的经济环境。</p>
<p>记住，一国的经济不会因为人们的消费而增长，而是经济增长带动人们的消费。</p>
<p>2009年，美国的存款率多年来首次升高，贸易逆差在飙升10年后也开始萎缩。但是，小布什和奥巴马政府的刺激计划结束了这一进程。美国人本该回到与生产力相称的生活水平上去，但他们的计划制造了更加巨大的债务，从而延缓了这个过程。</p>
<p>如果美国政府不在财政上严于律己，美国的债权人（主要是中国和日本）迟早会要求美国那么做。债权人可以选择多种方式让美国就范，最有效的一招就是停止购买美国的国债。</p>
<h1 id="第十七章缓兵之计"><a href="#第十七章缓兵之计" class="headerlink" title="第十七章缓兵之计"></a>第十七章缓兵之计</h1><p>所谓“PIGS”（即葡萄牙、意大利、希腊和西班牙）国家卷入泥潭的债务危机。</p>
<p>尽管希腊从2004~2006年的房地产建设热潮中获益不少，但到了2010年，一个事实却越来越清晰：这个国家已经无望偿还已有的债务，更没有可能兑现自己对公民的承诺了。希腊成了一个臭名昭著的国家，成了短期工作、长期罢工、提早退休、连续逃税的代名词。通常来说，一个国家沦落到希腊这样的地步，会通过否认债务或货币贬值来应对危机。但作为欧元区的一员，这些做法希腊一样也不能采用。</p>
<p>欧洲的诸多问题对美国而言，无异于天赐良机。希腊首都雅典大街上游行的人群不仅是经济恶化的醒目标志，还使恐惧蔓延，令整个欧洲大陆深陷泥潭。这样的剧变使许多投资基金转而越过大西洋，去寻找更安全的避风港。于是，在美国经济亟须支撑之时，大量资金及时涌入美国。讽刺的是，许多经济学家对此的评论居然是，欧洲的问题已经成为美国经济的负担，然而实际上，这些问题带给美国的明明是一种福祉。</p>
<p>尽管很多人知道美国依赖量化宽松，但很少有人真正看透其本质：向金融市场注入新的资金，以推动价格上涨。实际上，量化宽松不过是通货膨胀的一种委婉表达，它也成为美联储将政府债务货币化的隐秘手段。</p>
<h1 id="第十九章无鱼不起浪"><a href="#第十九章无鱼不起浪" class="headerlink" title="第十九章无鱼不起浪"></a>第十九章无鱼不起浪</h1><p>通货膨胀不过是把财富从以某种货币储蓄的人手中转移到以同种货币负债的人那里。</p>
<p>如果遇到恶性通货膨胀，存款就会变得一文不值，负债却一笔勾销。（拥有固定资产的人情况会好一些，因为与以货币形式储蓄不同，固定资产的账面价值会暴涨。）这样</p>
<p>18世纪90年代的法国，19世纪60年代的美国南部邦联，20世纪20年代的德国，20世纪40年代的匈牙利，20世纪七八十年代的阿根廷和巴西以及现在的津巴布韦。在所有的这些例子中，引发恶性通货膨胀以及随后的经济灾难的原因都惊人地相似。这些国家都是通过降低货币价值偿还巨额外债，结果，本国的人民陷入了赤贫之中。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>金融危机发生数月以来，大家一致认为是因为缺乏足够的监管才会酿成苦果，在很大程度上忽视了政府和美联储的责任。结果，不该来的（财政支出和限制性规定）越来越多，该来的（储蓄和自由企业）越来越少。</p>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>经济</tag>
      </tags>
  </entry>
  <entry>
    <title>「译」大规模敏捷</title>
    <url>/blog/2019/12/06/in-the-large/</url>
    <content><![CDATA[<p>原文地址： <a href="https://blog.cleancoder.com/uncle-bob/2018/04/02/InTheLarge.html">https://blog.cleancoder.com/uncle-bob/2018/04/02/InTheLarge.html</a></p>
<p>原作者：Robert C. Martin (Uncle Bob)</p>
<p>自敏捷之开端始，我们就思考大规模敏捷的问题。我们是否能够把轻量级，迭代，增量，快速反馈等软件开发的原理应用于规模巨大的项目呢？</p>
<p>最初我们想到的答案是Scrum of Scrums之类的东西。这个想法是在更高的层次上递归地应用敏捷开发的原理。如果一个项目需要超过5-12个开发人员，那么可以组织两个这样的团队，以及一个更高级别的团队来“监督？”他们。</p>
<p>请注意上面的问号。当我们开始考虑大型项目时，我们不可避免地要谈及层级化的组织。但是敏捷似乎是厌恶组织层级的。毕竟，敏捷就是关于平等主义的。敏捷是拒绝命令和控制的。敏捷是拒绝计划和时间表的，还有…</p>
<p><strong>无稽之谈！并不是这样的！</strong></p>
<p>敏捷其实是一场“风水轮流转”的革命。在软件行业的早期，我们原本就以敏捷的方式编写代码。我们写小块代码片段，对其进行了测试，将它们构建为更大的块，如此循环往复。如果您回到1960年代后期，并观察当时人们编写代码的方式，您会发现敏捷的小荷尖尖角正在显露出来。</p>
<p>当然，当时我们在硬件方面受到了很大的限制。编译要跑好几个小时。代码编辑要用电传打字机。那时，大多数程序员根本不会使用键盘。因此他们让按键操作员替他们输入代码。在这种环境下，很难实现快速反馈机制。</p>
<p>即便如此，我们仍竭尽所能去缩短反馈周期。我们使用汇编器编写程序，坐在控制台前通过用八进制或十六进制打补丁的方式来进行调试。我们可以通过在调试器中执行代码，甚至通过单步执行来测试代码。经年累月，熟能生巧。这是在合理的时间内完成工作的唯一方法。</p>
<p>但是“风水轮流转”了。我们开始使用在控制台上不容易调试的语言。我们开始编写越来越大的程序。为了在反馈周期如此长的环境中工作，我们需要制定计划。</p>
<p>瀑布就在这样的环境中诞生了出来。当编辑,编译,测试的循环周期需要一整天的时候，我们需要进行大量的计划和检查。在24小时的循环周期内做TDD和重构是不现实的！</p>
<p>但是“风水”一直在转动。今天的大多数程序员都没有深切体会到摩尔定律的指数发展。我们从1970年的24小时循环周期，到1980年的60分钟循环周期，到1990年的十分钟循环周期，再到2000年的10秒循环周期。到2005年，大多数程序员的循环周期不到1秒。</p>
<p>敏捷就在这样的环境中诞生了出来。敏捷是对1960年代快速周转，高频反馈开发策略的一种历史回归，不过这次我们有了更强大的机器，更强大的语言和工具以及更大规模的项目。</p>
<p>敏捷也可以说是从历史的灰烬中浴火重生而来的。瀑布虽然在70年代和80年代是很有必要的，但却令人非常痛苦。在那几十年中，我们学会了哪些事情是不该做的。因此，当敏捷在90年代末出现时，它也承载着之前那段黑暗时期所积累的教训。</p>
<p>敏捷却也不仅仅是对短反馈周期的历史回归。敏捷在短反馈周期的基础之上增强了纪律。诸如测试，重构，结对编程和高度自动化之类的实践。敏捷确实让我们从六十年代的策略中前进了。</p>
<p>不过前进的方向是什么？敏捷革命改进了什么？</p>
<p>敏捷革命关注的是相对较<em>小</em>的团队如何开发相对较<em>小</em>的软件项目。请注意，我强调了“<em>小</em>”这个字。</p>
<p>敏捷团队擅长于创建十万行左右的软件系统。十万行已经可以做很多事情了。对于许多公司而言，一两个敏捷团队足以满足他们。</p>
<p>另一方面，如果您需要创建一个千万行代码的系统，那么一个敏捷团队就不够了。您需要大约一百个团队来构建千万代码行级别的系统。</p>
<p>但是，您如何管理一百个敏捷团队？您如何给他们提供用户故事？您如何协调它们之间的接口？您如何在那千万行代码中创造边界而让团队可以彼此独立工作？</p>
<p>以及您如何以“敏捷”的方式做到这一点？ （这才是真正的问题）</p>
<p><strong>答案是：你不能！</strong></p>
<p>我们人类非常擅长于建设大型项目。长久以来我们就知道如何做这件事。</p>
<p><img data-src="https://blog.cleancoder.com/assets/pyramids.jpg" alt="alt img"></p>
<p>想想我们人类完成过的真正巨大的项目吧。</p>
<ul>
<li>阿波罗登月：我们把人送到月球上！</li>
<li>诺曼底战役：我们在50英里坚固的防线上，以156000名士兵入侵了诺曼底。</li>
<li>我们拥有支持80亿人口的世界经济。</li>
<li>全球各地都有庞大的网络，您可以在树林里徒步时在手机上读这篇文章！</li>
<li>你要买东西吗？按几下手机，明天甚至今天就会有人来送快递。</li>
<li>我们将红色跑车驶入了太阳轨道。</li>
</ul>
<p>应该不用说更多例子了。我们人类确实非常擅长做大事。</p>
<p>那为什么我们对大型软件会有所忧虑呢？我们已经知道如何构建大型软件了。我们已经这样做了50多年或更久了。“大”的部分实际上从来不是问题所在。我们用敏捷解决的问题是关于“<strong>小</strong>”的那部分。我们之前不知道如何搞定的，是做<strong>小</strong>型项目。</p>
<p>我们一直都知道如何做大型项目。那就是分而治之。敏捷解决了其中“<strong>小</strong>”的那一部分。敏捷与“<strong>大</strong>”的部分无关。</p>
<p>但是，但是，但是，但是……平等主义！拒绝计划和命令与控制！敏捷！</p>
<p><strong>无稽之谈！</strong></p>
<p>敏捷不是平等主义。敏捷不是拒绝计划，也不是拒绝命令和控制。事实上，敏捷是命令和控制体系中最小单元的体现：战术小队。</p>
<p>是的，在层级结构的末端，命令和控制不再有效。一小组人可以通过大量反馈和激烈的沟通在较短的周期内工作，以实现目标。这就是一支敏捷的团队。在这个级别上，严格的命令和控制是极为有害的。但是在此级别之上，命令和控制就变得有必要了。在层级上越往上走，这种效应就越明显。没有大量的命令和控制，就无法设计，建造，生产和销售数以亿部的iPhone。</p>
<p>市场上有很多种大规模敏捷的玩法。有关该主题的书籍和博客也有很多。也有人成立了咨询公司，专门为大公司做大规模敏捷的转型。这没有什么不好的。</p>
<p>这些大规模敏捷方法所讲的策略和技术都没有错。只不过，它们不是敏捷的。它们与敏捷无关。它们是在人类几千年来用于完成重大工作的策略和技术的基础上加了点敏捷的“味道”。</p>
<p>这点味道来自敏捷使用的词汇和概念。增添些口味没有错–没问题。如果您喜欢使用敏捷中的词语和概念，那就尽管去用。但是不要过分关注它的“敏捷性”。一旦你要做大规模的事情，就离开了敏捷的领域。希望您的各个开发小组正在使用敏捷；但是整个大规模项目并不是敏捷的。</p>
<p>因为敏捷是专注于做”<strong>小</strong>“事情的。</p>
]]></content>
      <tags>
        <tag>Uncle Bob</tag>
      </tags>
  </entry>
  <entry>
    <title>Future-异步函数的两个视角</title>
    <url>/blog/2019/12/29/future-from-two-perspectives/</url>
    <content><![CDATA[<p>我们来一起看一下两个程序员之间的故事。</p>
<p>以下示例代码是用Scala写的，不过本文所讲的话题并不仅限于Scala，任何有Future&#x2F;Promise支持的语言都是适用的。<br>下面这个wiki页面罗列了各个有Future&#x2F;Promise支持的语言，已经涵盖了大多数的常用语言。<br><a href="https://zh.wikipedia.org/wiki/Future%E4%B8%8Epromise#%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8">Future与promise实现列表</a></p>
<h1 id="我是异步函数的编写者"><a href="#我是异步函数的编写者" class="headerlink" title="我是异步函数的编写者"></a>我是异步函数的编写者</h1><p>我写了两个异步函数,来提供给其他程序员同事使用。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">CallBack</span> </span>= <span class="type">Try</span>[<span class="type">String</span>] =&gt; <span class="type">Unit</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretendCallAPI</span></span>(callBack: <span class="type">CallBack</span>, okMsg: <span class="type">String</span>, failedMsg: <span class="type">String</span>) = &#123;</span><br><span class="line">  <span class="keyword">val</span> task = <span class="keyword">new</span> <span class="type">TimerTask</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() = &#123;</span><br><span class="line">      <span class="keyword">val</span> percentage = <span class="type">Random</span>.between(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (percentage &gt;= <span class="number">50</span>)</span><br><span class="line">        callBack(<span class="type">Success</span>(okMsg))</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (percentage &lt;= <span class="number">30</span>)</span><br><span class="line">        callBack(<span class="type">Failure</span>(<span class="keyword">new</span> <span class="type">Exception</span>(failedMsg)))</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        callBack(<span class="type">Failure</span>(<span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">&quot;network problem&quot;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="type">Timer</span>().schedule(task, <span class="type">Random</span>.between(<span class="number">200</span>, <span class="number">500</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> searchTB = pretendCallAPI(_, <span class="string">&quot;product price found&quot;</span>, <span class="string">&quot;product not listed&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> buyFromTB = pretendCallAPI(_, <span class="string">&quot;product bought&quot;</span>, <span class="string">&quot;can not buy, no money left&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这两个异步函数: <code>searchTB</code>用来从淘宝搜索物品,另一个<code>buyFromTB</code>用来购买搜到的物品。</p>
<p>由于仅仅是为了演示而写的,他们两个都是基于一个叫做<code>pretendCallAPI</code>的函数实现的。<br>顾名思义,<code>pretendCallAPI</code>并不会真的去调用淘宝的API,而只是模拟API的行为。</p>
<p>这个<code>pretendCallAPI</code>函数有几个行为特征:</p>
<ul>
<li>每次耗时200到500毫秒之间</li>
<li>每次执行有50%的几率成功</li>
<li>20%的几率遇到网络故障</li>
<li>另外30%的几率虽然网络没问题但是服务器会给你一个非正常的结果</li>
</ul>
<p>当然,由于我写的是异步算法,需要避免block caller thread。<br>所以当你调用<code>pretendCallAPI</code>的时候,这个函数是<strong>瞬间立即返回的</strong>。<br>那么当然我就<strong>无法在函数返回的时候return什么有用的东西</strong>给你了。</p>
<p>如果你想知道执行的结果到底是啥,你需要传给我一个<code>CallBack</code>,在我执行完后,通过<code>CallBack</code>来告知你执行的结果。<br>这个<code>CallBack</code>的完整签名表达式展开是<code>Try[String] =&gt; Unit</code></p>
<p>大家看<code>searchTB</code>和<code>buyFromTB</code>可能觉得他们长的有点奇怪,这是Scala里柯里化的写法。<br>也就是通过把<code>pretendCallAPI</code>包一层来构造新的函数,锁死两个参数,剩下的一个参数(也就是<code>CallBack</code>)就变成了新构造出来的函数的唯一参数了。<br>也就是说<code>searchTB</code>和<code>buyFromTB</code>的签名是<code>(Try[String] =&gt; Unit) =&gt; Unit</code>。</p>
<p>关于柯里化这个语言特性的更多信息:<br><a href="https://cuipengfei.me/blog/2013/12/25/desugar-scala-6/">https://cuipengfei.me/blog/2013/12/25/desugar-scala-6/</a></p>
<p>好了,现在这两个函数可以提供给大家使用了。</p>
<h1 id="我是异步函数的调用者"><a href="#我是异步函数的调用者" class="headerlink" title="我是异步函数的调用者"></a>我是异步函数的调用者</h1><p>听说异步函数已经写好了,我终于可以用他们来实现剁手业务了。</p>
<p>听函数作者讲了一下,用起来应该不会很难,那我来实现一下吧。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchPriceThenBuy</span></span>() = &#123;</span><br><span class="line">  searchTB &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Success</span>(searchMsg) =&gt;</span><br><span class="line">      println(searchMsg)</span><br><span class="line">      buyFromTB &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Success</span>(buyMsg) =&gt; println(buyMsg)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Failure</span>(err) =&gt; println(err.getMessage)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Failure</span>(err) =&gt; println(err.getMessage)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>searchTB</code>和<code>buyFromTB</code>并不难. 他们两个都是接受<code>CallBack</code>作为参数的函数。<br><code>CallBack</code>本身是个函数,它的签名是<code>Try[String] =&gt; Unit</code>。<br>而<code>Try</code>有两种形式,分别是<code>Success</code>和<code>Failure</code>。</p>
<p>所以在调用<code>searchTB</code>和<code>buyFromTB</code>的时候,必须把两个分支都给到(以免pattern match不到)。<br>这样在异步函数有结果的时候(无论成败)才能call back过来到我的代码,以便我能够在合适的时机做后续的处理(无论是基于成功做后续业务,还是做error handling)。</p>
<p>关于pattern match,可以参考这里:<br><a href="https://cuipengfei.me/blog/2013/12/29/desugar-scala-8/">https://cuipengfei.me/blog/2013/12/29/desugar-scala-8/</a><br><a href="https://cuipengfei.me/blog/2015/06/16/visitor-pattern-pattern-match/">https://cuipengfei.me/blog/2015/06/16/visitor-pattern-pattern-match/</a></p>
<p>这段代码跑一下的话,会有这么几种结果:</p>
<ul>
<li>搜到了,也买到了</li>
<li>搜到了,购买时遇到了网络故障</li>
<li>搜到了,由于支付宝钱不够而没买到</li>
<li>没搜到,购买行为未触发</li>
<li>搜索遇到网络故障,购买行为未触发</li>
</ul>
<p>一共就这么几种可能,因为<code>pretendCallAPI</code>是跑概率的,多跑几次这些情况都能遇到。</p>
<p>虽然实现出来不难,执行结果也没问题,但是总有点<strong>隐忧</strong>。</p>
<p>这里只有<code>searchTB</code>和<code>buyFromTB</code>两个函数,如果其他场景下我需要把更多的异步函数组合起来使用呢?岂不是要缩进很多层?</p>
<p>当然,缩进只是个视觉审美问题,是个表象,不是特别要紧.关键是<strong>我的业务逻辑很容易被这样的代码给割裂的鸡零狗碎</strong>,那就不好了。<br>我要给上游编写异步函数的同事反馈一下，看是否有办法解决这个问题。</p>
<h1 id="镜头切回到异步函数编写者"><a href="#镜头切回到异步函数编写者" class="headerlink" title="镜头切回到异步函数编写者"></a>镜头切回到异步函数编写者</h1><p>之前写的两个函数反馈不太好，主要是因为同事们认为使用<code>CallBack</code>不是最优的方式。<br>这个反馈确实很中肯，如果只有一个异步函数单独使用，用<code>CallBack</code>也没什么太大的问题，如果是很多个异步函数组合使用确实会形成多层嵌套的问题。<br>我作为上游程序员，确实需要更多地为下游调用者考虑。</p>
<p>既然如此，那我改版一下，免除掉让下游使用<code>CallBack</code>的必要性。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">CallBackBasedFunction</span> </span>= (<span class="type">CallBack</span>) =&gt; <span class="type">Unit</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">futurize</span></span>(f: <span class="type">CallBackBasedFunction</span>) = () =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> promise = <span class="type">Promise</span>[<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">  f &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Success</span>(msg) =&gt; promise.success(msg)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Failure</span>(err) =&gt; promise.failure(err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  promise.future</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> searchTBFutureVersion = futurize(searchTB)</span><br><span class="line"><span class="keyword">val</span> buyFromTBFutureVersion = futurize(buyFromTB)</span><br></pre></td></tr></table></figure>

<p>先定义一个<code>CallBackBasedFunction</code>，它代表一个接受<code>CallBack</code>为参数的函数的签名。</p>
<p>表达式展开后就是：　<code>(Try[String] =&gt; Unit) =&gt; Unit</code><br>这就符合了<code>searchTB</code>和<code>buyFromTB</code>两个函数的签名。</p>
<p><code>futurize</code>算是个higher order function,它接受一个<code>CallBackBasedFunction</code>作为参数，返回一个<code>() =&gt; Future[String]</code>。<br>(<code>Future</code>是Scala标准库的内容，可以认为和JS Promises&#x2F;A+是类似的概念)</p>
<p>也就是说<code>futurize</code>可以把<code>searchTB</code>和<code>buyFromTB</code>改造成返回<code>Future</code>的函数。上面代码最后两行就是改造的结果。</p>
<p>这样，原本接受<code>CallBack</code>做为参数且没有返回值的函数，就变成了不接受参数且返回<code>Future</code>的函数。</p>
<p>再看<code>futurize</code>的具体实现，它使用了Scala的<code>Promise</code>，让返回的<code>Future</code>在原版函数成功时成功，在原版函数失败时失败。</p>
<p>这样，我就得到了<code>searchTBFutureVersion</code>和<code>buyFromTBFutureVersion</code>这两个<strong>仍然是立即瞬间返回，不会block caller thread</strong>的函数。</p>
<p>关于Scala中Promise和Future的更多信息：<br><a href="https://docs.scala-lang.org/overviews/core/futures.html">https://docs.scala-lang.org/overviews/core/futures.html</a></p>
<h1 id="镜头再切到异步函数调用者"><a href="#镜头再切到异步函数调用者" class="headerlink" title="镜头再切到异步函数调用者"></a>镜头再切到异步函数调用者</h1><p>现在有了<code>searchTBFutureVersion</code>和<code>buyFromTBFutureVersion</code>，我来试着重新实现一次：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchPriceThenBuyFutureVersion</span></span>() = &#123;</span><br><span class="line">  <span class="keyword">val</span> eventualResult = <span class="keyword">for</span> &#123;</span><br><span class="line">    searchResult &lt;- searchTBFutureVersion().map(msg =&gt; println(msg))</span><br><span class="line">    buyResult &lt;- buyFromTBFutureVersion().map(msg =&gt; println(msg))</span><br><span class="line">  &#125; <span class="keyword">yield</span> (searchResult, buyResult)</span><br><span class="line"></span><br><span class="line">  eventualResult.onComplete &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Failure</span>(err) =&gt; println(err.getMessage)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里用到了Scala的for comprehension，编译后会变成map，flatMap等等monadic operator。<br>而map,flatMap等操作符正是Scala中Future拿来做组合用的。</p>
<p>这样，用for把两个返回Future的异步函数组织起来，形成一个新的Future，然后在新的Future complete时统一处理异常。</p>
<p>关于for的更多信息：<br><a href="https://cuipengfei.me/blog/2014/08/30/options-for/">https://cuipengfei.me/blog/2014/08/30/options-for/</a></p>
<p>这次实现的代码与上次的行为是一致的,没什么两样。<br>不过我的<strong>业务代码从鸡零狗碎变成了平铺直叙平易近人</strong>。<br>(这种效果在这里表现的并不是特别突出，不过很容易想象如果需要组合使用的异步函数更多一些的话，这种效果的好处就显露出来了)</p>
<p>当然了，让业务代码易读易懂主要还是要靠<strong>个人奋斗</strong>，而有了Promise和Future这种<strong>历史进程</strong>的推力，则更有增益作用。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>最近在看Scala Reactive的一些内容<br>想起了很久之前写过一篇叫做<strong>自己动手实现Promises&#x2F;A+规范</strong>的博客，用JS实现了一个简版的Promise:<br><a href="https://cuipengfei.me/blog/2016/05/15/promise/">https://cuipengfei.me/blog/2016/05/15/promise/</a></p>
<p>我在当时的一段演示代码里面写了两句注释：</p>
<blockquote>
<p>Promise的作用在于</p>
<ol>
<li>给异步算法的编写者和使用者之间提供一种统一的交流手段</li>
<li>给异步算法的使用者提供一种组织代码的手段,以便于将一层又一层嵌套的业务主流程变成一次一次的对then的调用</li>
</ol>
</blockquote>
<p>不过当时的博客里只讲了实现Promise规范的事情,并没有详细解释过这两句话。<br>既然又遇到了这个话题，于是写点Scala来把当时没展开写到的内容补充了一下。</p>
<p>上文的四个镜头展现了两个角色的思考过程，通过这个过程其实也就解释了上面两句注释的含义。</p>
<blockquote>
<ol>
<li>给异步算法的编写者和使用者之间提供一种统一的交流手段</li>
</ol>
</blockquote>
<p>所谓统一的交流手段，其实就是异步函数的签名问题。<br>由于需要处理的业务五花八门，异步函数接受的参数列表没法统一，但是返回值是可以统一的。</p>
<p>一个异步函数，接受了外界给的参数，立即瞬间返回一个Js的Promise或者Scala的Future(<strong>或者是任何语言中类似概念的叫法</strong>)。<br>然后在异步任务执行完的时候把Promise resolve&#x2F;reject掉(让Future success或者failure),借此来让调用方的代码知道该到了它跑后续处理的时候了。</p>
<p>这样我们就获得了一个<strong>sensible default</strong>，无需在每次设计异步函数的时候都去商议该返回什么东西，该怎么获得异步执行的结果。</p>
<blockquote>
<ol start="2">
<li>给异步算法的使用者提供一种组织代码的手段,以便于将一层又一层嵌套的业务主流程变成一次一次的对then的调用</li>
</ol>
</blockquote>
<p>所谓组织代码的手段，就是关于异步函数调用者的那两个镜头的内容了。<br>一开始<code>CallBack</code>套着<code>CallBack</code>，异步的味道很重，这体现出了代码的组织方式在向代码的技术实现低头。或者说是代码的<strong>技术实现干扰了我行文的风格</strong>。<br>后来变成了看起来很像是消费同步函数结果的写法。从而让我惯常的文风得以保持。</p>
]]></content>
      <tags>
        <tag>Scala</tag>
        <tag>Reactive</tag>
        <tag>🐸</tag>
        <tag>Future</tag>
      </tags>
  </entry>
  <entry>
    <title>Desugar Scala 20 -- Self Type</title>
    <url>/blog/2020/01/07/desugar-scala-20-self-type/</url>
    <content><![CDATA[<p>Scala里有一个很有趣的语言特性叫做Self Type，可以用来限定一个trait可以被mixin到哪里去。</p>
<p>看个例子：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">username</span></span>: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Tweeter</span> </span>&#123;</span><br><span class="line">  self: <span class="type">User</span> =&gt;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tweet</span></span>(tweetText: <span class="type">String</span>) = println(<span class="string">s&quot;<span class="subst">$username</span>: <span class="subst">$tweetText</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerifiedTweeter</span>(<span class="params">val username_ : <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">username</span> </span>= <span class="string">s&quot;real <span class="subst">$username_</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SelfTypeBlog</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> realBeyoncé = <span class="keyword">new</span> <span class="type">VerifiedTweeter</span>(<span class="string">&quot;Beyoncé&quot;</span>) <span class="keyword">with</span> <span class="type">User</span> <span class="keyword">with</span> <span class="type">Tweeter</span></span><br><span class="line">    realBeyoncé.tweet(<span class="string">&quot;Just spilled my glass of lemonade&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>User就仅仅相当于一个Interface，定义一个username。</p>
<p>Tweeter内的第一行是重点 <code>self: User =&gt;</code> 就限定了Tweeter只能被mixin到实现了User的类里面去。<br>由于可以确定Tweeter只能被mixin到实现了User的类里面去，这样Tweeter的tweet方法内就可以放心大胆地用 <code>username</code> 了。</p>
<p>VerifiedTweeter是一个很普通的class，别人new它的时候给什么字符串，它的username就是啥。</p>
<p>最后，在main函数里new一个VerifiedTweeter，把User和Tweeter都mixin进去。<br>然后就可以调用tweet方法了。</p>
<p>而如果没有mixin User，直接试图mixin Tweeter，就会出一个编译错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Illegal inheritance, self-type VerifiedTweeter with Tweeter does not conform to User</span><br></pre></td></tr></table></figure>

<p>到这里，其实就可以猜到了：<br>由于Self Type是在编译时限定一个trait可以被mixin到哪里去的，并且我们知道在bytecode level上没有限定一个Interface可以被谁实现的机制。<br>由此可知，反编译这段Scala对应的class文件是看不到任何神奇的东西的。</p>
<p>不过，<strong>很久之前</strong>写过“Scala中的语言特性是如何实现的(3) – trait”：<br><a href="https://cuipengfei.me/blog/2013/10/13/scala-trait/">https://cuipengfei.me/blog/2013/10/13/scala-trait/</a></p>
<p>其中对于Scala如何编译trait做了逆向工程的分析，当时的trait是编译成了一个抽象类加一个接口。这个信息已经过时了。<br>现在更新版的Scala可以编译出bytecode version 52，这一版是有interface default method的。</p>
<p>所以，还是反编译一下吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">User</span></span><br><span class="line">&#123;</span><br><span class="line">    String <span class="title function_">username</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Tweeter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> tweet$(<span class="keyword">final</span> Tweeter $<span class="built_in">this</span>, <span class="keyword">final</span> String tweetText) &#123;</span><br><span class="line">        $<span class="built_in">this</span>.tweet(tweetText);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">tweet</span><span class="params">(<span class="keyword">final</span> String tweetText)</span> &#123;</span><br><span class="line">        Predef$.MODULE$.println((Object)<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">2</span>).append(((User)<span class="built_in">this</span>).username()).append(<span class="string">&quot;: &quot;</span>).append(tweetText).toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> $init$(<span class="keyword">final</span> Tweeter $<span class="built_in">this</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifiedTweeter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username_;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">username_</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.username_;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">username</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">5</span>).append(<span class="string">&quot;real &quot;</span>).append(<span class="built_in">this</span>.username_()).toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VerifiedTweeter</span><span class="params">(<span class="keyword">final</span> String username_)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username_ = username_;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是User Tweeter VerifiedTweeter他们三个的反编译结果，都比较单纯。<br>只是Tweeter这个含有一个实现方法的trait被编译成了有default method的Interface，而不像老版本的Scala要编译成一个抽象类加一个Interface。</p>
<p>然后看一下main函数反编译出来的样子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> VerifiedTweeter realBeyonc\u00e9 = (VerifiedTweeter)<span class="keyword">new</span> <span class="title class_">SelfTypeBlog$$anon</span>.SelfTypeBlog$$anon$<span class="number">1</span>();</span><br><span class="line">    ((Tweeter)realBeyonc\u00e9).tweet(<span class="string">&quot;Just spilled my glass of lemonade&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里new的是一个叫做SelfTypeBlog$$anon$1的类。这个类反编译出来是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SelfTypeBlog$$anon$1</span> <span class="keyword">extends</span> <span class="title class_">VerifiedTweeter</span> <span class="keyword">implements</span> <span class="title class_">User</span>, Tweeter &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tweet</span><span class="params">(<span class="keyword">final</span> String tweetText)</span> &#123;</span><br><span class="line">        Tweeter.tweet$((Tweeter)<span class="built_in">this</span>, tweetText);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> SelfTypeBlog$$anon$<span class="number">1</span>() &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;Beyonc\u00e9&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        Tweeter.$init$((Tweeter)<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它继承了VerifiedTweeter，实现了User和Tweeter。<br>由此可见Scala中在对象创建时才with trait的写法，Scala编译器会产出一个类来表达。</p>
<p>如同前面推测的一样，在bytecode level上，没有神奇的东西，self type这个语言特性是仰赖于Scala compiler来做到的。</p>
<p>不过，既然是全靠Scala compiler来做到的，那就意味着如果我用别的compiler的话，这个限定就无法在<strong>编译时</strong>生效了。</p>
<p>来试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNotUser</span> <span class="keyword">implements</span> <span class="title class_">Tweeter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">abc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段Java代码编译起来完全没问题，没人强迫我去实现User，毕竟Tweeter对于Java来说就是个普通的Interface嘛。</p>
<p>然后跑一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">JNotUser</span>().tweet(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>会怎样呢？</p>
<p>结果是执行的时候出现一个类型转换异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ClassCastException: class TraitSelfTypeBlog.JNotUser cannot be cast to class TraitSelfTypeBlog.User</span><br></pre></td></tr></table></figure>

<p>为啥会这样呢？仔细看下上面Tweeter反编译的结果中tweet方法的内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">tweet</span><span class="params">(<span class="keyword">final</span> String tweetText)</span> &#123;</span><br><span class="line">    Predef$.MODULE$.println((Object)<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">2</span>).append(((User)<span class="built_in">this</span>).username()).append(<span class="string">&quot;: &quot;</span>).append(tweetText).toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键就在这个 <code>(User)this</code> 了。</p>
<p>虽然编译时限制不住，运行时终归逃不过。</p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>[译] 类 vs 数据结构</title>
    <url>/blog/2020/02/15/classes-vs-data-structures/</url>
    <content><![CDATA[<p>原文作者：Robert C. Martin (Uncle Bob)<br>原文链接：<a href="https://blog.cleancoder.com/uncle-bob/2019/06/16/ObjectsAndDataStructures.html">https://blog.cleancoder.com/uncle-bob/2019/06/16/ObjectsAndDataStructures.html</a></p>
<blockquote>
<p>类是什么？</p>
</blockquote>
<p>类是一组相似对象的范本。</p>
<blockquote>
<p>对象又是什么呢？</p>
</blockquote>
<p>对象是对封装的数据进行操作的一组函数。</p>
<blockquote>
<p>不如这么说:对象是对隐含数据进行操作的一组函数。</p>
</blockquote>
<p>隐式数据？什么意思？</p>
<blockquote>
<p>对象的函数隐含意味着某些数据是存在的。但是该数据无法在对象外部直接访问或看到。</p>
</blockquote>
<p>数据不是对象内部的吗？</p>
<blockquote>
<p>可能是; 但没有规则说必须如此。从用户的角度来看，一个对象不过是一组函数。这些函数所需要的数据必须存在，但是用户不知道该数据的位置。</p>
</blockquote>
<p>嗯，好，我同意。</p>
<blockquote>
<p>好。现在说说，数据结构是什么？</p>
</blockquote>
<p>数据结构是一组内聚的数据。</p>
<blockquote>
<p>或者，换句话说，数据结构是由隐含函数操作的一组数据。</p>
</blockquote>
<p>好的，好的。我知道了。数据结构没有定义对数据结构进行操作的函数，但是数据结构的存在意味着某些函数必须存在。</p>
<blockquote>
<p>对。你有什么发现没有？</p>
</blockquote>
<p>对象和数据结构似乎是彼此相反的。</p>
<blockquote>
<p>确实。它们是彼此互补的。</p>
<ul>
<li>对象是对隐式数据进行操作的一组函数。</li>
<li>数据结构是被隐式函数操作的一组数据。</li>
</ul>
</blockquote>
<p>哇，所以对象不是数据结构了？</p>
<blockquote>
<p>说对了。对象与数据结构相反。</p>
</blockquote>
<p>那么DTO（Data Transfer Object）不是对象吗？</p>
<blockquote>
<p>DTO是数据结构。</p>
</blockquote>
<p>所以数据库表也不是对象吗？</p>
<blockquote>
<p>数据库包含数据结构，而不是对象。</p>
</blockquote>
<p>可是，等等。ORM(Object Relational Mapper)不是将数据库表映射到对象吗？</p>
<blockquote>
<p>当然不是。数据库表和对象之间没有映射。数据库表是数据结构，而不是对象。</p>
</blockquote>
<p>那么，ORM算是干嘛的呢？</p>
<blockquote>
<p>在数据结构之间传输数据。</p>
</blockquote>
<p>ORM与对象无关是吗？</p>
<blockquote>
<p>完全无关，ORM其实是不存在的。因为数据库表和对象之间没有映射。</p>
</blockquote>
<p>但是我还以为ORM为我们创建了业务对象呢。</p>
<blockquote>
<p>不对，ORM会提取业务对象所操作的数据。该数据包含在ORM加载的数据结构中。</p>
</blockquote>
<p>但是，业务对象是不是会包含该数据结构啊？</p>
<blockquote>
<p>它可能包含，也可能不包含。但是这不关ORM的事。</p>
</blockquote>
<p>这种说法似乎是咬文嚼字，不太重要。</p>
<blockquote>
<p>不，这具有重大意义。</p>
</blockquote>
<p>怎么讲？</p>
<blockquote>
<p>例如数据库schema的设计与业务对象的设计。业务对象定义业务行为的结构。数据库schema定义业务数据的结构。这两个结构受到非常不同的力的约束。业务数据的结构不一定是业务行为的最佳结构。</p>
</blockquote>
<p>嗯？令人困惑。</p>
<blockquote>
<p>这样想吧。数据库schema不仅为一个应用程序服务；它必须服务于整个企业。因此，该数据的结构是许多不同应用程序之间的折衷方案。</p>
</blockquote>
<p>好，我知道了。</p>
<blockquote>
<p>好。但是现在来说单独的应用程序。每个应用程序的对象模型描述了该应用程序的行为的构造方式。每个应用程序将具有不同的对象模型，并根据该应用程序的行为进行调整。</p>
</blockquote>
<p>哦，我懂了。由于数据库schema是各种应用程序的折衷方案，因此该schema将不符合任何特定应用程序的对象模型。</p>
<blockquote>
<p>对！对象和数据结构受到非常不同的作用力的约束。他们很少能对齐。人们习惯称其为对象&#x2F;关系阻抗失衡（Object&#x2F;Relational impedance mismatch）。</p>
</blockquote>
<p>我听说过，但是我认为阻抗失衡是由ORM解决的。</p>
<blockquote>
<p>现在你知道不是这样的了。因为对象和数据结构是互补的，而不是同构的，所以没有阻抗失配。</p>
</blockquote>
<p>什么？</p>
<blockquote>
<p>它们是对立的，不是相似的实体。</p>
</blockquote>
<p>相反吗?</p>
<blockquote>
<p>是的，以一种非常有趣的方式。你会看到，对象和数据结构意味着相反的控制结构。</p>
</blockquote>
<p>等一下，什么?</p>
<blockquote>
<p>考虑一组符合公共接口的类。例如，想象一下表示二维形状的类，这些类都具有计算area面积和perimeter周长的函数。</p>
</blockquote>
<p>为什么每个软件示例都总是提到形状？</p>
<blockquote>
<p>让我们只考虑两种不同的类型：Square和Circle。应该很容易看清楚的是，这两个类的area和permimeter函数在不同的隐式数据结构上运行。还应该清楚的是，调用这些函数的方式是通过动态多态性进行的。</p>
</blockquote>
<p>等下，慢一点，什么？</p>
<blockquote>
<p>有两种不同的area函数；一个是Square的，另一个是Circle的。当调用者在特定对象上调用area函数时，只有该对象才知道要调用哪个函数。我们称之为动态多态性。</p>
</blockquote>
<p>好。当然。该对象知道其方法的实现。当然。</p>
<blockquote>
<p>现在，让我们将这些对象换成数据结构。我们将使用标签联合（discriminated union）。</p>
</blockquote>
<p>标签联合是什么？</p>
<blockquote>
<p>标签联合。在我们当前讨论的情况下，这只是两个不同的数据结构。一个是Square另一个是Circle。Circle数据结构有一个圆心和半径。它还有一个将其标识为Circle的类型码。</p>
</blockquote>
<p>你是说像枚举？</p>
<blockquote>
<p>当然。Square数据结构有左顶点，和边长。它还有类型区分符(type discriminator)–枚举。</p>
</blockquote>
<p>好。具有类型码的两个数据结构。</p>
<blockquote>
<p>对。现在考虑area函数。它要有一个switch语句，不是吗？</p>
</blockquote>
<p>嗯，当然，对应两种不同的情况。一个用于Square另一个用于Circle。并且perimeter函数也需要类似的switch语句。</p>
<blockquote>
<p>对。现在考虑这两种场景的结构。在对象场景中，area函数的两个实现彼此独立，并且（在某种意义上）从属于类型。Square的area函数属于Square，Circle的area函数属于Circle。</p>
</blockquote>
<p>好的，我知道您的意思了。在数据结构场景中，area的两个实现在同一个函数中，它们并不“从属于”类型。</p>
<blockquote>
<p>接下来会更有趣。如果要将Triangle类型添加到对象方案中，必须更改哪些代码？</p>
</blockquote>
<p>无需更改代码。您只需创建新Triangle类。哦，我想必须更改实例的创建者。</p>
<blockquote>
<p>对。因此，当添加新类型时，几乎没有什么变化。现在，假设您要添加一个新函数-比如center函数。</p>
</blockquote>
<p>那么，你就必须在Circle，Square，和Triangle这三个类里面都去添加center函数。</p>
<blockquote>
<p>好。因此添加新函数很困难，必须更改每个类。</p>
</blockquote>
<p>但是在数据结构上却有所不同。为了添加Triangle，必须更改每个函数以将Triangle的case添加到switch语句里面去。</p>
<blockquote>
<p>对。添加新类型很困难，必须更改每个函数。</p>
</blockquote>
<p>但是，当您添加新center函数时，无需更改任何现存代码。</p>
<blockquote>
<p>对。添加新函数很容易。</p>
</blockquote>
<p>哇。恰恰相反。</p>
<blockquote>
<p>对。我们来复习：</p>
<ul>
<li>向一组类中添加新函数很困难，必须更改每个类。</li>
<li>向一组数据结构中添加新函数很容易，只需添加函数，无需其他改变。</li>
<li>向一组类中添加新类型很容易，只需添加新类即可。</li>
<li>向一组数据结构中添加新类型很困难，必须更改每个函数。</li>
</ul>
</blockquote>
<p>是的，相反。以一种有趣的方式对立。我的意思是，如果您知道要向一组类型中添加新函数，则应该使用数据结构。但是，如果您知道要添加新的类型，则可以使用类。</p>
<blockquote>
<p>说得好！但是，今天我们还有最后一件事要考虑。数据结构和类的对立还有另一种方式，与依赖关系有关。</p>
</blockquote>
<p>依赖关系？</p>
<blockquote>
<p>是的，源代码的依赖方向。</p>
</blockquote>
<p>具体来说呢？</p>
<blockquote>
<p>考虑数据结构的情况。每个函数都有一个switch语句，该语句根据类型码选择适当的实现。</p>
</blockquote>
<p>对，然后？</p>
<blockquote>
<p>考虑对area函数的调用。调用者依赖于area函数，而area函数依赖于每个特定的实现。</p>
</blockquote>
<p>您所说的“依赖”是什么意思？</p>
<blockquote>
<p>想象一下，area的每个实现都被写入了单独的函数中。所以有circleArea，squareArea和triangleArea。</p>
</blockquote>
<p>OK，switch语句会调用这几个函数。</p>
<blockquote>
<p>想象一下这几个函数在不同的源文件中。</p>
</blockquote>
<p>那么，包含有switch语句的源文件就必须import，use或include这些源文件。</p>
<blockquote>
<p>对。这就是源代码依赖性。一个源文件依赖于另一个源文件。这种依赖的方向是什么？</p>
</blockquote>
<p>带有switch语句的源文件依赖于包含实现的源文件。</p>
<blockquote>
<p>那area函数的调用者呢？</p>
</blockquote>
<p>area函数的调用者依赖于包含switch语句的源文件，该文件的switch语句依赖于各个实现。</p>
<blockquote>
<p>正确。从调用者到实现，所有源文件依赖性都指向调用的方向。因此，如果您对其中的一种实现进行了微小的更改……</p>
</blockquote>
<p>好的，我知道您的意思。对任何一种实现的更改将导致重新编译带有switch语句的源文件，从而导致每个调用switch语句的人重新编译。</p>
<blockquote>
<p>对。至少对于依赖于源文件的更改日期来确定应编译哪些模块的语言系统而言，这么说是正确的。</p>
</blockquote>
<p>几乎所有使用静态类型的语言，对吗？</p>
<blockquote>
<p>是的，有些非静态的也会。</p>
</blockquote>
<p>大量的重新编译。</p>
<blockquote>
<p>还有大量的重新部署。</p>
</blockquote>
<p>是的，但是在类的情况下这是相反的吗？</p>
<blockquote>
<p>是的，因为area函数的调用者依赖于接口，而函数实现也依赖于该接口。</p>
</blockquote>
<p>我明白你的意思了。Square类的源文件将import，use或include Shape接口的源文件。</p>
<blockquote>
<p>对。实现的源文件指向调用的相反方向。他们从实现指向调用者。至少对于静态类型的语言来说是这样。对于动态类型的语言，area函数的调用者完全不依赖任何内容。链接在运行时确定。</p>
</blockquote>
<p>对，因此，如果您更改其中一种实现方式…</p>
<blockquote>
<p>仅更改的文件需要重新编译或重新部署。</p>
</blockquote>
<p>那是因为源文件之间的依赖关系指向调用方向的反方向。</p>
<blockquote>
<p>对。我们称之为依赖倒置。</p>
</blockquote>
<p>好，让我看看我是否可以总结一下。类和数据结构在至少三种不同的方式上是相反的。</p>
<ul>
<li>类使函数可见，隐藏数据。数据结构使数据可见，隐藏函数。</li>
<li>类使添加类型变得容易，但是却难以添加函数。数据结构使添加函数变得容易，但难以添加类型。</li>
<li>数据结构导致调用者重新编译和重新部署。类将调用者与重新编译和重新部署隔离开。</li>
</ul>
<blockquote>
<p>你说对了。这些都是每个优秀的软件设计人员和架构师都需要牢记的问题。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Uncle Bob</tag>
      </tags>
  </entry>
  <entry>
    <title>Desugar Scala(19) -- Partial Function</title>
    <url>/blog/2020/01/05/desugar-scala-19-partial-function/</url>
    <content><![CDATA[<p>先看这么一段Scala代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">PFBlog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">usePF</span></span>(pf: <span class="type">PartialFunction</span>[<span class="type">Option</span>[<span class="type">Int</span>], <span class="type">Int</span>]) = &#123;</span><br><span class="line">    pf(<span class="type">Some</span>(<span class="number">11</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  usePF &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(x) =&gt; x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">None</span> =&gt; <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明一个usePF方法，接受一个PartialFunction作为参数，它的实现就是传一个 <code>Some(11)</code> 给pf。<br>pf的具体类型是 <code>PartialFunction[Option[Int], Int]</code> 所以传递给它一个<code>Some(11)</code>可以期待它会返回一个Int。</p>
<p>然后调用usePF，传递给usePF的是一个pattern match表达式。给Some加一，给None返回0。</p>
<p>这时问题就来了，这个pattern match表达式是怎么能够符合usePF需要的参数类型的呢？<br>这么单纯的一个pattern match表达式怎么变成<code>PartialFunction[Option[Int], Int]</code>的呢？</p>
<p>为了探寻答案，先把这几行Scala代码编译成class文件，然后把byte code反编译成Java来一探究竟吧。</p>
<p>以上Scala代码会编译出3个class文件：</p>
<ul>
<li>PFBlog.class</li>
<li>PFBlog$.class</li>
<li>PFBlog$$anonfun$1.class</li>
</ul>
<p>逐个反编译出来看一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">PFBlog</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">usePF</span><span class="params">(<span class="keyword">final</span> PartialFunction&lt;Option&lt;Object&gt;, Object&gt; pf)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PFBlog$.MODULE$.usePF((PartialFunction)pf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先是PFBlog，里面声明了一个usePF方法，它的实现完全代理给PFBlog$。那么它就只是对应Scala代码内的object PFBlog的对外声明。</p>
<p>接下来，那就看下PFBlog$吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">PFBlog$</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PFBlog$ MODULE$;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        (MODULE$ = <span class="keyword">new</span> <span class="title class_">PFBlog$</span>()).usePF((PartialFunction&lt;Option&lt;Object&gt;, Object&gt;)<span class="keyword">new</span> <span class="title class_">PFBlog$$anonfun</span>.PFBlog$$anonfun$<span class="number">1</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">usePF</span><span class="params">(<span class="keyword">final</span> PartialFunction&lt;Option&lt;Object&gt;, Object&gt; pf)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BoxesRunTime.unboxToInt(pf.apply((Object)<span class="keyword">new</span> <span class="title class_">Some</span>((Object)BoxesRunTime.boxToInteger(<span class="number">11</span>))));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> PFBlog$() &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面的usePF就有真的实现了，对应原Scala的usePF。调用pf.apply，并传递Some(11)。<br>并且，它的静态块里自己调用了usePF。这就对应了原Scala中对usePF的调用。<br>值得注意的调用usePF时传递的参数，是一个<code>new PFBlog$$anonfun.PFBlog$$anonfun$1()</code>，这就是第三个class文件的内容了。<br>那这个<code>new PFBlog$$anonfun.PFBlog$$anonfun$1()</code>就一定是对应原本的pattern match表达式了。</p>
<p>接下来看下<code>PFBlog$$anonfun$1.class</code> :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">PFBlog$$anonfun$1</span> <span class="keyword">extends</span> <span class="title class_">AbstractPartialFunction</span>&lt;Option&lt;Object&gt;, Object&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> &lt;A1 <span class="keyword">extends</span> <span class="title class_">Option</span>&lt;Object&gt;, B1&gt; B1 <span class="title function_">applyOrElse</span><span class="params">(<span class="keyword">final</span> A1 x1, <span class="keyword">final</span> Function1&lt;A1, B1&gt; <span class="keyword">default</span>)</span> &#123;</span><br><span class="line">        Object o;</span><br><span class="line">        <span class="keyword">if</span> (x1 <span class="keyword">instanceof</span> Some) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> BoxesRunTime.unboxToInt(((Some)x1).value());</span><br><span class="line">            o = BoxesRunTime.boxToInteger(x2 + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (None$.MODULE$.equals(x1)) &#123;</span><br><span class="line">            o = BoxesRunTime.boxToInteger(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            o = <span class="keyword">default</span>.apply((Object)x1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (B1)o;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isDefinedAt</span><span class="params">(<span class="keyword">final</span> Option&lt;Object&gt; x1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x1 <span class="keyword">instanceof</span> Some || None$.MODULE$.equals(x1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> PFBlog$$anonfun$<span class="number">1</span>() &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，PFBlog$$anonfun$1继承了AbstractPartialFunction。<br>这个AbstractPartialFunction是在Scala标准库里定义了的，它mixin了PartialFunction。<br>所以，PFBlog$$anonfun$1自然就符合了usePF对参数要求的类型。</p>
<p>再看PFBlog$$anonfun$1内的具体实现，isDefinedAt对于Some或者None返回true。applyOrElse则做了原Scala中pattern match表达式给Some加一，给None返回零的逻辑。</p>
<p>由于AbstractPartialFunction中的apply方法是这样的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">T1</span>): <span class="type">R</span> = applyOrElse(x, <span class="type">PartialFunction</span>.empty)</span><br></pre></td></tr></table></figure>

<p>这就确保了当PFBlog$$anonfun$1的apply被调用到的时候，我们原Scala中的pattern match表达式的逻辑可以得到执行。</p>
<p>到这里就明白了，Scala编译器很勤劳，吭哧吭哧的给：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="type">Some</span>(x) =&gt; x + <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">None</span> =&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>产出了一个PFBlog$$anonfun$1并产出了isDefinedAt和applyOrElse方法。<br>从而让这个pattern match表达式可以符合usePF的参数类型。</p>
<p>最后，很久前写过一个关于partial application的博客： <a href="https://cuipengfei.me/blog/2013/12/25/desugar-scala-6/">https://cuipengfei.me/blog/2013/12/25/desugar-scala-6/</a><br>值得注意的是，虽然partial function和partial application名字里都有partial这个字，但是<strong>他俩其实没啥关系</strong>。<br>一个是关于把pattern match表达式编译成PartialFunction的实现类的。另一个是关于柯里化的。</p>
<p>这篇博客只关心Scala编译器是怎么支持Partial Function这个语言特性的。<br>关于Partial Function的更多信息，可以看看老人家的文章： <a href="https://www.jianshu.com/p/b0b4e3a349c3">https://www.jianshu.com/p/b0b4e3a349c3</a></p>
]]></content>
      <tags>
        <tag>Desugar_Scala</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式键值存储（Distributed Key-Value Store）</title>
    <url>/blog/2020/02/21/distributed-key-value-store/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>分布式键值存储（Distributed Key-Value Store）并不是一个新鲜的玩意。<br>常见的Redis，Memcache等等都有很多人在用。</p>
<p>不过如果要是说其中的细节，如replicate，读写，一致性，retry等等的话，又是经常会遇到把自己绕的混淆不清的情况。。<br>恰巧我最近在看的一门网课《Programming Reactive Systems》中有一道作业题就是要自己实现一个Distributed Key-Value Store，那就正好借此机会详细写下其中的关键点。</p>
<h1 id="组成系统的参与者"><a href="#组成系统的参与者" class="headerlink" title="组成系统的参与者"></a>组成系统的参与者</h1><p>既然是分布式键值存储，那么肯定会有主从节点，每个结点又会有自己的持久化，而主从之间也需要协调，于是就得出了如下关键参与者：</p>
<ul>
<li><strong>Primary</strong>： 主节点。接受来自client的更新（增&#x2F;删&#x2F;改）操作，并把更新后的数据扩散到其它节点。当然，也可以接受来自于client的读操作。</li>
<li><strong>Secondary</strong>： 从节点。接受来自主节点的更新操作。接受来自client的只读操作。</li>
<li><strong>Arbiter</strong>： 仲裁者。任何节点，无论主从，都要把自己注册到Arbiter上去。当有从节点加入或者离开集群的时候，Arbiter负责告知主节点。</li>
<li><strong>Persistence</strong>： 每个节点都拥有自己的独享的Persistence。用于把节点上的数据持久化。</li>
<li><strong>Clients</strong>： 客户端，可能与主或者从节点通信，进行各种读写操作。</li>
</ul>
<p>此外，还有另一个相对不那么关键的参与者：</p>
<ul>
<li><strong>Replicator</strong>： 复制器，负责扩散数据。主节点和从节点之间的桥梁。主节点扩散到从节点去的数据要经手Replicator。<br>之所以需要它是为了把一部分维护内部状态的职责从Primary身上解除出去，具体来说是一个sequence number序列号，后面会提到。</li>
</ul>
<h2 id="参与者之间的关系"><a href="#参与者之间的关系" class="headerlink" title="参与者之间的关系"></a>参与者之间的关系</h2><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbiAgUHJpbWFyeS0tPnxhc2sgdG8gcmVwbGljYXRlfFJlcGxpY2F0b3IxXG4gIFByaW1hcnktLT58YXNrIHRvIHJlcGxpY2F0ZXxSZXBsaWNhdG9yMlxuICBSZXBsaWNhdG9yMS0tPnxzbmFwc2hvdCB0b3xTZWNvbmRhcnkxXG4gIFJlcGxpY2F0b3IyLS0-fHNuYXBzaG90IHRvfFNlY29uZGFyeTJcbiAgUHJpbWFyeS0tPnxKb2lufEFyYml0ZXJcbiAgU2Vjb25kYXJ5MS0tPnxKb2lufEFyYml0ZXJcbiAgU2Vjb25kYXJ5Mi0tPnxKb2lufEFyYml0ZXJcbiAgUHJpbWFyeS0tPnxQZXJzaXN0IHRvfFBlcnNpc3RlbmNlMFxuICBTZWNvbmRhcnkxLS0-fFBlcnNpc3QgdG98UGVyc2lzdGVuY2UxXG4gIFNlY29uZGFyeTItLT58UGVyc2lzdCB0b3xQZXJzaXN0ZW5jZTJcbiAgXG4gIENsaWVudC0tPnxyZWFkL3dyaXRlfFByaW1hcnlcbiAgQ2xpZW50LS0-fHJlYWR8U2Vjb25kYXJ5MVxuICBDbGllbnQtLT58cmVhZHxTZWNvbmRhcnkyXG5cbiAgQXJiaXRlci0tPnxOb3RpZnkgam9pbi9sZWF2ZSBvZiBzZWNvbmRhcmllc3xQcmltYXJ5IiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggVERcbiAgUHJpbWFyeS0tPnxhc2sgdG8gcmVwbGljYXRlfFJlcGxpY2F0b3IxXG4gIFByaW1hcnktLT58YXNrIHRvIHJlcGxpY2F0ZXxSZXBsaWNhdG9yMlxuICBSZXBsaWNhdG9yMS0tPnxzbmFwc2hvdCB0b3xTZWNvbmRhcnkxXG4gIFJlcGxpY2F0b3IyLS0-fHNuYXBzaG90IHRvfFNlY29uZGFyeTJcbiAgUHJpbWFyeS0tPnxKb2lufEFyYml0ZXJcbiAgU2Vjb25kYXJ5MS0tPnxKb2lufEFyYml0ZXJcbiAgU2Vjb25kYXJ5Mi0tPnxKb2lufEFyYml0ZXJcbiAgUHJpbWFyeS0tPnxQZXJzaXN0IHRvfFBlcnNpc3RlbmNlMFxuICBTZWNvbmRhcnkxLS0-fFBlcnNpc3QgdG98UGVyc2lzdGVuY2UxXG4gIFNlY29uZGFyeTItLT58UGVyc2lzdCB0b3xQZXJzaXN0ZW5jZTJcbiAgXG4gIENsaWVudC0tPnxyZWFkL3dyaXRlfFByaW1hcnlcbiAgQ2xpZW50LS0-fHJlYWR8U2Vjb25kYXJ5MVxuICBDbGllbnQtLT58cmVhZHxTZWNvbmRhcnkyXG5cbiAgQXJiaXRlci0tPnxOb3RpZnkgam9pbi9sZWF2ZSBvZiBzZWNvbmRhcmllc3xQcmltYXJ5IiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"></a></p>
<p>可以看出，系统中有一个Primary，多个Secondary（虽然图中只画了两个，但是理论上可以有任意N多个）。<br>Primary向Secondary扩散数据是通过Replicator进行的，并且是给每个Secondary配了一个单独的Replicator。<br>也就是说Replicator和Secondary是成双成对的。</p>
<p><strong>注：上图描述的是各个参与者之间的关系，上下左右位置并不代表先后顺序</strong></p>
<h1 id="一些限制"><a href="#一些限制" class="headerlink" title="一些限制"></a>一些限制</h1><p>我们并不是要做一个可以在Prod环境中使用的KV Store，而只是借助自己实现来厘清KV Store的一些知识点，所以做出了如下的限制来简化实现：</p>
<ul>
<li>只有主节点可以接受写操作，所有从节点都只能接受读操作</li>
<li>假设主节点是稳定可靠的，不会挂（不处理主节点身份转移）</li>
<li>假设Arbiter是可靠的，不会挂</li>
<li>不处理背压（back pressure）</li>
<li>客户端使用的请求id是不会重复的</li>
</ul>
<h1 id="各参与者的职责及相互之间的交互"><a href="#各参与者的职责及相互之间的交互" class="headerlink" title="各参与者的职责及相互之间的交互"></a>各参与者的职责及相互之间的交互</h1><p>以下的这些图，<strong>每一张都只关心系统中的一个局部</strong>。主要原因在于把整个系统的交互放到一张图里会导致<strong>要素太多而难以阅读</strong>。</p>
<h2 id="Arbiter"><a href="#Arbiter" class="headerlink" title="Arbiter"></a>Arbiter</h2><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgTm9kZSAxLT4-K0FyYml0ZXI6IEpvaW5cbiAgICBOb2RlIDItPj4rQXJiaXRlcjpKb2luXG4gICAgTm9kZSAzLT4-K0FyYml0ZXI6Sm9pblxuICAgIEFyYml0ZXItLT4-K05vZGUgMTogSm9pbmVkUHJpbWFyeVxuICAgIEFyYml0ZXItLT4-K05vZGUgMjogSm9pbmVkU2Vjb25kYXJ5XG4gICAgQXJiaXRlci0tPj4rTm9kZSAxOiBSZXBsaWNhcyhOb2RlIDIpXG4gICAgQXJiaXRlci0tPj4rTm9kZSAzOiBKb2luZWRTZWNvbmRhcnlcbiAgICBBcmJpdGVyLS0-PitOb2RlIDE6IFJlcGxpY2FzKE5vZGUgMylcblxuIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgTm9kZSAxLT4-K0FyYml0ZXI6IEpvaW5cbiAgICBOb2RlIDItPj4rQXJiaXRlcjpKb2luXG4gICAgTm9kZSAzLT4-K0FyYml0ZXI6Sm9pblxuICAgIEFyYml0ZXItLT4-K05vZGUgMTogSm9pbmVkUHJpbWFyeVxuICAgIEFyYml0ZXItLT4-K05vZGUgMjogSm9pbmVkU2Vjb25kYXJ5XG4gICAgQXJiaXRlci0tPj4rTm9kZSAxOiBSZXBsaWNhcyhOb2RlIDIpXG4gICAgQXJiaXRlci0tPj4rTm9kZSAzOiBKb2luZWRTZWNvbmRhcnlcbiAgICBBcmJpdGVyLS0-PitOb2RlIDE6IFJlcGxpY2FzKE5vZGUgMylcblxuIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"></a></p>
<p>来的早的会被Arbiter当作Primary，来的晚的就是Secondary了。<br>并且，每一个来的晚的成为Secondary之后，Arbiter还会告知Primary说：来新节点了。以便Primary可以知道后续需要把数据扩散给谁。<br>如果有Secondary由于某种原因而离开了集群，Arbiter也会告知Primary，从而避免Primary继续给已经不在了的Secondary发消息。</p>
<h2 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h2><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgTm9kZSAtPj4rUGVyc2lzdGVuY2U6IFBlcnNpc3Qoa2V5LHZhbHVlLGlkKVxuICAgIFBlcnNpc3RlbmNlLS0-PitOb2RlOiBQZXJzaXN0ZWQoa2V5LGlkKSBvciBub3RoaW5nIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgTm9kZSAtPj4rUGVyc2lzdGVuY2U6IFBlcnNpc3Qoa2V5LHZhbHVlLGlkKVxuICAgIFBlcnNpc3RlbmNlLS0-PitOb2RlOiBQZXJzaXN0ZWQoa2V5LGlkKSBvciBub3RoaW5nIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"></a></p>
<p>前面提到过，每个节点，无论主从，都有一个自己独享的persistence。所以上图中的Node兼指主或者从节点。<br>Persistence本身的职责很简单，把Node告诉它的数据持久化下来。<br>但是，此处我们并<strong>没有假设持久化总是可靠的</strong>，所以上图中的第二根线是<strong>未必总是能成功发生</strong>的。</p>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgTm9kZSAtPj4rQXJiaXRlcjpKb2luXG4gICAgTm9kZSAtPj4rTm9kZTogUmV0cnkgUGVyc2lzdCBldmVyeSAxMDBtc1xuICAgIEFyYml0ZXItLT4-K05vZGU6Sm9pbmVkIFByaW1hcnkgb3IgU2Vjb25kYXJ5XG4gICAgIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgTm9kZSAtPj4rQXJiaXRlcjpKb2luXG4gICAgTm9kZSAtPj4rTm9kZTogUmV0cnkgUGVyc2lzdCBldmVyeSAxMDBtc1xuICAgIEFyYml0ZXItLT4-K05vZGU6Sm9pbmVkIFByaW1hcnkgb3IgU2Vjb25kYXJ5XG4gICAgIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"></a></p>
<p>这里的Node兼指主或者从节点。也就是说上图中的事情是每个Node无论主从都要做的。<br>每一个Node，在它生命周期的最早开始作的第一件事就是告诉Arbiter：“我来了“。</p>
<p>上面提到过，Persistence未必总是可靠的。所以每个Node一旦开始存活，就会给自己启动一个定时任务，每隔100ms就去retry persist，直到Persitence回话说Persisted为止才停止retry。</p>
<h2 id="Secondary"><a href="#Secondary" class="headerlink" title="Secondary"></a>Secondary</h2><h3 id="Secondary-Snapshot"><a href="#Secondary-Snapshot" class="headerlink" title="Secondary - Snapshot"></a>Secondary - Snapshot</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUmVwbGljYXRvciAtPj4rU2Vjb25kYXJ5OlNuYXBzaG90KGtleSx2YWx1ZSxzZXEpXG4gICAgYWx0IHNlcT09ZXhwZWN0ZWRTZXFcbiAgICAgICAgU2Vjb25kYXJ5LT4-K1NlY29uZGFyeTogdXBkYXRlIGludGVybmFsIGt2IHN0b3JlXG4gICAgICAgIFNlY29uZGFyeS0-PitQZXJzaXN0ZW5jZTpQZXJzaXN0KGtleSx2YWx1ZSxzZXEpXG4gICAgICAgIFNlY29uZGFyeS0-PlNlY29uZGFyeTphZGQgb25lIGl0ZW0gdG8gaW50ZXJuYWwgcmV0cnkgcGVyc2lzdCBsaXN0XG4gICAgZWxzZSBzZXE8ZXhwZWN0ZWRTZXFcbiAgICAgICAgU2Vjb25kYXJ5LT4-K1JlcGxpY2F0b3I6U25hcHNob3RBY2soa2V5LHNlcSlcbiAgICBlbmRcbiAgICAiLCJtZXJtYWlkIjp7InRoZW1lIjoiZm9yZXN0IiwiZmxvd2NoYXJ0Ijp7ImN1cnZlIjoiYmFzaXMifX0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUmVwbGljYXRvciAtPj4rU2Vjb25kYXJ5OlNuYXBzaG90KGtleSx2YWx1ZSxzZXEpXG4gICAgYWx0IHNlcT09ZXhwZWN0ZWRTZXFcbiAgICAgICAgU2Vjb25kYXJ5LT4-K1NlY29uZGFyeTogdXBkYXRlIGludGVybmFsIGt2IHN0b3JlXG4gICAgICAgIFNlY29uZGFyeS0-PitQZXJzaXN0ZW5jZTpQZXJzaXN0KGtleSx2YWx1ZSxzZXEpXG4gICAgICAgIFNlY29uZGFyeS0-PlNlY29uZGFyeTphZGQgb25lIGl0ZW0gdG8gaW50ZXJuYWwgcmV0cnkgcGVyc2lzdCBsaXN0XG4gICAgZWxzZSBzZXE8ZXhwZWN0ZWRTZXFcbiAgICAgICAgU2Vjb25kYXJ5LT4-K1JlcGxpY2F0b3I6U25hcHNob3RBY2soa2V5LHNlcSlcbiAgICBlbmRcbiAgICAiLCJtZXJtYWlkIjp7InRoZW1lIjoiZm9yZXN0IiwiZmxvd2NoYXJ0Ijp7ImN1cnZlIjoiYmFzaXMifX0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9"></a></p>
<p>上图描述的是当Replicator向Secondary扩散数据的时候，Secondary如何处理。<br>一旦一个Replicator告诉Secondary去更新数据（增&#x2F;删&#x2F;改），Secondary先去更新自己内部的kv，然后去告知Persistence去做持久化。</p>
<p>这里有一个细节，就是图中出现的seq（sequence number 序列号）。Replicator和Secondary之间就是靠这个seq来保证数据更新操作总是先来的先处理，后来的后处理。<br>据此来提供一定程度的consistency。避免老数据覆盖新数据（此处需要结合下文中replicator的retry snapshot来理解）。</p>
<h3 id="Secondary-Persisted"><a href="#Secondary-Persisted" class="headerlink" title="Secondary - Persisted"></a>Secondary - Persisted</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUGVyc2lzdGVuY2UtPj5TZWNvbmRhcnk6UGVyc2lzdGVkKGtleSxzZXEpXG4gICAgU2Vjb25kYXJ5LT4-UmVwbGljYXRvcjpTbmFwc2hvdEFjayhrZXksc2VxKVxuICAgIFNlY29uZGFyeS0-PlNlY29uZGFyeTppbmNyZWFzZSBleHBlY3RlZFNlcVxuICAgIFNlY29uZGFyeS0-PlNlY29uZGFyeTpyZW1vdmUgc2VxIGZyb20gcmV0cnkgcGVyc2lzdCBsaXN0IiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUGVyc2lzdGVuY2UtPj5TZWNvbmRhcnk6UGVyc2lzdGVkKGtleSxzZXEpXG4gICAgU2Vjb25kYXJ5LT4-UmVwbGljYXRvcjpTbmFwc2hvdEFjayhrZXksc2VxKVxuICAgIFNlY29uZGFyeS0-PlNlY29uZGFyeTppbmNyZWFzZSBleHBlY3RlZFNlcVxuICAgIFNlY29uZGFyeS0-PlNlY29uZGFyeTpyZW1vdmUgc2VxIGZyb20gcmV0cnkgcGVyc2lzdCBsaXN0IiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"></a></p>
<p>上图描述的是，当Persistence告诉Secondary：“持久化好了“的时候，Secondary如何处理。<br>可以看出来，只有确认持久化完成之后，Secondary才会告诉Replicator：“扩散数据完成了“，并且在Secondary自己内部取消掉这一条数据的retry persist。</p>
<h3 id="Secondary-Get"><a href="#Secondary-Get" class="headerlink" title="Secondary - Get"></a>Secondary - Get</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQ2xpZW50LT4-U2Vjb25kYXJ5OkdldChrZXksaWQpXG4gICAgU2Vjb25kYXJ5LT4-U2Vjb25kYXJ5OnF1ZXJ5IGludGVybmFsIGt2XG4gICAgU2Vjb25kYXJ5LS0-PkNsaWVudDpHZXRSZXN1bHQoa2V5LHZhbHVlLGlkKSAodmFsdWUgY291bGQgYmUgZW1wdHkpIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQ2xpZW50LT4-U2Vjb25kYXJ5OkdldChrZXksaWQpXG4gICAgU2Vjb25kYXJ5LT4-U2Vjb25kYXJ5OnF1ZXJ5IGludGVybmFsIGt2XG4gICAgU2Vjb25kYXJ5LS0-PkNsaWVudDpHZXRSZXN1bHQoa2V5LHZhbHVlLGlkKSAodmFsdWUgY291bGQgYmUgZW1wdHkpIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCIsImZsb3djaGFydCI6eyJjdXJ2ZSI6ImJhc2lzIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"></a></p>
<p>对于来自于Client的读取操作，Secondary总是心直口快，有就是有，没有就是没有。</p>
<h2 id="Replicator"><a href="#Replicator" class="headerlink" title="Replicator"></a>Replicator</h2><h3 id="Replicator-retry-snapshots"><a href="#Replicator-retry-snapshots" class="headerlink" title="Replicator - retry snapshots"></a>Replicator - retry snapshots</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUmVwbGljYXRvci0-PlJlcGxpY2F0b3I6cmV0cnkgc25hcHNob3QgZXZlcnkgMTAwbXNcbiAgICAiLCJtZXJtYWlkIjp7InRoZW1lIjoiZm9yZXN0IiwiZmxvd2NoYXJ0Ijp7ImN1cnZlIjoiYmFzaXMifX0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUmVwbGljYXRvci0-PlJlcGxpY2F0b3I6cmV0cnkgc25hcHNob3QgZXZlcnkgMTAwbXNcbiAgICAiLCJtZXJtYWlkIjp7InRoZW1lIjoiZm9yZXN0IiwiZmxvd2NoYXJ0Ijp7ImN1cnZlIjoiYmFzaXMifX0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9"></a></p>
<p>上面提到过，Persistence未必总是可靠的，也就意味着数据扩散操作也未必总是成功，所以，Replicator一旦启动（被Primary创建出来），就要开始一个定时任务来不断retry尚未成功的数据扩散操作。</p>
<h3 id="Replicator-Replicate"><a href="#Replicator-Replicate" class="headerlink" title="Replicator - Replicate"></a>Replicator - Replicate</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUHJpbWFyeS0-PlJlcGxpY2F0b3I6UmVwbGljYXRlKGtleSx2YWx1ZSxpZClcbiAgICBSZXBsaWNhdG9yLT4-U2Vjb25kYXJ5OlNuYXBzaG90KGtleSx2YWx1ZSxzZXEpXG4gICAgUmVwbGljYXRvci0-PlJlcGxpY2F0b3I6YWRkIGl0ZW0gdG8gaW50ZXJuYWwgcGVuZGluZyBhY2sgbGlzdFxuICAgIFJlcGxpY2F0b3ItPj5SZXBsaWNhdG9yOmluY3JlYXNlIGludGVybmFsIHNlcVxuICAgICIsIm1lcm1haWQiOnsidGhlbWUiOiJmb3Jlc3QiLCJmbG93Y2hhcnQiOnsiY3VydmUiOiJiYXNpcyJ9fSwidXBkYXRlRWRpdG9yIjpmYWxzZX0"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUHJpbWFyeS0-PlJlcGxpY2F0b3I6UmVwbGljYXRlKGtleSx2YWx1ZSxpZClcbiAgICBSZXBsaWNhdG9yLT4-U2Vjb25kYXJ5OlNuYXBzaG90KGtleSx2YWx1ZSxzZXEpXG4gICAgUmVwbGljYXRvci0-PlJlcGxpY2F0b3I6YWRkIGl0ZW0gdG8gaW50ZXJuYWwgcGVuZGluZyBhY2sgbGlzdFxuICAgIFJlcGxpY2F0b3ItPj5SZXBsaWNhdG9yOmluY3JlYXNlIGludGVybmFsIHNlcVxuICAgICIsIm1lcm1haWQiOnsidGhlbWUiOiJmb3Jlc3QiLCJmbG93Y2hhcnQiOnsiY3VydmUiOiJiYXNpcyJ9fSwidXBkYXRlRWRpdG9yIjpmYWxzZX0"></a></p>
<p>上图描述的是当Primary要求Replicator去扩散数据到一个Secondary的时候Replicator如何处理。<br>那么Replicator首先告诉Secondary去更新数据，然后在自体内部把刚才的操作记下来，以便后续retry。并且把自己的seq加一，这里的seq就是Replicator和Secondary之间的信物，用来维持consistency。</p>
<h3 id="Replicator-SnapshotAck"><a href="#Replicator-SnapshotAck" class="headerlink" title="Replicator - SnapshotAck"></a>Replicator - SnapshotAck</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgU2Vjb25kYXJ5LT4-UmVwbGljYXRvcjpTbmFwc2hvdEFjayhrZXksc2VxKVxuICAgIFJlcGxpY2F0b3ItPj5QcmltYXJ5OlJlcGxpY2F0ZWQoa2V5LGlkKVxuICAgIFJlcGxpY2F0b3ItPj5SZXBsaWNhdG9yOnJlbW92ZSBvbmUgaXRlbSBmcm9tIHBlbmRpbmcgYWNrIGxpc3QiLCJtZXJtYWlkIjp7InRoZW1lIjoiZm9yZXN0IiwiZmxvd2NoYXJ0Ijp7ImN1cnZlIjoiYmFzaXMifX0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgU2Vjb25kYXJ5LT4-UmVwbGljYXRvcjpTbmFwc2hvdEFjayhrZXksc2VxKVxuICAgIFJlcGxpY2F0b3ItPj5QcmltYXJ5OlJlcGxpY2F0ZWQoa2V5LGlkKVxuICAgIFJlcGxpY2F0b3ItPj5SZXBsaWNhdG9yOnJlbW92ZSBvbmUgaXRlbSBmcm9tIHBlbmRpbmcgYWNrIGxpc3QiLCJtZXJtYWlkIjp7InRoZW1lIjoiZm9yZXN0IiwiZmxvd2NoYXJ0Ijp7ImN1cnZlIjoiYmFzaXMifX0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9"></a></p>
<p>上图描述的是Replicator在被Secondary告知扩散数据成功后如何处理。<br>先把这个好消息告诉给Primary，然后在retry的列表里面去除掉刚刚成功的这次操作，这样后面就再也不会再去retry这次操作了。</p>
<h2 id="Primary"><a href="#Primary" class="headerlink" title="Primary"></a>Primary</h2><p>最后是Primary。作为主节点，它的职责是最多最辛劳的。</p>
<h3 id="Primary-Insert-Remove"><a href="#Primary-Insert-Remove" class="headerlink" title="Primary - Insert&#x2F;Remove"></a>Primary - Insert&#x2F;Remove</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQ2xpZW50LT4-UHJpbWFyeTpJbnNlcnQoa2V5LHZhbHVlLGlkKSBvciBSZW1vdmUoa2V5LGlkKVxuICAgIFByaW1hcnktPj5QcmltYXJ5OnVwZGF0ZSBpbnRlcm5hbCBrdlxuICAgIFByaW1hcnktPj5QZXJzaXN0ZW5jZTpQZXJzaXN0KGtleSx2YWx1ZSxpZClcbiAgICBQcmltYXJ5LT4-UHJpbWFyeTphZGQgb25lIGl0ZW0gdG8gaW50ZXJuYWwgcmV0cnkgcGVyc2lzdCBsaXN0XG4gICAgUHJpbWFyeS0-PlJlcGxpY2F0b3IgMTpSZXBsaWNhdGUoa2V5LHZhbHVlLGlkKVxuICAgIFByaW1hcnktPj5QcmltYXJ5OmFkZCBvbmUgaXRlbSB0byBwZW5kaW5nIHJlcGxpY2F0ZXMgbGlzdFxuICAgIFByaW1hcnktPj5SZXBsaWNhdG9yIDI6UmVwbGljYXRlKGtleSx2YWx1ZSxpZClcbiAgICBQcmltYXJ5LT4-UHJpbWFyeTphZGQgb25lIGl0ZW0gdG8gcGVuZGluZyByZXBsaWNhdGVzIGxpc3RcbiAgICBQcmltYXJ5LT4-UHJpbWFyeTpzY2hlZHVsZSBmYWlsdXJlIGZvciBhZnRlciAxcyIsIm1lcm1haWQiOnsidGhlbWUiOiJmb3Jlc3QiLCJmbG93Y2hhcnQiOnsiY3VydmUiOiJiYXNpcyJ9fSwidXBkYXRlRWRpdG9yIjpmYWxzZX0"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQ2xpZW50LT4-UHJpbWFyeTpJbnNlcnQoa2V5LHZhbHVlLGlkKSBvciBSZW1vdmUoa2V5LGlkKVxuICAgIFByaW1hcnktPj5QcmltYXJ5OnVwZGF0ZSBpbnRlcm5hbCBrdlxuICAgIFByaW1hcnktPj5QZXJzaXN0ZW5jZTpQZXJzaXN0KGtleSx2YWx1ZSxpZClcbiAgICBQcmltYXJ5LT4-UHJpbWFyeTphZGQgb25lIGl0ZW0gdG8gaW50ZXJuYWwgcmV0cnkgcGVyc2lzdCBsaXN0XG4gICAgUHJpbWFyeS0-PlJlcGxpY2F0b3IgMTpSZXBsaWNhdGUoa2V5LHZhbHVlLGlkKVxuICAgIFByaW1hcnktPj5QcmltYXJ5OmFkZCBvbmUgaXRlbSB0byBwZW5kaW5nIHJlcGxpY2F0ZXMgbGlzdFxuICAgIFByaW1hcnktPj5SZXBsaWNhdG9yIDI6UmVwbGljYXRlKGtleSx2YWx1ZSxpZClcbiAgICBQcmltYXJ5LT4-UHJpbWFyeTphZGQgb25lIGl0ZW0gdG8gcGVuZGluZyByZXBsaWNhdGVzIGxpc3RcbiAgICBQcmltYXJ5LT4-UHJpbWFyeTpzY2hlZHVsZSBmYWlsdXJlIGZvciBhZnRlciAxcyIsIm1lcm1haWQiOnsidGhlbWUiOiJmb3Jlc3QiLCJmbG93Y2hhcnQiOnsiY3VydmUiOiJiYXNpcyJ9fSwidXBkYXRlRWRpdG9yIjpmYWxzZX0"></a></p>
<p>上图是Primary处理来自Client的Insert或者Remove请求。<br>前面一半和Secondary处理Snapshot方式基本一致。</p>
<p>不同之处就在于：<br>Primary还要负责告诉所有现存的Replicator（图里只画了两个，理论上可以有任意N个）去扩散数据。并且把这个操作记在内部状态里。<br>以及设置一个定时任务，一秒钟之后，如果没有达成Primary自己persist成功并且每一个Replicator都扩散成功的状态，那就告诉Client这次操作是失败的。</p>
<h3 id="Primary-Get"><a href="#Primary-Get" class="headerlink" title="Primary - Get"></a>Primary - Get</h3><p>至于Primary处理来自于Client的Get请求的图就不画了，与Secondary完全一致。</p>
<h3 id="Primary-Persisted"><a href="#Primary-Persisted" class="headerlink" title="Primary - Persisted"></a>Primary - Persisted</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUGVyc2lzdGVuY2UtPj5QcmltYXJ5OlBlcnNpc3RlZChrZXksaWQpXG4gICAgUHJpbWFyeS0-PlByaW1hcnk6IHJlbW92ZSBvbmUgaXRlbSBmcm9tIHBlbmRpbmcgcGVyc2lzdCBsaXN0XG4gICAgYWx0IFJlcGxpY2F0aW9ucyBhbGwgZmluaXNoZWRcbiAgICBQcmltYXJ5LT4-Q2xpZW50Ok9wZXJhdGlvbkFjayhpZClcbiAgICBlbmQiLCJtZXJtYWlkIjp7InRoZW1lIjoiZm9yZXN0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUGVyc2lzdGVuY2UtPj5QcmltYXJ5OlBlcnNpc3RlZChrZXksaWQpXG4gICAgUHJpbWFyeS0-PlByaW1hcnk6IHJlbW92ZSBvbmUgaXRlbSBmcm9tIHBlbmRpbmcgcGVyc2lzdCBsaXN0XG4gICAgYWx0IFJlcGxpY2F0aW9ucyBhbGwgZmluaXNoZWRcbiAgICBQcmltYXJ5LT4-Q2xpZW50Ok9wZXJhdGlvbkFjayhpZClcbiAgICBlbmQiLCJtZXJtYWlkIjp7InRoZW1lIjoiZm9yZXN0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9"></a></p>
<p>上图是Primary收到Persistence成功消息的时候要做的事情。<br>首先从pending persist列表中移除刚刚persist成功的一条。<br>然后检查下是不是所有Replications也都完成了，两个条件的都符合的话，就告诉Client说操作完成了。</p>
<h3 id="Primary-Replicated"><a href="#Primary-Replicated" class="headerlink" title="Primary - Replicated"></a>Primary - Replicated</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUmVwbGljYXRvci0-PlByaW1hcnk6UmVwbGljYXRlZChrZXksaWQpXG4gICAgUHJpbWFyeS0-PlByaW1hcnk6IHJlbW92ZSBvbmUgaXRlbSBmcm9tIHBlbmRpbmcgcmVwbGlhdGVzXG4gICAgYWx0IEFsbCBSZXBsaWNhdGlvbnMgRmluaXNoZWRcbiAgICBhbHQgUGVyc2lzdCBmaW5pc2hlZFxuICAgIFByaW1hcnktPj5DbGllbnQ6T3BlcmF0aW9uQWNrKGlkKVxuICAgIGVuZFxuICAgIGVuZFxuIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgUmVwbGljYXRvci0-PlByaW1hcnk6UmVwbGljYXRlZChrZXksaWQpXG4gICAgUHJpbWFyeS0-PlByaW1hcnk6IHJlbW92ZSBvbmUgaXRlbSBmcm9tIHBlbmRpbmcgcmVwbGlhdGVzXG4gICAgYWx0IEFsbCBSZXBsaWNhdGlvbnMgRmluaXNoZWRcbiAgICBhbHQgUGVyc2lzdCBmaW5pc2hlZFxuICAgIFByaW1hcnktPj5DbGllbnQ6T3BlcmF0aW9uQWNrKGlkKVxuICAgIGVuZFxuICAgIGVuZFxuIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"></a></p>
<p>上图是Primary收到来自Replicator的扩散成功消息时候的处理。<br>首先把刚成功的这一条从pending replicates中移除。<br>然后检查下是不是所有的replications都完成了（毕竟这里只是收到了一个replicator的消息），并且persist也完成了，如果两条都符合，就告诉Client说操作完成了。</p>
<p>到这里就明显可以看出，pending replicates的作用就是primary用来记录尚未完成的replication。</p>
<h3 id="Primary-Replicas"><a href="#Primary-Replicas" class="headerlink" title="Primary - Replicas"></a>Primary - Replicas</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQXJiaXRlci0-PlByaW1hcnk6UmVwbGljYXMobm9kZXMpXG4gICAgbG9vcCBldmVyeSBuZXcgc2Vjb25kYXJ5XG4gICAgUHJpbWFyeS0-PlByaW1hcnk6Y3JlYXRlIG5ldyByZXBsaWNhdG9yIGZvciBuZXcgc2Vjb25kYXJ5XG4gICAgbG9vcCBldmVyeSBrdiBwYWlyXG4gICAgUHJpbWFyeS0-PlJlcGxpY2F0b3I6UmVwbGljYXRlKGtleSx2YWx1ZSxpZClcbiAgICBlbmRcbiAgICBlbmRcblxuICAgIGxvb3AgZXZlcnkgbGVmdCBzZWNvbmRhcnlcbiAgICBQcmltYXJ5LT4-UHJpbWFyeTpyZW1vdmUgaXRlbXMgZnJvbSBwZW5kaW5nIHJlcGxpY2F0ZXNcbiAgICBhbHQgYWxsIHJlcGxpY2F0aW9ucyBmaW5pc2hlZFxuICAgIGFsdCBwZXJzaXN0IGZpbmlzaGVkXG4gICAgUHJpbWFyeS0-PkNsaWVudDpPcGVyYXRpb25BY2soaWQpXG4gICAgZW5kXG4gICAgZW5kXG4gICAgUHJpbWFyeS0-PlByaW1hcnk6ZGVzdHJveSBpdHMgbWF0Y2hpbmcgcmVwbGljYXRvclxuICAgIFxuICAgIGVuZFxuIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"><img data-src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQXJiaXRlci0-PlByaW1hcnk6UmVwbGljYXMobm9kZXMpXG4gICAgbG9vcCBldmVyeSBuZXcgc2Vjb25kYXJ5XG4gICAgUHJpbWFyeS0-PlByaW1hcnk6Y3JlYXRlIG5ldyByZXBsaWNhdG9yIGZvciBuZXcgc2Vjb25kYXJ5XG4gICAgbG9vcCBldmVyeSBrdiBwYWlyXG4gICAgUHJpbWFyeS0-PlJlcGxpY2F0b3I6UmVwbGljYXRlKGtleSx2YWx1ZSxpZClcbiAgICBlbmRcbiAgICBlbmRcblxuICAgIGxvb3AgZXZlcnkgbGVmdCBzZWNvbmRhcnlcbiAgICBQcmltYXJ5LT4-UHJpbWFyeTpyZW1vdmUgaXRlbXMgZnJvbSBwZW5kaW5nIHJlcGxpY2F0ZXNcbiAgICBhbHQgYWxsIHJlcGxpY2F0aW9ucyBmaW5pc2hlZFxuICAgIGFsdCBwZXJzaXN0IGZpbmlzaGVkXG4gICAgUHJpbWFyeS0-PkNsaWVudDpPcGVyYXRpb25BY2soaWQpXG4gICAgZW5kXG4gICAgZW5kXG4gICAgUHJpbWFyeS0-PlByaW1hcnk6ZGVzdHJveSBpdHMgbWF0Y2hpbmcgcmVwbGljYXRvclxuICAgIFxuICAgIGVuZFxuIiwibWVybWFpZCI6eyJ0aGVtZSI6ImZvcmVzdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"></a></p>
<p>最后一张图，描述的是当Arbiter告知Primary集群中有变动时，Primary的处理方式。</p>
<p>对于新加入的Secondary，给它们每个都创建一个新的Replicator。然后通过Replicator把所有现存的kv数据都甩给新加入的Secondary。类似于给插班生<strong>补课</strong>。</p>
<p>对于离开集群的Secondary，把和它们相关的pending replicates都删掉，既然它离开了，那就没必要等它了。删除掉之后马上检查一下是不是replications和persist都完了（因为有可能当前等的就是这个离开的Secondary，它一离开，没有别的需要等的了），如果是的话，那就告诉Client更新成功了。<br>最后，销毁掉对应的replicator。这个Secondary的历史使命就算终结了。如果后续这个Secondary又加入回来了，那走的就是上面一段<strong>补课</strong>的处理。</p>
<h1 id="OK"><a href="#OK" class="headerlink" title="OK"></a>OK</h1><p>虽然讲的是一个加了若干限制的分布式键值存储，但是还是用了十四张图。</p>
<p>这些图里没能体现到的一点是关于异步的问题，在最后补充一句：<br>除了Client之外，以上所有提到的参与者，每一个都是严格单线程的，不会在任何时候同时做两件事。<br>实际的实现代码中，是用<strong>akka</strong>写的，这些参与者做的多数都是<strong>async message passing</strong>的工作。<br>由于这是一门课的作业题，所以具体实现代码就不提及了。</p>
<p>希望这些图表对于理解分布式键值存储（Distributed Key-Value Store）会有一些帮助。</p>
]]></content>
      <tags>
        <tag>Reactive</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>软件需求膨胀系数</title>
    <url>/blog/2020/05/22/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E8%86%A8%E8%83%80/</url>
    <content><![CDATA[<h1 id="泡水膨胀球"><a href="#泡水膨胀球" class="headerlink" title="泡水膨胀球"></a>泡水膨胀球</h1><img data-src="/images/需求膨胀/膨胀球.jpg" alt="drawing" width="500"/>

<p>这是一种小玩具，干燥时拿在手里，小巧紧致。</p>
<p>泡在水里，一段时间之后，浑圆饱满，一只手都未必能捧的住。</p>
<p>放在干燥通风的地方晾晒，一段时间过后，又可以恢复原本的大小。</p>
<h1 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h1><p>软件需求与泡水膨胀球也有类似之处。</p>
<p>一开始时看似简单明了且完备正交，做起来发现<strong>越做越大，越做越多</strong>。</p>
<p>原本一只手能抓好几个的小球，后来变成两只手都抓不住一个。</p>
<p>然后的结果要么是超预算多花钱做完，要么是转嫁成本给乙方要求对方做完，要么是延期，要么是痛苦地去压缩需求。</p>
<p>无论哪种，都是<strong>不健康</strong>的。</p>
<h1 id="膨胀系数"><a href="#膨胀系数" class="headerlink" title="膨胀系数"></a>膨胀系数</h1><p>小球泡在水里会膨胀，暴露于干燥环境中会缩小。</p>
<p>这个过程可以用一个简化模型来表示：</p>
<p><em><strong>膨胀系数 ≈ 吸水力 - 斥水力</strong></em></p>
<p><em><strong>小球体积 ≈ 初始体积 + 膨胀系数 x 时间</strong></em></p>
<p>当吸水力大于斥水力时，膨胀系数为正数，在时间的作用下，球会膨胀。<br>当斥水力大于吸水力时，膨胀系数为负数，在时间的作用下，球会缩小。<br>当两个力接近相互<strong>平衡</strong>时，膨胀系数约等于零，在时间的作用下，小球体积趋于<strong>稳定</strong>。</p>
<h1 id="我们希望看到小球体积怎样变化？"><a href="#我们希望看到小球体积怎样变化？" class="headerlink" title="我们希望看到小球体积怎样变化？"></a>我们希望看到小球体积怎样变化？</h1><p>一直变肥？那不行。做软件是有成本的，时间人力都是成本。</p>
<p>持续变瘦？也不行。需求受到过分压抑也是不健康的。</p>
<p>健康的变化过程应该是：<br>先让小球丰满起来（充分收集需求，以免后面出现始料未及的“惊喜”）<br>然后削减多余的赘肉（使用奥卡姆剃刀）<br>之后长期维持健康范围内的波动</p>
<h1 id="力的阶段性施加策略"><a href="#力的阶段性施加策略" class="headerlink" title="力的阶段性施加策略"></a>力的阶段性施加策略</h1><p>时间的流逝是不受我们控制的，因而想要控制体积就要从膨胀系数下手。</p>
<p>而膨胀系数又与两个力相关，因而<strong>想要控制体积就要控制吸水力与斥水力</strong>。</p>
<img data-src="/images/需求膨胀/二力.png"/>

<p>首先让吸水力尽情释放，这时斥水力<strong>蛰伏</strong>着<strong>静待</strong>吸水力的<strong>衰减</strong>。<br>之后斥水力爬坡，达到与吸水力持平的水准，二者长期和平共处。</p>
<p>当我们如上使用这两种力的时候，小球体积的变化就会是这样的：</p>
<img data-src="/images/需求膨胀/体积变化.png"/>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>调研阶段积极创造<strong>环境</strong>来让吸水力得以<strong>释放</strong>，先允许小球变肥。然后施加一定的斥水力，让小球苗条下来。</p>
<p>到了研发阶段，由于吸水力在之前就已经得到了有效的<strong>释放</strong>，这时施加适量的斥水力来平衡<strong>所剩无几</strong>的吸水力就能让小球体积的波动维持在<strong>可控</strong>的范围内。</p>
<p>在不同的阶段有策略地利用这两种力，则可以趋近<strong>前期需求收集充分考虑各方诉求</strong>不留大的隐患，后续研发稳定<strong>不坐过山车</strong>的目的。</p>
]]></content>
      <tags>
        <tag>需求</tag>
      </tags>
  </entry>
  <entry>
    <title>《大目标》一书中的有趣观点</title>
    <url>/blog/2020/07/05/%E5%A4%A7%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>工业化、现代化、城市化、民主化、自由化、市场化、全球化，不一定要姓“西、资、基”。</p>
<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>五常的否决权是对大国毁灭性力量的承认。核武器，氢弹，洲际导弹，核潜艇，多弹头分导。</p>
<p>退缩不会让狼群放弃供给，逃跑不会让狼群放弃追捕，倒下不会让狼群放弃杀戮。</p>
<p>大国没资格投降。</p>
<p>美国对日本可以援引《共同防卫协定》只会日本空军。韩国三军的最高指挥权本来就归美军。</p>
<p>冷战的本质是3.5亿的苏联东欧工业人口和欧美日6亿的工业人口抢全球的资源和市场。</p>
<h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><p>把人当人看是工业社会才能做到的事。医疗器具，消毒不再昂贵，简单高效。<br>当物质上的富足让社会不再需要合理合法地牺牲掉一些人而保证另一些人的生存时，才能进入文明。</p>
<p>1962年，中国粮食总产量1.6亿吨。1978年3亿吨。不是靠积极性。而是靠化肥。<br>化肥让农民有了余粮和闲暇，从农业中解放出来的生产力投入工业。</p>
<p>工业化：用机器造机器，然后用造出来的机器去造别的东西。</p>
<p>世界上勤俭的不止有中国人，勤俭了几千年也没有变的富裕。工业化才能让勤俭变成资本。</p>
<p>李鸿章去找“造器之器”，是找造火器的机器，而不是造机器的机器。</p>
<p>机器用钢铁造的，用的是煤炭或者煤炭生成的电能。欧盟来源于煤钢共同体。</p>
<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><p>美国“绿卡战士”的阵亡率比美籍士兵高出一倍。</p>
<p>钱并不是财富，说“有钱”其实意味着“有货”。</p>
<p>美元作为结算货币收全球铸币税。各国越小，产业链越分散，美元铸币税收的越开心。</p>
<p>经济活动的本质是物质生产。</p>
<p>枪杆子里面出石油。</p>
<h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><p>工业与手工业的最大区别：工业可以升级。</p>
<p>西班牙，英国，美国，三个世界性的大帝国。<br>兴起的原因是先进的生产技术，发达的制造业能创造财富也支持了强大的军队。<br>然后不劳而获，停滞衰退。</p>
<h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><p>与之前的强国相比，苏联的工业化不依赖殖民地的市场和资源。</p>
<p>重工业是核心，轻工业释放重工业制造的生产能力。</p>
<p>苏联利用西方几次危机，抄底技术与设备。</p>
<p>工业化人口数量决定了工业经济的规模，也和工业体系的复杂程度和先进程度密切相关。<br>独立工业体系需要的工业化人口数量是基本配件数量的5到10倍。<br>欧洲走向一体化的原因就在于此。</p>
<p>苏联的崩溃说到底是因为美国用自己的人口优势率先完成了产业升级。</p>
<p>在战略对抗中，要掌握比对手更多的工业化人口，要向盟友输出工业化社会，通过输出工业化社会来制造盟友。否则早晚遇到工业升级的人口障碍。</p>
<h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><p>一切强权、帝国在工业革命面前都是过眼云烟。</p>
<p>终结大英帝国的是第二次工业革命。</p>
<p>中国不能靠出口来长期支持我们的工业化进程了。</p>
<h1 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h1><p>没有人会把太监叫做绅士。</p>
<p>保持不断的进步才能有道理可以讲。</p>
<p>输出工业化是个长久的买卖，比输出消费品要长久。</p>
<p>现在一个地市级的地勘力量比工业化之前全国合集还多。</p>
<p>买办是第一障碍。</p>
<p>要输出工业化，而不是像殖民主义那样打击当地工业发展。</p>
]]></content>
      <tags>
        <tag>工业党</tag>
      </tags>
  </entry>
  <entry>
    <title>TW十四载</title>
    <url>/blog/2021/12/17/tw14years/</url>
    <content><![CDATA[<p>2007年，我在读大二。</p>
<p>当时经常会去学校食堂对面的报刊亭买杂志，一本，是《大众软件》，另一本，是《程序员》。</p>
<img data-src="/images/14years/cxy-2007-06.png"/>

<p>印象中当时《程序员》上的多数文章充满了我没听过的各种缩写与稀奇古怪的名词，文风是老成持重，我看不懂，但很是佩服。</p>
<p>而这当中偶尔会夹杂着几篇文风犀利，睥睨天下的文章，加上作者头像很是非主流，我虽也看不懂，但印象深刻。<br>这些犀利文章的作者，便经常冠有TW的头衔。</p>
<p>2012年，我在一家小软件公司上了两年的班。<br>当时我们每半年发布一个版本，每到要发布前夕，程序员便都停止写代码，去做回归测试。</p>
<p>经常会发现半年前发布时还是ok的功能，在这六个月里被改错了，得修。<br>我隐隐觉得这不对劲，再六个月之后还是会出现类似的状况，老是靠大家停工去做回归测试不是个办法，我们总是会“狗熊掰棒子，掰一根丢一根”。</p>
<img data-src="/images/14years/gxbbz.png"/>

<p>恰在此时，邮箱收到了来自TW的面试邀请。<br>到了这会，我其实已经记不清楚大学时看的《程序员》杂志上有什么内容了，不过TW这个名字还是有些印象。<br>再去一查，这家公司还出过不少书，推崇做自动化测试，注重软件质量，而这些正是我当时所在的小公司所缺乏的。</p>
<p>于是便接受了面试邀请，做了Mars Rover的题目，去参加了办公室面试。<br>面试时还见到了《软件设计精要与模式》的作者。<br>之后便加入TW成为了一名21世纪的程序员。</p>
<p>从第一次看到《程序员》杂志上的文章到眼下的2021年，有14年了。<br>14年挺长的，从上小学到高中毕业，也才12年。</p>
<p>时间跨度长，变化也就多，不过当时持有的很朴素的观念不太容易变：<br>软件至少要做对，一旦做对了之后，要避免“狗熊掰棒子，掰一根丢一根”。</p>
<p>就好像一个木匠师傅，用了锛凿斧锯，费力做成了板凳，肯定是不希望这个凳子给人坐了两天之后就开始“嘎吱吱”。</p>
<p>码匠师傅，亦当如是。</p>
]]></content>
      <tags>
        <tag>TW</tag>
      </tags>
  </entry>
  <entry>
    <title>一些关于银行的散碎知识</title>
    <url>/blog/2022/01/29/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E9%93%B6%E8%A1%8C%E7%9A%84%E6%95%A3%E7%A2%8E%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="金本位时期金融机构的层级结构"><a href="#金本位时期金融机构的层级结构" class="headerlink" title="金本位时期金融机构的层级结构"></a>金本位时期金融机构的层级结构</h2><p>19th century nation state financial institution hierarchy </p>
<p><img data-src="/images/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E9%93%B6%E8%A1%8C%E7%9A%84%E6%95%A3%E7%A2%8E%E7%9F%A5%E8%AF%86/Untitled.png" alt="Untitled"></p>
<p>央行的负债≈银行的资产≈货币</p>
<p>银行的负债≈私营部门的资产≈存款</p>
<h2 id="亏钱先亏哪儿？"><a href="#亏钱先亏哪儿？" class="headerlink" title="亏钱先亏哪儿？"></a>亏钱先亏哪儿？</h2><p><img data-src="/images/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E9%93%B6%E8%A1%8C%E7%9A%84%E6%95%A3%E7%A2%8E%E7%9F%A5%E8%AF%86/Untitled1.png" alt="Untitled"></p>
<p>假设左侧亏了5块钱，且左右必须平，则右侧也必须减少5。</p>
<p>不能先减liability，因为债权人优先级较高，只能先减equity。</p>
<h2 id="Liquidity和Solvency"><a href="#Liquidity和Solvency" class="headerlink" title="Liquidity和Solvency"></a>Liquidity和Solvency</h2><p><img data-src="/images/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E9%93%B6%E8%A1%8C%E7%9A%84%E6%95%A3%E7%A2%8E%E7%9F%A5%E8%AF%86/Untitled2.png" alt="Untitled"></p>
<p>cash reserve &gt; 0，则具有一定的流动性</p>
<p>net worth &gt; 0，则具有一定的偿付能力</p>
<p>流动性和偿付能力的高低则取决于到底比零大多少。</p>
<h2 id="资金来源"><a href="#资金来源" class="headerlink" title="资金来源"></a>资金来源</h2><p><img data-src="/images/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E9%93%B6%E8%A1%8C%E7%9A%84%E6%95%A3%E7%A2%8E%E7%9F%A5%E8%AF%86/Untitled3.png" alt="Untitled"></p>
<p>活期存款 (Demand deposit)</p>
<p>存款证书&#x2F;大额存单 (Certificate of deposit)</p>
<p>附买回协议（repurchase agreement、repo，也称为附买回协定、附买回交易，回购协议、卖出回购或正回购）</p>
<p>商业票据（Commercial Paper）</p>
<p><strong>负债业务</strong>是商业银行形成资金来源的业务</p>
<p><strong>存款</strong>是银行<strong>对存款人的负债</strong>，是银行最<strong>主要的资金来源</strong></p>
<h2 id="四种风险"><a href="#四种风险" class="headerlink" title="四种风险"></a>四种风险</h2><p>银行的风险种类较多，最主要的风险有四种：</p>
<p><strong>信用风险、市场风险、流动性风险和操作风险</strong> </p>
<p><strong>信用风险</strong>是指借款人因各种原因未能及时、足额偿还债务或银行贷款而违约的可能性。发生违约时，债权人或银行必将因为未能得到预期的收益而承担财务上的损失。 </p>
<p><strong>市场风险</strong>是指未来市场价格（利率、汇率、股票价格和商品价格）的不确定性对企业实现其既定目标的影响 </p>
<p><strong>流动性风险</strong>是指因市场成交量不足或缺乏愿意交易的对手，导致未能在理想的时点完成买卖的风险；或银行本身掌握的流动资产不能满足即时支付到期负债的需要，从而使银行丧失清偿能力和造成损失的可能性。 流动性风险，一方面是一种<strong>本原性</strong>风险，是由于流动性不足造成的；另一方面也是最常见的情况，是其他各类风险长期隐藏、积聚，最后以流动性风险的形式爆发出来。从这种意义上讲，流动性风险是一种<strong>派生性</strong>风险，即流动性不足，可能是由于利率风险、信用风险、经营风险、管理风险、法律风险、国家风险、汇率风险等风险源所造成的，银行最终陷入流动性风险中不能自拔。 </p>
<p><strong>操作风险</strong>的正式定义是：由于内部程序、人员和系统的不完备或失效，或由于外部事件造成损失的风险</p>
]]></content>
      <tags>
        <tag>银行</tag>
      </tags>
  </entry>
  <entry>
    <title>卢瑟经济学</title>
    <url>/blog/2022/10/28/loser-economy/</url>
    <content><![CDATA[<p><img data-src="https://img14.360buyimg.com//n0/jfs/t1/176451/22/10402/376750/60a37fb7E23ecc0e3/aa8754102dc19767.jpg"></p>
<h1 id="此书讲什么"><a href="#此书讲什么" class="headerlink" title="此书讲什么"></a>此书讲什么</h1><p>马克思《资本论》讲的三件事：</p>
<ul>
<li>原始积累靠暴力</li>
<li>贫富差距会扩大</li>
<li>最终自毁</li>
</ul>
<h1 id="经济与政治"><a href="#经济与政治" class="headerlink" title="经济与政治"></a>经济与政治</h1><p>经济学是有阶级属性的。</p>
<p>哪个阶级现在说了算，哪个阶级的经济学就流行。</p>
<p>反之亦然，可以通过观察哪个学说流行来倒推谁说了算。</p>
<ul>
<li>地主： 重农主义</li>
<li>商人： 重商主义</li>
<li>新兴资产阶级： 自由市场和劳动价值论</li>
<li>工人阶级： 劳动价值论</li>
<li>资产阶级卷土重来： 边际效用价值论</li>
</ul>
<p>不同的阶级有不同的价值理论，这就如同不同的宗教信仰对善行的定义是不一样的。<br>统治阶级的经济学，是为统治阶级寻找合法性的。被统治阶级的经济学，自然是为被统治阶级申诉的，顺便控诉对方。<br>市场是不是真的有效，到底什么创造价值，其实就看谁来解释。</p>
<p>按照卢瑟经济学，土地没有价值。土地的所有制，使土地所有者有权向在土地上生活工作的人要求贡赋。土地所有权越垄断，要求的地租就越高。土地垄断程度高的地方，绝对地租就高。<strong>所以房子的昂贵并不是土地的价值昂贵，而是土地的所有权高度垄断，导致地租昂贵。</strong></p>
<h1 id="危机的表征与对其的解释"><a href="#危机的表征与对其的解释" class="headerlink" title="危机的表征与对其的解释"></a>危机的表征与对其的解释</h1><ul>
<li>妈妈，天这么冷，我们家为什么不生火呢？</li>
<li>因为你爸爸失业了，我们没有钱去买煤。</li>
<li>小孩继续问：“妈妈，爸爸为什么失业呢？”</li>
<li>他妈妈说：“因为你爸爸的煤矿倒闭了。〞</li>
<li>小孩接着问：“妈妈，爸爸的煤矿为什么会倒闭呢？”</li>
<li>他妈妈说：“因为没有人买你爸爸的煤矿的煤，煤卖不出去，所以煤矿倒闭了。”</li>
</ul>
<p>与封建时期的危机不同，资本主义条件下的危机的特点：</p>
<ul>
<li>不是产品不足而是产品过剩</li>
<li>不是劳动力被透支而是劳动力被闲置</li>
<li>不是没稂食吃，而是产能过剩导致企业破产，然后大家下岗，没钱买粮食吃</li>
<li>产能有的是，就是没销路；粮食有的是，就是没钱买；劳动力有的是，就是没活干</li>
<li>这种危机有很强的周期性，按时袭击经济</li>
</ul>
<p>工业化的资本主义生产的特点是所有的人，都为别人生产商品，所有的人都消费别人生产的商品。</p>
<p>工人一旦失业就很难找到原有工资待遇水平类似的工作。因为全社会的资本家几乎在一夜之间觉得他们的劳动不值钱了。到处都是堆积的商品，老板做什么也不赚钱，索性停产，老板不生产，工人的劳动也就不值钱了，对老板就没有用了。</p>
<p>稳拿经济学假设工人工资水平下降，老板会增加劳动力的需求。问题是，老板的需求与产品的销售有关，当销售情况不改善的时候，工人工资再便宜，老板也没有兴趣多雇人。</p>
<p>社会金字塔的平级之间是可以自动调节的，但是上下级之间却不能自由调节。当社会需要的产品与资本家提供的产品不对称的时候，资本家能自行改变产品结构。当社会需要的劳动力与工人能提供的劳动力不对称的时候，工人能自动改行。<strong>但是当塔的上级不愿意投资和消费的时候，塔的下级却没有能力去代替上级投资或消费。这才是真正的困难。</strong></p>
<h2 id="凯恩斯"><a href="#凯恩斯" class="headerlink" title="凯恩斯"></a>凯恩斯</h2><p>1936年，凯恩斯在他的著作《就业、利息和货币通论》中提出在资本主义制度下不是产品做得出就卖得掉，有很大一部分产品注定无法消费，如此必然导致资本家压缩生产，工人失业。为了挽救资本主义，多余的产品需要政府帮助消费掉，甚至是浪费掉。无法消费的产品的量随着贫富差距的增大而增大，换句话说，贫富差距越大的经济体，失业问题越严重。</p>
<p>消费需求不足和投资需求不足将产生大量的失业，形成生产过剩的经济危机。</p>
<p>当投资的利润还不如利率的时候，资本家就都不投资，持币观望，转而存银行吃利息。如果这个时候利率高，那么投资就非常少了。<br>其实还是消费需求不足。因为投资需求归根到底完全仰仗消费品的销售情况。</p>
<p>觊恩斯主义是用通胀换就业：后遗症就是通货膨胀。</p>
<h2 id="弗里德曼"><a href="#弗里德曼" class="headerlink" title="弗里德曼"></a>弗里德曼</h2><p>在弗里德曼看来，政府</p>
<ul>
<li>第一要务是国防</li>
<li>第二要务是保证契约的实施</li>
<li>而财富分配则属于是一个人认为有益，另一个人认为是有害的</li>
</ul>
<p>但是如果我们换一个角度看弗里德曼的要求的话，就会发现三件事说起来冠冕堂皇：</p>
<ul>
<li>第一是不要外来势力干涉稳拿</li>
<li>第二是要求法律是保证契约的执行，不要插手稳拿利用契约合法地抢劫卢瑟 </li>
<li>第三是不要试图触碰，甚至返还抢来的赃物</li>
</ul>
<p>对弱者来说，与强者费厄泼赖就是最大的不公平。自愿和双方获利，只有在双方经济地位接近的时候才能存在。</p>
<p>关税保护了幼年时期的美国资本，避免被英国资本吞噬，避免成为英国的经济殖民地</p>
<p><strong>弗里德曼和凯恩斯的理论冲突，与李嘉图和马尔萨斯的冲突异曲同工。都是两个集团在争夺经济主导权。</strong></p>
<p>财产具有自我汇集的效应，古往今来小农经济就没有长期稳定存在过。小农如果不能进化为大地主，那么迟早会被地主吞并。</p>
<p>资本主义社会的矛盾的核心不是生产力的发展，而是资本主义分配制度。</p>
<p>自由市场加私有产权，只要一代人就能在社会上建立起人与人之间不可逾越的鸿沟。能力的竞争最多在一代人之同发挥作用，一代人之后资产确立统治地位。</p>
<p>其实，对大资本家来讲，周期性的经济危机未必是坏事。经济危机可以促进资本汇聚到强者也就是大资本家手中。</p>
<p>认识经济危机并不复杂，解决经济危机（至少从理论上）也不复杂，复杂的是后面纠葛的利益。经济危机袭扰人类将近 200 年了，解决的办法，无论是书面还是实战的都不少：</p>
<ul>
<li>希特勒的解决方式是寻求生存空间。从经济殖民地获得廉价的原材料，过剩的产品向经济殖民地倾销。</li>
<li>凯恩斯的解决方式，是政府印钱，由政府创造需求。多余的产能浪费掉，资本家不是没钱不生产，不雇用工人吗？用印钞机给他们钱就是了。政府有印钞机还愁没钱支付？后果是通货膨胀或者资产泡沫。</li>
<li>罗斯福的解决方案，是给工人更大的权利，支持他们与资本家斗争。增加财产税让稳拿出血，通过转移支付，给卢瑟更多的福利。</li>
</ul>
<p>这么多方法，多数效果都不好。这是因为稳拿处于塔尖的地位，直接调节总量而不触动分配模式的解决方案，不过是给稳拿更多的发财的机会，导致更严重的分配不公。如果触动分配模式，又难免遭到稳拿的强大阻碍，很可能半途而废。</p>
<h1 id="资产的属性"><a href="#资产的属性" class="headerlink" title="资产的属性"></a>资产的属性</h1><p>对产来说，具体选择哪种方式，取决于哪种方式来钱最容易，或者说风险更小，效率更高。产是否发展生产，并不确定，是否会改善多数人的生活则更不确定。我们没有任何理由认为，产权明晰加自由市场经济一定会发展生产力，提供更多物美价廉的产品。</p>
<p>对苏联这样的前社会主义国家来说，完全市场化和产权私有化（或者说产权明晰化）的结果，唯一能确定的就是私人产权迅速膨胀，出现一批人造寡头，其余的多数人则沦为这些寡头的奴隶。</p>
<p>稳拿经济学追求帕累托最优，认为在这种情况下各种资源得到最有效地利用，紧缺资源获得最大价值。稳拿经济学认为，自由的市场，最终会达到帕累托最优：就是不可能再改善某些人的境况，而不使任何其他人受损。在市场中，社会的各类人群在不断追求自身利益最大化的过程中，可以使整个社会的经济资源得到最合理的配置。</p>
<p>自由市场会导致帕累托最优，这是完全正确的。但是这种帕累托最优，却不是多数人之福—既不是卢瑟之福，也不是稳拿之福。自由的市场最终会造成财产的高度集中，拥有这些产的稳拿对社会总产品有极大的分配权。数量众多的卢瑟，却只有极其有限的分配权。所以，<strong>每次天下大乱以前，社会都处于或接近帕暴托最优的状态</strong>：不伤害地主的利益，农民就无法改着自己的生活，就要死于饥寒交迫，这时农民就不再尊重市场交易规则，采用暴力推翻产的权威。</p>
<h2 id="亚当斯密-科斯"><a href="#亚当斯密-科斯" class="headerlink" title="亚当斯密 &amp; 科斯"></a>亚当斯密 &amp; 科斯</h2><p>亚当.斯密提出，个人满足私欲的活动将促进社会福利，只要自由放任，市场的看不见的手发挥作用，最终就将实现全社会的富足。科斯提出只要产权明晰，把一切交给市场中看不见的手来发挥作用；然后就能建立安宁祥和的社会，一切都会万事大吉。<br>在斯密的时代，正是大饼迅猛变大的时代。那时资本主义刚刚登场不久，每一个资本家的资本量都很小，社会中还有大量封建残余。资本主义处于自由竟争时期，正在经历第一次产业革命，从手工作坊向大工厂过渡，劳动者还有当小老板或者当雇用工人的選擇。那时对产来说最有效率的自我增值的手段是发展生产力，资本主义相对封建残余来说极大地推动了生产力发展，所以这样说并不为过。经过200多年以后，到今天还这样说，那就是彻头彻尾的胡说了。</p>
<p>稳拿经济学提出只要交易就能改善全社会的福利。卢瑟经济学认为改善福利的过程复杂得多。价值来自生产劳动，市场并不创造价值。个人也许可以通过炒房子炒地皮获得极大的收益，但是社会总体生活不会改善，因为总消费品的量，无论是产量，还是销售量都并没增加。</p>
<p>可能存在大饼整体萎缩，大家吃得越来越少，某些个体却吃得越来越多的情况。</p>
<p>资本论想说明的事情之一：工人创造的剩余价值越多，资本家的资产越多，工人与资本家之间差距不断拉大，最终成为资本的奴隶：死劳动（工人以前创造的剩余价值）牢牢抓住活劳动（工人）。</p>
<p>产是什么：<strong>产是用于获得剩余价值依据的物化的媒介。人类社会总产品是块大饼，产是稳拿用来切大饼的刀。</strong></p>
<p>土地价格的攀升，不是土地自己产生价值，而是土地上产业资本不断壮大，地主要求其支付的贡税越来越多。如果土地上的产业萧条，土地价格必然暴跌。</p>
<p>依靠土地获得剩余价值，是对资本主义的阻力而不是动力。土地所有权高度集中，产业资本家获得的利润太薄，他们很难有足够的剩余价值扩大再生产。此外，土地垄断会造成土地利润高于社会平均利润，资本家的剩余资本必然会选择投机土地，而不是投资于原料或设备进行扩大再生产。引申一步，如果土地成为资本的主体，那么社会必然停滞不前，甚至倒退。历史上，土地所有权高度集中的地区很难诞生资本主义。</p>
<h1 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h1><p>绝大多数的交易，不过是从甲账户转移到乙账户。如果我们把金融机构看为一个整体的话，就会发现几乎所有的货币都在金融机构的手里。</p>
<p>资本主义世界的特点之一，就是<strong>强者恒强，这不仅仅表现在获得利润的时候强者有权先享用大饼，也表现在遇到危机的时候强者付出的代价更少</strong>。</p>
<p>国家是经济上占统治地位的阶级进行阶级统治的政治权力机构。是一个成长于社会之中而又凌驾于社会之上的、以暴力或合法性为基础的、带有相当抽象性的权力机构。国家有阶级性，国家由经济上占优势地位的阶级控制。国家有暴力性，而且是最终的暴力。国家的存在是为了维护统治阶级的经济利益。国家是一个阶级压迫另一个阶级的机器，是使一切被支配的阶级受一个阶级控制的机器。</p>
<p>由于暴力是唯一能对抗资本的要素，而代表国家行使暴力的官僚并不总是靠得住的。对资本来说，暴力的忠诚度是值得怀疑的。所以，<strong>资产阶级成为统治阶级以后，一直试图把国家的作用局限在最小的范围</strong>。对内保证社会治安，对外抵御外敌人侵，是资本主义国家的主要任务。至于维护社会的公平，扶助弱小，是资本家最忌讳的事情。</p>
<p>如果所有的劳动者都去大学深造，最终的结果将是大学深造对提高工资收入水平的作用目益下降。</p>
<h1 id="产销过程"><a href="#产销过程" class="headerlink" title="产销过程"></a>产销过程</h1><p>消费与生产是对立统一的，没有消费，就不会有生产。我们无法想象一个社会开采矿石，制造机器，最终的目的仅仅是为了开采更多的矿石和制造更多的机器。生产的各种产品最终都会被消费。</p>
<p>希望每当社会总需求不足的时候，就能出现新一轮技术革新导致投资高潮，进而消化掉多余产能，這是不现实的事情。</p>
<p>资本家投资的目的是获得更多的货币。如果社会1000万资本的平均利润率是10%，那么资本家如果投入1000万购买新设备、雇用新工人，那么他必然要求 100 万的利润。换句话说，原先社会存在1000 万的需求不足的缺口，在资本家投资以后，1000万的缺口消失了。但是，在1000万的投资实现产能以后，就将出现1100 万的需求缺口。所以，长期靠资本家投资替代工人需求是不现实的。</p>
<p>消费不足，并不见得是产业资本剥削得太严重，而是<strong>整个稳拿集团</strong>剥削得太严重。<strong>工人贡獻的剩余价值，在产业资本、土地，金融和暴力之间分配</strong>。</p>
<p>如果大批企业贷款偿还能力都发生了回题，那么银行会发现自己几乎在一夜之间成为最大的实业资本家，大批的货币资本收不回來，变成抵押物。更糟糕的是，这些抵押物没有人要，而且在不断贬值。</p>
<p>自从资本主义诞生起，尽管<strong>绝对消费水平不断上升，但是相对消费不足一直没有克服</strong>。</p>
<h1 id="垄断"><a href="#垄断" class="headerlink" title="垄断"></a>垄断</h1><p>每次经济危机都会成为大资本屠杀小资本的过程。年次危机结束后所有的幸存者都有机会廉价获得遇难者的一切生产资源，包括原料、生产设备、熟练工，当然也包括他们的市场。</p>
<p>自然界的进化，物种由多样归于多样，面人类社会资本的进化，最终归于“一”。这个过程是单向、清晰、不可逆的。</p>
<p>如果把社会总生产看成一个庞大的网络，那么我们可以看到一些最基本的生产、生活要素在极少数企业的控制之下，这些企业就是真正的帝王资本。他们控制交叉的行业，影响、操纵整体经济。在他们之下，则是一些诸候。他们垄断本行业，影响、操纵某一种或几种商品。在这些诸侯之下，则是一些中、小资本，他们为上面帝王和诸候资本服务，是“臣民资本”。再向下，则是一些零散的资本，他们数量很多，充满帝王和诸候触角不愿触及的“鸡肋”行业，彼此之间激烈竟争。至于劳动力，则处于完全不入流的状态。</p>
<p>垄断帝国则是在“暴力归公”的基础上，完全依靠财产的力量，在市场交易中逐步建立起来的。需要注意的是，这里的暴力的“归公”、是归资产阶级的“公”，而不是全民的“公”，这里的暴力，是资产阶级的暴力，这种暴力不在资产阶级内部使用，却不吝于镇压无产阶级。</p>
<p>暴力和资本走到一起，有两种方式：资本领导暴力；暴力领导资本。两种方式的起源与各个资本主义国家历史进程有关。不论哪种方式，最终殊途同归：最终都將建立资本与暴力结合的密严阶级专政，这个专政將处于官僚统治集团的统治之下，如果我们认为垄断大企业的管理层也是一种准官僚集团的话。</p>
<p>统治阶级争夺被统治阶级的时候，彼此是仇敌。一旦一方彻底认输，统治阶级内部的阶级感情又重新油然而生。</p>
<p>并不是衣食足不足的问题，而是达到一个社会阶层之后，对普通劳动者紧缺的生活必需品，对某个阶层中人已经不再是紧缺的，而是极大丰富的。对普通人来说很珍贵的东西，对这个层次上的人来说，已经不值得为此发生冲突了。为这些基本生活必需品发生冲突，对这个层面的人来说，是丢脸的事情。这个层次的稳拿，在彼此谦逊礼貌的气氛中，瓜分着社会总产品的大饼。底层之间争斗的越激烈，顶层吃到的大饼份额越多。</p>
<p>如果要维护人类社会系统的长期存在就必须从两个方面着手：第一，为领导阶层引入新鲜血液，避免小范围通婚造成的种群退化；第二，破解财富的单向流动过程，避免财富过度集中导致社会内部压力持续上升。</p>
<p>由于强者恒强，任何人类社会的终极形态，不论是官僚主动或者资本家主动，地主主导或者奴隶主主导，<strong>如果不干涉的话，都是通往奴役之路</strong>。</p>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>经济</tag>
      </tags>
  </entry>
  <entry>
    <title>当测试代码使用随机生成的输入数据时，该如何去做出断言</title>
    <url>/blog/2023/03/18/generative-tests/</url>
    <content><![CDATA[<h1 id="一份有意思的代码"><a href="#一份有意思的代码" class="headerlink" title="一份有意思的代码"></a>一份有意思的代码</h1><p>最近看到了一份<span style="color:orange;">使用随机生成的数据作为测试输入</span>的有趣代码，把其大致思路用伪代码描述如下 </p>
<h2 id="需要被测的实现代码"><a href="#需要被测的实现代码" class="headerlink" title="需要被测的实现代码"></a>需要被测的实现代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculateSomething</span>(<span class="params">inputData</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用inputData来计算结果</span></span><br><span class="line">    <span class="comment">// 假装这里有一些很复杂的逻辑</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是被测的函数，在此不管它算的是什么，总之它接受input，返回result。</p>
<h2 id="测试代码的helpers"><a href="#测试代码的helpers" class="headerlink" title="测试代码的helpers"></a>测试代码的helpers</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generateInputData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 用来生成测试所需的input数据</span></span><br><span class="line">    <span class="comment">// 所生成的数据具有一定的随机性</span></span><br><span class="line">    <span class="keyword">return</span> randomlyGeneratedInputData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fuction <span class="title function_">calculateExpectedResult</span>(<span class="params">inputData</span>)&#123;</span><br><span class="line">    <span class="comment">// 用来计算assertion所需要的expected值</span></span><br><span class="line">    <span class="keyword">return</span> expectedResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是测试代码的helper函数，一个用来生成测试所需的input，一个用来计算expected的值。</p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> repeatTimes = <span class="number">100</span>; <span class="comment">//总之是一个较大的数字，不一定非得是100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;repeatTimes; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> randomInputData = <span class="title function_">generateInputData</span>(); <span class="comment">//生成具有一定随机性的输入</span></span><br><span class="line">    <span class="keyword">var</span> expected = <span class="title function_">calculatedExpectedResult</span>(randomInputData); <span class="comment">//用测试helper算出expected</span></span><br><span class="line">    <span class="keyword">var</span> actual = <span class="title function_">calculateSomething</span>(randomInputData); <span class="comment">//用被测方法算出actual</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(actual).<span class="title function_">toEqual</span>(expected); <span class="comment">//断言二者相等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是测试代码，反复运行多次，每次都生成具有随机性的input，然后把input传递给<code>calculatedExpectedResult</code>和<code>calculateSomething</code>，最后断言二者返回值是一致的。</p>
<p>这份代码和常见的测试不同，<span style="color:orange;">它使用的input data不是预先设定好的</span>，而是运行时随机生成的。这也是它有趣的原因。</p>
<h1 id="如何解读测试结果"><a href="#如何解读测试结果" class="headerlink" title="如何解读测试结果"></a>如何解读测试结果</h1><p>通常来说，当测试通过时，它意味着针对给定的输入，程序给出了<strong>符合预期</strong>的输出。</p>
<p>但是对于这一份代码来说，却并非如此。因为<span style="color:orange;">它的expected值是由一个helper函数计算得来，而非是一个已经被验证过是正确的值</span>。</p>
<p>那么，<span style="color:orange;">如果上述的测试代码能够执行通过，它是在传递什么信息给开发者呢？</span></p>
<ul>
<li><p>它意味着<code>calculatedExpectedResult</code>这个helper函数和<code>calculateSomething</code>这个被测函数之间，具有<span style="color:orange;">较高的相似性</span>，二者针对<span style="color:orange;">多组</span>一样的输入，可以给出一样的输出</p>
</li>
<li><p>如果我们把<code>repeatTimes</code>的数值<span style="color:orange;">调到非常高</span>，测试还能通过的话，那就说明<code>calculatedExpectedResult</code>这个helper函数和<code>calculateSomething</code>这个被测函数之间的<span style="color:orange;">相似性非常高，简直可以达到同卵双胞胎甚至是克隆体这种以假乱真的程度</span></p>
</li>
</ul>
<p><span style="color:orange;"><strong>这是我们需要的吗？</strong></span></p>
<p><span style="color:orange;">我们<strong>需要去探寻世界上是否存在那么一个函数，它的行为可以做到和<code>calculateSomething</code>极其贴近吗？</strong></span></p>
<p>我认为我们是不需要的。</p>
<p>我们需要的是去验证<code>calculateSomething</code>的行为是符合预期的。而不是去验证我能写出另一个和它的行为很像的函数来。</p>
<p>这就如同是：如果我去测试洗衣机的话，我希望验证的是某款洗衣机可以把衣服洗涤干净，并且不会损伤衣物。</p>
<p>而不是希望验证存在另一台洗衣机和我手里这一台表现一样。</p>
<p>要不然的话，我说不定会得到两台洗不干净衣服，还会损伤布料的洗衣机😄</p>
<h1 id="当测试代码使用随机生成的输入数据时，该如何去做出断言"><a href="#当测试代码使用随机生成的输入数据时，该如何去做出断言" class="headerlink" title="当测试代码使用随机生成的输入数据时，该如何去做出断言"></a>当测试代码使用随机生成的输入数据时，该如何去做出断言</h1><p>上面的代码虽然做的并不妥当，但是想要用随机生成的input数据去做测试其实<strong>并不是一个不合理的想法</strong>。</p>
<p>当我们人工编制的测试数据对于整体样本空间来说显得太小时，用随机数据去作为input数据也是一个不错的补充。</p>
<p>其关键在于，<span style="color:orange;"><strong>当我们给input引入了随机性的时候，我们该如何去assert其output是符合预期的？</strong></span></p>
<p>如果我们还是想要和常规测试一样，严格地去assert输出的值和预期<strong>相等</strong>，那么就会陷入上述代码的误区里。</p>
<p>但是如果思路换一下，不一定非得强求能够严格地去assert输出的值和预期<strong>相等</strong>，而是去assert输出值符合一定的规则。<br>这样，就无需在测试代码里重复去实现一遍，而只需要描述我们预期输入和输出之间符合哪种规则。</p>
<h1 id="Property-Based-Testing"><a href="#Property-Based-Testing" class="headerlink" title="Property Based Testing"></a>Property Based Testing</h1><p>而这，恰好就是Property Based Testing。</p>
<p>Property Based Testing是一种基于属性规约的测试方法，通过使用随机输入数据来验证程序的行为是否符合预期的属性规约。</p>
<p>在 Property Based Testing 中，<span style="color:orange;">测试用例是基于属性规约自动生成的</span>。</p>
<p>Property Based Testing 的基本流程如下：</p>
<ul>
<li><p>定义属性规约：定义程序的行为应该满足的属性规约，这些规约通常是<span style="color:orange;"><strong>通用的、可重用的、抽象</strong>的，而<strong>不是特定的测试用例</strong></span>。</p>
</li>
<li><p>生成随机数据：通过随机数据生成器生成随机数据，并将随机数据输入到程序中。</p>
</li>
<li><p>检查属性规约：将实际输出与定义的属性规约进行比较，如果程序的输出符合属性规约，则测试通过，否则测试失败。</p>
</li>
<li><p>修复代码：如果测试失败，则需要对程序进行修复，直到程序能够符合所有属性规约。</p>
</li>
</ul>
<p>一些常用的 Property Based Testing 框架包括 QuickCheck、Hypothesis、ScalaCheck、fast-check 等。</p>
<p>下面是一段使用Property Based Testing的样例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fc = <span class="built_in">require</span>(<span class="string">&#x27;fast-check&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Property-Based Testing，测试加法函数</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;加法满足交换律&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fc.<span class="title function_">assert</span>(fc.<span class="title function_">property</span>(fc.<span class="title function_">integer</span>(), fc.<span class="title function_">integer</span>(), <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">add</span>(x, y) === <span class="title function_">add</span>(y, x);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;加0不影响结果&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fc.<span class="title function_">assert</span>(fc.<span class="title function_">property</span>(fc.<span class="title function_">integer</span>(), <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">add</span>(x, <span class="number">0</span>) === x;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;正数加负数，结果小于原数&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fc.<span class="title function_">assert</span>(fc.<span class="title function_">property</span>(fc.<span class="title function_">integer</span>(<span class="number">1000</span>, <span class="number">1</span>), fc.<span class="title function_">integer</span>(-<span class="number">1</span>, -<span class="number">1000</span>), <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">add</span>(x, y) &lt; x;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;负数加正数，结果大于原数&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fc.<span class="title function_">assert</span>(fc.<span class="title function_">property</span>(fc.<span class="title function_">integer</span>(-<span class="number">1000</span>, -<span class="number">1</span>), fc.<span class="title function_">integer</span>(<span class="number">1</span>, <span class="number">1000</span>), <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">add</span>(x, y) &gt; x;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;负数加负数，结果小于原数&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fc.<span class="title function_">assert</span>(fc.<span class="title function_">property</span>(fc.<span class="title function_">integer</span>(-<span class="number">1000</span>, -<span class="number">1</span>), fc.<span class="title function_">integer</span>(-<span class="number">1000</span>, -<span class="number">1</span>), <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">add</span>(x, y) &lt; x;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;正数加正数，结果大于原数&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fc.<span class="title function_">assert</span>(fc.<span class="title function_">property</span>(fc.<span class="title function_">integer</span>(<span class="number">1</span>, <span class="number">1000</span>), fc.<span class="title function_">integer</span>(<span class="number">1</span>, <span class="number">1000</span>), <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">add</span>(x, y) &gt; x;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;任何数加自己，结果是两倍&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fc.<span class="title function_">assert</span>(fc.<span class="title function_">property</span>(fc.<span class="title function_">integer</span>(), <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">add</span>(x, x) === x * <span class="number">2</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>以上代码中所使用的fast-check(fc)会帮助我们<span style="color:orange;">生成大量的</span>具有随机性的输入数据，但是我们并<span style="color:orange;">没有去assert add的返回值等于某个具体的数字</span>，而是去判断<span style="color:orange;">add这个函数在其输入值符合特定规则时其返回值符合我们通过fc定义的规律</span>。</p>
]]></content>
      <tags>
        <tag>testing</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Integration JDBC分布式锁 - TTL</title>
    <url>/blog/2023/07/29/spring%20integration%20jdbc%20distributed%20lock/</url>
    <content><![CDATA[<p>最近在项目中需要使用Spring Integration提供的基于JDBC实现的分布式锁。</p>
<p>在实践的过程中，我们遇到了一些有趣的问题，现在在此记录和总结一下。</p>
<p>一共遇到了两个问题，第一个和time to live有关，第二个还是和time to live有关。</p>
<h1 id="第一个问题：由于time-to-live默认值不够长而导致被动失去锁的问题"><a href="#第一个问题：由于time-to-live默认值不够长而导致被动失去锁的问题" class="headerlink" title="第一个问题：由于time to live默认值不够长而导致被动失去锁的问题"></a>第一个问题：由于time to live默认值不够长而导致被动失去锁的问题</h1><pre><code class="highlight mermaid">sequenceDiagram

actor event_initiator
participant instance_1
participant instance_2

event_initiator-&gt;&gt;instance_1: do something

note over instance_1: instance 1 获得了 lock

instance_1-&gt;&gt;instance_1: start doing its thing

event_initiator-&gt;&gt;instance_2: do another thing

note over instance_2: instance 2 等待 lock
note over instance_2: 等 ......
note over instance_2: 等 ......

note over instance_1: lock的超时时间TTL到，instance 1还没干完活，但是它失去了 lock&lt;br&gt;失去不同于主动release&lt;br&gt;失去lock后，instance 1还会继续干活&lt;br&gt;而这些活里面可能会有SQL写操作

note over instance_2: instance 2 获得了 lock

instance_2-&gt;&gt;instance_2: start doing its thing

note over instance_1,instance_2: 此时二者同时干活，有撞车的风险，因为二者干活的先后顺序没有保证&lt;br&gt; instance 1尚未把它干完活后才能确定的状态写入DB，而instance 2已经开始干活了

note over event_initiator,instance_2: 为了降低风险，可以： &lt;br&gt; ① 想办法尽量让instance 1能在超时前干完活 &lt;br&gt; ② 以防万一可以考虑在合适的时间节点延长锁的过期时间</code></pre>

<p>根据上图所示，我们有两个实例。</p>
<p>事件的触发者首先让第一个实例去处理一个事件。第一个实例获取了一个锁并开始执行相应的任务。</p>
<p>此时，事件的触发者又让第二个实例去处理另一个事件。第二个实例也想获取同一个锁，但由于第一个实例已经开始处理了，第二个实例无法获取锁，只能等待。</p>
<p>在理想情况下，第一个实例会在完成任务后释放锁，然后第二个实例就可以获取锁并开始执行相应的任务，这样就不会有任何问题。</p>
<p>但是，如果由于某种原因第一个实例处理任务的速度太慢，就会出现问题。</p>
<p>因为Spring Integration JDBC分布式锁会遵循Time to Live的参数，该参数确定了在获取锁后最长可持有锁的时间。</p>
<p>如果超出了这个时间，而另一个人想要获取该锁，则可以获取到锁。<strong>这是为了避免锁的持有者挂掉而导致其他人全部干等的防死锁机制。</strong></p>
<p>在这种情况下，就会有两个人同时运行。</p>
<p>我们本意是让锁保护资源以避免同时访问，但在这种情况下，资源会被同时访问。</p>
<p>如果这些访问中涉及到读取共享状态以决定后续行为以及写入其他人可能会读取的状态的操作，那么就会出现混乱。</p>
<p>在这种情况下，我们可以选择进行两个操作。</p>
<h2 id="给time-to-live一个合理的值"><a href="#给time-to-live一个合理的值" class="headerlink" title="给time to live一个合理的值"></a>给time to live一个合理的值</h2><p>实际上，相当于需要对运行时间进行合理的估算，然后尽量将time to live设置为能够覆盖该估算值的数值。</p>
<p>把这个估算出来的数字赋值给default lock repository的time to live就好了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Specify the time (in milliseconds) to expire deadlocks.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeToLive the time to expire deadlocks.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTimeToLive</span><span class="params">(<span class="type">int</span> timeToLive)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.ttl = Duration.ofMillis(timeToLive);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/spring-projects/spring-integration/blob/7dcc0bb125eb5d72d9dc6cec0cc91bd4114336be/spring-integration-jdbc/src/main/java/org/springframework/integration/jdbc/lock/DefaultLockRepository.java#L190-L196">DefaultLockRepository</a></p>
<h2 id="选择在合适的时机renew"><a href="#选择在合适的时机renew" class="headerlink" title="选择在合适的时机renew"></a>选择在合适的时机renew</h2><p>即使我们进行了合理的估算，但这只是一个估计值，不是绝对精确的值。</p>
<p>换言之，在某些情况下，运行时间仍可能延续到time to live过期之后，从而面临两个人同时访问的风险。</p>
<p>为了避免这种情况，可以在适当的时候进行renew操作。</p>
<p>例如，在执行耗时较长的操作之前调用lock registry的renewLock方法，这样就相当于在执行耗时较长的操作之前重新获取了一次锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RenewableLockRegistry</span> <span class="keyword">extends</span> <span class="title class_">LockRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Renew the time to live of the lock is associated with the parameter object.</span></span><br><span class="line"><span class="comment">	 * The lock must be held by the current thread</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> lockKey The object with which the lock is associated.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">renewLock</span><span class="params">(Object lockKey)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-integration/blob/7dcc0bb125eb5d72d9dc6cec0cc91bd4114336be/spring-integration-core/src/main/java/org/springframework/integration/support/locks/RenewableLockRegistry.java#L28-L37">RenewableLockRegistry</a></p>
<h1 id="第二个问题：time-to-live对于运行在同一个进程中的两个线程来说是不会自动生效的"><a href="#第二个问题：time-to-live对于运行在同一个进程中的两个线程来说是不会自动生效的" class="headerlink" title="第二个问题：time to live对于运行在同一个进程中的两个线程来说是不会自动生效的"></a>第二个问题：time to live对于运行在同一个进程中的两个线程来说是不会自动生效的</h1><pre><code class="highlight mermaid">sequenceDiagram

actor event_initiator
participant instance_1
participant instance_2

event_initiator-&gt;&gt;instance_1: do something

note over instance_1: instance 1 获得了 lock

instance_1-&gt;&gt;instance_1: start doing its thing

event_initiator-&gt;&gt;instance_2: do another thing

note over instance_2: instance 2 等待 lock
note over instance_2: 等 ......
note over instance_2: 等 ......

note over instance_1:instance 1的当前线程由于某种原因卡死了，没机会释放锁

note over instance_1: lock的超时时间TTL到

note over instance_2: instance 2 获得了 lock

instance_2-&gt;&gt;instance_2: start doing its thing

note over event_initiator,instance_2: instance 1的线程由于某种原因卡死而没机会释放锁&lt;br&gt;在TTL过后instance 2可以拿到锁并做事&lt;br&gt;这是我们希望看到的事情，因为这样可以避免由于一个线程卡死不释放锁而导致别人干等的局面</code></pre>

<p>在上述图中，我们描述了两个实例，即在不同机器（或容器）上运行的两个不同Java进程。这是跨进程协作的情况，这正是我们需要<strong>分布式</strong>锁的主要原因。</p>
<p>在这种场景下，time to live是有效的。它可以防止一个进程无法释放锁，从而导致其他进程一直等待锁而无法继续工作的局面的出现。</p>
<p>在跨进程协作中，time to live可以发挥作用，那对于同一个进程中的两个线程，<strong>是否同样有效呢？</strong></p>
<p>从概念上来说，如果能将其设计成同样有效的，则可以减轻使用者的认知负担。</p>
<p>但是，在Spring Integration JDBC的分布式锁实现中，time to live<strong>并不是这样的。它对于同一个Java进程中的两个线程来说是不会自动生效的。</strong></p>
<p>下面的图是一个它不会生效的具体例子。 </p>
<pre><code class="highlight mermaid">sequenceDiagram

actor event_initiator

event_initiator-&gt;&gt;instance_1: do something

instance_1-&gt;&gt;instance_1_thread_1: 分配工作给线程1

note over instance_1_thread_1: instance 1 - thread 1 获得了 lock

instance_1_thread_1-&gt;&gt;instance_1_thread_1: start doing its thing

event_initiator-&gt;&gt;instance_1: do another thing

instance_1-&gt;&gt;instance_1_thread_2: 分配工作给线程2

note over instance_1_thread_2: instance 1 - thread 2 等待 lock
note over instance_1_thread_2: 等 ......
note over instance_1_thread_2: 等 ......

note over instance_1_thread_1: thread 1由于某种原因卡死了，没机会释放锁

note over instance_1_thread_1: lock的超时时间TTL到

note over instance_1_thread_2: thread 2 仍然获获取不到 lock
note over instance_1_thread_2: 继续等也没用</code></pre>

<p>正如上图所示，第二个线程或同一个进程中的任何其他线程，即使继续等待锁，也无济于事。这也解释了time to live在这种情况下的无效性。</p>
<p><a href="https://github.com/cuipengfei/Spikes/blob/master/jpa/spring-jdbc-distributed-lock-issue/src/test/java/com/github/spring/example/LockTest.java">这份代码可以重现上面两幅图所描述的场景</a></p>
<p>要解决这种情况下的问题，则需要用到下面提到的这个expireUnusedOlderThan方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExpirableLockRegistry</span> <span class="keyword">extends</span> <span class="title class_">LockRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Remove locks last acquired more than &#x27;age&#x27; ago that are not currently locked.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> age the time since the lock was last obtained.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalStateException if the registry configuration does not support this feature.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">expireUnusedOlderThan</span><span class="params">(<span class="type">long</span> age)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/spring-projects/spring-integration/blob/7dcc0bb125eb5d72d9dc6cec0cc91bd4114336be/spring-integration-core/src/main/java/org/springframework/integration/support/locks/ExpirableLockRegistry.java#L27-L36">ExpirableLockRegistry </a></p>
<p>如果一个Java进程中的一个线程因为某种原因卡死了，从而无法释放锁。<br>在TTL过期之后，另一个线程在尝试获取同一个锁之前，可以调用expireUnusedOlderThan来强制释放该锁。<br>然后再尝试获取锁，就可以成功获取并继续工作。</p>
<h2 id="为什么不把time-to-live设计的更具有概念上的一致性？"><a href="#为什么不把time-to-live设计的更具有概念上的一致性？" class="headerlink" title="为什么不把time to live设计的更具有概念上的一致性？"></a>为什么不把time to live设计的更具有概念上的一致性？</h2><p>当涉及到跨越两个进程时，time to live会发挥作用。但是对于同一个进程中的两个线程来说，time to live就不再有效。这种同一个概念在不同的场景下表现出不同的行为，缺乏概念上的一致性，这可能会增加使用者的认知负担。</p>
<p>那Spring为什么要把它设计成这样呢？</p>
<p>以下是我的<strong>解读</strong>：</p>
<p>在分布式系统中，如果两个进程想要获得同一个锁，那么来得晚一些的进程实际上并不知道前一个进程目前处于什么状态，它是否已经死亡。在这种情况下，time to live成为了<strong>决策的唯一依据</strong>。如果time to live还没有过期，那么来得晚的进程认为它不应该获取该锁。一旦time to live过期，后续进程将把锁置于自己的控制之下，而不管前一个进程是否仍然活着。简而言之，由于<strong>缺少其他的决策依据</strong>，这种情况下只能选择依照time to live来简单粗暴的办事。</p>
<p>然而，对于同一个进程中的两个线程来说，情况就不同了。它们共享同一块内存空间(从实现层面来讲，同一个进程中的两个线程是共享<strong>同一份registry和repository</strong>的)。如果后续线程发现前一个线程在TTL过后还没有释放锁，则默认认为前一个线程仍然有继续工作的能力，因此它默认不会强制抢占锁。除非他在TTL之后等过一段时间之后觉得等不及了，这时候他<strong>可以选择</strong>强制把锁抢过来。</p>
<p>举个例子，就像在古代<strong>缺乏无线电通信</strong>的战争中。一支小队去执行任务，另一支小队待命。三个小时后，不论先前的小队是否成功，后续小队都必须出发参加战斗。因为除了这三个小时之外，你没有其他的决策依据。只要时间到了，我就开始行动。</p>
<p>但是，如果是同一支小队中的两个士兵，后面的士兵实际上可以在目视距离内看到前面的士兵是否仍然在执行任务。因此，<strong>即便是战友行动太慢</strong>了，他也可以选择多等待一会，让前面的士兵可以继续完成任务。当然，如果后面的士兵等不及了，想要立即行动，他也可以选择这样做。在这种情况下，后面的士兵<strong>具有更多的决策依据</strong>，因此他可以选择多等待一段时间或立即采取行动。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一个问题：由于time to live默认值不够长，而导致在还不该失去锁的时间点上过早地失去了锁（<strong>防死锁机制过早地介入了</strong>），解决方法是把TTL设置的足够大，以及在合适的时机做renew从而避免过早地失去锁。</p>
<p>第二个问题：time to live对于运行在同一个进程中的两个线程来说是<strong>不会默认生效</strong>的，从而导致应该失去锁的时间已经过了，但卡住的线程还没有释放锁，进而导致后续的线程拿不到锁的情况。解决方法是<strong>可以选择</strong>让同一个进程内的后来者线程使用expireUnusedOlderThan来强制剥夺锁(同一个进程中的两个线程，其中后来的那个具有更高的自由裁量权，不必只依据TTL一个指标来行事)。</p>
<pre><code class="highlight mermaid">mindmap
  root(Spring Integration JDBC Distributed Lock)
    默认TTL太短
        设置长一些
        renew
    卡死了，没机会释放锁
        其它进程可以在TTL过后拿到锁
        同一个进程内的其它线程可以选择使用expireUnusedOlderThan</code></pre>

<p>锁的事，该失去就失去，不失去也强制失去。</p>
<p>锁的事，不该失去就不能失去，要失去也不许失去。</p>
<p><img data-src="/../images/spring-lock/LiuLuoGuo.jpg" alt="llg"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>内存涨上去不肯下来 - 未必是内存泄漏</title>
    <url>/blog/2023/08/26/not-mem-leak/</url>
    <content><![CDATA[<p>在一个Kubernetes（K8s）集群中，部署了Prometheus和Grafana用于监控集群本身和应用的状态。</p>
<p>在其中一个Java应用对应的Pod级别观察到了内存上升的现象。具体而言，当该应用刚启动时，内存占用并不高。如果不发送请求给应用，内存将保持在启动时的水平上。</p>
<p>如果大量发送请求给应用并在短时间内持续发送，内存会迅速增加。这在一定程度上是正常的。</p>
<p>一旦内存增加之后，即使停止发送请求和压力，内存使用也不会下降，一直保持在高峰水平。</p>
<p>上面的状况是由Grafana中观察到的。</p>
<p>观察到的现象看起来像是内存泄漏，但实际上并不一定是内存泄漏。</p>
<p>原因有以下两点：</p>
<h1 id="1-在K8s中运行的Prometheus默认只使用了Node-Exporter"><a href="#1-在K8s中运行的Prometheus默认只使用了Node-Exporter" class="headerlink" title="1 在K8s中运行的Prometheus默认只使用了Node Exporter"></a>1 在K8s中运行的Prometheus默认只使用了Node Exporter</h1><p>这意味着Prometheus收集的数据是从操作系统的角度来看进程的内存使用情况，而不是从Java虚拟机（JVM）进程内部观察。</p>
<p>如果想要从JVM内部的视角观察堆内存的使用情况，例如堆的大小和使用情况，就需要让应用容器内包含有Prometheus的jmx exporter。</p>
<h1 id="2-关键是要观察堆内存的使用情况"><a href="#2-关键是要观察堆内存的使用情况" class="headerlink" title="2 关键是要观察堆内存的使用情况"></a>2 关键是要观察堆内存的使用情况</h1><p>要检查和确诊Java应用的内存泄漏，不能仅仅从操作系统的角度观察整个进程的内存使用情况，认为内存没有释放就是泄漏。这种观察方式是不准确的。</p>
<p>应该从JVM内部观察堆内存的使用情况，即使进行了垃圾回收（GC），堆内存仍然无法下降是一个明确的征兆。</p>
<p>例如，堆使用量（heap usage）基本上接近堆大小（heap size），并且堆使用量出现了频繁的小锯齿波动，这基本上表明GC在尝试清理旧的内存，但无法成功清理，这就是比较明显的迹象了。</p>
<p>因为JVM有时候不愿意释放从操作系统那里要来的内存。因此，仅仅根据从操作系统的角度观察内存是否增加而不下降来诊断为Java的内存泄漏是不准确的。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>jvm</tag>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Integration JDBC分布式锁 - Transactions与Threads</title>
    <url>/blog/2023/12/25/spring-integration-jdbc-distributed-lock-with-transaction-and-threads/</url>
    <content><![CDATA[<h1 id="第一个问题：在多个线程中同时运行隔离级别为serializable的事务而导致的无法重试获取锁的问题"><a href="#第一个问题：在多个线程中同时运行隔离级别为serializable的事务而导致的无法重试获取锁的问题" class="headerlink" title="第一个问题：在多个线程中同时运行隔离级别为serializable的事务而导致的无法重试获取锁的问题"></a>第一个问题：在多个线程中同时运行隔离级别为serializable的事务而导致的无法重试获取锁的问题</h1><p>Spring Integration JDBC分布式锁的实现会需要使用一个serializable级别的事务来<strong>获取锁</strong>。</p>
<p>如果多个线程同时尝试获取锁，这些事务之间可能会出现顺序问题。</p>
<p>具体而言，可能会遇到以下错误：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">org.postgresql.util.PSQLException: ERROR: could <span class="keyword">not</span> serialize access due <span class="built_in">to</span> <span class="built_in">read</span>/<span class="built_in">write</span> dependencies <span class="keyword">among</span> transactions</span><br></pre></td></tr></table></figure>

<p>发生这样的问题其实也不可怕，因为JDBC锁会进行重试。</p>
<p>然而，当使用JPA Transaction Manager时，由于某些异常类型的原因，JDBC锁无法在发生这种错误的情况下进行重试。</p>
<p>可以在以下GitHub Issue中查看详细信息：<br><a href="https://github.com/spring-projects/spring-integration/issues/3733">https://github.com/spring-projects/spring-integration/issues/3733</a></p>
<p>可以使用以下代码重现此问题：<br><a href="https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem1Service.java">https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem1Service.java</a></p>
<h1 id="使用Data-Source-Transaction-Manager来workaround第一个问题"><a href="#使用Data-Source-Transaction-Manager来workaround第一个问题" class="headerlink" title="使用Data Source Transaction Manager来workaround第一个问题"></a>使用Data Source Transaction Manager来workaround第一个问题</h1><p>可以明确指定让JDBC锁不使用JPA Transaction Manager，而是使用Data Source Transaction Manager来绕过此问题。</p>
<p>具体代码请参考：<br><a href="https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/configs/CustomJDBCLockConfigs.java">https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/configs/CustomJDBCLockConfigs.java</a></p>
<p>可以执行该代码以观察workaround的效果：<br><a href="https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem1FixService.java">https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem1FixService.java</a></p>
<h1 id="第二个问题：在同一个线程中先使用JpaTransactionManager启动一个事务，然后尝试用DataSourceTransactionManager获取JDBC锁所导致的事务隔离级别变化的问题"><a href="#第二个问题：在同一个线程中先使用JpaTransactionManager启动一个事务，然后尝试用DataSourceTransactionManager获取JDBC锁所导致的事务隔离级别变化的问题" class="headerlink" title="第二个问题：在同一个线程中先使用JpaTransactionManager启动一个事务，然后尝试用DataSourceTransactionManager获取JDBC锁所导致的事务隔离级别变化的问题"></a>第二个问题：在同一个线程中先使用JpaTransactionManager启动一个事务，然后尝试用DataSourceTransactionManager获取JDBC锁所导致的事务隔离级别变化的问题</h1><p>该问题的显著特征是：如果在一个方法上标注了@Transactional，然后在该方法内部先执行了一些JPA的SQL操作，然后再尝试获取JDBC分布式锁，就会出现无法更改事务隔离级别的问题。</p>
<p>问题的关键在于并行流（parallel stream）并不总是仅利用其自己线程池中的线程，它也会利用当前线程。<br>而恰好落在当前线程上的那一次尝试获取JDBC分布式锁的操作就会出现无法更改事务隔离级别的问题。</p>
<p>这是因为我们用来解决第一个问题而引入的DataSourceTransactionManager的文档中提及它具有如下行为：</p>
<blockquote>
<p>Note: The DataSource that this transaction manager operates on needs to return independent Connections. The Connections typically come from a connection pool but the DataSource must not return specifically scoped or constrained Connections. This transaction manager will associate Connections with thread-bound transactions, according to the specified propagation behavior. It assumes that a separate, independent Connection can be obtained even during an ongoing transaction.</p>
</blockquote>
<p>可以通过以下代码观察parallel stream的行为：<br><a href="https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/TestParallelStreamThreads.java">https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/TestParallelStreamThreads.java</a></p>
<p>可以使用以下代码重现该问题：<br><a href="https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem2Service.java">https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem2Service.java</a></p>
<h1 id="第二个问题的不完善解决方法：强制parallel-stream不使用当前线程"><a href="#第二个问题的不完善解决方法：强制parallel-stream不使用当前线程" class="headerlink" title="第二个问题的不完善解决方法：强制parallel stream不使用当前线程"></a>第二个问题的不完善解决方法：强制parallel stream不使用当前线程</h1><p>在解决该问题的过程中，我尝试了一种不太明智的方法，在这里也记录一下。</p>
<p>我最初的想法是，既然parallel stream会利用当前线程，从而导致落在当前线程上的那一次获取锁的操作失败，那么我干脆强制它不要使用当前线程。然而，这是一种非常简单粗暴的做法。</p>
<p>尽管这样做可以成功获取JDBC锁，但它也会导致一部分SQL游离在事务之外执行。<br>不仅仅是这个解决方法，<strong>上述的三份代码也都会有这个问题</strong>。</p>
<p>不太理想的解决方法的代码如下：<br><a href="https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem2BadFixService.java">https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem2BadFixService.java</a></p>
<h1 id="第二个问题的较优解决方法：缩小事务范围，避免将业务操作和获取JDBC锁的操作混合在同一个被-Transactional标注的方法内"><a href="#第二个问题的较优解决方法：缩小事务范围，避免将业务操作和获取JDBC锁的操作混合在同一个被-Transactional标注的方法内" class="headerlink" title="第二个问题的较优解决方法：缩小事务范围，避免将业务操作和获取JDBC锁的操作混合在同一个被@Transactional标注的方法内"></a>第二个问题的较优解决方法：缩小事务范围，避免将业务操作和获取JDBC锁的操作混合在同一个被@Transactional标注的方法内</h1><p><strong>上述四份代码都存在一个共同的缺点</strong>，即@Transactional注解的范围太广。</p>
<p>这容易导致JPA Transaction Manager的范畴以及用于获取JDBC分布式锁的Data Source Transaction Manager的范畴互相交叉。</p>
<p>当这两者混在一起时，很容易出现DataSourceTransactionManager试图去改变一个已经被open过的transaction的隔离级别的问题。</p>
<p>第二个问题的较优解决方法的代码请参考：<br><a href="https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem2GoodFixService.java">https://github.com/cuipengfei/Spikes/blob/master/jpa/lock-transaction-threads/src/main/java/com/github/spring/example/service/Problem2GoodFixService.java</a></p>
<h1 id="用图来总结一下"><a href="#用图来总结一下" class="headerlink" title="用图来总结一下"></a>用图来总结一下</h1><pre><code class="highlight mermaid">flowchart TD
    
    style dstm fill:lightgreen,stroke:#333,stroke-width:4px
    style nrt fill:#FFCCCB,stroke:#333,stroke-width:4px

    jl[JDBC分布式锁]
    str[Serializable级别的事务]
    mt[多个线程]
    jtm[JPA Transaction Manager]
    dstm[❤️Data Source Transaction Manager❤️]
    nrt[🪳无法重试获取锁🪳]
    se[Serialization Error]
    se2[Serialization Error]

    subgraph 在多个线程中同时运行隔离级别为serializable的事务而导致的无法重试获取锁的问题
    jl--&gt;|默认使用|str
    mt--&gt;|同时获取|jl
    jl--&gt;|恰好用了|jtm
    str--&gt;|容易撞车而导致|se
    jtm--&gt;|hold不住|se
    se--&gt;|从而导致|nrt
    jl--&gt;|替换成使用|dstm
    dstm--&gt;|可以hold住|se2
    se2--&gt;|从而解决|nrt
    end</code></pre>

<pre><code class="highlight mermaid">flowchart TD
    
    style nd fill:lightgreen,stroke:#333,stroke-width:4px
    style ile fill:#FFCCCB,stroke:#333,stroke-width:4px

    st[同一个线程中]
    t[事务]
    t2[事务]
    tm[一个范围很宽的标注了@Transactional的方法]
    js[JPA的SQL操作]
    tl[获取JDBC分布式锁]
    js2[JPA的SQL操作]
    tl2[获取JDBC分布式锁]
    ps[Parallel Stream]
    op[其自己线程池中的线程]
    ct[当前线程]
    ile[🪳无法更改事务隔离级别的问题🪳]
    nd[❤️正确做法应该是缩小@Transactional的范围❤️]

    subgraph 在同一个线程中先使用JpaTransactionManager启动一个事务然后尝试用DataSourceTransactionManager获取JDBC锁所导致的事务隔离级别变化的问题
    ps--&gt;|并不总是仅利用|op
    ps--&gt;|也会利用|ct
    ct--&gt;|那么就会在|st
    st--&gt;|跑|tm
    tm--&gt;|先执行了一些|js
    tm--&gt;|然后再尝试|tl
    js--&gt;|已经open了|t
    tl--&gt;|再去试图更改其隔离等级|t
    t--&gt;|从而导致|ile

    nd--&gt;|可以及时关闭|t2
    t2--&gt;|避免把二者混在一起|js2
    t2--&gt;|避免把二者混在一起|tl2
    js2--&gt;|从而避免|ile
    tl2--&gt;|从而避免|ile
    end</code></pre>

<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>上面的问题都是由于业务代码和获取锁的代码二者同时依赖于同一个数据库。</p>
<p>而Spring Integration的分布式锁除了可以使用JDBC，其实也可以使用Redis或其他底层技术。<br>如果把上述代码中的JdbcLockRegistry全部替换为RedisLockRegistry，而保持其它代码不变，所有错误都会消失，不会再重现。</p>
<p>因为无论用到了哪一个线程，哪一个DB Transaction，也无论@Transactional标记的宽或者窄，Redis总是不会和JDBC&#x2F;DB撞车的。</p>
<p>可以通过修改上述代码中的此处来试用Redis：<br><a href="https://github.com/cuipengfei/Spikes/blob/c887a6f802bbfffc45ee29cbb91dac731243b7cd/jpa/lock-transaction-threads/src/main/resources/application.properties#L17-L18">https://github.com/cuipengfei/Spikes/blob/c887a6f802bbfffc45ee29cbb91dac731243b7cd/jpa/lock-transaction-threads/src/main/resources/application.properties#L17-L18</a></p>
<h2 id="Spring-Boot-3"><a href="#Spring-Boot-3" class="headerlink" title="Spring Boot 3"></a>Spring Boot 3</h2><p>如果升级到Spring Boot 3.1.5 + JDK 17，则Spring Integration JDBC会升到6.1.4(上述代码用的是5.x)，甚至不用替换成Data Source Transaction Manager，上述问题也会消失。</p>
<p>因为这一版本的Spring Integration JDBC的分布式锁实现在acquire lock时不再使用serializable的事务，而是改成了read committed。</p>
<p>这样，自然就规避了第一个问题，不再有serializable事务撞车。</p>
<p>而由于不再需要给锁使用Data Source Transaction Manager，自然也就解决了第二个问题，不再有同一个线程上两个transaction managers打架的问题。<br>不过，即便如此，缩小@Transactional的范围仍然是值得建议的。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Feedly硬广-回归RSS</title>
    <url>/blog/2025/01/05/go-back-to-rss/</url>
    <content><![CDATA[<pre><code class="highlight mermaid">flowchart TD
  subgraph 被动信息接收
    style 被动信息接收 fill:#f9d6c1,stroke:#000,stroke-width:2px;
    A[被动接受信息] --&gt; B[算法过度控制]
    B --&gt; C[信息茧房]
    C --&gt; D[注意力消耗]
  end

  subgraph 信息主动消费
    style 信息主动消费 fill:#c1e1f9,stroke:#000,stroke-width:2px;
    E[回归RSS] --&gt; F[掌握信息主动权]
    F --&gt; G[自主订阅]
    G --&gt; H[控制信息摄入质量]
    H --&gt; I[主动选择信息来源]
    I --&gt; J[避免无用信息轰炸]
    J --&gt; K[减少干扰]
    K --&gt; L[专注高质量内容]
    L --&gt; M[享受纯粹阅读乐趣]
    M --&gt; N[高质量阅读体验]
    N --&gt; O[注意力回归有价值内容]
    O --&gt; F
  end

  D --&gt; E</code></pre>]]></content>
      <tags>
        <tag>RSS</tag>
        <tag>Feedly</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 LibreOffice 导出Excel 到 PDF 超链接丢失问题</title>
    <url>/blog/2024/07/28/libre-jod-single-page-excel/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在使用LibreOffice的Calc组件将电子表格导出为PDF文件时，如果启用了“Whole sheet export”（整页导出）选项，导出的PDF文件中的超链接将不会保留原始的URL，而是显示为本地文件路径。</p>
<p>这个问题在</p>
<ol>
<li><a href="https://ask.libreoffice.org/t/web-hyperlinks-not-preserved-after-export-to-pdf/96762">LibreOffice 官方论坛上的提问</a></li>
<li><a href="https://stackoverflow.com/questions/78799273/implementing-a-custom-whole-sheet-export-via-uno-api-to-preserve-hyperlinks-in">Stack Overflow 上的提问</a></li>
</ol>
<p>上都有讨论。</p>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>为了解决这个问题，我们考虑使用LibreOffice的UNO API来实现一个自定义的解决方案。这个方案的核心思想是：</p>
<ul>
<li>遍历Calc文档中的每个工作表。</li>
<li>计算每个工作表内容适应一页所需的总宽度和高度。</li>
<li>根据这些尺寸为每个工作表生成自定义的纸张大小。</li>
<li>使用自定义纸张大小导出PDF，同时确保不使用“Whole sheet export”选项，以保留超链接。</li>
</ul>
<h1 id="ExcelSinglePageFilter解决方案"><a href="#ExcelSinglePageFilter解决方案" class="headerlink" title="ExcelSinglePageFilter解决方案"></a>ExcelSinglePageFilter解决方案</h1><p>针对上述问题，<code>ExcelSinglePageFilter</code>Java类实现了自定义的PDF导出过滤器。</p>
<p>以下是该过滤器如何解决问题的详细解析。</p>
<h1 id="过滤器初始化与文档检查"><a href="#过滤器初始化与文档检查" class="headerlink" title="过滤器初始化与文档检查"></a>过滤器初始化与文档检查</h1><p><code>ExcelSinglePageFilter</code>首先检查传入的文档是否为Excel文档。如果不是，它将直接调用链式调用<code>chain.doFilter</code>继续处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">XSpreadsheetDocument</span> <span class="variable">xSpreadsheetDocument</span> <span class="operator">=</span> queryInterface(XSpreadsheetDocument.class, document);</span><br><span class="line"><span class="keyword">if</span> (xSpreadsheetDocument == <span class="literal">null</span>) &#123;</span><br><span class="line">    chain.doFilter(context, document);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="工作表遍历与处理"><a href="#工作表遍历与处理" class="headerlink" title="工作表遍历与处理"></a>工作表遍历与处理</h1><p>接着，该过滤器遍历所有工作表，并为每个工作表异步执行调整操作。对于隐藏的工作表，它将跳过处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] sheetNames = xSpreadsheetDocument.getSheets().getElementNames();</span><br><span class="line">CompletableFuture[] futures = Arrays.stream(sheetNames).map(sheetName -&gt; CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// ... 省略部分代码 ...</span></span><br><span class="line">    adjustOneSheet(sheetName, sheet, xPageStyles);</span><br><span class="line">&#125;)).toList().toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h1 id="处理每个工作表"><a href="#处理每个工作表" class="headerlink" title="处理每个工作表"></a>处理每个工作表</h1><p>对于每个工作表，代码首先检查工作表是否可见，然后计算工作表的总宽度和高度，包括单元格和图形对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustOneSheet</span><span class="params">(String sheetName, XSpreadsheet sheet, XNameAccess xPageStyles)</span> &#123;</span><br><span class="line">    <span class="comment">// 计算工作表的总宽度和高度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">totalWidth</span> <span class="operator">=</span> getTotalWidth(getxColumnRowRange(sheet), getLastColumn(sheet));</span><br><span class="line">    <span class="type">int</span> <span class="variable">totalHeight</span> <span class="operator">=</span> getTotalHeight(getxColumnRowRange(sheet), getLastRow(sheet));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包括图形对象的尺寸</span></span><br><span class="line">    <span class="type">Size</span> <span class="variable">graphicalSize</span> <span class="operator">=</span> getGraphicalObjectsSize(sheet);</span><br><span class="line">    totalWidth = Math.max(totalWidth, graphicalSize.Width);</span><br><span class="line">    totalHeight = Math.max(totalHeight, graphicalSize.Height);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置页面样式属性</span></span><br><span class="line">    <span class="type">XPropertySet</span> <span class="variable">xPageStyleProps</span> <span class="operator">=</span> getPageStyleProps(sheet, xPageStyles);</span><br><span class="line">    xPageStyleProps.setPropertyValue(<span class="string">&quot;Size&quot;</span>, <span class="keyword">new</span> <span class="title class_">Size</span>(totalWidth, totalHeight));</span><br><span class="line">    setMarginToZero(xPageStyleProps);</span><br><span class="line">    xPageStyleProps.setPropertyValue(<span class="string">&quot;ScaleToPages&quot;</span>, (<span class="type">short</span>) <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计算图形对象尺寸"><a href="#计算图形对象尺寸" class="headerlink" title="计算图形对象尺寸"></a>计算图形对象尺寸</h1><p>getGraphicalObjectsSize方法用于计算工作表中所有图形对象所占的最大宽度和高度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Size <span class="title function_">getGraphicalObjectsSize</span><span class="params">(XSpreadsheet sheet)</span> &#123;</span><br><span class="line">    <span class="type">XDrawPageSupplier</span> <span class="variable">drawPageSupplier</span> <span class="operator">=</span> queryInterface(XDrawPageSupplier.class, sheet);</span><br><span class="line">    <span class="type">XDrawPage</span> <span class="variable">drawPage</span> <span class="operator">=</span> drawPageSupplier.getDrawPage();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> drawPage.getCount();</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="type">XShape</span> <span class="variable">shape</span> <span class="operator">=</span> queryInterface(XShape.class, drawPage.getByIndex(i));</span><br><span class="line">        <span class="type">Point</span> <span class="variable">position</span> <span class="operator">=</span> shape.getPosition();</span><br><span class="line">        <span class="type">Size</span> <span class="variable">size</span> <span class="operator">=</span> shape.getSize();</span><br><span class="line">        maxWidth = Math.max(maxWidth, position.X + size.Width);</span><br><span class="line">        maxHeight = Math.max(maxHeight, position.Y + size.Height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Size</span>(maxWidth, maxHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计算总宽度和总高度"><a href="#计算总宽度和总高度" class="headerlink" title="计算总宽度和总高度"></a>计算总宽度和总高度</h1><p>getTotalWidth和getTotalHeight方法分别用于计算工作表的总宽度和总高度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getTotalWidth</span><span class="params">(XColumnRowRange columnRowRange, <span class="type">int</span> endColumn)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">totalWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= endColumn; j++) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">column</span> <span class="operator">=</span> columnRowRange.getColumns().getByIndex(j);</span><br><span class="line">        <span class="type">XPropertySet</span> <span class="variable">columnProps</span> <span class="operator">=</span> queryInterface(XPropertySet.class, column);</span><br><span class="line">        totalWidth += (<span class="type">int</span>) columnProps.getPropertyValue(<span class="string">&quot;Width&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> totalWidth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getTotalHeight</span><span class="params">(XColumnRowRange columnRowRange, <span class="type">int</span> endRow)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">totalHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= endRow; i++) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">row</span> <span class="operator">=</span> columnRowRange.getRows().getByIndex(i);</span><br><span class="line">        <span class="type">XPropertySet</span> <span class="variable">rowProps</span> <span class="operator">=</span> queryInterface(XPropertySet.class, row);</span><br><span class="line">        totalHeight += (<span class="type">int</span>) rowProps.getPropertyValue(<span class="string">&quot;Height&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> totalHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完成导出"><a href="#完成导出" class="headerlink" title="完成导出"></a>完成导出</h1><p>最后，等待所有异步任务完成后，调用链式调用chain.doFilter继续执行标准的PDF导出流程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture.allOf(futures).join();</span><br><span class="line">chain.doFilter(context, document);</span><br></pre></td></tr></table></figure>

<h1 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h1><p>上述解决方案的原始代码可以在GitHub上找到，链接为：</p>
<p><a href="https://github.com/cuipengfei/jodconverter-samples/blob/main/samples/spring-boot-rest/src/main/java/org/jodconverter/sample/rest/ExcelSinglePageFilter.java">https://github.com/cuipengfei/jodconverter-samples/blob/main/samples/spring-boot-rest/src/main/java/org/jodconverter/sample/rest/ExcelSinglePageFilter.java</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>ExcelSinglePageFilter通过自定义的PDF导出逻辑，成功避免了使用“Whole sheet export”选项，从而解决了超链接在PDF中丢失的问题。这种方法不仅保留了超链接的完整性，而且还提供了一种灵活的方式来调整每个工作表的显示尺寸，确保它们在PDF中以单页的形式呈现。</p>
]]></content>
      <tags>
        <tag>LibreOffice</tag>
        <tag>PDF</tag>
        <tag>JODConverter</tag>
      </tags>
  </entry>
  <entry>
    <title>基于LibreOffice的MS Office文档格式转换</title>
    <url>/blog/2024/02/04/libre-jod/</url>
    <content><![CDATA[<h1 id="将Microsoft-Office文件转换为其他格式的场景"><a href="#将Microsoft-Office文件转换为其他格式的场景" class="headerlink" title="将Microsoft Office文件转换为其他格式的场景"></a>将Microsoft Office文件转换为其他格式的场景</h1><p>在一些情况下，可能需要将Microsoft Office文件转换为其他格式：</p>
<ul>
<li>兼容性问题：与不同的办公软件或操作系统进行交互，可能需要将MS Office文件转换为更通用的格式。例如，如果要与没有安装Microsoft Office的人分享文档，将其转换为PDF格式可能更合适。</li>
<li>归档和存档：将Office文件转换为更稳定、可持久保存的格式可以确保文件的长期保存和归档。某些文件格式（如PDF&#x2F;A）专门用于长期存档目的，以确保文件内容的完整性和可访问性。</li>
<li>数据提取：你可能只对文档中的特定数据或内容感兴趣。通过将Office文件转换为其他格式（如纯文本或CSV），可以更容易地提取所需的数据，并在其他应用程序中进行分析或处理。</li>
<li>网页发布：如果要将MS Office文件发布到网页上，可能需要将其转换为HTML或其他网页友好的格式，以确保文件在网页上正确显示。</li>
</ul>
<h1 id="LibreOffice-微软Office的开源替代"><a href="#LibreOffice-微软Office的开源替代" class="headerlink" title="LibreOffice - 微软Office的开源替代"></a>LibreOffice - 微软Office的开源替代</h1><p>LibreOffice是一个免费、开源的办公套件，在某种程度上可以被视为微软Office的开源替代品。</p>
<ul>
<li>LibreOffice Writer：对应于Microsoft Word。</li>
<li>LibreOffice Calc：对应于Microsoft Excel。</li>
<li>LibreOffice Impress：对应于Microsoft PowerPoint。</li>
</ul>
<p><img data-src="/images/libre/image.png" alt="alt text"></p>
<h1 id="LibreOffice支持的转换格式"><a href="#LibreOffice支持的转换格式" class="headerlink" title="LibreOffice支持的转换格式"></a>LibreOffice支持的转换格式</h1><p>LibreOffice支持广泛的转换格式。具体请参考如下的表格：</p>
<table aligh="center">
    <tr><th align="left">Format Family</th><th align="left">From (any of)</th><th align="left">To (any of)</th></tr>
    <tr valign="top">
        <th align="left">Text</th>
        <td>
            <samp><b>*.odt</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Text<br>
            <samp><b>*.ott</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Text Template<br>
            <samp><b>*.sxw</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenOffice.org 1.0 Text<br>
            <samp><b>*.rtf</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Rich Text Format<br>
            <samp><b>*.doc</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Microsoft Word<br>
            <samp><b>*.docx</b>&nbsp;&nbsp;&nbsp;</samp>Microsoft Word XML<br>
            <samp><b>*.wpd</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>WordPerfect<br>
            <samp><b>*.txt</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Plain Text<br>
            <samp><b>*.html</b>&nbsp;&nbsp;&nbsp;</samp>HTML
        </td>
        <td>
            <samp><b>*.pdf</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Portable Document Format<br>
            <samp><b>*.odt</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Text<br>
            <samp><b>*.ott</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Text Template<br>
            <samp><b>*.sxw</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenOffice.org 1.0 Text<br>
            <samp><b>*.rtf</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Rich Text Format<br>
            <samp><b>*.doc</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Microsoft Word<br>
            <samp><b>*.docx</b>&nbsp;&nbsp;&nbsp;</samp>Microsoft Word XML<br>
            <samp><b>*.txt</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Plain Text<br>
            <samp><b>*.html</b>&nbsp;&nbsp;&nbsp;</samp>HTML<br>
            <samp><b>*.wiki</b>&nbsp;&nbsp;&nbsp;</samp>MediaWiki wikitext
        </td>
    </tr>
    <tr valign="top">
        <th align="left">Spreadsheet</th>
        <td>
            <samp><b>*.ods</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Spreadsheet<br>
            <samp><b>*.ots</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Spreadsheet Template<br>
            <samp><b>*.sxc</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenOffice.org 1.0 Spreadsheet<br>
            <samp><b>*.xls</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Microsoft Excel<br>
            <samp><b>*.xlsx</b>&nbsp;&nbsp;&nbsp;</samp>Microsoft Excel XML<br>
            <samp><b>*.csv</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Comma-Separated Values<br>
            <samp><b>*.tsv</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Tab-Separated Values
        </td>
        <td>
            <samp><b>*.pdf</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Portable Document Format<br>
            <samp><b>*.ods</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Spreadsheet<br>
            <samp><b>*.ots</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Spreadsheet Template<br>
            <samp><b>*.sxc</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenOffice.org 1.0 Spreadsheet<br>
            <samp><b>*.xls</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Microsoft Excel<br>
            <samp><b>*.xlsx</b>&nbsp;&nbsp;&nbsp;</samp>Microsoft Excel XML<br>
            <samp><b>*.csv</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Comma-Separated Values<br>
            <samp><b>*.tsv</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Tab-Separated Values<br>
            <samp><b>*.html</b>&nbsp;&nbsp;&nbsp;</samp>HTML
        </td>
    </tr>
    <tr valign="top">
        <th align="left">Presentation</th>
        <td>
            <samp><b>*.odp</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Presentation<br>
            <samp><b>*.otp</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Presentation Template<br>
            <samp><b>*.sxi</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenOffice.org 1.0 Presentation<br>
            <samp><b>*.ppt</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Microsoft PowerPoint<br>
            <samp><b>*.pptx</b>&nbsp;&nbsp;&nbsp;</samp>Microsoft PowerPoint XML
        </td>
        <td>
            <samp><b>*.pdf</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Portable Document Format<br>
            <samp><b>*.swf</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Macromedia Flash<br>
            <samp><b>*.odp</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Presentation<br>
            <samp><b>*.otp</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Presentation Template<br>
            <samp><b>*.sxi</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenOffice.org 1.0 Presentation<br>
            <samp><b>*.ppt</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Microsoft PowerPoint<br>
            <samp><b>*.pptx</b>&nbsp;&nbsp;&nbsp;</samp>Microsoft PowerPoint XML<br>
            <samp><b>*.html</b>&nbsp;&nbsp;&nbsp;</samp>HTML
        </td>
    </tr>
    <tr valign="top">
        <th align="left">Drawing</th>
        <td>
            <samp><b>*.odg</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Drawing<br>
            <samp><b>*.otg</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>OpenDocument Drawing Template
        </td>
        <td>
            <samp><b>*.svg</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Scalable Vector Graphics<br>
            <samp><b>*.swf</b>&nbsp;&nbsp;&nbsp;&nbsp;</samp>Macromedia Flash
        </td>
    </tr>
</table>

<h1 id="LibreOffice的headless模式"><a href="#LibreOffice的headless模式" class="headerlink" title="LibreOffice的headless模式"></a>LibreOffice的headless模式</h1><p>与常见的Chromium的headless模式类似，LibreOffice也提供headless模式。</p>
<ul>
<li>没有图形用户界面（GUI）：无论是LibreOffice的headless模式还是Chromium的headless模式，都在没有GUI的情况下运行，不会显示可见的窗口或用户界面。</li>
<li>命令行接口（CLI）控制：通过命令行接口进行控制和操作。可以在命令行中使用特定的命令和参数来执行相应的任务和操作。</li>
<li>自动化和批处理：LibreOffice的headless模式和Chromium的headless模式都适用于自动化和批处理任务。</li>
<li>服务器环境中的应用：适用于在服务器环境中使用。</li>
</ul>
<p>这就给在<strong>服务端自动化进行文档类型转换</strong>提供了很大的便利。</p>
<h1 id="资源池管理与容器化-JodConverter"><a href="#资源池管理与容器化-JodConverter" class="headerlink" title="资源池管理与容器化 - JodConverter"></a>资源池管理与容器化 - JodConverter</h1><p>JodConverter是一个用于将Office文档转换为其他格式的Java库。它支持与LibreOffice（也可以是OpenOffice）进行集成。</p>
<p>我们可以选择自己直接与headless的LibreOffice直接通信来完成文档格式转换，不过由JodConverter来代劳的好处是很明显的：</p>
<ul>
<li>资源池化</li>
<li>容器化</li>
</ul>
<p>JODConverter 的进程管理器（Process Manager）在资源池内维护 LibreOffice 进程。<br>将 LibreOffice 进程保持在资源池内，可以避免每次进行文档转换时都需要启动和终止 LibreOffice 进程的开销。<br>它可以检测到进程的健康状态，例如进程异常退出或崩溃，然后采取相应的措施，如重新启动进程。</p>
<p>JODConverter 还提供一个基于Debian的基础docker image，其中已经包含了LibreOffice。</p>
<p>我们的调用JODConverter的Java应用只需要基于该镜像build出来就好。</p>
<p><img data-src="/images/libre/libreoffice_logos_printed_on_dockers.png" alt="alt text"></p>
<h1 id="MS-Office存量文件的兼容性-字体的开源替代"><a href="#MS-Office存量文件的兼容性-字体的开源替代" class="headerlink" title="MS Office存量文件的兼容性 - 字体的开源替代"></a>MS Office存量文件的兼容性 - 字体的开源替代</h1><p><img data-src="/images/libre/compare.png" alt="alt text"></p>
<p>上面这张图左侧是原版的PPT，右侧是用JOD + LibreOffice转换出来的PDF。</p>
<p>可以看到右侧转换出PDF，文字之间出现了互相交叉重叠的现象，整个样式都乱掉了。<br>这其实并不是JOD或者是LibreOffice的bug。</p>
<p>而是由于左侧的PPT当中使用了一些微软的商用字体。<br>而LibreOffice运行在docker里面，它是拿不到这些微软的商用字体的，我们也不应该把有商用版权的字体置入docker image中。</p>
<p>这时我们可以使用一些<strong>开源的字体来代替微软的商用字体</strong>。</p>
<p>下图来自于LibreOffice的一篇博客： <a href="https://blog.documentfoundation.org/blog/2020/09/08/libreoffice-tt-replacing-microsoft-fonts/">https://blog.documentfoundation.org/blog/2020/09/08/libreoffice-tt-replacing-microsoft-fonts/</a></p>
<p><img data-src="https://blog.documentfoundation.org/wp-content/uploads/2020/09/Options-LibreOffice-Fonts.png" alt="font"></p>
<p>LibreOffice提供了一个Font Replacement Table的功能。</p>
<p>左侧Font列是商用字体，右侧Replace with列是开源字体。<br>例如：当LibreOffice见到一个ppt文件内的某段文字使用了Arial字体时，就会自动用Arimo字体去渲染这段文字。<br>这样，既能够尽量保持视觉效果的一致性，也避免使用商用字体。</p>
<p>下图是使用了开源字体替代后的转换效果，右侧的PDF和左侧的PPT视觉差异已经不太大了。<br><img data-src="/images/libre/compare2.png" alt="alt text"></p>
<p>作为一个LibreOffice<strong>桌面应用的使用者</strong>可以按照上述说明来做配置，从而最大程度的去兼容微软的商用字体。<br>而当我们使用headless模式时该如何做出等效的配置呢？</p>
<h1 id="LibreOffice-User-Profile"><a href="#LibreOffice-User-Profile" class="headerlink" title="LibreOffice - User Profile"></a>LibreOffice - User Profile</h1><p>上面提到的配置项，会被保存在LibreOffice User Profile内，在不同的OS内保存的路径为：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">Windows</span><br><span class="line">%APPDATA%\libreoffice\<span class="number">4</span>\<span class="keyword">user</span> <span class="title">(LibreOffice</span> <span class="number">4</span> <span class="keyword">and</span> above)</span><br><span class="line"></span><br><span class="line">GNU/Linux</span><br><span class="line">/home/<span class="tag">&lt;user name&gt;</span>/.config/libreoffice/<span class="number">4</span>/<span class="keyword">user</span> <span class="title">(LibreOffice</span> <span class="number">4</span> <span class="keyword">and</span> above)</span><br></pre></td></tr></table></figure>

<p>我们可以把开源字体文件以及保存下来的配置文件内置入docker image内。<br>并通过JOD指定启动LibreOffice时的参数，让headless模式下运行的LibreOffice加载到正确的配置文件，进而也能达成上图所示一样转换的效果。</p>
<p><a href="https://github.com/cuipengfei/docker-image-jodconverter-examples/blob/909d9c62859b9c55b49afca0c7df7e04546042cc/Dockerfile#L38-L44">如下Dockerfile示例</a>中把开源字体和配置文件copy进Docker image</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># support more fonts</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> cjk-fonts/* /usr/share/fonts/cjk/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> condensed-fonts/* /usr/share/fonts/condensed/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ms-sub-fonts/* /usr/share/fonts/ms-sub-fonts/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add user profile config files</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./profile/LibreOffice/4/user /tmp/jodconverter/user</span></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/cuipengfei/jodconverter-samples/blob/98c2a6d73d3d9dfc88b0c7122b065dcd39e9ae61/samples/spring-boot-rest/src/main/resources/application.yml#L22-L26">如下示例</a>中指定template-profile-dir</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jodconverter:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">port-numbers:</span> <span class="number">2002</span><span class="string">,2003</span></span><br><span class="line">    <span class="attr">template-profile-dir:</span> <span class="string">/tmp/jodconverter</span></span><br></pre></td></tr></table></figure>

<p>这样可以确保JODConverter在启动LibreOffice进程的时候可以明确地告诉LibreOffice去加载哪一份配置文件。</p>
<h1 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h1><p><a href="https://github.com/jodconverter/jodconverter/wiki/Getting-Started">JODConverter Wiki</a></p>
<p><a href="https://github.com/jodconverter/docker-image-jodconverter-runtime/pkgs/container/jodconverter-runtime">jodconverter-runtime docker基础镜像</a></p>
<p><a href="https://help.libreoffice.org/latest/en-US/text/shared/guide/pdf_params.html">LibreOffice PDF转换支持的命令行参数</a></p>
<p><a href="https://ask.libreoffice.org/t/libreoffice-xls-to-pdf-conversion-breaks-single-page-content-into-multiple-pages-on-ubuntu-18-04/49104/2">宽度过大的Excel转PDF的问题</a></p>
<p><a href="https://blog.documentfoundation.org/blog/2020/09/08/libreoffice-tt-replacing-microsoft-fonts/">微软字体兼容性问题</a></p>
<p><a href="https://wiki.documentfoundation.org/UserProfile#Default_locations">LibreOffice User Profile默认路径</a></p>
<p><a href="https://github.com/cuipengfei/docker-image-jodconverter-examples/blob/909d9c62859b9c55b49afca0c7df7e04546042cc/Dockerfile#L38-L44">把自定义的字体与User Profile加入Docker Image</a></p>
<p><a href="https://github.com/cuipengfei/jodconverter-samples/blob/98c2a6d73d3d9dfc88b0c7122b065dcd39e9ae61/samples/spring-boot-rest/src/main/resources/application.yml#L22-L26">给JODConverter指定User Profile路径</a></p>
]]></content>
      <tags>
        <tag>LibreOffice</tag>
        <tag>JOD</tag>
      </tags>
  </entry>
</search>
